(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["tidyparse-web-frontend"] = factory();
	else
		root["tidyparse-web-frontend"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./kotlin/KotlinBigInteger-bignum-js-ir.js":
/*!*************************************************!*\
  !*** ./kotlin/KotlinBigInteger-bignum-js-ir.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var log10 = Math.log10;
  var protoOf = kotlin_kotlin.$_$.v7;
  var VOID = kotlin_kotlin.$_$.c;
  var interfaceMeta = kotlin_kotlin.$_$.i7;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var Unit_instance = kotlin_kotlin.$_$.t2;
  var Enum = kotlin_kotlin.$_$.ga;
  var classMeta = kotlin_kotlin.$_$.y6;
  var toLong = kotlin_kotlin.$_$.x7;
  var RuntimeException_init_$Create$ = kotlin_kotlin.$_$.z;
  var Pair = kotlin_kotlin.$_$.la;
  var Long = kotlin_kotlin.$_$.ja;
  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.o;
  var ensureNotNull = kotlin_kotlin.$_$.ya;
  var get_lastIndex = kotlin_kotlin.$_$.i9;
  var charSequenceGet = kotlin_kotlin.$_$.w6;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.f1;
  var contains = kotlin_kotlin.$_$.c9;
  var charSequenceLength = kotlin_kotlin.$_$.x6;
  var charArrayOf = kotlin_kotlin.$_$.v6;
  var split = kotlin_kotlin.$_$.r9;
  var listOf = kotlin_kotlin.$_$.e4;
  var toLong_0 = kotlin_kotlin.$_$.x9;
  var numberToLong = kotlin_kotlin.$_$.s7;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.ab;
  var Triple = kotlin_kotlin.$_$.oa;
  var numberToDouble = kotlin_kotlin.$_$.q7;
  var until = kotlin_kotlin.$_$.g8;
  var substring = kotlin_kotlin.$_$.v9;
  var THROW_CCE = kotlin_kotlin.$_$.na;
  var abs = kotlin_kotlin.$_$.a8;
  var isNumber = kotlin_kotlin.$_$.l7;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var abs_0 = kotlin_kotlin.$_$.z7;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.n;
  var Comparable = kotlin_kotlin.$_$.ea;
  var getKClass = kotlin_kotlin.$_$.b;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.q2;
  var objectCreate = kotlin_kotlin.$_$.t7;
  var NumberFormatException_init_$Create$ = kotlin_kotlin.$_$.x;
  var toString = kotlin_kotlin.$_$.y7;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.r;
  var _ULongArray___get_size__impl__ju6dtr = kotlin_kotlin.$_$.k2;
  var equals = kotlin_kotlin.$_$.b7;
  var ULongArray = kotlin_kotlin.$_$.sa;
  var numberToInt = kotlin_kotlin.$_$.r7;
  var UByte = kotlin_kotlin.$_$.pa;
  var UShort = kotlin_kotlin.$_$.ua;
  var UInt = kotlin_kotlin.$_$.ra;
  var ULong = kotlin_kotlin.$_$.ta;
  var ULongArray__iterator_impl_cq4d2h = kotlin_kotlin.$_$.i2;
  var ULong__hashCode_impl_6hv2lb = kotlin_kotlin.$_$.c2;
  var ULongArray__get_impl_pr71q9 = kotlin_kotlin.$_$.f2;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.b2;
  var hashCode = kotlin_kotlin.$_$.h7;
  var UIntArray = kotlin_kotlin.$_$.qa;
  var UIntArray__hashCode_impl_hr7ost = kotlin_kotlin.$_$.u1;
  var getBooleanHashCode = kotlin_kotlin.$_$.d7;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.a2;
  var _UInt___init__impl__l7qpdl = kotlin_kotlin.$_$.p1;
  var _UIntArray___init__impl__ghjpc6 = kotlin_kotlin.$_$.r1;
  var _UInt___get_data__impl__f0vqqw = kotlin_kotlin.$_$.q1;
  var _UIntArray___init__impl__ghjpc6_0 = kotlin_kotlin.$_$.s1;
  var UIntArray__isEmpty_impl_vd8j4n = kotlin_kotlin.$_$.v1;
  var _UIntArray___get_size__impl__r6l8ci = kotlin_kotlin.$_$.y1;
  var UIntArray__get_impl_gp5kza = kotlin_kotlin.$_$.t1;
  var _UIntArray___get_storage__impl__92a0v0 = kotlin_kotlin.$_$.z1;
  var copyOfRange = kotlin_kotlin.$_$.j3;
  var uintCompare = kotlin_kotlin.$_$.fb;
  var UIntArray__set_impl_7f2zu2 = kotlin_kotlin.$_$.x1;
  var println = kotlin_kotlin.$_$.q6;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.f;
  var UIntArray__iterator_impl_tkdv7k = kotlin_kotlin.$_$.w1;
  var uintDivide = kotlin_kotlin.$_$.gb;
  var uintRemainder = kotlin_kotlin.$_$.hb;
  var ulongDivide = kotlin_kotlin.$_$.jb;
  var ulongCompare = kotlin_kotlin.$_$.ib;
  var ULongArray__hashCode_impl_aze4wa = kotlin_kotlin.$_$.g2;
  var longArrayOf = kotlin_kotlin.$_$.m7;
  var _ULongArray___init__impl__twm1l3 = kotlin_kotlin.$_$.e2;
  var _ULongArray___get_storage__impl__28e64j = kotlin_kotlin.$_$.l2;
  var copyOfRange_0 = kotlin_kotlin.$_$.k3;
  var ULongArray__isEmpty_impl_c3yngu = kotlin_kotlin.$_$.h2;
  var longArray = kotlin_kotlin.$_$.n7;
  var arrayCopy = kotlin_kotlin.$_$.c3;
  var ULongArray__set_impl_z19mvh = kotlin_kotlin.$_$.j2;
  var plus = kotlin_kotlin.$_$.q4;
  var toULongArray = kotlin_kotlin.$_$.t5;
  var slice = kotlin_kotlin.$_$.z4;
  var _ULongArray___init__impl__twm1l3_0 = kotlin_kotlin.$_$.d2;
  var ulongRemainder = kotlin_kotlin.$_$.kb;
  var copyOf = kotlin_kotlin.$_$.l3;
  var toString_0 = kotlin_kotlin.$_$.z9;
  var isCharSequence = kotlin_kotlin.$_$.j7;
  var reversed = kotlin_kotlin.$_$.q9;
  var _UShort___get_data__impl__g0245 = kotlin_kotlin.$_$.m2;
  var _UByte___get_data__impl__jof9qr = kotlin_kotlin.$_$.o1;
  var toString_1 = kotlin_kotlin.$_$.k1;
  var Char__minus_impl_a2frrh = kotlin_kotlin.$_$.g1;
  var Char__minus_impl_a2frrh_0 = kotlin_kotlin.$_$.h1;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.j1;
  //endregion
  //region block: pre-declaration
  function parseString$default(string, base, $super) {
    base = base === VOID ? 10 : base;
    return $super === VOID ? this.xm(string, base) : $super.xm.call(this, string, base);
  }
  function tryFromFloat$default(float, exactRequired, $super) {
    exactRequired = exactRequired === VOID ? false : exactRequired;
    return $super === VOID ? this.an(float, exactRequired) : $super.an.call(this, float, exactRequired);
  }
  function tryFromDouble$default(double, exactRequired, $super) {
    exactRequired = exactRequired === VOID ? false : exactRequired;
    return $super === VOID ? this.cn(double, exactRequired) : $super.cn.call(this, double, exactRequired);
  }
  setMetadataFor(Creator, 'Creator', interfaceMeta);
  function plus_0(other) {
    return this.fn().hn(other);
  }
  function minus(other) {
    return this.fn().jn(other);
  }
  function times(other) {
    return this.fn().ln(other);
  }
  function div(other) {
    return this.fn().nn(other);
  }
  function plus_1(int) {
    return this.fn().hn(this.en().zm(int));
  }
  function times_0(int) {
    return this.fn().ln(this.en().zm(int));
  }
  function minus_0(int) {
    return this.fn().jn(this.en().zm(int));
  }
  function div_0(int) {
    return this.fn().nn(this.en().zm(int));
  }
  function rem(int) {
    return this.fn().tn(this.en().zm(int));
  }
  setMetadataFor(CommonBigNumberOperations, 'CommonBigNumberOperations', interfaceMeta);
  function intValue$default(exactRequired, $super) {
    exactRequired = exactRequired === VOID ? true : exactRequired;
    return $super === VOID ? this.un(exactRequired) : $super.un.call(this, exactRequired);
  }
  setMetadataFor(NarrowingOperations, 'NarrowingOperations', interfaceMeta);
  setMetadataFor(SignificantDecider, 'SignificantDecider', classMeta, Enum);
  setMetadataFor(Companion, 'Companion', objectMeta, VOID, [Creator]);
  setMetadataFor(ScaleOps, 'ScaleOps', classMeta, Enum);
  setMetadataFor(BigDecimal, 'BigDecimal', classMeta, VOID, [CommonBigNumberOperations, NarrowingOperations, Comparable]);
  setMetadataFor(Companion_0, 'Companion', objectMeta);
  setMetadataFor(DecimalMode, 'DecimalMode', classMeta, VOID, VOID, DecimalMode);
  setMetadataFor(RoundingMode, 'RoundingMode', classMeta, Enum);
  setMetadataFor(Companion_1, 'Companion', objectMeta, VOID, [Creator]);
  setMetadataFor(QuotientAndRemainder, 'QuotientAndRemainder', classMeta);
  setMetadataFor(BigInteger, 'BigInteger', classMeta, VOID, [CommonBigNumberOperations, NarrowingOperations, Comparable]);
  setMetadataFor(Sign, 'Sign', classMeta, Enum);
  setMetadataFor(Platform, 'Platform', classMeta, Enum);
  setMetadataFor(Sextuple, 'Sextuple', classMeta);
  setMetadataFor(Quadruple, 'Quadruple', classMeta);
  setMetadataFor(SignedUIntArray, 'SignedUIntArray', classMeta);
  setMetadataFor(BigInteger32Arithmetic, 'BigInteger32Arithmetic', objectMeta);
  setMetadataFor(SignedULongArray, 'SignedULongArray', classMeta);
  setMetadataFor(BigInteger63Arithmetic, 'BigInteger63Arithmetic', objectMeta);
  setMetadataFor(RuntimePlatform, 'RuntimePlatform', objectMeta);
  //endregion
  function Creator() {
  }
  function CommonBigNumberOperations() {
  }
  function NarrowingOperations() {
  }
  var SignificantDecider_FIVE_instance;
  var SignificantDecider_LESS_THAN_FIVE_instance;
  var SignificantDecider_MORE_THAN_FIVE_instance;
  var SignificantDecider_entriesInitialized;
  function SignificantDecider_initEntries() {
    if (SignificantDecider_entriesInitialized)
      return Unit_instance;
    SignificantDecider_entriesInitialized = true;
    SignificantDecider_FIVE_instance = new SignificantDecider('FIVE', 0);
    SignificantDecider_LESS_THAN_FIVE_instance = new SignificantDecider('LESS_THAN_FIVE', 1);
    SignificantDecider_MORE_THAN_FIVE_instance = new SignificantDecider('MORE_THAN_FIVE', 2);
  }
  function roundOrDont($this, significand, exponent, decimalMode) {
    var tmp;
    if (decimalMode.zn_1) {
      tmp = new BigDecimal(significand, exponent);
    } else {
      tmp = roundSignificand($this, significand, exponent, decimalMode);
    }
    return tmp;
  }
  function SignificantDecider(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function determineDecider($this, discarded) {
    var tmp = Companion_getInstance_1().fo_1;
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = discarded.lo().s2(toLong(1));
    var scale = tmp.mo(tmp$ret$0);
    var divrem = discarded.no(scale);
    var significant = divrem.oo_1.qo().un(true);
    var rest = divrem.po_1.qo();
    var tmp_0;
    if (significant === 5) {
      var tmp_1;
      if (rest.equals(Companion_getInstance_1().co_1)) {
        tmp_1 = SignificantDecider_FIVE_getInstance();
      } else {
        tmp_1 = SignificantDecider_MORE_THAN_FIVE_getInstance();
      }
      tmp_0 = tmp_1;
    } else if (significant > 5) {
      tmp_0 = SignificantDecider_MORE_THAN_FIVE_getInstance();
    } else if (significant < 5) {
      tmp_0 = SignificantDecider_LESS_THAN_FIVE_getInstance();
    } else {
      throw RuntimeException_init_$Create$("Couldn't determine decider");
    }
    return tmp_0;
  }
  function roundDiscarded($this, significand, discarded, decimalMode) {
    var toDiscard = significand.lo().s2(decimalMode.wn_1);
    var tmp;
    if (toDiscard.z(new Long(0, 0)) > 0) {
      var additionallyDiscarded = significand.no(Companion_getInstance_1().fo_1.mo(toDiscard));
      tmp = new Pair(additionallyDiscarded.oo_1, additionallyDiscarded.po_1);
    } else {
      tmp = new Pair(significand, discarded);
    }
    var tmp0_container = tmp;
    var result = tmp0_container.ge();
    var remainder = tmp0_container.he();
    var tmp_0;
    if (significand.equals(Companion_getInstance_1().co_1)) {
      tmp_0 = discarded.io_1;
    } else {
      tmp_0 = significand.io_1;
    }
    var sign = tmp_0;
    if (!decimalMode.xn_1.equals(RoundingMode_AWAY_FROM_ZERO_getInstance()) ? !decimalMode.xn_1.equals(RoundingMode_TOWARDS_ZERO_getInstance()) : false) {
      if (remainder.ro()) {
        return result;
      }
    } else {
      if (remainder.ro() ? discarded.ro() : false) {
        return result;
      }
    }
    var decider = determineDecider($this, remainder);
    switch (decimalMode.xn_1.l2_1) {
      case 2:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
          result = result.w2();
        } else {
          result = result.x2();
        }

        break;
      case 3:
        break;
      case 1:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
          result = result.w2();
        }

        break;
      case 0:
        if (!sign.equals(Sign_POSITIVE_getInstance())) {
          result = result.x2();
        }

        break;
      case 5:
        switch (sign.l2_1) {
          case 0:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.w2();
            }

            break;
          case 1:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.x2();
            }

            break;
          case 2:
            break;
        }

        break;
      case 6:
        switch (sign.l2_1) {
          case 0:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.w2();
            }

            break;
          case 1:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.x2();
            }

            break;
          case 2:
            break;
        }

        break;
      case 7:
        switch (sign.l2_1) {
          case 0:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.w2();
            }

            break;
          case 1:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.x2();
            }

            break;
          case 2:
            break;
        }

        break;
      case 8:
        switch (sign.l2_1) {
          case 0:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.w2();
            }

            break;
          case 1:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.x2();
            }

            break;
          case 2:
            break;
        }

        break;
      case 9:
        if (decider.equals(SignificantDecider_FIVE_getInstance())) {
          if (significand.sn(2).equals(Companion_getInstance_1().do_1)) {
            switch (sign.l2_1) {
              case 0:
                if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
                  result = result.w2();
                }

                break;
              case 1:
                if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
                  result = result.x2();
                }

                break;
              case 2:
                break;
            }
          } else {
            switch (sign.l2_1) {
              case 0:
                if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
                  result = result.w2();
                }

                break;
              case 1:
                if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
                  result = result.x2();
                }

                break;
              case 2:
                break;
            }
          }
        } else if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
          if (sign.equals(Sign_POSITIVE_getInstance())) {
            result = result.w2();
          }
          if (sign.equals(Sign_NEGATIVE_getInstance())) {
            result = result.x2();
          }
        }

        break;
      case 10:
        if (decider.equals(SignificantDecider_FIVE_getInstance())) {
          if (significand.sn(2).equals(Companion_getInstance_1().co_1)) {
            switch (sign.l2_1) {
              case 0:
                if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
                  result = result.w2();
                }

                break;
              case 1:
                if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
                  result = result.x2();
                }

                break;
              case 2:
                break;
            }
          } else {
            switch (sign.l2_1) {
              case 0:
                if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
                  result = result.w2();
                }

                break;
              case 1:
                if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
                  result = result.x2();
                }

                break;
              case 2:
                break;
            }
          }
        } else if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
          if (sign.equals(Sign_POSITIVE_getInstance())) {
            result = result.w2();
          }
          if (sign.equals(Sign_NEGATIVE_getInstance())) {
            result = result.x2();
          }
        }

        break;
      case 4:
        throw ArithmeticException_init_$Create$('Non-terminating result of division operation. Specify decimalPrecision');
    }
    return result;
  }
  function roundSignificand($this, significand, exponent, decimalMode) {
    if (significand.equals(Companion_getInstance_1().co_1)) {
      return new BigDecimal(Companion_getInstance_1().co_1, exponent, decimalMode);
    }
    var significandDigits = significand.lo();
    var tmp;
    if (decimalMode.ao_1) {
      tmp = decimalMode.wn_1.r2(decimalMode.yn_1);
    } else {
      tmp = decimalMode.wn_1;
    }
    var desiredPrecision = tmp;
    var tmp_0;
    if (desiredPrecision.z(significandDigits) > 0) {
      var extendedSignificand = significand.kn(Companion_getInstance_1().fo_1.mo(desiredPrecision.s2(significandDigits)));
      tmp_0 = new BigDecimal(extendedSignificand, exponent, decimalMode);
    } else if (desiredPrecision.z(significandDigits) < 0) {
      var divRem = significand.no(Companion_getInstance_1().fo_1.mo(significandDigits.s2(desiredPrecision)));
      var resolvedRemainder = divRem.po_1;
      if (divRem.po_1.equals(Companion_getInstance_1().co_1)) {
        return new BigDecimal(divRem.oo_1, exponent, decimalMode);
      }
      var tmp_1;
      if (significand.lo().equals(divRem.oo_1.lo().r2(divRem.po_1.lo()))) {
        var newSignificand = roundDiscarded($this, divRem.oo_1, resolvedRemainder, decimalMode);
        var exponentModifier = newSignificand.lo().s2(divRem.oo_1.lo());
        tmp_1 = new BigDecimal(newSignificand, exponent.r2(exponentModifier), decimalMode);
      } else {
        tmp_1 = $this.dp(divRem.oo_1, exponent, decimalMode);
      }
      tmp_0 = tmp_1;
    } else {
      tmp_0 = new BigDecimal(significand, exponent, decimalMode);
    }
    return tmp_0;
  }
  function applyScale($this, significand, exponent, decimalMode) {
    if (!decimalMode.ao_1) {
      return new BigDecimal(significand, exponent, decimalMode);
    }
    var tmp;
    if (exponent.z(new Long(0, 0)) >= 0) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = exponent.r2(decimalMode.yn_1).r2(toLong(1));
      tmp = new DecimalMode(tmp$ret$0, decimalMode.xn_1);
    } else if (exponent.z(new Long(0, 0)) < 0) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$1 = decimalMode.yn_1.r2(toLong(1));
      tmp = new DecimalMode(tmp$ret$1, decimalMode.xn_1);
    } else {
      throw RuntimeException_init_$Create$('Unexpected state');
    }
    var workMode = tmp;
    var tmp_0;
    if (exponent.z(new Long(0, 0)) >= 0) {
      tmp_0 = roundSignificand($this, significand, exponent, workMode);
    } else {
      var temp = (new BigDecimal(significand, exponent)).on(significand.ep());
      tmp_0 = roundSignificand($this, temp.gp_1, temp.hp_1, workMode).qn(significand.ep());
    }
    return tmp_0;
  }
  function resolveDecimalMode($this, firstDecimalMode, secondDecimalMode, suppliedDecimalMode) {
    var tmp;
    if (!(suppliedDecimalMode == null)) {
      tmp = suppliedDecimalMode;
    } else {
      if (firstDecimalMode == null ? secondDecimalMode == null : false) {
        return new DecimalMode();
      }
      if (firstDecimalMode == null ? !(secondDecimalMode == null) : false) {
        return secondDecimalMode;
      }
      if (secondDecimalMode == null ? !(firstDecimalMode == null) : false) {
        return firstDecimalMode;
      }
      if (!ensureNotNull(firstDecimalMode).xn_1.equals(ensureNotNull(secondDecimalMode).xn_1)) {
        throw ArithmeticException_init_$Create$('Different rounding modes! This: ' + firstDecimalMode.xn_1 + ' Other: ' + secondDecimalMode.xn_1);
      }
      var tmp_0;
      if (firstDecimalMode.wn_1.z(secondDecimalMode.wn_1) >= 0) {
        tmp_0 = firstDecimalMode;
      } else {
        tmp_0 = secondDecimalMode;
      }
      var unifiedDecimalMode = tmp_0;
      tmp = unifiedDecimalMode;
    }
    return tmp;
  }
  function SignificantDecider_FIVE_getInstance() {
    SignificantDecider_initEntries();
    return SignificantDecider_FIVE_instance;
  }
  function SignificantDecider_LESS_THAN_FIVE_getInstance() {
    SignificantDecider_initEntries();
    return SignificantDecider_LESS_THAN_FIVE_instance;
  }
  function SignificantDecider_MORE_THAN_FIVE_getInstance() {
    SignificantDecider_initEntries();
    return SignificantDecider_MORE_THAN_FIVE_instance;
  }
  var ScaleOps_Max_instance;
  var ScaleOps_Min_instance;
  var ScaleOps_Add_instance;
  var ScaleOps_entriesInitialized;
  function ScaleOps_initEntries() {
    if (ScaleOps_entriesInitialized)
      return Unit_instance;
    ScaleOps_entriesInitialized = true;
    ScaleOps_Max_instance = new ScaleOps('Max', 0);
    ScaleOps_Min_instance = new ScaleOps('Min', 1);
    ScaleOps_Add_instance = new ScaleOps('Add', 2);
  }
  function Companion() {
    Companion_instance = this;
    this.so_1 = new BigDecimal(Companion_getInstance_1().co_1);
    this.to_1 = new BigDecimal(Companion_getInstance_1().do_1);
    this.uo_1 = new BigDecimal(Companion_getInstance_1().eo_1);
    this.vo_1 = new BigDecimal(Companion_getInstance_1().fo_1, new Long(1, 0));
    this.wo_1 = false;
    var tmp = this;
    // Inline function 'kotlin.doubleArrayOf' call
    tmp.xo_1 = new Float64Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10, 1.0E11, 1.0E12, 1.0E13, 1.0E14, 1.0E15, 1.0E16, 1.0E17, 1.0E18, 1.0E19, 1.0E20, 1.0E21, 1.0E22]);
    this.yo_1 = this.np(1.7976931348623157E308);
    this.zo_1 = this.np(4.9E-324);
    var tmp_0 = this;
    // Inline function 'kotlin.floatArrayOf' call
    tmp_0.ap_1 = new Float32Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10]);
    this.bp_1 = this.op(3.4028235E38);
    this.cp_1 = this.op(1.4E-45);
  }
  protoOf(Companion).dp = function (significand, exponent, decimalMode) {
    var tmp;
    if (significand.io_1.equals(Sign_POSITIVE_getInstance())) {
      var tmp_0;
      switch (decimalMode.xn_1.l2_1) {
        case 1:
        case 2:
          var increasedSignificand = significand.w2();
          var exponentModifier = increasedSignificand.lo().s2(significand.lo());
          tmp_0 = new BigDecimal(increasedSignificand, exponent.r2(exponentModifier), decimalMode);
          break;
        default:
          tmp_0 = new BigDecimal(significand, exponent, decimalMode);
          break;
      }
      tmp = tmp_0;
    } else if (significand.io_1.equals(Sign_NEGATIVE_getInstance())) {
      var tmp_1;
      switch (decimalMode.xn_1.l2_1) {
        case 0:
        case 2:
          var increasedSignificand_0 = significand.x2();
          var exponentModifier_0 = increasedSignificand_0.lo().s2(significand.lo());
          tmp_1 = new BigDecimal(increasedSignificand_0, exponent.r2(exponentModifier_0), decimalMode);
          break;
        default:
          tmp_1 = new BigDecimal(significand, exponent, decimalMode);
          break;
      }
      tmp = tmp_1;
    } else {
      tmp = new BigDecimal(significand, exponent, decimalMode);
    }
    return tmp;
  };
  protoOf(Companion).pp = function (long, decimalMode) {
    var bigint = Companion_getInstance_1().qp(long);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.lo().s2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).rp(decimalMode);
  };
  protoOf(Companion).sp = function (int, decimalMode) {
    var bigint = Companion_getInstance_1().zm(int);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.lo().s2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).rp(decimalMode);
  };
  protoOf(Companion).tp = function (short, decimalMode) {
    var bigint = Companion_getInstance_1().up(short);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.lo().s2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).rp(decimalMode);
  };
  protoOf(Companion).vp = function (byte, decimalMode) {
    var bigint = Companion_getInstance_1().wp(byte);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.lo().s2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).rp(decimalMode);
  };
  protoOf(Companion).xp = function (float, decimalMode) {
    var floatString = float.toString();
    var tmp;
    if (contains(floatString, _Char___init__impl__6a9atx(46)) ? !contains(floatString, _Char___init__impl__6a9atx(69), true) : false) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.dropLastWhile' call
        var inductionVariable = get_lastIndex(floatString);
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.fromFloat.<anonymous>' call
            if (!(charSequenceGet(floatString, index) === _Char___init__impl__6a9atx(48))) {
              // Inline function 'kotlin.text.substring' call
              var endIndex = index + 1 | 0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$3 = floatString.substring(0, endIndex);
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$3 = '';
      }
      tmp = this.yp(tmp$ret$3, decimalMode).rp(decimalMode);
    } else {
      tmp = this.yp(floatString, decimalMode).rp(decimalMode);
    }
    return tmp;
  };
  protoOf(Companion).op = function (float, decimalMode, $super) {
    decimalMode = decimalMode === VOID ? null : decimalMode;
    return $super === VOID ? this.xp(float, decimalMode) : $super.xp.call(this, float, decimalMode);
  };
  protoOf(Companion).zp = function (double, decimalMode) {
    var doubleString = double.toString();
    var tmp;
    if (contains(doubleString, _Char___init__impl__6a9atx(46)) ? !contains(doubleString, _Char___init__impl__6a9atx(69), true) : false) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.dropLastWhile' call
        var inductionVariable = get_lastIndex(doubleString);
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.fromDouble.<anonymous>' call
            if (!(charSequenceGet(doubleString, index) === _Char___init__impl__6a9atx(48))) {
              // Inline function 'kotlin.text.substring' call
              var endIndex = index + 1 | 0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$3 = doubleString.substring(0, endIndex);
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$3 = '';
      }
      tmp = this.yp(tmp$ret$3, decimalMode).rp(decimalMode);
    } else {
      tmp = this.yp(doubleString, decimalMode).rp(decimalMode).rp(decimalMode);
    }
    return tmp;
  };
  protoOf(Companion).np = function (double, decimalMode, $super) {
    decimalMode = decimalMode === VOID ? null : decimalMode;
    return $super === VOID ? this.zp(double, decimalMode) : $super.zp.call(this, double, decimalMode);
  };
  protoOf(Companion).qp = function (long) {
    return this.pp(long, null);
  };
  protoOf(Companion).zm = function (int) {
    return this.sp(int, null);
  };
  protoOf(Companion).up = function (short) {
    return this.tp(short, null);
  };
  protoOf(Companion).wp = function (byte) {
    return this.vp(byte, null);
  };
  protoOf(Companion).an = function (float, exactRequired) {
    return this.xp(float, null);
  };
  protoOf(Companion).cn = function (double, exactRequired) {
    return this.zp(double, null);
  };
  protoOf(Companion).xm = function (string, base) {
    return this.yp(string, null);
  };
  protoOf(Companion).aq = function (string) {
    return this.bq(string);
  };
  protoOf(Companion).yp = function (floatingPointString, decimalMode) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(floatingPointString) === 0) {
      throw ArithmeticException_init_$Create$('Empty string is not a valid decimal number');
    }
    if (contains(floatingPointString, _Char___init__impl__6a9atx(69), true)) {
      var tmp;
      if (!contains(floatingPointString, _Char___init__impl__6a9atx(46))) {
        var splitAroundE = split(floatingPointString, charArrayOf([_Char___init__impl__6a9atx(69), _Char___init__impl__6a9atx(101)]));
        tmp = listOf([splitAroundE.m(0), '0E' + splitAroundE.m(1)]);
      } else {
        tmp = split(floatingPointString, charArrayOf([_Char___init__impl__6a9atx(46)]));
      }
      var split_0 = tmp;
      if (split_0.k() === 2) {
        var signPresent = charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45) ? true : charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(43);
        var tmp_0;
        if (signPresent) {
          tmp_0 = 1;
        } else {
          tmp_0 = 0;
        }
        var leftStart = tmp_0;
        var tmp_1;
        if (signPresent) {
          var tmp_2;
          if (charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45)) {
            tmp_2 = Sign_NEGATIVE_getInstance();
          } else {
            tmp_2 = Sign_POSITIVE_getInstance();
          }
          tmp_1 = tmp_2;
        } else {
          tmp_1 = Sign_POSITIVE_getInstance();
        }
        var sign = tmp_1;
        // Inline function 'kotlin.text.substring' call
        // Inline function 'kotlin.js.asDynamic' call
        var left = split_0.m(0).substring(leftStart);
        var rightSplit = split(split_0.m(1), charArrayOf([_Char___init__impl__6a9atx(69), _Char___init__impl__6a9atx(101)]));
        var right = rightSplit.m(0);
        var exponentSplit = rightSplit.m(1);
        var exponentSignPresent = charSequenceGet(exponentSplit, 0) === _Char___init__impl__6a9atx(45) ? true : charSequenceGet(exponentSplit, 0) === _Char___init__impl__6a9atx(43);
        var tmp_3;
        if (charSequenceGet(exponentSplit, 0) === _Char___init__impl__6a9atx(45)) {
          tmp_3 = Sign_NEGATIVE_getInstance();
        } else {
          tmp_3 = Sign_POSITIVE_getInstance();
        }
        var exponentSign = tmp_3;
        var tmp_4;
        if (exponentSignPresent) {
          tmp_4 = 1;
        } else {
          tmp_4 = 0;
        }
        var skipSignIfPresent = tmp_4;
        // Inline function 'kotlin.text.substring' call
        // Inline function 'kotlin.js.asDynamic' call
        var exponentString = exponentSplit.substring(skipSignIfPresent);
        var tmp_5;
        if (exponentSign.equals(Sign_POSITIVE_getInstance())) {
          tmp_5 = toLong_0(exponentString, 10);
        } else {
          // Inline function 'kotlin.Long.times' call
          tmp_5 = toLong_0(exponentString, 10).t2(toLong(-1));
        }
        var exponent = tmp_5;
        var tmp$ret$7;
        $l$block: {
          // Inline function 'kotlin.text.indexOfFirst' call
          var inductionVariable = 0;
          var last = charSequenceLength(left) - 1 | 0;
          if (inductionVariable <= last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
              if (!(charSequenceGet(left, index) === _Char___init__impl__6a9atx(48))) {
                tmp$ret$7 = index;
                break $l$block;
              }
            }
             while (inductionVariable <= last);
          tmp$ret$7 = -1;
        }
        var leftFirstNonZero = tmp$ret$7;
        if (leftFirstNonZero === -1) {
          leftFirstNonZero = 0;
        }
        var tmp$ret$9;
        $l$block_0: {
          // Inline function 'kotlin.text.indexOfLast' call
          var inductionVariable_0 = charSequenceLength(right) - 1 | 0;
          if (0 <= inductionVariable_0)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + -1 | 0;
              // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
              if (!(charSequenceGet(right, index_0) === _Char___init__impl__6a9atx(48))) {
                tmp$ret$9 = index_0;
                break $l$block_0;
              }
            }
             while (0 <= inductionVariable_0);
          tmp$ret$9 = -1;
        }
        var rightLastNonZero = tmp$ret$9;
        if (rightLastNonZero === -1) {
          rightLastNonZero = right.length - 1 | 0;
        }
        // Inline function 'kotlin.text.substring' call
        var startIndex = leftFirstNonZero;
        var endIndex = left.length;
        // Inline function 'kotlin.js.asDynamic' call
        var leftTruncated = left.substring(startIndex, endIndex);
        // Inline function 'kotlin.text.substring' call
        var endIndex_0 = rightLastNonZero + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        var rightTruncated = right.substring(0, endIndex_0);
        var significand = Companion_getInstance_1().xm(leftTruncated + rightTruncated, 10);
        if (significand.equals(Companion_getInstance_1().co_1)) {
          sign = Sign_ZERO_getInstance();
        }
        if (sign.equals(Sign_NEGATIVE_getInstance())) {
          significand = significand.cq();
        }
        var tmp_6;
        if (!(leftTruncated === '0')) {
          // Inline function 'kotlin.Long.minus' call
          // Inline function 'kotlin.Long.plus' call
          var other = leftTruncated.length;
          tmp_6 = exponent.r2(toLong(other)).s2(toLong(1));
        } else {
          // Inline function 'kotlin.Long.minus' call
          tmp_6 = exponent.s2(numberToLong(rightTruncated.length).s2(significand.lo())).s2(toLong(1));
        }
        var exponentModifiedByFloatingPointPosition = tmp_6;
        return new BigDecimal(significand, exponentModifiedByFloatingPointPosition, decimalMode);
      } else
        throw ArithmeticException_init_$Create$('Invalid (or unsupported) floating point number format: ' + floatingPointString);
    } else {
      if (contains(floatingPointString, _Char___init__impl__6a9atx(46))) {
        var split_1 = split(floatingPointString, charArrayOf([_Char___init__impl__6a9atx(46)]));
        if (split_1.k() === 2) {
          var signPresent_0 = charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45) ? true : charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(43);
          var tmp_7;
          if (signPresent_0) {
            tmp_7 = 1;
          } else {
            tmp_7 = 0;
          }
          var leftStart_0 = tmp_7;
          var tmp_8;
          if (signPresent_0) {
            var tmp_9;
            if (charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45)) {
              tmp_9 = Sign_NEGATIVE_getInstance();
            } else {
              tmp_9 = Sign_POSITIVE_getInstance();
            }
            tmp_8 = tmp_9;
          } else {
            tmp_8 = Sign_POSITIVE_getInstance();
          }
          var sign_0 = tmp_8;
          // Inline function 'kotlin.text.substring' call
          // Inline function 'kotlin.js.asDynamic' call
          var left_0 = split_1.m(0).substring(leftStart_0);
          var right_0 = split_1.m(1);
          var tmp$ret$20;
          $l$block_1: {
            // Inline function 'kotlin.text.indexOfFirst' call
            var inductionVariable_1 = 0;
            var last_0 = charSequenceLength(left_0) - 1 | 0;
            if (inductionVariable_1 <= last_0)
              do {
                var index_1 = inductionVariable_1;
                inductionVariable_1 = inductionVariable_1 + 1 | 0;
                // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                if (!(charSequenceGet(left_0, index_1) === _Char___init__impl__6a9atx(48))) {
                  tmp$ret$20 = index_1;
                  break $l$block_1;
                }
              }
               while (inductionVariable_1 <= last_0);
            tmp$ret$20 = -1;
          }
          var leftFirstNonZero_0 = tmp$ret$20;
          if (leftFirstNonZero_0 === -1) {
            leftFirstNonZero_0 = 0;
          }
          var tmp$ret$22;
          $l$block_2: {
            // Inline function 'kotlin.text.indexOfLast' call
            var inductionVariable_2 = charSequenceLength(right_0) - 1 | 0;
            if (0 <= inductionVariable_2)
              do {
                var index_2 = inductionVariable_2;
                inductionVariable_2 = inductionVariable_2 + -1 | 0;
                // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                if (!(charSequenceGet(right_0, index_2) === _Char___init__impl__6a9atx(48))) {
                  tmp$ret$22 = index_2;
                  break $l$block_2;
                }
              }
               while (0 <= inductionVariable_2);
            tmp$ret$22 = -1;
          }
          var rightLastNonZero_0 = tmp$ret$22;
          if (rightLastNonZero_0 === -1) {
            rightLastNonZero_0 = right_0.length - 1 | 0;
          }
          // Inline function 'kotlin.text.substring' call
          var startIndex_0 = leftFirstNonZero_0;
          var endIndex_1 = left_0.length;
          // Inline function 'kotlin.js.asDynamic' call
          var leftTruncated_0 = left_0.substring(startIndex_0, endIndex_1);
          // Inline function 'kotlin.text.substring' call
          var endIndex_2 = rightLastNonZero_0 + 1 | 0;
          // Inline function 'kotlin.js.asDynamic' call
          var rightTruncated_0 = right_0.substring(0, endIndex_2);
          var significand_0 = Companion_getInstance_1().xm(leftTruncated_0 + rightTruncated_0, 10);
          var tmp_10;
          var tmp_11;
          // Inline function 'kotlin.text.isNotEmpty' call
          if (charSequenceLength(leftTruncated_0) > 0) {
            tmp_11 = !(charSequenceGet(leftTruncated_0, 0) === _Char___init__impl__6a9atx(48));
          } else {
            tmp_11 = false;
          }
          if (tmp_11) {
            tmp_10 = leftTruncated_0.length - 1 | 0;
          } else {
            var tmp$ret$29;
            $l$block_3: {
              // Inline function 'kotlin.text.indexOfFirst' call
              var inductionVariable_3 = 0;
              var last_1 = charSequenceLength(rightTruncated_0) - 1 | 0;
              if (inductionVariable_3 <= last_1)
                do {
                  var index_3 = inductionVariable_3;
                  inductionVariable_3 = inductionVariable_3 + 1 | 0;
                  // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                  if (!(charSequenceGet(rightTruncated_0, index_3) === _Char___init__impl__6a9atx(48))) {
                    tmp$ret$29 = index_3;
                    break $l$block_3;
                  }
                }
                 while (inductionVariable_3 <= last_1);
              tmp$ret$29 = -1;
            }
            tmp_10 = imul(tmp$ret$29 + 1 | 0, -1);
          }
          var exponent_0 = tmp_10;
          if (significand_0.equals(Companion_getInstance_1().co_1)) {
            sign_0 = Sign_ZERO_getInstance();
          }
          if (sign_0.equals(Sign_NEGATIVE_getInstance())) {
            significand_0 = significand_0.cq();
          }
          return new BigDecimal(significand_0, toLong(exponent_0), decimalMode);
        } else
          throw ArithmeticException_init_$Create$('Invalid (or unsupported) floating point number format: ' + floatingPointString);
      } else {
        var significand_1 = Companion_getInstance_1().xm(floatingPointString, 10);
        // Inline function 'kotlin.Long.minus' call
        var tmp$ret$30 = significand_1.lo().s2(toLong(1));
        return new BigDecimal(significand_1, tmp$ret$30, decimalMode);
      }
    }
  };
  protoOf(Companion).bq = function (floatingPointString, decimalMode, $super) {
    decimalMode = decimalMode === VOID ? null : decimalMode;
    return $super === VOID ? this.yp(floatingPointString, decimalMode) : $super.yp.call(this, floatingPointString, decimalMode);
  };
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function removeTrailingZeroes($this, bigDecimal) {
    if (bigDecimal.equals(Companion_getInstance().so_1))
      return $this;
    var significand = bigDecimal.gp_1;
    var divisionResult = new QuotientAndRemainder(bigDecimal.gp_1, Companion_getInstance_1().co_1);
    do {
      divisionResult = divisionResult.oo_1.no(Companion_getInstance_1().fo_1);
      if (divisionResult.po_1.equals(Companion_getInstance_1().co_1)) {
        significand = divisionResult.oo_1;
      }
    }
     while (divisionResult.po_1.equals(Companion_getInstance_1().co_1));
    return new BigDecimal(significand, bigDecimal.hp_1);
  }
  function ScaleOps(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function computeMode($this, other, op) {
    var tmp;
    if ((($this.ip_1 == null ? true : $this.ip_1.zn_1) ? true : other.ip_1 == null) ? true : other.ip_1.zn_1) {
      tmp = Companion_getInstance_0().dq_1;
    } else {
      // Inline function 'kotlin.math.max' call
      var a = $this.ip_1.wn_1;
      var b = other.ip_1.wn_1;
      var tmp_0 = a.z(b) >= 0 ? a : b;
      var tmp_1;
      if ($this.ip_1.ao_1 ? other.ip_1.ao_1 : false) {
        var tmp_2;
        switch (op.l2_1) {
          case 0:
            // Inline function 'kotlin.math.max' call

            var a_0 = $this.ip_1.yn_1;
            var b_0 = other.ip_1.yn_1;
            tmp_2 = a_0.z(b_0) >= 0 ? a_0 : b_0;
            break;
          case 1:
            // Inline function 'kotlin.math.min' call

            var a_1 = $this.ip_1.yn_1;
            var b_1 = other.ip_1.yn_1;
            tmp_2 = a_1.z(b_1) <= 0 ? a_1 : b_1;
            break;
          case 2:
            tmp_2 = $this.ip_1.yn_1.r2(other.ip_1.yn_1);
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }
        tmp_1 = tmp_2;
      } else {
        tmp_1 = new Long(-1, -1);
      }
      tmp = new DecimalMode(tmp_0, $this.ip_1.xn_1, tmp_1);
    }
    return tmp;
  }
  function checkWholeness($this, exactRequired) {
    if (exactRequired ? !$this.fq() : false)
      throw ArithmeticException_init_$Create$('Cannot convert to int and provide exact value');
  }
  function getRidOfRadix($this, bigDecimal) {
    var precision = bigDecimal.gp_1.lo();
    // Inline function 'kotlin.Long.plus' call
    var newExponent = bigDecimal.hp_1.s2(precision).r2(toLong(1));
    return new BigDecimal(bigDecimal.gp_1, newExponent);
  }
  function bringSignificandToSameExponent($this, first, second) {
    var firstPrepared = getRidOfRadix($this, first);
    var secondPrepared = getRidOfRadix($this, second);
    var firstPreparedExponent = firstPrepared.hp_1;
    var secondPreparedExponent = secondPrepared.hp_1;
    var tmp;
    if (first.hp_1.z(second.hp_1) > 0) {
      var moveFirstBy = firstPreparedExponent.s2(secondPreparedExponent);
      var tmp_0;
      if (moveFirstBy.z(new Long(0, 0)) >= 0) {
        var movedFirst = firstPrepared.gp_1.kn(toBigInteger(10).mo(moveFirstBy));
        return new Triple(movedFirst, second.gp_1, secondPreparedExponent);
      } else {
        var tmp_1 = toBigInteger(10);
        // Inline function 'kotlin.Long.times' call
        var tmp$ret$0 = moveFirstBy.t2(toLong(-1));
        var movedSecond = secondPrepared.gp_1.kn(tmp_1.mo(tmp$ret$0));
        tmp_0 = new Triple(first.gp_1, movedSecond, firstPreparedExponent);
      }
      tmp = tmp_0;
    } else if (first.hp_1.z(second.hp_1) < 0) {
      var moveSecondBy = secondPreparedExponent.s2(firstPreparedExponent);
      var tmp_2;
      if (moveSecondBy.z(new Long(0, 0)) >= 0) {
        var movedSecond_0 = secondPrepared.gp_1.kn(toBigInteger(10).mo(moveSecondBy));
        tmp_2 = new Triple(first.gp_1, movedSecond_0, firstPreparedExponent);
      } else {
        var tmp_3 = toBigInteger(10);
        // Inline function 'kotlin.Long.times' call
        var tmp$ret$1 = moveSecondBy.t2(toLong(-1));
        var movedFirst_0 = firstPrepared.gp_1.kn(tmp_3.mo(tmp$ret$1));
        tmp_2 = new Triple(movedFirst_0, second.gp_1, firstPreparedExponent);
      }
      return tmp_2;
    } else if (first.hp_1.equals(second.hp_1)) {
      var delta = firstPreparedExponent.s2(secondPreparedExponent);
      var tmp_4;
      if (delta.z(new Long(0, 0)) > 0) {
        var movedFirst_1 = first.gp_1.kn(toBigInteger(10).mo(delta));
        tmp_4 = new Triple(movedFirst_1, second.gp_1, firstPreparedExponent);
      } else {
        if (delta.z(new Long(0, 0)) < 0) {
          var tmp_5 = toBigInteger(10);
          // Inline function 'kotlin.Long.times' call
          var tmp$ret$2 = delta.t2(toLong(-1));
          var movedSecond_1 = second.gp_1.kn(tmp_5.mo(tmp$ret$2));
          tmp_4 = new Triple(first.gp_1, movedSecond_1, firstPreparedExponent);
        } else {
          // Inline function 'kotlin.Long.compareTo' call
          if (delta.z(toLong(0)) === 0) {
            tmp_4 = new Triple(first.gp_1, second.gp_1, firstPreparedExponent);
          } else {
            throw RuntimeException_init_$Create$('Invalid delta: ' + delta.toString());
          }
        }
      }
      return tmp_4;
    } else {
      throw RuntimeException_init_$Create$('Invalid comparison state BigInteger: ' + first.hp_1.toString() + ', ' + second.hp_1.toString());
    }
    return tmp;
  }
  function javascriptNumberComparison($this, number) {
    var double = numberToDouble(number);
    var tmp;
    if (double > 9.223372036854776E18) {
      tmp = $this.gq(Companion_getInstance().aq(double.toString()));
    } else if (double % 1 === 0.0) {
      tmp = $this.gq(Companion_getInstance().qp(numberToLong(number)));
    } else {
      tmp = $this.gq(toBigDecimal(numberToDouble(number)));
    }
    return tmp;
  }
  function placeADotInStringExpanded($this, input, position) {
    var prefix = substring(input, until(0, input.length - position | 0));
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var this_0 = substring(input, until(input.length - position | 0, input.length));
      var inductionVariable = get_lastIndex(this_0);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.placeADotInStringExpanded.<anonymous>' call
          if (!(charSequenceGet(this_0, index) === _Char___init__impl__6a9atx(48))) {
            // Inline function 'kotlin.text.substring' call
            var endIndex = index + 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$3 = this_0.substring(0, endIndex);
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    var suffix = tmp$ret$3;
    var tmp;
    // Inline function 'kotlin.text.isNotEmpty' call
    if (charSequenceLength(suffix) > 0) {
      tmp = prefix + '.' + suffix;
    } else {
      tmp = prefix;
    }
    return tmp;
  }
  function placeADotInString($this, input, position) {
    var prefix = substring(input, until(0, input.length - position | 0));
    var suffix = substring(input, until(input.length - position | 0, input.length));
    var prepared = prefix + '.' + suffix;
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var inductionVariable = get_lastIndex(prepared);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.placeADotInString.<anonymous>' call
          if (!(charSequenceGet(prepared, index) === _Char___init__impl__6a9atx(48))) {
            // Inline function 'kotlin.text.substring' call
            var endIndex = index + 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$3 = prepared.substring(0, endIndex);
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    return tmp$ret$3;
  }
  function ScaleOps_Max_getInstance() {
    ScaleOps_initEntries();
    return ScaleOps_Max_instance;
  }
  function BigDecimal(_significand, _exponent, _decimalMode) {
    Companion_getInstance();
    _exponent = _exponent === VOID ? new Long(0, 0) : _exponent;
    _decimalMode = _decimalMode === VOID ? null : _decimalMode;
    if (!(_decimalMode == null) ? _decimalMode.ao_1 : false) {
      var wrk = applyScale(Companion_getInstance(), _significand, _exponent, _decimalMode);
      if (!wrk.ro()) {
        this.gp_1 = wrk.gp_1;
        this.hp_1 = wrk.hp_1;
        var newPrecision = this.gp_1.lo();
        this.fp_1 = newPrecision;
        this.ip_1 = _decimalMode.hq(newPrecision);
      } else {
        this.gp_1 = wrk.gp_1;
        this.hp_1 = wrk.hp_1.t2(_decimalMode.wn_1.r2(_decimalMode.yn_1));
        this.fp_1 = _decimalMode.wn_1.r2(_decimalMode.yn_1);
        this.ip_1 = _decimalMode.hq(this.fp_1);
      }
    } else {
      this.gp_1 = _significand;
      this.fp_1 = _significand.lo();
      this.hp_1 = _exponent;
      this.ip_1 = _decimalMode;
    }
    var tmp = this;
    var tmp0_safe_receiver = this.ip_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.wn_1;
    tmp.jp_1 = tmp1_elvis_lhs == null ? new Long(0, 0) : tmp1_elvis_lhs;
    var tmp_0 = this;
    var tmp0_safe_receiver_0 = this.ip_1;
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : tmp0_safe_receiver_0.xn_1;
    tmp_0.kp_1 = tmp1_elvis_lhs_0 == null ? RoundingMode_NONE_getInstance() : tmp1_elvis_lhs_0;
    var tmp_1 = this;
    var tmp0_safe_receiver_1 = this.ip_1;
    var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : tmp0_safe_receiver_1.yn_1;
    tmp_1.lp_1 = tmp1_elvis_lhs_1 == null ? new Long(-1, -1) : tmp1_elvis_lhs_1;
    this.mp_1 = this.lp_1.z(new Long(0, 0)) >= 0;
  }
  protoOf(BigDecimal).en = function () {
    return Companion_getInstance();
  };
  protoOf(BigDecimal).fn = function () {
    return this;
  };
  protoOf(BigDecimal).iq = function (other) {
    return this.jq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).hn = function (other) {
    return this.iq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).jq = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.ip_1, other.ip_1, decimalMode);
    if (this.equals(Companion_getInstance().so_1)) {
      return roundOrDont(Companion_getInstance(), other.gp_1, other.hp_1, resolvedDecimalMode);
    }
    if (other.equals(Companion_getInstance().so_1)) {
      return roundOrDont(Companion_getInstance(), this.gp_1, this.hp_1, resolvedDecimalMode);
    }
    var tmp0_container = bringSignificandToSameExponent(this, this, other);
    var first = tmp0_container.ge();
    var second = tmp0_container.he();
    var firstNumOfDigits = first.lo();
    var secondNumOfDigits = second.lo();
    var newSignificand = first.gn(second);
    var newSignificandNumOfDigit = newSignificand.lo();
    var tmp;
    if (firstNumOfDigits.z(secondNumOfDigits) > 0) {
      tmp = firstNumOfDigits;
    } else {
      tmp = secondNumOfDigits;
    }
    var largerOperand = tmp;
    var carryDetected = newSignificandNumOfDigit.s2(largerOperand);
    // Inline function 'kotlin.math.max' call
    var a = this.hp_1;
    var b = other.hp_1;
    var newExponent = (a.z(b) >= 0 ? a : b).r2(carryDetected);
    var tmp_0;
    if (resolvedDecimalMode.ao_1) {
      tmp_0 = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode.hq(newSignificandNumOfDigit));
    } else {
      tmp_0 = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode);
    }
    return tmp_0;
  };
  protoOf(BigDecimal).kq = function (other) {
    return this.lq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).jn = function (other) {
    return this.kq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).lq = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.ip_1, other.ip_1, decimalMode);
    if (this.equals(Companion_getInstance().so_1)) {
      return roundOrDont(Companion_getInstance(), other.gp_1.cq(), other.hp_1, resolvedDecimalMode);
    }
    if (other.equals(Companion_getInstance().so_1)) {
      return roundOrDont(Companion_getInstance(), this.gp_1, this.hp_1, resolvedDecimalMode);
    }
    var tmp0_container = bringSignificandToSameExponent(this, this, other);
    var first = tmp0_container.ge();
    var second = tmp0_container.he();
    var firstNumOfDigits = first.lo();
    var secondNumOfDigits = second.lo();
    var newSignificand = first.in(second);
    var newSignificandNumOfDigit = newSignificand.lo();
    var tmp;
    if (firstNumOfDigits.z(secondNumOfDigits) > 0) {
      tmp = firstNumOfDigits;
    } else {
      tmp = secondNumOfDigits;
    }
    var largerOperand = tmp;
    var borrowDetected = newSignificandNumOfDigit.s2(largerOperand);
    // Inline function 'kotlin.math.max' call
    var a = this.hp_1;
    var b = other.hp_1;
    var newExponent = (a.z(b) >= 0 ? a : b).r2(borrowDetected);
    if (this.mp_1) {
      return roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode.hq(newSignificandNumOfDigit));
    } else {
      return roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode);
    }
  };
  protoOf(BigDecimal).mq = function (other) {
    return this.nq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).ln = function (other) {
    return this.mq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).nq = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.ip_1, other.ip_1, decimalMode);
    var firstNumOfDigits = this.gp_1.lo();
    var secondNumOfDigits = other.gp_1.lo();
    var newSignificand = this.gp_1.kn(other.gp_1);
    var newSignificandNumOfDigit = newSignificand.lo();
    var moveExponent = newSignificandNumOfDigit.s2(firstNumOfDigits.r2(secondNumOfDigits));
    // Inline function 'kotlin.Long.plus' call
    var newExponent = this.hp_1.r2(other.hp_1).r2(moveExponent).r2(toLong(1));
    var tmp;
    if (resolvedDecimalMode.ao_1) {
      tmp = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode.hq(newSignificandNumOfDigit));
    } else {
      tmp = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode);
    }
    return tmp;
  };
  protoOf(BigDecimal).oq = function (other) {
    return this.pq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).nn = function (other) {
    return this.oq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).pq = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.ip_1, other.ip_1, decimalMode);
    if (resolvedDecimalMode.zn_1 ? !resolvedDecimalMode.ao_1 : false) {
      var newExponent = this.hp_1.s2(other.hp_1);
      // Inline function 'kotlin.Long.plus' call
      // Inline function 'kotlin.Long.times' call
      var power = other.fp_1.t2(toLong(2)).r2(toLong(6));
      var thisPrepared = this.gp_1.kn(Companion_getInstance_1().fo_1.mo(power));
      var divRem = thisPrepared.no(other.gp_1);
      var result = divRem.oo_1;
      // Inline function 'kotlin.Long.minus' call
      var expectedDiff = other.fp_1.s2(toLong(1));
      var exponentModifier = expectedDiff.r2(result.lo().s2(thisPrepared.lo()));
      if (!divRem.po_1.equals(Companion_getInstance_1().co_1)) {
        throw ArithmeticException_init_$Create$('Non-terminating result of division operation (i.e. 1/3 = 0.3333... library needs to know when to stop and how to round up at that point). Specify decimalPrecision inside your decimal mode.');
      }
      return new BigDecimal(result, newExponent.r2(exponentModifier), resolvedDecimalMode);
    } else {
      // Inline function 'kotlin.Long.minus' call
      var newExponent_0 = this.hp_1.s2(other.hp_1).s2(toLong(1));
      var desiredPrecision = resolvedDecimalMode.wn_1;
      var power_0 = desiredPrecision.s2(this.fp_1).r2(other.fp_1);
      var tmp;
      if (power_0.z(new Long(0, 0)) > 0) {
        tmp = this.gp_1.kn(toBigInteger(10).mo(power_0));
      } else if (power_0.z(new Long(0, 0)) < 0) {
        var tmp_0 = toBigInteger(10);
        // Inline function 'kotlin.math.absoluteValue' call
        var tmp$ret$4 = abs(power_0);
        tmp = this.gp_1.mn(tmp_0.mo(tmp$ret$4));
      } else {
        tmp = this.gp_1;
      }
      var thisPrepared_0 = tmp;
      var divRem_0 = thisPrepared_0.no(other.gp_1);
      var result_0 = divRem_0.oo_1;
      if (result_0.equals(Companion_getInstance_1().co_1)) {
        newExponent_0 = newExponent_0.x2();
      }
      var exponentModifier_0 = result_0.lo().s2(resolvedDecimalMode.wn_1);
      var tmp_1;
      if (this.mp_1) {
        tmp_1 = new BigDecimal(roundDiscarded(Companion_getInstance(), result_0, divRem_0.po_1, resolvedDecimalMode), newExponent_0.r2(exponentModifier_0), resolvedDecimalMode.hq(result_0.lo()));
      } else {
        tmp_1 = new BigDecimal(roundDiscarded(Companion_getInstance(), result_0, divRem_0.po_1, resolvedDecimalMode), newExponent_0.r2(exponentModifier_0), resolvedDecimalMode);
      }
      return tmp_1;
    }
  };
  protoOf(BigDecimal).qq = function (other) {
    return this.rq(other).fe_1;
  };
  protoOf(BigDecimal).tn = function (other) {
    return this.qq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).rq = function (other) {
    if (this.hp_1.z(new Long(0, 0)) < 0) {
      return new Pair(Companion_getInstance().so_1, this);
    }
    if (other.qo().sq(this.qo()) > 0) {
      return new Pair(Companion_getInstance().so_1, this);
    }
    var tmp0_safe_receiver = this.ip_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = this.hp_1.r2(toLong(1));
      tmp = tmp0_safe_receiver.hq(tmp$ret$0);
    }
    var tmp1_elvis_lhs = tmp;
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$1 = this.hp_1.r2(toLong(1));
      tmp_0 = new DecimalMode(tmp$ret$1, RoundingMode_FLOOR_getInstance());
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var resolvedRoundingMode = tmp_0;
    var quotient = this.pq(other, resolvedRoundingMode);
    var quotientInfinitePrecision = quotient.tq(VOID, VOID, Companion_getInstance_0().dq_1);
    var remainder = this.vq(quotientInfinitePrecision.uq(other));
    return new Pair(quotient, remainder);
  };
  protoOf(BigDecimal).ro = function () {
    return this.gp_1.ro();
  };
  protoOf(BigDecimal).wq = function (significand, exponent, decimalMode) {
    return new BigDecimal(significand, exponent, decimalMode);
  };
  protoOf(BigDecimal).tq = function (significand, exponent, decimalMode, $super) {
    significand = significand === VOID ? this.gp_1 : significand;
    exponent = exponent === VOID ? this.hp_1 : exponent;
    decimalMode = decimalMode === VOID ? this.ip_1 : decimalMode;
    return $super === VOID ? this.wq(significand, exponent, decimalMode) : $super.wq.call(this, significand, exponent, decimalMode);
  };
  protoOf(BigDecimal).xq = function (places) {
    if (places.equals(new Long(0, 0))) {
      return this;
    }
    return this.tq(VOID, this.hp_1.r2(places));
  };
  protoOf(BigDecimal).yq = function () {
    if (this.hp_1.z(new Long(0, 0)) < 0) {
      var tmp;
      switch (this.gp_1.io_1.l2_1) {
        case 0:
          tmp = Companion_getInstance().so_1;
          break;
        case 1:
          tmp = Companion_getInstance().to_1.cq();
          break;
        case 2:
          tmp = Companion_getInstance().so_1;
          break;
        default:
          noWhenBranchMatchedException();
          break;
      }
      return tmp;
    }
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = this.hp_1.r2(toLong(1));
    return this.rp(new DecimalMode(tmp$ret$0, RoundingMode_FLOOR_getInstance()));
  };
  protoOf(BigDecimal).zq = function () {
    if (this.hp_1.z(new Long(0, 0)) < 0) {
      return Companion_getInstance_1().co_1;
    }
    var precisionExponentDiff = this.hp_1.s2(this.fp_1);
    var tmp;
    if (precisionExponentDiff.z(new Long(0, 0)) > 0) {
      var tmp_0 = toBigInteger(10);
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = precisionExponentDiff.r2(toLong(1));
      tmp = this.gp_1.kn(tmp_0.mo(tmp$ret$0));
    } else if (precisionExponentDiff.z(new Long(0, 0)) < 0) {
      var tmp_1 = toBigInteger(10);
      // Inline function 'kotlin.Long.minus' call
      // Inline function 'kotlin.math.absoluteValue' call
      var tmp$ret$2 = abs(precisionExponentDiff).s2(toLong(1));
      tmp = this.gp_1.mn(tmp_1.mo(tmp$ret$2));
    } else {
      tmp = this.gp_1.pn(10);
    }
    return tmp;
  };
  protoOf(BigDecimal).ar = function (other) {
    return this.rq(other);
  };
  protoOf(BigDecimal).vq = function (other) {
    return this.lq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).uq = function (other) {
    return this.nq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).qo = function () {
    return new BigDecimal(this.gp_1.qo(), this.hp_1, this.ip_1);
  };
  protoOf(BigDecimal).cq = function () {
    return new BigDecimal(this.gp_1.cq(), this.hp_1, this.ip_1);
  };
  protoOf(BigDecimal).un = function (exactRequired) {
    checkWholeness(this, exactRequired);
    return this.zq().un(exactRequired);
  };
  protoOf(BigDecimal).fq = function () {
    var res = this.qo().ar(Companion_getInstance().to_1);
    var isWholeNumber = res.fe_1.ro();
    return isWholeNumber;
  };
  protoOf(BigDecimal).rp = function (decimalMode) {
    if (decimalMode == null) {
      return this;
    }
    return roundSignificand(Companion_getInstance(), this.gp_1, this.hp_1, decimalMode);
  };
  protoOf(BigDecimal).gq = function (other) {
    var tmp;
    if (this.hp_1.equals(other.hp_1) ? this.fp_1.equals(other.fp_1) : false) {
      tmp = this.gp_1.br(other.gp_1);
    } else {
      var tmp0_container = bringSignificandToSameExponent(this, this, other);
      var preparedFirst = tmp0_container.ge();
      var preparedSecond = tmp0_container.he();
      tmp = preparedFirst.br(preparedSecond);
    }
    return tmp;
  };
  protoOf(BigDecimal).sq = function (other) {
    if (isNumber(other)) {
      if (RuntimePlatform_instance.cr().equals(Platform_JS_getInstance())) {
        return javascriptNumberComparison(this, other);
      }
    }
    var tmp;
    if (other instanceof BigDecimal) {
      tmp = this.gq(other);
    } else {
      if (other instanceof Long) {
        tmp = this.gq(Companion_getInstance().qp(other));
      } else {
        if (typeof other === 'number') {
          tmp = this.gq(Companion_getInstance().zm(other));
        } else {
          if (typeof other === 'number') {
            tmp = this.gq(Companion_getInstance().up(other));
          } else {
            if (typeof other === 'number') {
              tmp = this.gq(Companion_getInstance().wp(other));
            } else {
              if (typeof other === 'number') {
                tmp = this.gq(Companion_getInstance().np(other));
              } else {
                if (typeof other === 'number') {
                  tmp = this.gq(Companion_getInstance().op(other));
                } else {
                  throw RuntimeException_init_$Create$('Invalid comparison type for BigDecimal: ' + getKClassFromExpression(other).j9());
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(BigDecimal).d = function (other) {
    return this.sq(!(other == null) ? other : THROW_CCE());
  };
  protoOf(BigDecimal).equals = function (other) {
    var tmp;
    if (other instanceof BigDecimal) {
      tmp = this.gq(other);
    } else {
      if (other instanceof Long) {
        tmp = this.gq(Companion_getInstance().qp(other));
      } else {
        if (!(other == null) ? typeof other === 'number' : false) {
          tmp = this.gq(Companion_getInstance().zm(other));
        } else {
          if (!(other == null) ? typeof other === 'number' : false) {
            tmp = this.gq(Companion_getInstance().up(other));
          } else {
            if (!(other == null) ? typeof other === 'number' : false) {
              tmp = this.gq(Companion_getInstance().wp(other));
            } else {
              if (!(other == null) ? typeof other === 'number' : false) {
                tmp = this.gq(Companion_getInstance().np(other));
              } else {
                if (!(other == null) ? typeof other === 'number' : false) {
                  tmp = this.gq(Companion_getInstance().op(other));
                } else {
                  tmp = -1;
                }
              }
            }
          }
        }
      }
    }
    var comparison = tmp;
    return comparison === 0;
  };
  protoOf(BigDecimal).hashCode = function () {
    if (this.equals(Companion_getInstance().so_1)) {
      return 0;
    }
    return removeTrailingZeroes(this, this).gp_1.hashCode() + this.hp_1.hashCode() | 0;
  };
  protoOf(BigDecimal).toString = function () {
    if (Companion_getInstance().wo_1) {
      return this.dr();
    }
    var significandString = this.gp_1.er(10);
    var tmp;
    if (this.gp_1.sq(0) < 0) {
      tmp = 2;
    } else {
      tmp = 1;
    }
    var modifier = tmp;
    var tmp_0;
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var this_0 = this.gp_1.toString();
      var inductionVariable = get_lastIndex(this_0);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.toString.<anonymous>' call
          if (!(charSequenceGet(this_0, index) === _Char___init__impl__6a9atx(48))) {
            // Inline function 'kotlin.text.substring' call
            var endIndex = index + 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$3 = this_0.substring(0, endIndex);
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    if (tmp$ret$3.length <= 1) {
      tmp_0 = '0';
    } else {
      tmp_0 = '';
    }
    var expand = tmp_0;
    var tmp_1;
    if (this.hp_1.z(new Long(0, 0)) > 0) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand + 'E+' + this.hp_1.toString();
    } else if (this.hp_1.z(new Long(0, 0)) < 0) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand + 'E' + this.hp_1.toString();
    } else if (this.hp_1.equals(new Long(0, 0))) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand;
    } else {
      throw RuntimeException_init_$Create$('Invalid state, please report a bug (Integer compareTo invalid)');
    }
    return tmp_1;
  };
  protoOf(BigDecimal).dr = function () {
    if (this.equals(Companion_getInstance().so_1)) {
      return '0';
    }
    var digits = this.gp_1.lo();
    if (this.hp_1.z(new Long(2147483647, 0)) > 0) {
      throw RuntimeException_init_$Create$('Invalid toStringExpanded request (exponent > Int.MAX_VALUE)');
    }
    var significandString = this.gp_1.fr(10);
    var tmp;
    if (this.gp_1.io_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = '-';
    } else {
      tmp = '';
    }
    var sign = tmp;
    var tmp_0;
    if (this.hp_1.z(new Long(0, 0)) > 0) {
      // Inline function 'kotlin.Long.plus' call
      var diffBigInt = this.hp_1.s2(digits).r2(toLong(1));
      var tmp_1;
      if (diffBigInt.z(new Long(0, 0)) > 0) {
        var expandZeros = this.gr(diffBigInt, _Char___init__impl__6a9atx(48));
        tmp_1 = significandString + expandZeros;
      } else {
        tmp_1 = placeADotInStringExpanded(this, significandString, (significandString.length - this.hp_1.g3() | 0) - 1 | 0);
      }
      tmp_0 = tmp_1;
    } else if (this.hp_1.z(new Long(0, 0)) < 0) {
      // Inline function 'kotlin.math.absoluteValue' call
      var this_0 = this.hp_1.g3();
      var diffInt = abs_0(this_0);
      var tmp_2;
      if (diffInt > 0) {
        // Inline function 'kotlin.math.absoluteValue' call
        var this_1 = this.hp_1;
        var tmp$ret$2 = abs(this_1);
        var expandZeros_0 = this.gr(tmp$ret$2, _Char___init__impl__6a9atx(48));
        tmp_2 = placeADotInStringExpanded(this, expandZeros_0 + significandString, (diffInt + significandString.length | 0) - 1 | 0);
      } else {
        tmp_2 = placeADotInStringExpanded(this, significandString, significandString.length - 1 | 0);
      }
      tmp_0 = tmp_2;
    } else if (this.hp_1.equals(new Long(0, 0))) {
      if (digits.equals(new Long(1, 0))) {
        return sign + significandString;
      }
      tmp_0 = placeADotInStringExpanded(this, significandString, significandString.length - 1 | 0);
    } else {
      throw RuntimeException_init_$Create$('Invalid state, please report a bug (Integer compareTo invalid)');
    }
    var adjusted = tmp_0;
    return sign + adjusted;
  };
  protoOf(BigDecimal).gr = function (_this__u8e3s4, char) {
    if (_this__u8e3s4.z(new Long(0, 0)) < 0) {
      throw RuntimeException_init_$Create$('Char cannot be multiplied with negative number');
    }
    var counter = _this__u8e3s4;
    var stringBuilder = StringBuilder_init_$Create$();
    while (counter.z(new Long(0, 0)) > 0) {
      stringBuilder.n7(char);
      counter = counter.x2();
    }
    return stringBuilder.toString();
  };
  function toBigDecimal(_this__u8e3s4, exponentModifier, decimalMode) {
    exponentModifier = exponentModifier === VOID ? null : exponentModifier;
    decimalMode = decimalMode === VOID ? null : decimalMode;
    var tmp = Companion_getInstance().zp(_this__u8e3s4, decimalMode);
    return tmp.xq(exponentModifier == null ? new Long(0, 0) : exponentModifier);
  }
  function Companion_0() {
    Companion_instance_0 = this;
    this.dq_1 = new DecimalMode();
    this.eq_1 = new DecimalMode(new Long(30, 0), RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_getInstance(), new Long(2, 0));
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function DecimalMode(decimalPrecision, roundingMode, scale) {
    Companion_getInstance_0();
    decimalPrecision = decimalPrecision === VOID ? new Long(0, 0) : decimalPrecision;
    roundingMode = roundingMode === VOID ? RoundingMode_NONE_getInstance() : roundingMode;
    scale = scale === VOID ? new Long(-1, -1) : scale;
    this.wn_1 = decimalPrecision;
    this.xn_1 = roundingMode;
    this.yn_1 = scale;
    if (this.wn_1.z(new Long(0, 0)) < 0) {
      throw ArithmeticException_init_$Create$('Negative decimal precision is not allowed.');
    }
    this.zn_1 = this.wn_1.equals(new Long(0, 0));
    this.ao_1 = this.yn_1.z(new Long(0, 0)) >= 0;
    if ((!this.ao_1 ? this.wn_1.equals(new Long(0, 0)) : false) ? !this.xn_1.equals(RoundingMode_NONE_getInstance()) : false) {
      throw ArithmeticException_init_$Create$('Rounding mode with 0 digits precision.');
    }
    if (this.yn_1.z(new Long(-1, -1)) < 0) {
      throw ArithmeticException_init_$Create$('Negative Scale is unsupported.');
    }
    if (this.ao_1 ? this.xn_1.equals(RoundingMode_NONE_getInstance()) : false) {
      throw ArithmeticException_init_$Create$('Scale of ' + this.yn_1.toString() + ' digits to the right of the decimal requires a RoundingMode that is not NONE.');
    }
  }
  protoOf(DecimalMode).hr = function (decimalPrecision, roundingMode, scale) {
    return new DecimalMode(decimalPrecision, roundingMode, scale);
  };
  protoOf(DecimalMode).hq = function (decimalPrecision, roundingMode, scale, $super) {
    decimalPrecision = decimalPrecision === VOID ? this.wn_1 : decimalPrecision;
    roundingMode = roundingMode === VOID ? this.xn_1 : roundingMode;
    scale = scale === VOID ? this.yn_1 : scale;
    return $super === VOID ? this.hr(decimalPrecision, roundingMode, scale) : $super.hr.call(this, decimalPrecision, roundingMode, scale);
  };
  protoOf(DecimalMode).toString = function () {
    return 'DecimalMode(decimalPrecision=' + this.wn_1.toString() + ', roundingMode=' + this.xn_1 + ', scale=' + this.yn_1.toString() + ')';
  };
  protoOf(DecimalMode).hashCode = function () {
    var result = this.wn_1.hashCode();
    result = imul(result, 31) + this.xn_1.hashCode() | 0;
    result = imul(result, 31) + this.yn_1.hashCode() | 0;
    return result;
  };
  protoOf(DecimalMode).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DecimalMode))
      return false;
    var tmp0_other_with_cast = other instanceof DecimalMode ? other : THROW_CCE();
    if (!this.wn_1.equals(tmp0_other_with_cast.wn_1))
      return false;
    if (!this.xn_1.equals(tmp0_other_with_cast.xn_1))
      return false;
    if (!this.yn_1.equals(tmp0_other_with_cast.yn_1))
      return false;
    return true;
  };
  var RoundingMode_FLOOR_instance;
  var RoundingMode_CEILING_instance;
  var RoundingMode_AWAY_FROM_ZERO_instance;
  var RoundingMode_TOWARDS_ZERO_instance;
  var RoundingMode_NONE_instance;
  var RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance;
  var RoundingMode_ROUND_HALF_TOWARDS_ZERO_instance;
  var RoundingMode_ROUND_HALF_CEILING_instance;
  var RoundingMode_ROUND_HALF_FLOOR_instance;
  var RoundingMode_ROUND_HALF_TO_EVEN_instance;
  var RoundingMode_ROUND_HALF_TO_ODD_instance;
  var RoundingMode_entriesInitialized;
  function RoundingMode_initEntries() {
    if (RoundingMode_entriesInitialized)
      return Unit_instance;
    RoundingMode_entriesInitialized = true;
    RoundingMode_FLOOR_instance = new RoundingMode('FLOOR', 0);
    RoundingMode_CEILING_instance = new RoundingMode('CEILING', 1);
    RoundingMode_AWAY_FROM_ZERO_instance = new RoundingMode('AWAY_FROM_ZERO', 2);
    RoundingMode_TOWARDS_ZERO_instance = new RoundingMode('TOWARDS_ZERO', 3);
    RoundingMode_NONE_instance = new RoundingMode('NONE', 4);
    RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance = new RoundingMode('ROUND_HALF_AWAY_FROM_ZERO', 5);
    RoundingMode_ROUND_HALF_TOWARDS_ZERO_instance = new RoundingMode('ROUND_HALF_TOWARDS_ZERO', 6);
    RoundingMode_ROUND_HALF_CEILING_instance = new RoundingMode('ROUND_HALF_CEILING', 7);
    RoundingMode_ROUND_HALF_FLOOR_instance = new RoundingMode('ROUND_HALF_FLOOR', 8);
    RoundingMode_ROUND_HALF_TO_EVEN_instance = new RoundingMode('ROUND_HALF_TO_EVEN', 9);
    RoundingMode_ROUND_HALF_TO_ODD_instance = new RoundingMode('ROUND_HALF_TO_ODD', 10);
  }
  function RoundingMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function RoundingMode_FLOOR_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_FLOOR_instance;
  }
  function RoundingMode_AWAY_FROM_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_AWAY_FROM_ZERO_instance;
  }
  function RoundingMode_TOWARDS_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_TOWARDS_ZERO_instance;
  }
  function RoundingMode_NONE_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_NONE_instance;
  }
  function RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance;
  }
  function BigInteger_init_$Init$(long, $this) {
    var tmp = Companion_getInstance_1().bo_1.ir(long);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp0_subject = getKClass(Long);
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (!(long instanceof Long))
        THROW_CCE();
      tmp_0 = long.z(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : long.z(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().aa())) {
      if (typeof long !== 'number')
        THROW_CCE();
      tmp_0 = long < 0 ? Sign_NEGATIVE_getInstance() : long > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().z9())) {
      if (typeof long !== 'number')
        THROW_CCE();
      tmp_0 = long < 0 ? Sign_NEGATIVE_getInstance() : long > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().y9())) {
      if (typeof long !== 'number')
        THROW_CCE();
      tmp_0 = long < 0 ? Sign_NEGATIVE_getInstance() : long > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + getKClass(Long));
    }
    var tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$(long) {
    return BigInteger_init_$Init$(long, objectCreate(protoOf(BigInteger)));
  }
  function BigInteger_init_$Init$_0(int, $this) {
    var tmp = Companion_getInstance_1().bo_1.jr(int);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp0_subject = PrimitiveClasses_getInstance().aa();
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (!(int instanceof Long))
        THROW_CCE();
      tmp_0 = int.z(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : int.z(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().aa())) {
      if (typeof int !== 'number')
        THROW_CCE();
      tmp_0 = int < 0 ? Sign_NEGATIVE_getInstance() : int > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().z9())) {
      if (typeof int !== 'number')
        THROW_CCE();
      tmp_0 = int < 0 ? Sign_NEGATIVE_getInstance() : int > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().y9())) {
      if (typeof int !== 'number')
        THROW_CCE();
      tmp_0 = int < 0 ? Sign_NEGATIVE_getInstance() : int > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + PrimitiveClasses_getInstance().aa());
    }
    var tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$_0(int) {
    return BigInteger_init_$Init$_0(int, objectCreate(protoOf(BigInteger)));
  }
  function BigInteger_init_$Init$_1(short, $this) {
    var tmp = Companion_getInstance_1().bo_1.kr(short);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp0_subject = PrimitiveClasses_getInstance().z9();
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (!(short instanceof Long))
        THROW_CCE();
      tmp_0 = short.z(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : short.z(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().aa())) {
      if (typeof short !== 'number')
        THROW_CCE();
      tmp_0 = short < 0 ? Sign_NEGATIVE_getInstance() : short > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().z9())) {
      if (typeof short !== 'number')
        THROW_CCE();
      tmp_0 = short < 0 ? Sign_NEGATIVE_getInstance() : short > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().y9())) {
      if (typeof short !== 'number')
        THROW_CCE();
      tmp_0 = short < 0 ? Sign_NEGATIVE_getInstance() : short > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + PrimitiveClasses_getInstance().z9());
    }
    var tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$_1(short) {
    return BigInteger_init_$Init$_1(short, objectCreate(protoOf(BigInteger)));
  }
  function BigInteger_init_$Init$_2(byte, $this) {
    var tmp = Companion_getInstance_1().bo_1.lr(byte);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp0_subject = PrimitiveClasses_getInstance().y9();
    var tmp_0;
    if (tmp0_subject.equals(getKClass(Long))) {
      if (!(byte instanceof Long))
        THROW_CCE();
      tmp_0 = byte.z(new Long(0, 0)) < 0 ? Sign_NEGATIVE_getInstance() : byte.z(new Long(0, 0)) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().aa())) {
      if (typeof byte !== 'number')
        THROW_CCE();
      tmp_0 = byte < 0 ? Sign_NEGATIVE_getInstance() : byte > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().z9())) {
      if (typeof byte !== 'number')
        THROW_CCE();
      tmp_0 = byte < 0 ? Sign_NEGATIVE_getInstance() : byte > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp0_subject.equals(PrimitiveClasses_getInstance().y9())) {
      if (typeof byte !== 'number')
        THROW_CCE();
      tmp_0 = byte < 0 ? Sign_NEGATIVE_getInstance() : byte > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + PrimitiveClasses_getInstance().y9());
    }
    var tmp$ret$0 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$0);
    return $this;
  }
  function BigInteger_init_$Create$_2(byte) {
    return BigInteger_init_$Init$_2(byte, objectCreate(protoOf(BigInteger)));
  }
  function Companion_1() {
    Companion_instance_1 = this;
    this.bo_1 = get_chosenArithmetic();
    this.co_1 = new BigInteger(this.bo_1.mr(), Sign_ZERO_getInstance());
    this.do_1 = new BigInteger(this.bo_1.nr(), Sign_POSITIVE_getInstance());
    this.eo_1 = new BigInteger(this.bo_1.or(), Sign_POSITIVE_getInstance());
    this.fo_1 = new BigInteger(this.bo_1.pr(), Sign_POSITIVE_getInstance());
    var tmp = this;
    // Inline function 'kotlin.math.log10' call
    tmp.go_1 = log10(2.0);
  }
  protoOf(Companion_1).xm = function (string, base) {
    if (base < 2 ? true : base > 36) {
      throw NumberFormatException_init_$Create$('Unsupported base: ' + base + '. Supported base range is from 2 to 36');
    }
    var decimal = contains(string, _Char___init__impl__6a9atx(46));
    if (decimal) {
      var bigDecimal = Companion_getInstance().aq(string);
      var isActuallyDecimal = bigDecimal.vq(bigDecimal.yq()).sq(0) > 0;
      if (isActuallyDecimal) {
        throw NumberFormatException_init_$Create$('Supplied string is decimal, which cannot be converted to BigInteger without precision loss.');
      }
      return bigDecimal.zq();
    }
    var signed = charSequenceGet(string, 0) === _Char___init__impl__6a9atx(45) ? true : charSequenceGet(string, 0) === _Char___init__impl__6a9atx(43);
    var tmp;
    if (signed) {
      if (string.length === 1) {
        throw NumberFormatException_init_$Create$('Invalid big integer: ' + string);
      }
      var tmp_0;
      if (charSequenceGet(string, 0) === _Char___init__impl__6a9atx(45)) {
        tmp_0 = Sign_NEGATIVE_getInstance();
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var isNegative = tmp_0;
      if (string.length === 2 ? charSequenceGet(string, 1) === _Char___init__impl__6a9atx(48) : false) {
        return this.co_1;
      }
      // Inline function 'kotlin.text.substring' call
      var endIndex = string.length;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$1 = string.substring(1, endIndex);
      tmp = new BigInteger(this.bo_1.qr(tmp$ret$1, base), isNegative);
    } else {
      if (string.length === 1 ? charSequenceGet(string, 0) === _Char___init__impl__6a9atx(48) : false) {
        return this.co_1;
      }
      tmp = new BigInteger(this.bo_1.qr(string, base), Sign_POSITIVE_getInstance());
    }
    return tmp;
  };
  protoOf(Companion_1).rr = function (uLong) {
    return new BigInteger(this.bo_1.sr(uLong), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).tr = function (uInt) {
    return new BigInteger(this.bo_1.ur(uInt), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).vr = function (uShort) {
    return new BigInteger(this.bo_1.wr(uShort), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).xr = function (uByte) {
    return new BigInteger(this.bo_1.yr(uByte), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).qp = function (long) {
    return BigInteger_init_$Create$(long);
  };
  protoOf(Companion_1).zm = function (int) {
    return BigInteger_init_$Create$_0(int);
  };
  protoOf(Companion_1).up = function (short) {
    return BigInteger_init_$Create$_1(short);
  };
  protoOf(Companion_1).wp = function (byte) {
    return BigInteger_init_$Create$_2(byte);
  };
  protoOf(Companion_1).an = function (float, exactRequired) {
    // Inline function 'kotlin.math.floor' call
    var floatDecimalPart = float - Math.floor(float);
    var tmp = Companion_getInstance();
    // Inline function 'kotlin.math.floor' call
    var tmp$ret$1 = Math.floor(float);
    var bigDecimal = tmp.xp(tmp$ret$1, null);
    if (exactRequired) {
      if (floatDecimalPart > 0.0) {
        throw ArithmeticException_init_$Create$('Cant create BigInteger without precision loss, and exact  value was required');
      }
    }
    return bigDecimal.zq();
  };
  protoOf(Companion_1).cn = function (double, exactRequired) {
    // Inline function 'kotlin.math.floor' call
    var doubleDecimalPart = double - Math.floor(double);
    var tmp = Companion_getInstance();
    // Inline function 'kotlin.math.floor' call
    var tmp$ret$1 = Math.floor(double);
    var bigDecimal = tmp.zp(tmp$ret$1, null);
    if (exactRequired) {
      if (doubleDecimalPart > 0.0) {
        throw ArithmeticException_init_$Create$('Cant create BigInteger without precision loss, and exact  value was required');
      }
    }
    return bigDecimal.zq();
  };
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function isResultZero($this, resultMagnitude) {
    return Companion_getInstance_1().bo_1.zr(resultMagnitude, Companion_getInstance_1().bo_1.mr()) === 0;
  }
  function javascriptNumberComparison_0($this, number) {
    var double = numberToDouble(number);
    var tmp;
    if (double > 9.223372036854776E18) {
      tmp = $this.br(Companion_getInstance_1().ym(double.toString()));
    } else if (double % 1 === 0.0) {
      tmp = $this.br(Companion_getInstance_1().qp(numberToLong(number)));
    } else {
      var tmp_0 = numberToDouble(number);
      tmp = $this.as(tmp_0, BigInteger$javascriptNumberComparison$lambda($this));
    }
    return tmp;
  }
  function QuotientAndRemainder(quotient, remainder) {
    this.oo_1 = quotient;
    this.po_1 = remainder;
  }
  protoOf(QuotientAndRemainder).ge = function () {
    return this.oo_1;
  };
  protoOf(QuotientAndRemainder).he = function () {
    return this.po_1;
  };
  protoOf(QuotientAndRemainder).toString = function () {
    return 'QuotientAndRemainder(quotient=' + this.oo_1 + ', remainder=' + this.po_1 + ')';
  };
  protoOf(QuotientAndRemainder).hashCode = function () {
    var result = this.oo_1.hashCode();
    result = imul(result, 31) + this.po_1.hashCode() | 0;
    return result;
  };
  protoOf(QuotientAndRemainder).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof QuotientAndRemainder))
      return false;
    var tmp0_other_with_cast = other instanceof QuotientAndRemainder ? other : THROW_CCE();
    if (!this.oo_1.equals(tmp0_other_with_cast.oo_1))
      return false;
    if (!this.po_1.equals(tmp0_other_with_cast.po_1))
      return false;
    return true;
  };
  function BigInteger$compareTo$lambda(this$0) {
    return function (it) {
      return this$0.br(it);
    };
  }
  function BigInteger$compareTo$lambda_0(this$0) {
    return function (it) {
      return this$0.br(it);
    };
  }
  function BigInteger$javascriptNumberComparison$lambda(this$0) {
    return function (it) {
      return this$0.br(it);
    };
  }
  function BigInteger(wordArray, requestedSign) {
    Companion_getInstance_1();
    if (requestedSign.equals(Sign_ZERO_getInstance())) {
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!isResultZero(this, wordArray)) {
        // Inline function 'com.ionspin.kotlin.bignum.integer.BigInteger.<anonymous>' call
        var message = 'sign should be Sign.ZERO iff magnitude has a value of 0';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
    this.ho_1 = BigInteger63Arithmetic_getInstance().ts(wordArray);
    var tmp = this;
    var tmp_0;
    if (isResultZero(this, this.ho_1)) {
      tmp_0 = Sign_ZERO_getInstance();
    } else {
      tmp_0 = requestedSign;
    }
    tmp.io_1 = tmp_0;
    this.jo_1 = _ULongArray___get_size__impl__ju6dtr(this.ho_1);
    this.ko_1 = null;
  }
  protoOf(BigInteger).en = function () {
    return Companion_getInstance_1();
  };
  protoOf(BigInteger).fn = function () {
    return this;
  };
  protoOf(BigInteger).us = function (other) {
    var comparison = Companion_getInstance_1().bo_1.zr(this.ho_1, other.ho_1);
    var tmp;
    if (other.io_1.equals(this.io_1)) {
      return new BigInteger(Companion_getInstance_1().bo_1.ws(this.ho_1, other.ho_1), this.io_1);
    } else {
      var tmp_0;
      if (comparison > 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().bo_1.vs(this.ho_1, other.ho_1), this.io_1);
      } else if (comparison < 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().bo_1.vs(other.ho_1, this.ho_1), other.io_1);
      } else {
        tmp_0 = Companion_getInstance_1().co_1;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(BigInteger).hn = function (other) {
    return this.us(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).xs = function (other) {
    var comparison = Companion_getInstance_1().bo_1.zr(this.ho_1, other.ho_1);
    if (this.equals(Companion_getInstance_1().co_1)) {
      return other.cq();
    }
    if (other.equals(Companion_getInstance_1().co_1)) {
      return this;
    }
    var tmp;
    if (other.io_1.equals(this.io_1)) {
      var tmp_0;
      if (comparison > 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().bo_1.vs(this.ho_1, other.ho_1), this.io_1);
      } else if (comparison < 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().bo_1.vs(other.ho_1, this.ho_1), this.io_1.at());
      } else {
        tmp_0 = Companion_getInstance_1().co_1;
      }
      tmp = tmp_0;
    } else {
      return new BigInteger(Companion_getInstance_1().bo_1.ws(this.ho_1, other.ho_1), this.io_1);
    }
    return tmp;
  };
  protoOf(BigInteger).jn = function (other) {
    return this.xs(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).bt = function (other) {
    if (this.ro() ? true : other.ro()) {
      return Companion_getInstance_1().co_1;
    }
    if (other.equals(Companion_getInstance_1().do_1)) {
      return this;
    }
    var tmp;
    if (!this.io_1.equals(other.io_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var tmp_0;
    if (sign.equals(Sign_POSITIVE_getInstance())) {
      tmp_0 = new BigInteger(Companion_getInstance_1().bo_1.ct(this.ho_1, other.ho_1), sign);
    } else {
      tmp_0 = new BigInteger(Companion_getInstance_1().bo_1.ct(this.ho_1, other.ho_1), sign);
    }
    return tmp_0;
  };
  protoOf(BigInteger).ln = function (other) {
    return this.bt(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).dt = function (other) {
    if (other.ro()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this + ' / ' + other);
    }
    var result = Companion_getInstance_1().bo_1.et(this.ho_1, other.ho_1).ee_1.nm_1;
    var tmp;
    if (equals(result, Companion_getInstance_1().bo_1.mr())) {
      tmp = Companion_getInstance_1().co_1;
    } else {
      var tmp_0;
      if (!this.io_1.equals(other.io_1)) {
        tmp_0 = Sign_NEGATIVE_getInstance();
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var sign = tmp_0;
      tmp = new BigInteger(result, sign);
    }
    return tmp;
  };
  protoOf(BigInteger).nn = function (other) {
    return this.dt(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).ft = function (other) {
    if (other.ro()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this + ' / ' + other);
    }
    var tmp;
    if (!this.io_1.equals(other.io_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var result = Companion_getInstance_1().bo_1.et(this.ho_1, other.ho_1).fe_1.nm_1;
    if (equals(result, Companion_getInstance_1().bo_1.mr())) {
      sign = Sign_ZERO_getInstance();
    }
    return new BigInteger(result, sign);
  };
  protoOf(BigInteger).tn = function (other) {
    return this.ft(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).gt = function (other) {
    if (other.ro()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this + ' / ' + other);
    }
    var tmp;
    if (!this.io_1.equals(other.io_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var result = Companion_getInstance_1().bo_1.et(this.ho_1, other.ho_1);
    var tmp_0;
    if (equals(result.ee_1, new ULongArray(Companion_getInstance_1().bo_1.mr()))) {
      tmp_0 = Companion_getInstance_1().co_1;
    } else {
      tmp_0 = new BigInteger(result.ee_1.nm_1, sign);
    }
    var quotient = tmp_0;
    var tmp_1;
    if (equals(result.fe_1, new ULongArray(Companion_getInstance_1().bo_1.mr()))) {
      tmp_1 = Companion_getInstance_1().co_1;
    } else {
      tmp_1 = new BigInteger(result.fe_1.nm_1, this.io_1);
    }
    var remainder = tmp_1;
    return new Pair(quotient, remainder);
  };
  protoOf(BigInteger).br = function (other) {
    if (this.ro() ? other.ro() : false)
      return 0;
    if (other.ro() ? this.io_1.equals(Sign_POSITIVE_getInstance()) : false)
      return 1;
    if (other.ro() ? this.io_1.equals(Sign_NEGATIVE_getInstance()) : false)
      return -1;
    if (this.ro() ? other.io_1.equals(Sign_POSITIVE_getInstance()) : false)
      return -1;
    if (this.ro() ? other.io_1.equals(Sign_NEGATIVE_getInstance()) : false)
      return 1;
    if (!this.io_1.equals(other.io_1))
      return this.io_1.equals(Sign_POSITIVE_getInstance()) ? 1 : -1;
    var result = Companion_getInstance_1().bo_1.zr(this.ho_1, other.ho_1);
    var tmp;
    if (this.io_1.equals(Sign_NEGATIVE_getInstance()) ? other.io_1.equals(Sign_NEGATIVE_getInstance()) : false) {
      tmp = imul(result, -1);
    } else {
      tmp = result;
    }
    return tmp;
  };
  protoOf(BigInteger).ro = function () {
    return this.io_1.equals(Sign_ZERO_getInstance()) ? true : get_chosenArithmetic().zr(this.ho_1, get_chosenArithmetic().mr()) === 0;
  };
  protoOf(BigInteger).cq = function () {
    return new BigInteger(this.ho_1, this.io_1.at());
  };
  protoOf(BigInteger).qo = function () {
    return new BigInteger(this.ho_1, Sign_POSITIVE_getInstance());
  };
  protoOf(BigInteger).mo = function (exponent) {
    if (exponent.z(new Long(0, 0)) < 0) {
      throw ArithmeticException_init_$Create$('Negative exponent not supported with BigInteger');
    }
    var tmp;
    if (this.equals(Companion_getInstance_1().co_1)) {
      tmp = Companion_getInstance_1().co_1;
    } else if (this.equals(Companion_getInstance_1().do_1)) {
      tmp = Companion_getInstance_1().do_1;
    } else {
      var tmp_0;
      if (this.io_1.equals(Sign_NEGATIVE_getInstance())) {
        var tmp_1;
        // Inline function 'kotlin.Long.rem' call
        if (exponent.v2(toLong(2)).equals(new Long(0, 0))) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_NEGATIVE_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var sign = tmp_0;
      tmp = new BigInteger(Companion_getInstance_1().bo_1.ht(this.ho_1, exponent), sign);
    }
    return tmp;
  };
  protoOf(BigInteger).it = function (exponent) {
    return this.mo(toLong(exponent));
  };
  protoOf(BigInteger).ep = function () {
    var tmp;
    switch (this.io_1.l2_1) {
      case 0:
        tmp = 1;
        break;
      case 1:
        tmp = -1;
        break;
      case 2:
        tmp = 0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(BigInteger).lo = function () {
    if (this.ro()) {
      return new Long(1, 0);
    }
    var bitLength = Companion_getInstance_1().bo_1.jt(this.ho_1);
    // Inline function 'kotlin.math.ceil' call
    var x = (bitLength - 1 | 0) * Companion_getInstance_1().go_1;
    var minDigit = Math.ceil(x);
    var tmp = this.mn(toBigInteger(10).it(numberToInt(minDigit)));
    var counter = new Long(0, 0);
    while (!(tmp.sq(0) === 0)) {
      tmp = tmp.rn(10);
      counter = counter.w2();
    }
    // Inline function 'kotlin.Long.plus' call
    var this_0 = counter;
    var other = numberToInt(minDigit);
    return this_0.r2(toLong(other));
  };
  protoOf(BigInteger).y2 = function () {
    return this.cq();
  };
  protoOf(BigInteger).x2 = function () {
    return this.in(Companion_getInstance_1().do_1);
  };
  protoOf(BigInteger).w2 = function () {
    return this.gn(Companion_getInstance_1().do_1);
  };
  protoOf(BigInteger).no = function (other) {
    var result = this.gt(other);
    return new QuotientAndRemainder(result.ee_1, result.fe_1);
  };
  protoOf(BigInteger).sq = function (other) {
    if (isNumber(other)) {
      if (RuntimePlatform_instance.cr().equals(Platform_JS_getInstance())) {
        return javascriptNumberComparison_0(this, other);
      }
    }
    var tmp;
    if (other instanceof BigInteger) {
      tmp = this.br(other);
    } else {
      if (other instanceof Long) {
        tmp = this.br(Companion_getInstance_1().qp(other));
      } else {
        if (typeof other === 'number') {
          tmp = this.br(Companion_getInstance_1().zm(other));
        } else {
          if (typeof other === 'number') {
            tmp = this.br(Companion_getInstance_1().up(other));
          } else {
            if (typeof other === 'number') {
              tmp = this.br(Companion_getInstance_1().wp(other));
            } else {
              if (other instanceof ULong) {
                tmp = this.br(Companion_getInstance_1().rr(other.o1_1));
              } else {
                if (other instanceof UInt) {
                  tmp = this.br(Companion_getInstance_1().tr(other.xl_1));
                } else {
                  if (other instanceof UShort) {
                    tmp = this.br(Companion_getInstance_1().vr(other.mt_1));
                  } else {
                    if (other instanceof UByte) {
                      tmp = this.br(Companion_getInstance_1().xr(other.lt_1));
                    } else {
                      if (typeof other === 'number') {
                        tmp = this.as(other, BigInteger$compareTo$lambda(this));
                      } else {
                        if (typeof other === 'number') {
                          tmp = this.kt(other, BigInteger$compareTo$lambda_0(this));
                        } else {
                          throw RuntimeException_init_$Create$('Invalid comparison type for BigInteger: ' + getKClassFromExpression(other));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(BigInteger).d = function (other) {
    return this.sq(!(other == null) ? other : THROW_CCE());
  };
  protoOf(BigInteger).as = function (float, comparisonBlock) {
    // Inline function 'kotlin.math.floor' call
    var withoutDecimalPart = Math.floor(float);
    var hasDecimalPart = !(float % 1 === 0.0);
    var tmp;
    if (hasDecimalPart) {
      var comparisonResult = comparisonBlock(Companion_getInstance_1().bn(withoutDecimalPart + 1));
      var tmp_0;
      if (comparisonResult === 0) {
        tmp_0 = 1;
      } else {
        tmp_0 = comparisonResult;
      }
      tmp = tmp_0;
    } else {
      tmp = comparisonBlock(Companion_getInstance_1().bn(withoutDecimalPart));
    }
    return tmp;
  };
  protoOf(BigInteger).kt = function (double, comparisonBlock) {
    // Inline function 'kotlin.math.floor' call
    var withoutDecimalPart = Math.floor(double);
    var hasDecimalPart = !(double % 1 === 0.0);
    var tmp;
    if (hasDecimalPart) {
      var comparisonResult = comparisonBlock(Companion_getInstance_1().dn(withoutDecimalPart + 1));
      var tmp_0;
      if (comparisonResult === 0) {
        tmp_0 = 1;
      } else {
        tmp_0 = comparisonResult;
      }
      tmp = tmp_0;
    } else {
      tmp = comparisonBlock(Companion_getInstance_1().dn(withoutDecimalPart));
    }
    return tmp;
  };
  protoOf(BigInteger).equals = function (other) {
    var tmp;
    if (other instanceof BigInteger) {
      tmp = this.br(other);
    } else {
      if (other instanceof Long) {
        tmp = this.br(Companion_getInstance_1().qp(other));
      } else {
        if (!(other == null) ? typeof other === 'number' : false) {
          tmp = this.br(Companion_getInstance_1().zm(other));
        } else {
          if (!(other == null) ? typeof other === 'number' : false) {
            tmp = this.br(Companion_getInstance_1().up(other));
          } else {
            if (!(other == null) ? typeof other === 'number' : false) {
              tmp = this.br(Companion_getInstance_1().wp(other));
            } else {
              if (other instanceof ULong) {
                tmp = this.br(Companion_getInstance_1().rr(other.o1_1));
              } else {
                if (other instanceof UInt) {
                  tmp = this.br(Companion_getInstance_1().tr(other.xl_1));
                } else {
                  if (other instanceof UShort) {
                    tmp = this.br(Companion_getInstance_1().vr(other.mt_1));
                  } else {
                    if (other instanceof UByte) {
                      tmp = this.br(Companion_getInstance_1().xr(other.lt_1));
                    } else {
                      tmp = -1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var comparison = tmp;
    return comparison === 0;
  };
  protoOf(BigInteger).hashCode = function () {
    // Inline function 'kotlin.collections.fold' call
    var this_0 = this.ho_1;
    var accumulator = 0;
    var tmp0_iterator = ULongArray__iterator_impl_cq4d2h(this_0);
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j().o1_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.BigInteger.hashCode.<anonymous>' call
      accumulator = accumulator + ULong__hashCode_impl_6hv2lb(element) | 0;
    }
    return accumulator + this.io_1.hashCode() | 0;
  };
  protoOf(BigInteger).toString = function () {
    return this.er(10);
  };
  protoOf(BigInteger).er = function (base) {
    var tmp;
    if (this.io_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = '-';
    } else {
      tmp = '';
    }
    var sign = tmp;
    return sign + this.fr(base);
  };
  protoOf(BigInteger).fr = function (base) {
    return Companion_getInstance_1().bo_1.nt(this.ho_1, base);
  };
  protoOf(BigInteger).un = function (exactRequired) {
    if (exactRequired ? this.sq(2147483647) > 0 ? true : this.sq(-2147483648) < 0 : false) {
      throw ArithmeticException_init_$Create$('Cannot convert to int and provide exact value');
    }
    // Inline function 'kotlin.ULong.toInt' call
    var this_0 = ULongArray__get_impl_pr71q9(this.ho_1, 0);
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(this_0).g3();
    return imul(tmp$ret$0, this.ep());
  };
  var Sign_POSITIVE_instance;
  var Sign_NEGATIVE_instance;
  var Sign_ZERO_instance;
  var Sign_entriesInitialized;
  function Sign_initEntries() {
    if (Sign_entriesInitialized)
      return Unit_instance;
    Sign_entriesInitialized = true;
    Sign_POSITIVE_instance = new Sign('POSITIVE', 0);
    Sign_NEGATIVE_instance = new Sign('NEGATIVE', 1);
    Sign_ZERO_instance = new Sign('ZERO', 2);
  }
  function Sign(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  protoOf(Sign).at = function () {
    var tmp;
    switch (this.l2_1) {
      case 0:
        tmp = Sign_NEGATIVE_getInstance();
        break;
      case 1:
        tmp = Sign_POSITIVE_getInstance();
        break;
      case 2:
        tmp = Sign_ZERO_getInstance();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  function Sign_POSITIVE_getInstance() {
    Sign_initEntries();
    return Sign_POSITIVE_instance;
  }
  function Sign_NEGATIVE_getInstance() {
    Sign_initEntries();
    return Sign_NEGATIVE_instance;
  }
  function Sign_ZERO_getInstance() {
    Sign_initEntries();
    return Sign_ZERO_instance;
  }
  function toBigInteger(_this__u8e3s4) {
    return Companion_getInstance_1().zm(_this__u8e3s4);
  }
  function times_1(_this__u8e3s4, other) {
    return toBigInteger(_this__u8e3s4).kn(other);
  }
  function get_chosenArithmetic() {
    _init_properties_Configuration_kt__48zwcc();
    return chosenArithmetic;
  }
  var chosenArithmetic;
  var properties_initialized_Configuration_kt_gex7mu;
  function _init_properties_Configuration_kt__48zwcc() {
    if (!properties_initialized_Configuration_kt_gex7mu) {
      properties_initialized_Configuration_kt_gex7mu = true;
      chosenArithmetic = BigInteger63Arithmetic_getInstance();
    }
  }
  var Platform_JVM_instance;
  var Platform_NATIVE_instance;
  var Platform_JS_instance;
  var Platform_entriesInitialized;
  function Platform_initEntries() {
    if (Platform_entriesInitialized)
      return Unit_instance;
    Platform_entriesInitialized = true;
    Platform_JVM_instance = new Platform('JVM', 0);
    Platform_NATIVE_instance = new Platform('NATIVE', 1);
    Platform_JS_instance = new Platform('JS', 2);
  }
  function Platform(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function Platform_JS_getInstance() {
    Platform_initEntries();
    return Platform_JS_instance;
  }
  function Sextuple(a, b, c, d, e, f) {
    this.ot_1 = a;
    this.pt_1 = b;
    this.qt_1 = c;
    this.rt_1 = d;
    this.st_1 = e;
    this.tt_1 = f;
  }
  protoOf(Sextuple).ge = function () {
    return this.ot_1;
  };
  protoOf(Sextuple).he = function () {
    return this.pt_1;
  };
  protoOf(Sextuple).sl = function () {
    return this.qt_1;
  };
  protoOf(Sextuple).ut = function () {
    return this.rt_1;
  };
  protoOf(Sextuple).vt = function () {
    return this.st_1;
  };
  protoOf(Sextuple).wt = function () {
    return this.tt_1;
  };
  protoOf(Sextuple).toString = function () {
    return 'Sextuple(a=' + this.ot_1 + ', b=' + this.pt_1 + ', c=' + this.qt_1 + ', d=' + this.rt_1 + ', e=' + this.st_1 + ', f=' + this.tt_1 + ')';
  };
  protoOf(Sextuple).hashCode = function () {
    var result = this.ot_1 == null ? 0 : hashCode(this.ot_1);
    result = imul(result, 31) + (this.pt_1 == null ? 0 : hashCode(this.pt_1)) | 0;
    result = imul(result, 31) + (this.qt_1 == null ? 0 : hashCode(this.qt_1)) | 0;
    result = imul(result, 31) + (this.rt_1 == null ? 0 : hashCode(this.rt_1)) | 0;
    result = imul(result, 31) + (this.st_1 == null ? 0 : hashCode(this.st_1)) | 0;
    result = imul(result, 31) + (this.tt_1 == null ? 0 : hashCode(this.tt_1)) | 0;
    return result;
  };
  protoOf(Sextuple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Sextuple))
      return false;
    var tmp0_other_with_cast = other instanceof Sextuple ? other : THROW_CCE();
    if (!equals(this.ot_1, tmp0_other_with_cast.ot_1))
      return false;
    if (!equals(this.pt_1, tmp0_other_with_cast.pt_1))
      return false;
    if (!equals(this.qt_1, tmp0_other_with_cast.qt_1))
      return false;
    if (!equals(this.rt_1, tmp0_other_with_cast.rt_1))
      return false;
    if (!equals(this.st_1, tmp0_other_with_cast.st_1))
      return false;
    if (!equals(this.tt_1, tmp0_other_with_cast.tt_1))
      return false;
    return true;
  };
  function Quadruple(a, b, c, d) {
    this.xt_1 = a;
    this.yt_1 = b;
    this.zt_1 = c;
    this.au_1 = d;
  }
  protoOf(Quadruple).ge = function () {
    return this.xt_1;
  };
  protoOf(Quadruple).he = function () {
    return this.yt_1;
  };
  protoOf(Quadruple).sl = function () {
    return this.zt_1;
  };
  protoOf(Quadruple).ut = function () {
    return this.au_1;
  };
  protoOf(Quadruple).toString = function () {
    return 'Quadruple(a=' + this.xt_1 + ', b=' + this.yt_1 + ', c=' + this.zt_1 + ', d=' + this.au_1 + ')';
  };
  protoOf(Quadruple).hashCode = function () {
    var result = this.xt_1 == null ? 0 : hashCode(this.xt_1);
    result = imul(result, 31) + (this.yt_1 == null ? 0 : hashCode(this.yt_1)) | 0;
    result = imul(result, 31) + (this.zt_1 == null ? 0 : hashCode(this.zt_1)) | 0;
    result = imul(result, 31) + (this.au_1 == null ? 0 : hashCode(this.au_1)) | 0;
    return result;
  };
  protoOf(Quadruple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Quadruple))
      return false;
    var tmp0_other_with_cast = other instanceof Quadruple ? other : THROW_CCE();
    if (!equals(this.xt_1, tmp0_other_with_cast.xt_1))
      return false;
    if (!equals(this.yt_1, tmp0_other_with_cast.yt_1))
      return false;
    if (!equals(this.zt_1, tmp0_other_with_cast.zt_1))
      return false;
    if (!equals(this.au_1, tmp0_other_with_cast.au_1))
      return false;
    return true;
  };
  function SignedUIntArray(unsignedValue, sign) {
    this.bu_1 = unsignedValue;
    this.cu_1 = sign;
  }
  protoOf(SignedUIntArray).toString = function () {
    return 'SignedUIntArray(unsignedValue=' + new UIntArray(this.bu_1) + ', sign=' + this.cu_1 + ')';
  };
  protoOf(SignedUIntArray).hashCode = function () {
    var result = UIntArray__hashCode_impl_hr7ost(this.bu_1);
    result = imul(result, 31) + getBooleanHashCode(this.cu_1) | 0;
    return result;
  };
  protoOf(SignedUIntArray).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SignedUIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof SignedUIntArray ? other : THROW_CCE();
    if (!equals(this.bu_1, tmp0_other_with_cast.bu_1))
      return false;
    if (!(this.cu_1 === tmp0_other_with_cast.cu_1))
      return false;
    return true;
  };
  function BigInteger32Arithmetic() {
    BigInteger32Arithmetic_instance = this;
    var tmp = this;
    // Inline function 'kotlin.intArrayOf' call
    tmp.du_1 = new Int32Array([]);
    this.eu_1 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    this.fu_1 = _UInt___init__impl__l7qpdl(-1);
    this.gu_1 = _ULong___init__impl__c78o9k(new Long(0, 1));
    this.hu_1 = _ULong___init__impl__c78o9k(new Long(65535, 0));
    this.iu_1 = _UInt___init__impl__l7qpdl(-1);
    this.ju_1 = 32;
    this.ku_1 = 32;
    this.lu_1 = _UIntArray___init__impl__ghjpc6(0);
    var tmp_0 = this;
    // Inline function 'kotlin.UIntArray' call
    var tmp_1 = 0;
    var tmp_2 = new Int32Array(1);
    while (tmp_1 < 1) {
      var tmp_3 = tmp_1;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.ONE.<anonymous>' call
      var this_0 = _UInt___init__impl__l7qpdl(1);
      tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp_0.mu_1 = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var tmp_4 = this;
    // Inline function 'kotlin.UIntArray' call
    var tmp_5 = 0;
    var tmp_6 = new Int32Array(1);
    while (tmp_5 < 1) {
      var tmp_7 = tmp_5;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.TWO.<anonymous>' call
      var this_1 = _UInt___init__impl__l7qpdl(2);
      tmp_6[tmp_7] = _UInt___get_data__impl__f0vqqw(this_1);
      tmp_5 = tmp_5 + 1 | 0;
    }
    tmp_4.nu_1 = _UIntArray___init__impl__ghjpc6_0(tmp_6);
    var tmp_8 = this;
    // Inline function 'kotlin.UIntArray' call
    var tmp_9 = 0;
    var tmp_10 = new Int32Array(1);
    while (tmp_9 < 1) {
      var tmp_11 = tmp_9;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.TEN.<anonymous>' call
      var this_2 = _UInt___init__impl__l7qpdl(10);
      tmp_10[tmp_11] = _UInt___get_data__impl__f0vqqw(this_2);
      tmp_9 = tmp_9 + 1 | 0;
    }
    tmp_8.ou_1 = _UIntArray___init__impl__ghjpc6_0(tmp_10);
    this.pu_1 = 60;
    this.qu_1 = 15000;
    this.ru_1 = new SignedUIntArray(this.nu_1, true);
  }
  protoOf(BigInteger32Arithmetic).su = function (value) {
    var x = value;
    var y;
    var n = this.ju_1;
    // Inline function 'kotlin.UInt.shr' call
    var this_0 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_0) >>> 16 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 16 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_1 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_1) >>> 8 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 8 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_2 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_2) >>> 4 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 4 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_3 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_3) >>> 2 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 2 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_4 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_4) >>> 1 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      return n - 2 | 0;
    }
    var tmp = n;
    // Inline function 'kotlin.UInt.toInt' call
    var this_5 = x;
    return tmp - _UInt___get_data__impl__f0vqqw(this_5) | 0;
  };
  protoOf(BigInteger32Arithmetic).tu = function (value) {
    if (UIntArray__isEmpty_impl_vd8j4n(value)) {
      return 0;
    }
    var mostSignificant = UIntArray__get_impl_gp5kza(value, _UIntArray___get_size__impl__r6l8ci(value) - 1 | 0);
    return this.uu(mostSignificant) + imul(_UIntArray___get_size__impl__r6l8ci(value) - 1 | 0, this.ju_1) | 0;
  };
  protoOf(BigInteger32Arithmetic).uu = function (value) {
    return this.ju_1 - this.su(value) | 0;
  };
  protoOf(BigInteger32Arithmetic).vu = function (bigInteger) {
    // Inline function 'kotlin.collections.indexOfLast' call
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var this_0 = _UIntArray___get_storage__impl__92a0v0(bigInteger);
      var inductionVariable = this_0.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.removeLeadingZeros.<anonymous>' call
          // Inline function 'kotlin.toUInt' call
          var this_1 = this_0[index];
          if (!(_UInt___init__impl__l7qpdl(this_1) === _UInt___init__impl__l7qpdl(0))) {
            tmp$ret$3 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = -1;
    }
    var firstEmpty = tmp$ret$3 + 1 | 0;
    if (firstEmpty === -1 ? true : firstEmpty === 0) {
      return this.lu_1;
    }
    // Inline function 'kotlin.collections.copyOfRange' call
    return _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(bigInteger), 0, firstEmpty));
  };
  protoOf(BigInteger32Arithmetic).wu = function (bigInteger) {
    var lastNonEmptyIndex = _UIntArray___get_size__impl__r6l8ci(bigInteger) - 1 | 0;
    if (lastNonEmptyIndex <= 0) {
      return 0;
    }
    var element = UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex);
    while (element === _UInt___init__impl__l7qpdl(0) ? lastNonEmptyIndex > 0 : false) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
      element = UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex);
    }
    if (UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex) === _UInt___init__impl__l7qpdl(0)) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
    }
    return (_UIntArray___get_size__impl__r6l8ci(bigInteger) - lastNonEmptyIndex | 0) - 1 | 0;
  };
  protoOf(BigInteger32Arithmetic).xu = function (operand, places) {
    if (UIntArray__isEmpty_impl_vd8j4n(operand) ? true : places === 0) {
      return operand;
    }
    var originalSize = _UIntArray___get_size__impl__r6l8ci(operand);
    var leadingZeros = this.su(UIntArray__get_impl_gp5kza(operand, _UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0));
    var shiftWords = places / this.ju_1 | 0;
    var shiftBits = places % this.ju_1 | 0;
    var tmp;
    if (shiftBits > leadingZeros) {
      tmp = shiftWords + 1 | 0;
    } else {
      tmp = shiftWords;
    }
    var wordsNeeded = tmp;
    if (shiftBits === 0) {
      // Inline function 'kotlin.UIntArray' call
      var tmp_0 = 0;
      var tmp_1 = _UIntArray___get_size__impl__r6l8ci(operand) + wordsNeeded | 0;
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        // Inline function 'kotlin.UInt.toInt' call
        // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftLeft.<anonymous>' call
        var this_0 = (0 <= tmp_3 ? tmp_3 < shiftWords : false) ? _UInt___init__impl__l7qpdl(0) : UIntArray__get_impl_gp5kza(operand, tmp_3 - shiftWords | 0);
        tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      return _UIntArray___init__impl__ghjpc6_0(tmp_2);
    }
    // Inline function 'kotlin.UIntArray' call
    var tmp_4 = 0;
    var tmp_5 = _UIntArray___get_size__impl__r6l8ci(operand) + wordsNeeded | 0;
    var tmp_6 = new Int32Array(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftLeft.<anonymous>' call
      var tmp_8;
      if (0 <= tmp_7 ? tmp_7 < shiftWords : false) {
        tmp_8 = _UInt___init__impl__l7qpdl(0);
      } else {
        if (tmp_7 === shiftWords) {
          // Inline function 'kotlin.UInt.shl' call
          var this_1 = UIntArray__get_impl_gp5kza(operand, tmp_7 - shiftWords | 0);
          tmp_8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_1) << shiftBits);
        } else {
          var containsLower = shiftWords + 1 | 0;
          if (tmp_7 < (originalSize + shiftWords | 0) ? containsLower <= tmp_7 : false) {
            // Inline function 'kotlin.UInt.or' call
            // Inline function 'kotlin.UInt.shl' call
            var this_2 = UIntArray__get_impl_gp5kza(operand, tmp_7 - shiftWords | 0);
            var this_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_2) << shiftBits);
            // Inline function 'kotlin.UInt.shr' call
            var this_4 = UIntArray__get_impl_gp5kza(operand, (tmp_7 - shiftWords | 0) - 1 | 0);
            var bitCount = BigInteger32Arithmetic_getInstance().ju_1 - shiftBits | 0;
            var other = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_4) >>> bitCount | 0);
            tmp_8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_3) | _UInt___get_data__impl__f0vqqw(other));
          } else {
            if (tmp_7 === ((originalSize + wordsNeeded | 0) - 1 | 0)) {
              // Inline function 'kotlin.UInt.shr' call
              var this_5 = UIntArray__get_impl_gp5kza(operand, tmp_7 - wordsNeeded | 0);
              var bitCount_0 = BigInteger32Arithmetic_getInstance().ju_1 - shiftBits | 0;
              tmp_8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_5) >>> bitCount_0 | 0);
            } else {
              throw RuntimeException_init_$Create$('Invalid case ' + tmp_7);
            }
          }
        }
      }
      var this_6 = tmp_8;
      tmp_6[tmp_7] = _UInt___get_data__impl__f0vqqw(this_6);
      tmp_4 = tmp_4 + 1 | 0;
    }
    return _UIntArray___init__impl__ghjpc6_0(tmp_6);
  };
  protoOf(BigInteger32Arithmetic).yu = function (operand, places) {
    if (UIntArray__isEmpty_impl_vd8j4n(operand) ? true : places === 0) {
      return operand;
    }
    var shiftBits = places % this.ju_1 | 0;
    var wordsToDiscard = places / this.ju_1 | 0;
    if (wordsToDiscard >= _UIntArray___get_size__impl__r6l8ci(operand)) {
      return this.lu_1;
    }
    if (shiftBits === 0) {
      // Inline function 'kotlin.collections.copyOfRange' call
      var toIndex = _UIntArray___get_size__impl__r6l8ci(operand);
      return _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(operand), wordsToDiscard, toIndex));
    }
    if (_UIntArray___get_size__impl__r6l8ci(operand) > 1 ? (_UIntArray___get_size__impl__r6l8ci(operand) - wordsToDiscard | 0) === 1 : false) {
      // Inline function 'kotlin.uintArrayOf' call
      // Inline function 'kotlin.UInt.shr' call
      var this_0 = UIntArray__get_impl_gp5kza(operand, _UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0);
      var tmp$ret$1 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_0) >>> shiftBits | 0);
      return _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$1]));
    }
    // Inline function 'kotlin.UIntArray' call
    var tmp = 0;
    var tmp_0 = _UIntArray___get_size__impl__r6l8ci(operand) - wordsToDiscard | 0;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftRight.<anonymous>' call
      var tmp_3;
      if (0 <= tmp_2 ? tmp_2 < ((_UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0) - wordsToDiscard | 0) : false) {
        // Inline function 'kotlin.UInt.or' call
        // Inline function 'kotlin.UInt.shr' call
        var this_1 = UIntArray__get_impl_gp5kza(operand, tmp_2 + wordsToDiscard | 0);
        var this_2 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_1) >>> shiftBits | 0);
        // Inline function 'kotlin.UInt.shl' call
        var this_3 = UIntArray__get_impl_gp5kza(operand, (tmp_2 + wordsToDiscard | 0) + 1 | 0);
        var bitCount = BigInteger32Arithmetic_getInstance().ju_1 - shiftBits | 0;
        var other = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_3) << bitCount);
        tmp_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_2) | _UInt___get_data__impl__f0vqqw(other));
      } else if (tmp_2 === ((_UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0) - wordsToDiscard | 0)) {
        // Inline function 'kotlin.UInt.shr' call
        var this_4 = UIntArray__get_impl_gp5kza(operand, tmp_2 + wordsToDiscard | 0);
        tmp_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_4) >>> shiftBits | 0);
      } else {
        throw RuntimeException_init_$Create$('Invalid case ' + tmp_2);
      }
      var this_5 = tmp_3;
      tmp_1[tmp_2] = _UInt___get_data__impl__f0vqqw(this_5);
      tmp = tmp + 1 | 0;
    }
    var result = _UIntArray___init__impl__ghjpc6_0(tmp_1);
    return this.vu(result);
  };
  protoOf(BigInteger32Arithmetic).zu = function (dividend, divisor) {
    var divisorSize = _UIntArray___get_size__impl__r6l8ci(divisor);
    var normalizationShift = this.su(UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0));
    var divisorNormalized = this.av(divisor, normalizationShift);
    var dividendNormalized = this.av(dividend, normalizationShift);
    return new Triple(new UIntArray(dividendNormalized), new UIntArray(divisorNormalized), normalizationShift);
  };
  protoOf(BigInteger32Arithmetic).bv = function (remainderNormalized, normalizationShift) {
    var remainder = this.cv(remainderNormalized, normalizationShift);
    return remainder;
  };
  protoOf(BigInteger32Arithmetic).dv = function (first, second) {
    var firstStart = _UIntArray___get_size__impl__r6l8ci(first) - this.wu(first) | 0;
    var secondStart = _UIntArray___get_size__impl__r6l8ci(second) - this.wu(second) | 0;
    if (firstStart > secondStart) {
      return 1;
    }
    if (secondStart > firstStart) {
      return -1;
    }
    var counter = firstStart - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    $l$loop_0: while (counter >= 0) {
      // Inline function 'kotlin.UInt.compareTo' call
      var this_0 = UIntArray__get_impl_gp5kza(first, counter);
      var other = UIntArray__get_impl_gp5kza(second, counter);
      if (uintCompare(_UInt___get_data__impl__f0vqqw(this_0), _UInt___get_data__impl__f0vqqw(other)) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break $l$loop_0;
      }
      // Inline function 'kotlin.UInt.compareTo' call
      var this_1 = UIntArray__get_impl_gp5kza(first, counter);
      var other_0 = UIntArray__get_impl_gp5kza(second, counter);
      if (uintCompare(_UInt___get_data__impl__f0vqqw(this_1), _UInt___get_data__impl__f0vqqw(other_0)) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break $l$loop_0;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    } else {
      return -1;
    }
  };
  protoOf(BigInteger32Arithmetic).ev = function (first, second) {
    if (_UIntArray___get_size__impl__r6l8ci(first) === 1 ? UIntArray__get_impl_gp5kza(first, 0) === _UInt___init__impl__l7qpdl(0) : false)
      return second;
    if (_UIntArray___get_size__impl__r6l8ci(second) === 1 ? UIntArray__get_impl_gp5kza(second, 0) === _UInt___init__impl__l7qpdl(0) : false)
      return first;
    var tmp;
    if (_UIntArray___get_size__impl__r6l8ci(first) > _UIntArray___get_size__impl__r6l8ci(second)) {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(first), _UIntArray___get_size__impl__r6l8ci(second), new UIntArray(first), new UIntArray(second));
    } else {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(second), _UIntArray___get_size__impl__r6l8ci(first), new UIntArray(second), new UIntArray(first));
    }
    var tmp0_container = tmp;
    var maxLength = tmp0_container.ge();
    var minLength = tmp0_container.he();
    var largerData = tmp0_container.sl().cm_1;
    var smallerData = tmp0_container.ut().cm_1;
    // Inline function 'kotlin.UIntArray' call
    var tmp_0 = 0;
    var tmp_1 = maxLength + 1 | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.add.<anonymous>' call
      var this_0 = _UInt___init__impl__l7qpdl(0);
      tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var i = 0;
    var sum = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < minLength) {
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.ULong.plus' call
      var this_1 = sum;
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_2 = UIntArray__get_impl_gp5kza(largerData, i);
      var other = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_2)).d3(new Long(-1, 0)));
      var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).r2(_ULong___get_data__impl__fggpzb(other)));
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_4 = UIntArray__get_impl_gp5kza(smallerData, i);
      var other_0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_4)).d3(new Long(-1, 0)));
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).r2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_4 = i;
      // Inline function 'kotlin.ULong.toUInt' call
      // Inline function 'kotlin.ULong.and' call
      var this_5 = sum;
      var other_1 = this.eu_1;
      var this_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).d3(_ULong___get_data__impl__fggpzb(other_1)));
      // Inline function 'kotlin.toUInt' call
      var this_7 = _ULong___get_data__impl__fggpzb(this_6);
      var tmp$ret$12 = _UInt___init__impl__l7qpdl(this_7.g3());
      UIntArray__set_impl_7f2zu2(result, tmp_4, tmp$ret$12);
      // Inline function 'kotlin.ULong.shr' call
      var this_8 = sum;
      var bitCount = this.ju_1;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_8).c3(bitCount));
      i = i + 1 | 0;
    }
    while (true) {
      if (equals(sum, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
        while (i < maxLength) {
          UIntArray__set_impl_7f2zu2(result, i, UIntArray__get_impl_gp5kza(largerData, i));
          i = i + 1 | 0;
        }
        var tmp_5;
        if (UIntArray__get_impl_gp5kza(result, _UIntArray___get_size__impl__r6l8ci(result) - 1 | 0) === _UInt___init__impl__l7qpdl(0)) {
          // Inline function 'kotlin.collections.copyOfRange' call
          var toIndex = _UIntArray___get_size__impl__r6l8ci(result) - 1 | 0;
          tmp_5 = _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(result), 0, toIndex));
        } else {
          tmp_5 = result;
        }
        return tmp_5;
      }
      if (i === maxLength) {
        // Inline function 'kotlin.ULong.toUInt' call
        var this_9 = sum;
        // Inline function 'kotlin.toUInt' call
        var this_10 = _ULong___get_data__impl__fggpzb(this_9);
        var tmp$ret$16 = _UInt___init__impl__l7qpdl(this_10.g3());
        UIntArray__set_impl_7f2zu2(result, maxLength, tmp$ret$16);
        return result;
      }
      // Inline function 'kotlin.ULong.plus' call
      var this_11 = sum;
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_12 = UIntArray__get_impl_gp5kza(largerData, i);
      var other_2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_12)).d3(new Long(-1, 0)));
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_11).r2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_6 = i;
      // Inline function 'kotlin.ULong.toUInt' call
      // Inline function 'kotlin.ULong.and' call
      var this_13 = sum;
      var other_3 = this.eu_1;
      var this_14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_13).d3(_ULong___get_data__impl__fggpzb(other_3)));
      // Inline function 'kotlin.toUInt' call
      var this_15 = _ULong___get_data__impl__fggpzb(this_14);
      var tmp$ret$22 = _UInt___init__impl__l7qpdl(this_15.g3());
      UIntArray__set_impl_7f2zu2(result, tmp_6, tmp$ret$22);
      // Inline function 'kotlin.ULong.shr' call
      var this_16 = sum;
      var bitCount_0 = this.ju_1;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_16).c3(bitCount_0));
      i = i + 1 | 0;
    }
  };
  protoOf(BigInteger32Arithmetic).fv = function (first, second) {
    var firstWithoutLeadingZeroes = this.vu(first);
    var secondWithoutLeadingZeroes = this.vu(second);
    var firstIsLarger = this.dv(firstWithoutLeadingZeroes, secondWithoutLeadingZeroes) === 1;
    var tmp;
    if (firstIsLarger) {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(firstWithoutLeadingZeroes), _UIntArray___get_size__impl__r6l8ci(secondWithoutLeadingZeroes), new UIntArray(firstWithoutLeadingZeroes), new UIntArray(secondWithoutLeadingZeroes));
    } else {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(secondWithoutLeadingZeroes), _UIntArray___get_size__impl__r6l8ci(firstWithoutLeadingZeroes), new UIntArray(secondWithoutLeadingZeroes), new UIntArray(firstWithoutLeadingZeroes));
    }
    var tmp0_container = tmp;
    var largerLength = tmp0_container.ge();
    var smallerLength = tmp0_container.he();
    var largerData = tmp0_container.sl().cm_1;
    var smallerData = tmp0_container.ut().cm_1;
    // Inline function 'kotlin.UIntArray' call
    var tmp_0 = 0;
    var tmp_1 = largerLength + 1 | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      // Inline function 'kotlin.UInt.toInt' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
      var this_0 = _UInt___init__impl__l7qpdl(0);
      tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var i = 0;
    var diff = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerLength) {
      if (i >= _UIntArray___get_size__impl__r6l8ci(largerData)) {
        println('Breakpoint');
      }
      if (i >= _UIntArray___get_size__impl__r6l8ci(smallerData)) {
        println('Breakpoint');
      }
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_1 = UIntArray__get_impl_gp5kza(largerData, i);
      var this_2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_1)).d3(new Long(-1, 0)));
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_3 = UIntArray__get_impl_gp5kza(smallerData, i);
      var other = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_3)).d3(new Long(-1, 0)));
      var this_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).s2(_ULong___get_data__impl__fggpzb(other)));
      var other_0 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).s2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_4 = i;
      // Inline function 'kotlin.ULong.toUInt' call
      var this_5 = diff;
      // Inline function 'kotlin.toUInt' call
      var this_6 = _ULong___get_data__impl__fggpzb(this_5);
      var tmp$ret$10 = _UInt___init__impl__l7qpdl(this_6.g3());
      UIntArray__set_impl_7f2zu2(result, tmp_4, tmp$ret$10);
      // Inline function 'kotlin.ULong.shr' call
      // Inline function 'kotlin.ULong.and' call
      var this_7 = diff;
      var other_1 = this.gu_1;
      var this_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).d3(_ULong___get_data__impl__fggpzb(other_1)));
      var bitCount = this.ku_1;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_8).c3(bitCount));
      i = i + 1 | 0;
    }
    while (!equals(diff, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      // Inline function 'kotlin.UInt.minus' call
      var this_9 = UIntArray__get_impl_gp5kza(largerData, i);
      var other_2 = diff;
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_10 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_9)).d3(new Long(-1, 0)));
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_10).s2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_5 = i;
      // Inline function 'kotlin.UInt.and' call
      // Inline function 'kotlin.ULong.toUInt' call
      var this_11 = diff;
      // Inline function 'kotlin.toUInt' call
      var this_12 = _ULong___get_data__impl__fggpzb(this_11);
      var this_13 = _UInt___init__impl__l7qpdl(this_12.g3());
      var other_3 = this.fu_1;
      var tmp$ret$18 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_13) & _UInt___get_data__impl__f0vqqw(other_3));
      UIntArray__set_impl_7f2zu2(result, tmp_5, tmp$ret$18);
      // Inline function 'kotlin.ULong.shr' call
      // Inline function 'kotlin.ULong.and' call
      var this_14 = diff;
      var other_4 = this.gu_1;
      var this_15 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_14).d3(_ULong___get_data__impl__fggpzb(other_4)));
      var bitCount_0 = this.ku_1;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_15).c3(bitCount_0));
      i = i + 1 | 0;
    }
    while (i < largerLength) {
      UIntArray__set_impl_7f2zu2(result, i, UIntArray__get_impl_gp5kza(largerData, i));
      i = i + 1 | 0;
    }
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var tmp0_iterator = UIntArray__iterator_impl_tkdv7k(result);
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j().xl_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
      if (element === _UInt___init__impl__l7qpdl(0)) {
        destination.e(new UInt(element));
      }
    }
    if (destination.l()) {
      return this.lu_1;
    }
    // Inline function 'kotlin.collections.indexOfLast' call
    var tmp$ret$27;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var this_16 = _UIntArray___get_storage__impl__92a0v0(result);
      var inductionVariable = this_16.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
          // Inline function 'kotlin.toUInt' call
          var this_17 = this_16[index];
          if (!(_UInt___init__impl__l7qpdl(this_17) === _UInt___init__impl__l7qpdl(0))) {
            tmp$ret$27 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$27 = -1;
    }
    var firstEmpty = tmp$ret$27 + 1 | 0;
    // Inline function 'kotlin.collections.copyOfRange' call
    return _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(result), 0, firstEmpty));
  };
  protoOf(BigInteger32Arithmetic).gv = function (first, second) {
    var result = _UIntArray___init__impl__ghjpc6(_UIntArray___get_size__impl__r6l8ci(first) + 1 | 0);
    var product;
    var sum;
    var inductionVariable = 0;
    var last = _UIntArray___get_size__impl__r6l8ci(first);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.ULong.times' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_0 = UIntArray__get_impl_gp5kza(first, i);
        // Inline function 'kotlin.ULong.times' call
        var this_1 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_0)).d3(new Long(-1, 0)));
        // Inline function 'kotlin.UInt.toULong' call
        var other = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(second)).d3(new Long(-1, 0)));
        product = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).t2(_ULong___get_data__impl__fggpzb(other)));
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_2 = UIntArray__get_impl_gp5kza(result, i);
        var this_3 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_2)).d3(new Long(-1, 0)));
        // Inline function 'kotlin.ULong.toUInt' call
        // Inline function 'kotlin.ULong.and' call
        var other_0 = this.eu_1;
        var this_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(product).d3(_ULong___get_data__impl__fggpzb(other_0)));
        // Inline function 'kotlin.toUInt' call
        var this_5 = _ULong___get_data__impl__fggpzb(this_4);
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_6 = _UInt___init__impl__l7qpdl(this_5.g3());
        var other_1 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_6)).d3(new Long(-1, 0)));
        sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).r2(_ULong___get_data__impl__fggpzb(other_1)));
        // Inline function 'kotlin.ULong.toUInt' call
        // Inline function 'kotlin.ULong.and' call
        var this_7 = sum;
        var other_2 = this.eu_1;
        var this_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).d3(_ULong___get_data__impl__fggpzb(other_2)));
        // Inline function 'kotlin.toUInt' call
        var this_9 = _ULong___get_data__impl__fggpzb(this_8);
        var tmp$ret$13 = _UInt___init__impl__l7qpdl(this_9.g3());
        UIntArray__set_impl_7f2zu2(result, i, tmp$ret$13);
        // Inline function 'kotlin.ULong.shr' call
        var this_10 = sum;
        var bitCount = this.ju_1;
        sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_10).c3(bitCount));
        var tmp = i + 1 | 0;
        // Inline function 'kotlin.UInt.plus' call
        // Inline function 'kotlin.ULong.toUInt' call
        // Inline function 'kotlin.ULong.shr' call
        var bitCount_0 = this.ju_1;
        var this_11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(product).c3(bitCount_0));
        // Inline function 'kotlin.toUInt' call
        var this_12 = _ULong___get_data__impl__fggpzb(this_11);
        var this_13 = _UInt___init__impl__l7qpdl(this_12.g3());
        // Inline function 'kotlin.ULong.toUInt' call
        var this_14 = sum;
        // Inline function 'kotlin.toUInt' call
        var this_15 = _ULong___get_data__impl__fggpzb(this_14);
        var other_3 = _UInt___init__impl__l7qpdl(this_15.g3());
        var tmp$ret$20 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_13) + _UInt___get_data__impl__f0vqqw(other_3) | 0);
        UIntArray__set_impl_7f2zu2(result, tmp, tmp$ret$20);
      }
       while (inductionVariable < last);
    return this.vu(result);
  };
  protoOf(BigInteger32Arithmetic).hv = function (first, second) {
    return this.iv(first, second);
  };
  protoOf(BigInteger32Arithmetic).iv = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.jv(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new UIntArray(this.lu_1), new UIntArray(unnormalizedDividend));
    }
    if (_UIntArray___get_size__impl__r6l8ci(unnormalizedDivisor) === 1 ? _UIntArray___get_size__impl__r6l8ci(unnormalizedDividend) === 1 : false) {
      // Inline function 'kotlin.uintArrayOf' call
      // Inline function 'kotlin.UInt.div' call
      var this_0 = UIntArray__get_impl_gp5kza(unnormalizedDividend, 0);
      var other = UIntArray__get_impl_gp5kza(unnormalizedDivisor, 0);
      var tmp$ret$0 = uintDivide(this_0, other);
      var tmp$ret$1 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$0]));
      var tmp = this.vu(tmp$ret$1);
      // Inline function 'kotlin.uintArrayOf' call
      // Inline function 'kotlin.UInt.rem' call
      var this_1 = UIntArray__get_impl_gp5kza(unnormalizedDividend, 0);
      var other_0 = UIntArray__get_impl_gp5kza(unnormalizedDivisor, 0);
      var tmp$ret$2 = uintRemainder(this_1, other_0);
      var tmp$ret$3 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$2]));
      return new Pair(new UIntArray(tmp), new UIntArray(this.vu(tmp$ret$3)));
    }
    var bitPrecision = this.tu(unnormalizedDividend) - this.tu(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$4 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([_UInt___init__impl__l7qpdl(1)]));
      return new Pair(new UIntArray(tmp$ret$4), new UIntArray(this.kv(unnormalizedDividend, unnormalizedDivisor)));
    }
    var tmp0_container = this.zu(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp0_container.ge().cm_1;
    var divisor = tmp0_container.he().cm_1;
    var normalizationShift = tmp0_container.sl();
    var dividendSize = _UIntArray___get_size__impl__r6l8ci(dividend);
    var divisorSize = _UIntArray___get_size__impl__r6l8ci(divisor);
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = _UIntArray___init__impl__ghjpc6(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.av(divisor, imul(wordPrecision, this.ju_1));
    if (this.jv(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = _UIntArray___init__impl__ghjpc6(wordPrecision + 1 | 0);
      UIntArray__set_impl_7f2zu2(quotient, wordPrecision, _UInt___init__impl__l7qpdl(1));
      dividend = this.kv(dividend, divisorTimesBaseToPowerOfM);
    }
    var inductionVariable = wordPrecision - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0;
        if ((divisorSize + j | 0) < _UIntArray___get_size__impl__r6l8ci(dividend)) {
          // Inline function 'kotlin.ULong.div' call
          // Inline function 'kotlin.ULong.plus' call
          // Inline function 'kotlin.ULong.shl' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_2 = UIntArray__get_impl_gp5kza(dividend, divisorSize + j | 0);
          var this_3 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_2)).d3(new Long(-1, 0)));
          var bitCount = this.ju_1;
          var this_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).a3(bitCount));
          // Inline function 'kotlin.ULong.plus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_5 = UIntArray__get_impl_gp5kza(dividend, (divisorSize + j | 0) - 1 | 0);
          var other_1 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_5)).d3(new Long(-1, 0)));
          var this_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).r2(_ULong___get_data__impl__fggpzb(other_1)));
          // Inline function 'kotlin.ULong.div' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_7 = UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0);
          var other_2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_7)).d3(new Long(-1, 0)));
          tmp_0 = ulongDivide(this_6, other_2);
        } else {
          var tmp_1;
          if ((divisorSize + j | 0) === _UIntArray___get_size__impl__r6l8ci(dividend)) {
            // Inline function 'kotlin.UInt.toULong' call
            // Inline function 'kotlin.UInt.div' call
            var this_8 = UIntArray__get_impl_gp5kza(dividend, (divisorSize + j | 0) - 1 | 0);
            var other_3 = UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0);
            var this_9 = uintDivide(this_8, other_3);
            tmp_1 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_9)).d3(new Long(-1, 0)));
          } else {
            tmp_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
          }
          tmp_0 = tmp_1;
        }
        qjhat = tmp_0;
        var tmp_2 = quotient;
        var tmp_3;
        // Inline function 'kotlin.ULong.compareTo' call
        // Inline function 'kotlin.UInt.minus' call
        var this_10 = this.iu_1;
        var other_4 = _ULong___init__impl__c78o9k(new Long(1, 0));
        // Inline function 'kotlin.ULong.minus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_11 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_10)).d3(new Long(-1, 0)));
        var other_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_11).s2(_ULong___get_data__impl__fggpzb(other_4)));
        if (ulongCompare(_ULong___get_data__impl__fggpzb(qjhat), _ULong___get_data__impl__fggpzb(other_5)) < 0) {
          // Inline function 'kotlin.ULong.toUInt' call
          // Inline function 'kotlin.toUInt' call
          var this_12 = _ULong___get_data__impl__fggpzb(qjhat);
          tmp_3 = _UInt___init__impl__l7qpdl(this_12.g3());
        } else {
          // Inline function 'kotlin.UInt.minus' call
          var this_13 = this.iu_1;
          var other_6 = _UInt___init__impl__l7qpdl(1);
          tmp_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_13) - _UInt___get_data__impl__f0vqqw(other_6) | 0);
        }
        UIntArray__set_impl_7f2zu2(tmp_2, j, tmp_3);
        reconstructedQuotient = this.av(this.lv(divisor, UIntArray__get_impl_gp5kza(quotient, j)), imul(j, this.ju_1));
        while (this.jv(reconstructedQuotient, dividend) > 0) {
          var tmp_4 = quotient;
          // Inline function 'kotlin.UInt.minus' call
          var this_14 = UIntArray__get_impl_gp5kza(quotient, j);
          var other_7 = _UInt___init__impl__l7qpdl(1);
          var tmp$ret$22 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_14) - _UInt___get_data__impl__f0vqqw(other_7) | 0);
          UIntArray__set_impl_7f2zu2(tmp_4, j, tmp$ret$22);
          reconstructedQuotient = this.av(this.lv(divisor, UIntArray__get_impl_gp5kza(quotient, j)), imul(j, this.ju_1));
        }
        dividend = this.kv(dividend, reconstructedQuotient);
      }
       while (0 <= inductionVariable);
    while (this.jv(dividend, divisor) >= 0) {
      quotient = this.mv(quotient, _UInt___init__impl__l7qpdl(1));
      dividend = this.kv(dividend, divisor);
    }
    var denormRemainder = this.bv(dividend, normalizationShift);
    return new Pair(new UIntArray(this.vu(quotient)), new UIntArray(denormRemainder));
  };
  protoOf(BigInteger32Arithmetic).av = function (_this__u8e3s4, places) {
    return this.xu(_this__u8e3s4, places);
  };
  protoOf(BigInteger32Arithmetic).cv = function (_this__u8e3s4, places) {
    return this.yu(_this__u8e3s4, places);
  };
  protoOf(BigInteger32Arithmetic).kv = function (_this__u8e3s4, other) {
    return this.fv(_this__u8e3s4, other);
  };
  protoOf(BigInteger32Arithmetic).mv = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.uintArrayOf' call
    var tmp$ret$0 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([other]));
    return this.ev(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger32Arithmetic).lv = function (_this__u8e3s4, other) {
    return this.gv(_this__u8e3s4, other);
  };
  protoOf(BigInteger32Arithmetic).jv = function (_this__u8e3s4, other) {
    return this.dv(_this__u8e3s4, other);
  };
  var BigInteger32Arithmetic_instance;
  function BigInteger32Arithmetic_getInstance() {
    if (BigInteger32Arithmetic_instance == null)
      new BigInteger32Arithmetic();
    return BigInteger32Arithmetic_instance;
  }
  function multiplyWithCorrectedSize($this, first, second, firstCorrectedSize, secondCorrectedSize) {
    if (isZero(first, $this) ? true : isZero(second, $this)) {
      return $this.cs_1;
    }
    if ((firstCorrectedSize >= 120 ? true : secondCorrectedSize >= 120) ? firstCorrectedSize <= 15000 ? true : secondCorrectedSize < 15000 : false) {
      return karatsubaMultiplyWithCorrectedSizes($this, first, second, firstCorrectedSize, secondCorrectedSize);
    }
    if (firstCorrectedSize >= 15000 ? secondCorrectedSize >= 15000 : false) {
      return $this.nv(first, second);
    }
    return basecaseMultiplyWithCorrectedSize($this, first, second, firstCorrectedSize, secondCorrectedSize);
  }
  function basecaseMultiplyWithCorrectedSize($this, first, second, firstCorrectedSizeStart, secondCorrectedSizeStart) {
    var resultArray = $this.cs_1;
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = ULongArray__iterator_impl_cq4d2h(second);
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j().o1_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.basecaseMultiplyWithCorrectedSize.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      if (tmp1 <= secondCorrectedSizeStart) {
        resultArray = BigInteger63Arithmetic_getInstance().qv(resultArray, BigInteger63Arithmetic_getInstance().pv(BigInteger63Arithmetic_getInstance().ov(first, item), imul(tmp1, BigInteger63Arithmetic_getInstance().hs_1)));
      }
    }
    return resultArray;
  }
  function karatsubaMultiplyWithCorrectedSizes($this, firstUnsigned, secondUnsigned, firstCorrectedSize, secondCorrectedSize) {
    var first = new SignedULongArray(firstUnsigned, true);
    var second = new SignedULongArray(secondUnsigned, true);
    // Inline function 'kotlin.math.max' call
    var halfLength = (Math.max(firstCorrectedSize, secondCorrectedSize) + 1 | 0) / 2 | 0;
    var mask = $this.rv($this.pv($this.ds_1, imul(halfLength, $this.is_1)), _ULong___init__impl__c78o9k(new Long(1, 0)));
    var firstLower = $this.sv(first, mask);
    var firstHigher = $this.tv(first, imul(halfLength, $this.is_1));
    var secondLower = $this.sv(second, mask);
    var secondHigher = $this.tv(second, imul(halfLength, $this.is_1));
    var higherProduct = $this.uv(firstHigher, secondHigher);
    var lowerProduct = $this.uv(firstLower, secondLower);
    var middleProduct = $this.uv($this.vv(firstHigher, firstLower), $this.vv(secondHigher, secondLower));
    var result = $this.vv($this.vv($this.wv(higherProduct, imul(imul(2, $this.is_1), halfLength)), $this.wv($this.xv($this.xv(middleProduct, higherProduct), lowerProduct), imul($this.is_1, halfLength))), lowerProduct);
    return result.yv_1;
  }
  function isZero(_this__u8e3s4, $this) {
    if (equals(_this__u8e3s4, $this.cs_1))
      return true;
    if (_ULongArray___get_size__impl__ju6dtr(_this__u8e3s4) === 1 ? equals(ULongArray__get_impl_pr71q9(_this__u8e3s4, 0), _ULong___init__impl__c78o9k(new Long(0, 0))) : false)
      return true;
    if ((_ULongArray___get_size__impl__ju6dtr(_this__u8e3s4) - $this.aw(_this__u8e3s4) | 0) === 0)
      return true;
    return false;
  }
  function SignedULongArray(unsignedValue, sign) {
    this.yv_1 = unsignedValue;
    this.zv_1 = sign;
  }
  protoOf(SignedULongArray).bw = function (unsignedValue, sign) {
    return new SignedULongArray(unsignedValue, sign);
  };
  protoOf(SignedULongArray).cw = function (unsignedValue, sign, $super) {
    unsignedValue = unsignedValue === VOID ? this.yv_1 : unsignedValue;
    sign = sign === VOID ? this.zv_1 : sign;
    return $super === VOID ? this.bw(unsignedValue, sign) : $super.bw.call(this, new ULongArray(unsignedValue), sign);
  };
  protoOf(SignedULongArray).toString = function () {
    return 'SignedULongArray(unsignedValue=' + new ULongArray(this.yv_1) + ', sign=' + this.zv_1 + ')';
  };
  protoOf(SignedULongArray).hashCode = function () {
    var result = ULongArray__hashCode_impl_aze4wa(this.yv_1);
    result = imul(result, 31) + getBooleanHashCode(this.zv_1) | 0;
    return result;
  };
  protoOf(SignedULongArray).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SignedULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof SignedULongArray ? other : THROW_CCE();
    if (!equals(this.yv_1, tmp0_other_with_cast.yv_1))
      return false;
    if (!(this.zv_1 === tmp0_other_with_cast.zv_1))
      return false;
    return true;
  };
  function signedAdd($this, first, second) {
    var tmp;
    if (!!(first.zv_1 ^ second.zv_1)) {
      var tmp_0;
      if ($this.ew(first.yv_1, second.yv_1) > 0) {
        tmp_0 = new SignedULongArray($this.dw(first.yv_1, second.yv_1), first.zv_1);
      } else {
        tmp_0 = new SignedULongArray($this.dw(second.yv_1, first.yv_1), second.zv_1);
      }
      tmp = tmp_0;
    } else {
      tmp = new SignedULongArray($this.qv(first.yv_1, second.yv_1), first.zv_1);
    }
    return tmp;
  }
  function signedSubtract($this, first, second) {
    return signedAdd($this, first, second.cw(VOID, !second.zv_1));
  }
  function signedMultiply($this, first, second) {
    return new SignedULongArray($this.fw(first.yv_1, second.yv_1), !!!(first.zv_1 ^ second.zv_1));
  }
  function signedDivide($this, first, second) {
    return new SignedULongArray($this.gw(first.yv_1, second.yv_1), !!!(first.zv_1 ^ second.zv_1));
  }
  function BigInteger63Arithmetic() {
    BigInteger63Arithmetic_instance = this;
    var tmp = this;
    // Inline function 'kotlin.longArrayOf' call
    tmp.bs_1 = longArrayOf([]);
    var tmp_0 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_0.cs_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0))]));
    var tmp_1 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_1.ds_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_2 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_2.es_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(2, 0))]));
    var tmp_3 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_3.fs_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10, 0))]));
    var tmp_4 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_4.gs_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1431655765, 715827882))]));
    this.hs_1 = 63;
    this.is_1 = 63;
    this.js_1 = _ULong___init__impl__c78o9k(new Long(-1, 2147483647));
    var tmp_5 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_5.ks_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1, 2147483647))]));
    this.ls_1 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    this.ms_1 = _ULong___init__impl__c78o9k(new Long(0, 2147483647));
    this.ns_1 = _ULong___init__impl__c78o9k(new Long(0, -2147483648));
    this.os_1 = 120;
    this.ps_1 = 15000;
    this.qs_1 = false;
    this.rs_1 = new SignedULongArray(BigInteger63Arithmetic_getInstance().es_1, true);
    var tmp_6 = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_7 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_8 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_9 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_10 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_11 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_12 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_13 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_14 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_15 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_16 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_17 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1410065408, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_18 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1215752192, 23))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_19 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-727379968, 232))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_20 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1316134912, 2328))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_21 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(276447232, 23283))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_22 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1530494976, 232830))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_23 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1874919424, 2328306))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_24 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1569325056, 23283064))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_25 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1486618624, 232830643))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_26 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1981284352, 180822788)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_27 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1661992960, 1808227885)), _ULong___init__impl__c78o9k(new Long(10, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_28 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-559939584, 902409669)), _ULong___init__impl__c78o9k(new Long(108, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_29 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1304428544, 434162106)), _ULong___init__impl__c78o9k(new Long(1084, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_30 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-159383552, 46653770)), _ULong___init__impl__c78o9k(new Long(10842, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_31 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1593835520, 466537709)), _ULong___init__impl__c78o9k(new Long(108420, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_32 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1241513984, 370409800)), _ULong___init__impl__c78o9k(new Long(1084202, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_33 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-469762048, 1556614354)), _ULong___init__impl__c78o9k(new Long(10842021, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_34 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-402653184, 533758012)), _ULong___init__impl__c78o9k(new Long(108420217, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_35 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(268435456, 1042612833)), _ULong___init__impl__c78o9k(new Long(1084202172, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_36 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1610612736, 1836193738)), _ULong___init__impl__c78o9k(new Long(-2042880164, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_37 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1073741824, 1182068202)), _ULong___init__impl__c78o9k(new Long(1046034848, 25))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_38 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-2147483648, 1083263782)), _ULong___init__impl__c78o9k(new Long(1870413893, 252))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_39 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 95219585)), _ULong___init__impl__c78o9k(new Long(1524269751, 2524))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_40 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 952195850)), _ULong___init__impl__c78o9k(new Long(-1937171674, 25243))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_41 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 932023908)), _ULong___init__impl__c78o9k(new Long(2103119744, 252435))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_42 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 730304488)), _ULong___init__impl__c78o9k(new Long(-443639036, 2524354))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_43 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 860593936)), _ULong___init__impl__c78o9k(new Long(-141423061, 25243548))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_44 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 16004768)), _ULong___init__impl__c78o9k(new Long(-1414230606, 252435489))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_45 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 160047680)), _ULong___init__impl__c78o9k(new Long(-1257404172, 376871248)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_46 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1600476800)), _ULong___init__impl__c78o9k(new Long(310860168, 1621228839)), _ULong___init__impl__c78o9k(new Long(11, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_47 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 972382464)), _ULong___init__impl__c78o9k(new Long(-1186365609, 1179902854)), _ULong___init__impl__c78o9k(new Long(117, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_48 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1133890048)), _ULong___init__impl__c78o9k(new Long(1021245802, 1061610307)), _ULong___init__impl__c78o9k(new Long(1175, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_49 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 601482240)), _ULong___init__impl__c78o9k(new Long(1622523433, 2026168480)), _ULong___init__impl__c78o9k(new Long(11754, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_50 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1719855104)), _ULong___init__impl__c78o9k(new Long(-954634852, 934331971)), _ULong___init__impl__c78o9k(new Long(117549, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_51 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 18681856)), _ULong___init__impl__c78o9k(new Long(-956413920, 753385125)), _ULong___init__impl__c78o9k(new Long(1175494, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_52 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 186818560)), _ULong___init__impl__c78o9k(new Long(-974204608, 1091400313)), _ULong___init__impl__c78o9k(new Long(11754943, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_53 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1868185600)), _ULong___init__impl__c78o9k(new Long(-1152111488, 176584897)), _ULong___init__impl__c78o9k(new Long(117549435, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_54 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1501986816)), _ULong___init__impl__c78o9k(new Long(1363787016, 1765848977)), _ULong___init__impl__c78o9k(new Long(1175494350, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_55 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 2134966272)), _ULong___init__impl__c78o9k(new Long(752968278, 478620589)), _ULong___init__impl__c78o9k(new Long(-1129958380, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_56 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 2022309888)), _ULong___init__impl__c78o9k(new Long(-1060251803, 491238595)), _ULong___init__impl__c78o9k(new Long(1585318090, 27))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_57 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 895746048)), _ULong___init__impl__c78o9k(new Long(-2012583429, 617418661)), _ULong___init__impl__c78o9k(new Long(-1326688282, 273))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_58 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 367525888)), _ULong___init__impl__c78o9k(new Long(1349002194, 1879219319)), _ULong___init__impl__c78o9k(new Long(-381980930, 2736))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_59 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1527775232)), _ULong___init__impl__c78o9k(new Long(605120053, 1612324009)), _ULong___init__impl__c78o9k(new Long(475158004, 27369))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_60 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 245366784)), _ULong___init__impl__c78o9k(new Long(1756233241, 1090854555)), _ULong___init__impl__c78o9k(new Long(456612751, 273691))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_61 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 306184192)), _ULong___init__impl__c78o9k(new Long(382463227, 171127314)), _ULong___init__impl__c78o9k(new Long(271160219, 2736911))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_62 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 914358272)), _ULong___init__impl__c78o9k(new Long(-470335025, 1711273140)), _ULong___init__impl__c78o9k(new Long(-1583365106, 27369110))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_63 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 553648128)), _ULong___init__impl__c78o9k(new Long(-408382950, 2080345872)), _ULong___init__impl__c78o9k(new Long(1346218131, 273691106))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_64 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1241513984)), _ULong___init__impl__c78o9k(new Long(211137798, 1476105897)), _ULong___init__impl__c78o9k(new Long(577279431, 589427415)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_65 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1677721600)), _ULong___init__impl__c78o9k(new Long(2111377985, 1876157082)), _ULong___init__impl__c78o9k(new Long(1477827020, 1599306855)), _ULong___init__impl__c78o9k(new Long(12, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_66 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1744830464)), _ULong___init__impl__c78o9k(new Long(-361056623, 1581701640)), _ULong___init__impl__c78o9k(new Long(1893368320, 960683017)), _ULong___init__impl__c78o9k(new Long(127, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_67 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 268435456)), _ULong___init__impl__c78o9k(new Long(684401074, 784630873)), _ULong___init__impl__c78o9k(new Long(1753814023, 1016895582)), _ULong___init__impl__c78o9k(new Long(1274, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_68 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 536870912)), _ULong___init__impl__c78o9k(new Long(-1745923851, 1403857787)), _ULong___init__impl__c78o9k(new Long(358271049, 1579021232)), _ULong___init__impl__c78o9k(new Long(12744, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_69 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1073741824)), _ULong___init__impl__c78o9k(new Long(-279369324, 1153675987)), _ULong___init__impl__c78o9k(new Long(-712256800, 757826784)), _ULong___init__impl__c78o9k(new Long(127447, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_70 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1501274061, 799341639)), _ULong___init__impl__c78o9k(new Long(1467366597, 1135816904)), _ULong___init__impl__c78o9k(new Long(1274473, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_71 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2127838722, 1550965449)), _ULong___init__impl__c78o9k(new Long(1788764085, 620750803)), _ULong___init__impl__c78o9k(new Long(12744735, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_72 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-196449260, 477268958)), _ULong___init__impl__c78o9k(new Long(707771673, 1912540738)), _ULong___init__impl__c78o9k(new Long(127447352, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_73 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1964492600, 477722293)), _ULong___init__impl__c78o9k(new Long(-1512217860, 1945538197)), _ULong___init__impl__c78o9k(new Long(1274473528, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_74 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1829910480, 482255639)), _ULong___init__impl__c78o9k(new Long(2057690586, 128029144)), _ULong___init__impl__c78o9k(new Long(-140166599, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_75 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1119235616, 527589098)), _ULong___init__impl__c78o9k(new Long(-897930618, 1280291444)), _ULong___init__impl__c78o9k(new Long(-1401665990, 29))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_76 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1692545728, 980923686)), _ULong___init__impl__c78o9k(new Long(-389371586, 2065496207)), _ULong___init__impl__c78o9k(new Long(-1131758007, 296))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_77 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(254411904, 1219302274)), _ULong___init__impl__c78o9k(new Long(401251440, 1327609247)), _ULong___init__impl__c78o9k(new Long(1567321827, 2967))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_78 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1750848256, 1455604500)), _ULong___init__impl__c78o9k(new Long(-282452891, 391190582)), _ULong___init__impl__c78o9k(new Long(-1506650908, 29673))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_79 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-328613376, 1671143117)), _ULong___init__impl__c78o9k(new Long(1470438392, 1764422181)), _ULong___init__impl__c78o9k(new Long(2113360105, 296736))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_80 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1008833536, 1679045643)), _ULong___init__impl__c78o9k(new Long(1819482039, 464352629)), _ULong___init__impl__c78o9k(new Long(-341235422, 2967364))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_81 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1498400768, 1758070896)), _ULong___init__impl__c78o9k(new Long(1014951213, 348558998)), _ULong___init__impl__c78o9k(new Long(882613078, 29673649))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_82 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2099105792, 400839779)), _ULong___init__impl__c78o9k(new Long(1559577546, 1338106334)), _ULong___init__impl__c78o9k(new Long(236196189, 296736492))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_83 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-483778560, 1860914146)), _ULong___init__impl__c78o9k(new Long(-1584093723, 496161455)), _ULong___init__impl__c78o9k(new Long(-1933005400, 819881272)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_84 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-542818304, 1429272284)), _ULong___init__impl__c78o9k(new Long(1338931962, 666647260)), _ULong___init__impl__c78o9k(new Long(2144782482, 1756361781)), _ULong___init__impl__c78o9k(new Long(13, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_85 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1133215744, 1407820960)), _ULong___init__impl__c78o9k(new Long(504417738, 224021659)), _ULong___init__impl__c78o9k(new Long(-27011657, 383748630)), _ULong___init__impl__c78o9k(new Long(138, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_86 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1552744448, 1193307719)), _ULong___init__impl__c78o9k(new Long(749210090, 92732943)), _ULong___init__impl__c78o9k(new Long(-270116569, 1690002661)), _ULong___init__impl__c78o9k(new Long(1381, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_87 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1652424704, 1195658953)), _ULong___init__impl__c78o9k(new Long(-1097833687, 927329431)), _ULong___init__impl__c78o9k(new Long(1593801606, 1867641083)), _ULong___init__impl__c78o9k(new Long(13817, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_88 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(655622144, 1219171296)), _ULong___init__impl__c78o9k(new Long(1906565023, 683359725)), _ULong___init__impl__c78o9k(new Long(-1241853120, 1496541649)), _ULong___init__impl__c78o9k(new Long(138178, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_89 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-2033713152, 1454294721)), _ULong___init__impl__c78o9k(new Long(1885781051, 391146310)), _ULong___init__impl__c78o9k(new Long(466370691, 2080514609)), _ULong___init__impl__c78o9k(new Long(1381786, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_90 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1137704960, 1658045327)), _ULong___init__impl__c78o9k(new Long(1677941332, 1763979456)), _ULong___init__impl__c78o9k(new Long(368739615, 1477793259)), _ULong___init__impl__c78o9k(new Long(13817869, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_91 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1507852288, 1548067736)), _ULong___init__impl__c78o9k(new Long(-400455857, 459925379)), _ULong___init__impl__c78o9k(new Long(-607571138, 1893030702)), _ULong___init__impl__c78o9k(new Long(138178696, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_92 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2101346304, 448291830)), _ULong___init__impl__c78o9k(new Long(290408733, 304286503)), _ULong___init__impl__c78o9k(new Long(-1780744082, 1750437844)), _ULong___init__impl__c78o9k(new Long(1381786968, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_93 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-461373440, 187951008)), _ULong___init__impl__c78o9k(new Long(-1390879964, 895381382)), _ULong___init__impl__c78o9k(new Long(-627571635, 324509261)), _ULong___init__impl__c78o9k(new Long(932967800, 3))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_94 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-318767104, 1879510088)), _ULong___init__impl__c78o9k(new Long(-1023897752, 363879234)), _ULong___init__impl__c78o9k(new Long(-1980749050, 1097608970)), _ULong___init__impl__c78o9k(new Long(739743409, 32))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_95 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1107296256, 1615231705)), _ULong___init__impl__c78o9k(new Long(-1649042920, 1491308699)), _ULong___init__impl__c78o9k(new Long(1667345981, 238671465)), _ULong___init__impl__c78o9k(new Long(-1192500497, 321))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_96 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1811939328, 1119931516)), _ULong___init__impl__c78o9k(new Long(689439991, 2028185108)), _ULong___init__impl__c78o9k(new Long(-506409368, 239231005)), _ULong___init__impl__c78o9k(new Long(959896919, 3217))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_97 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-939524096, 461896925)), _ULong___init__impl__c78o9k(new Long(-1695534677, 954498249)), _ULong___init__impl__c78o9k(new Long(-769126375, 244826410)), _ULong___init__impl__c78o9k(new Long(1009034599, 32172))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_98 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-805306368, 324001961)), _ULong___init__impl__c78o9k(new Long(224522416, 955047904)), _ULong___init__impl__c78o9k(new Long(898670846, 300780460)), _ULong___init__impl__c78o9k(new Long(1500411399, 321722))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_99 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(536870912, 1092535970)), _ULong___init__impl__c78o9k(new Long(-2049743135, 960544448)), _ULong___init__impl__c78o9k(new Long(396773872, 860320954)), _ULong___init__impl__c78o9k(new Long(2119212103, 3217223))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_100 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1073741824, 187941461)), _ULong___init__impl__c78o9k(new Long(977405135, 1015509893)), _ULong___init__impl__c78o9k(new Long(-327228572, 13274948)), _ULong___init__impl__c78o9k(new Long(-282715446, 32172234))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_101 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-2147483648, 1879414612)), _ULong___init__impl__c78o9k(new Long(1184116758, 1565164340)), _ULong___init__impl__c78o9k(new Long(1022681580, 132749489)), _ULong___init__impl__c78o9k(new Long(1467812836, 321722349))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_102 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1614276941)), _ULong___init__impl__c78o9k(new Long(-1043734300, 619257866)), _ULong___init__impl__c78o9k(new Long(1636881215, 1327494892)), _ULong___init__impl__c78o9k(new Long(1793226472, 1069739845)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_103 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1110383874)), _ULong___init__impl__c78o9k(new Long(-1847408401, 1897611371)), _ULong___init__impl__c78o9k(new Long(-811057032, 390047035)), _ULong___init__impl__c78o9k(new Long(752395542, 2107463862)), _ULong___init__impl__c78o9k(new Long(14, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_104 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 366420500)), _ULong___init__impl__c78o9k(new Long(-1294214821, 1796244531)), _ULong___init__impl__c78o9k(new Long(479364280, 1752986710)), _ULong___init__impl__c78o9k(new Long(-1065979171, 1747285789)), _ULong___init__impl__c78o9k(new Long(149, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_105 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1516721352)), _ULong___init__impl__c78o9k(new Long(-57246321, 782576132)), _ULong___init__impl__c78o9k(new Long(498675512, 349997917)), _ULong___init__impl__c78o9k(new Long(-2069857110, 292988713)), _ULong___init__impl__c78o9k(new Long(1498, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_106 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 134827984)), _ULong___init__impl__c78o9k(new Long(-572463203, 1383310385)), _ULong___init__impl__c78o9k(new Long(691787827, 1352495523)), _ULong___init__impl__c78o9k(new Long(776265381, 782403487)), _ULong___init__impl__c78o9k(new Long(14981, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$107 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1348279840)), _ULong___init__impl__c78o9k(new Long(-1429664734, 948201970)), _ULong___init__impl__c78o9k(new Long(-1672056316, 640053343)), _ULong___init__impl__c78o9k(new Long(-827280776, 1381583927)), _ULong___init__impl__c78o9k(new Long(149813, 0))]));
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_6.ss_1 = [new ULongArray(tmp_7), new ULongArray(tmp_8), new ULongArray(tmp_9), new ULongArray(tmp_10), new ULongArray(tmp_11), new ULongArray(tmp_12), new ULongArray(tmp_13), new ULongArray(tmp_14), new ULongArray(tmp_15), new ULongArray(tmp_16), new ULongArray(tmp_17), new ULongArray(tmp_18), new ULongArray(tmp_19), new ULongArray(tmp_20), new ULongArray(tmp_21), new ULongArray(tmp_22), new ULongArray(tmp_23), new ULongArray(tmp_24), new ULongArray(tmp_25), new ULongArray(tmp_26), new ULongArray(tmp_27), new ULongArray(tmp_28), new ULongArray(tmp_29), new ULongArray(tmp_30), new ULongArray(tmp_31), new ULongArray(tmp_32), new ULongArray(tmp_33), new ULongArray(tmp_34), new ULongArray(tmp_35), new ULongArray(tmp_36), new ULongArray(tmp_37), new ULongArray(tmp_38), new ULongArray(tmp_39), new ULongArray(tmp_40), new ULongArray(tmp_41), new ULongArray(tmp_42), new ULongArray(tmp_43), new ULongArray(tmp_44), new ULongArray(tmp_45), new ULongArray(tmp_46), new ULongArray(tmp_47), new ULongArray(tmp_48), new ULongArray(tmp_49), new ULongArray(tmp_50), new ULongArray(tmp_51), new ULongArray(tmp_52), new ULongArray(tmp_53), new ULongArray(tmp_54), new ULongArray(tmp_55), new ULongArray(tmp_56), new ULongArray(tmp_57), new ULongArray(tmp_58), new ULongArray(tmp_59), new ULongArray(tmp_60), new ULongArray(tmp_61), new ULongArray(tmp_62), new ULongArray(tmp_63), new ULongArray(tmp_64), new ULongArray(tmp_65), new ULongArray(tmp_66), new ULongArray(tmp_67), new ULongArray(tmp_68), new ULongArray(tmp_69), new ULongArray(tmp_70), new ULongArray(tmp_71), new ULongArray(tmp_72), new ULongArray(tmp_73), new ULongArray(tmp_74), new ULongArray(tmp_75), new ULongArray(tmp_76), new ULongArray(tmp_77), new ULongArray(tmp_78), new ULongArray(tmp_79), new ULongArray(tmp_80), new ULongArray(tmp_81), new ULongArray(tmp_82), new ULongArray(tmp_83), new ULongArray(tmp_84), new ULongArray(tmp_85), new ULongArray(tmp_86), new ULongArray(tmp_87), new ULongArray(tmp_88), new ULongArray(tmp_89), new ULongArray(tmp_90), new ULongArray(tmp_91), new ULongArray(tmp_92), new ULongArray(tmp_93), new ULongArray(tmp_94), new ULongArray(tmp_95), new ULongArray(tmp_96), new ULongArray(tmp_97), new ULongArray(tmp_98), new ULongArray(tmp_99), new ULongArray(tmp_100), new ULongArray(tmp_101), new ULongArray(tmp_102), new ULongArray(tmp_103), new ULongArray(tmp_104), new ULongArray(tmp_105), new ULongArray(tmp_106), new ULongArray(tmp$ret$107)];
  }
  protoOf(BigInteger63Arithmetic).mr = function () {
    return this.cs_1;
  };
  protoOf(BigInteger63Arithmetic).nr = function () {
    return this.ds_1;
  };
  protoOf(BigInteger63Arithmetic).or = function () {
    return this.es_1;
  };
  protoOf(BigInteger63Arithmetic).pr = function () {
    return this.fs_1;
  };
  protoOf(BigInteger63Arithmetic).hw = function (value) {
    var x = value;
    var y;
    var n = 63;
    // Inline function 'kotlin.ULong.shr' call
    var this_0 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).c3(32));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 32 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_1 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).c3(16));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 16 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_2 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).c3(8));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 8 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_3 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).c3(4));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 4 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_4 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(2));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 2 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_5 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).c3(1));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      return n - 2 | 0;
    }
    var tmp = n;
    // Inline function 'kotlin.ULong.toInt' call
    var this_6 = x;
    return tmp - _ULong___get_data__impl__fggpzb(this_6).g3() | 0;
  };
  protoOf(BigInteger63Arithmetic).jt = function (value) {
    if (isZero(value, this)) {
      return 0;
    }
    var start = (_ULongArray___get_size__impl__ju6dtr(value) - this.aw(value) | 0) - 1 | 0;
    var mostSignificant = ULongArray__get_impl_pr71q9(value, start);
    return this.iw(mostSignificant) + imul(start, 63) | 0;
  };
  protoOf(BigInteger63Arithmetic).iw = function (value) {
    return 63 - this.hw(value) | 0;
  };
  protoOf(BigInteger63Arithmetic).ts = function (bigInteger) {
    var correctedSize = _ULongArray___get_size__impl__ju6dtr(bigInteger) - this.aw(bigInteger) | 0;
    if (correctedSize === 0) {
      return this.cs_1;
    }
    if (_ULongArray___get_size__impl__ju6dtr(bigInteger) === correctedSize) {
      return bigInteger;
    }
    if (false) {}
    // Inline function 'kotlin.collections.copyOfRange' call
    return _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(bigInteger), 0, correctedSize));
  };
  protoOf(BigInteger63Arithmetic).aw = function (bigInteger) {
    var lastNonEmptyIndex = _ULongArray___get_size__impl__ju6dtr(bigInteger) - 1 | 0;
    if (lastNonEmptyIndex <= 0) {
      return 0;
    }
    var element = ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex);
    while (equals(element, _ULong___init__impl__c78o9k(new Long(0, 0))) ? lastNonEmptyIndex > 0 : false) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
      element = ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex);
    }
    if (equals(ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex), _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
    }
    return (_ULongArray___get_size__impl__ju6dtr(bigInteger) - lastNonEmptyIndex | 0) - 1 | 0;
  };
  protoOf(BigInteger63Arithmetic).jw = function (operand, places) {
    if (isZero(operand, this)) {
      return operand;
    }
    if (places === 0) {
      return operand;
    }
    if (ULongArray__isEmpty_impl_c3yngu(operand)) {
      return this.cs_1;
    }
    var leadingZeroWords = this.aw(operand);
    if (_ULongArray___get_size__impl__ju6dtr(operand) === leadingZeroWords) {
      return this.cs_1;
    }
    var originalSize = _ULongArray___get_size__impl__ju6dtr(operand) - leadingZeroWords | 0;
    var leadingZeros = this.hw(ULongArray__get_impl_pr71q9(operand, originalSize - 1 | 0));
    var shiftWords = places / this.hs_1 | 0;
    var shiftBits = places % this.hs_1 | 0;
    var tmp;
    if (shiftBits > leadingZeros) {
      tmp = shiftWords + 1 | 0;
    } else {
      tmp = shiftWords;
    }
    var wordsNeeded = tmp;
    if (shiftBits === 0) {
      // Inline function 'kotlin.ULongArray' call
      var tmp_0 = 0;
      var tmp_1 = originalSize + wordsNeeded | 0;
      var tmp_2 = longArray(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        // Inline function 'kotlin.ULong.toLong' call
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftLeft.<anonymous>' call
        var this_0 = (0 <= tmp_3 ? tmp_3 < shiftWords : false) ? _ULong___init__impl__c78o9k(new Long(0, 0)) : ULongArray__get_impl_pr71q9(operand, tmp_3 - shiftWords | 0);
        tmp_2[tmp_3] = _ULong___get_data__impl__fggpzb(this_0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      return _ULongArray___init__impl__twm1l3(tmp_2);
    }
    // Inline function 'kotlin.ULongArray' call
    var tmp_4 = 0;
    var tmp_5 = originalSize + wordsNeeded | 0;
    var tmp_6 = longArray(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      // Inline function 'kotlin.ULong.toLong' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftLeft.<anonymous>' call
      var tmp_8;
      if (0 <= tmp_7 ? tmp_7 < shiftWords : false) {
        tmp_8 = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        if (tmp_7 === shiftWords) {
          // Inline function 'kotlin.ULong.and' call
          // Inline function 'kotlin.ULong.shl' call
          var this_1 = ULongArray__get_impl_pr71q9(operand, tmp_7 - shiftWords | 0);
          var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).a3(shiftBits));
          var other = BigInteger63Arithmetic_getInstance().js_1;
          tmp_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).d3(_ULong___get_data__impl__fggpzb(other)));
        } else {
          var containsLower = shiftWords + 1 | 0;
          if (tmp_7 < (originalSize + shiftWords | 0) ? containsLower <= tmp_7 : false) {
            // Inline function 'kotlin.ULong.or' call
            // Inline function 'kotlin.ULong.and' call
            // Inline function 'kotlin.ULong.shl' call
            var this_3 = ULongArray__get_impl_pr71q9(operand, tmp_7 - shiftWords | 0);
            var this_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).a3(shiftBits));
            var other_0 = BigInteger63Arithmetic_getInstance().js_1;
            var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).d3(_ULong___get_data__impl__fggpzb(other_0)));
            // Inline function 'kotlin.ULong.shr' call
            var this_6 = ULongArray__get_impl_pr71q9(operand, (tmp_7 - shiftWords | 0) - 1 | 0);
            var bitCount = BigInteger63Arithmetic_getInstance().hs_1 - shiftBits | 0;
            var other_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_6).c3(bitCount));
            tmp_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).e3(_ULong___get_data__impl__fggpzb(other_1)));
          } else {
            if (tmp_7 === ((originalSize + wordsNeeded | 0) - 1 | 0)) {
              // Inline function 'kotlin.ULong.shr' call
              var this_7 = ULongArray__get_impl_pr71q9(operand, tmp_7 - wordsNeeded | 0);
              var bitCount_0 = BigInteger63Arithmetic_getInstance().hs_1 - shiftBits | 0;
              tmp_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).c3(bitCount_0));
            } else {
              throw RuntimeException_init_$Create$('Invalid case ' + tmp_7);
            }
          }
        }
      }
      var this_8 = tmp_8;
      tmp_6[tmp_7] = _ULong___get_data__impl__fggpzb(this_8);
      tmp_4 = tmp_4 + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_6);
  };
  protoOf(BigInteger63Arithmetic).kw = function (operand, places) {
    if (ULongArray__isEmpty_impl_c3yngu(operand) ? true : places === 0) {
      return operand;
    }
    var leadingZeroWords = this.aw(operand);
    var realOperandSize = _ULongArray___get_size__impl__ju6dtr(operand) - leadingZeroWords | 0;
    var shiftBits = places % this.hs_1 | 0;
    var wordsToDiscard = places / this.hs_1 | 0;
    if (wordsToDiscard >= realOperandSize) {
      return this.cs_1;
    }
    if (shiftBits === 0) {
      // Inline function 'kotlin.collections.copyOfRange' call
      var fromIndex = realOperandSize - wordsToDiscard | 0;
      _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(operand), fromIndex, realOperandSize));
    }
    if (realOperandSize > 1 ? (realOperandSize - wordsToDiscard | 0) === 1 : false) {
      // Inline function 'kotlin.ulongArrayOf' call
      // Inline function 'kotlin.ULong.shr' call
      var this_0 = ULongArray__get_impl_pr71q9(operand, realOperandSize - 1 | 0);
      var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).c3(shiftBits));
      return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    }
    var newLength = realOperandSize - wordsToDiscard | 0;
    if (newLength === 0) {
      return this.cs_1;
    }
    // Inline function 'kotlin.ULongArray' call
    var tmp = 0;
    var tmp_0 = realOperandSize - wordsToDiscard | 0;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'kotlin.ULong.toLong' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftRight.<anonymous>' call
      var tmp_3;
      if (0 <= tmp_2 ? tmp_2 < ((realOperandSize - 1 | 0) - wordsToDiscard | 0) : false) {
        // Inline function 'kotlin.ULong.or' call
        // Inline function 'kotlin.ULong.shr' call
        var this_1 = ULongArray__get_impl_pr71q9(operand, tmp_2 + wordsToDiscard | 0);
        var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).c3(shiftBits));
        // Inline function 'kotlin.ULong.and' call
        // Inline function 'kotlin.ULong.shl' call
        var this_3 = ULongArray__get_impl_pr71q9(operand, (tmp_2 + wordsToDiscard | 0) + 1 | 0);
        var bitCount = BigInteger63Arithmetic_getInstance().hs_1 - shiftBits | 0;
        var this_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).a3(bitCount));
        var other = BigInteger63Arithmetic_getInstance().js_1;
        var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).d3(_ULong___get_data__impl__fggpzb(other)));
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).e3(_ULong___get_data__impl__fggpzb(other_0)));
      } else if (tmp_2 === ((realOperandSize - 1 | 0) - wordsToDiscard | 0)) {
        // Inline function 'kotlin.ULong.shr' call
        var this_5 = ULongArray__get_impl_pr71q9(operand, tmp_2 + wordsToDiscard | 0);
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).c3(shiftBits));
      } else {
        throw RuntimeException_init_$Create$('Invalid case ' + tmp_2);
      }
      var this_6 = tmp_3;
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_6);
      tmp = tmp + 1 | 0;
    }
    var result = _ULongArray___init__impl__twm1l3(tmp_1);
    return result;
  };
  protoOf(BigInteger63Arithmetic).lw = function (first, second, firstStart, secondStart) {
    if (firstStart > secondStart) {
      return 1;
    }
    if (secondStart > firstStart) {
      return -1;
    }
    var counter = firstStart - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    $l$loop_0: while (counter >= 0) {
      // Inline function 'kotlin.ULong.compareTo' call
      var this_0 = ULongArray__get_impl_pr71q9(first, counter);
      var other = ULongArray__get_impl_pr71q9(second, counter);
      if (ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break $l$loop_0;
      }
      // Inline function 'kotlin.ULong.compareTo' call
      var this_1 = ULongArray__get_impl_pr71q9(first, counter);
      var other_0 = ULongArray__get_impl_pr71q9(second, counter);
      if (ulongCompare(_ULong___get_data__impl__fggpzb(this_1), _ULong___get_data__impl__fggpzb(other_0)) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break $l$loop_0;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    } else {
      return -1;
    }
  };
  protoOf(BigInteger63Arithmetic).zr = function (first, second) {
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.aw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.aw(second) | 0;
    return this.lw(first, second, firstStart, secondStart);
  };
  protoOf(BigInteger63Arithmetic).mw = function (resultArray, resultArrayStart, first, second) {
    if (isZero(first, this)) {
      // Inline function 'kotlin.collections.copyInto' call
      var endIndex = _ULongArray___get_size__impl__ju6dtr(first);
      // Inline function 'kotlin.collections.copyInto' call
      var this_0 = _ULongArray___get_storage__impl__28e64j(first);
      var destination = _ULongArray___get_storage__impl__28e64j(resultArray);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp = this_0;
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      arrayCopy(tmp, destination, resultArrayStart, 0, endIndex);
      return Unit_instance;
    }
    if (isZero(second, this)) {
      // Inline function 'kotlin.collections.copyInto' call
      var endIndex_0 = _ULongArray___get_size__impl__ju6dtr(second);
      // Inline function 'kotlin.collections.copyInto' call
      var this_1 = _ULongArray___get_storage__impl__28e64j(second);
      var destination_0 = _ULongArray___get_storage__impl__28e64j(resultArray);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp_0 = this_1;
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      arrayCopy(tmp_0, destination_0, resultArrayStart, 0, endIndex_0);
      return Unit_instance;
    }
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.aw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.aw(second) | 0;
    var tmp_1;
    if (firstStart > secondStart) {
      tmp_1 = new Sextuple(_ULongArray___get_size__impl__ju6dtr(first), _ULongArray___get_size__impl__ju6dtr(second), new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp_1 = new Sextuple(_ULongArray___get_size__impl__ju6dtr(second), _ULongArray___get_size__impl__ju6dtr(first), new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var tmp0_container = tmp_1;
    var largerLength = tmp0_container.ge();
    var smallerLength = tmp0_container.he();
    var largerData = tmp0_container.sl().nm_1;
    var smallerData = tmp0_container.ut().nm_1;
    var largerStart = tmp0_container.vt();
    var smallerStart = tmp0_container.wt();
    var i = 0;
    var sum = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerStart) {
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.ULong.plus' call
      var this_2 = sum;
      var other = ULongArray__get_impl_pr71q9(largerData, i);
      var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).r2(_ULong___get_data__impl__fggpzb(other)));
      var other_0 = ULongArray__get_impl_pr71q9(smallerData, i);
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).r2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_2 = i + resultArrayStart | 0;
      // Inline function 'kotlin.ULong.and' call
      var this_4 = sum;
      var other_1 = this.js_1;
      var tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).d3(_ULong___get_data__impl__fggpzb(other_1)));
      ULongArray__set_impl_z19mvh(resultArray, tmp_2, tmp$ret$14);
      // Inline function 'kotlin.ULong.shr' call
      var this_5 = sum;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).c3(63));
      i = i + 1 | 0;
    }
    while (true) {
      if (equals(sum, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
        while (i < largerStart) {
          ULongArray__set_impl_z19mvh(resultArray, i + resultArrayStart | 0, ULongArray__get_impl_pr71q9(largerData, i));
          i = i + 1 | 0;
        }
        return Unit_instance;
      }
      if (i === largerLength) {
        ULongArray__set_impl_z19mvh(resultArray, largerLength + resultArrayStart | 0, sum);
        return Unit_instance;
      }
      // Inline function 'kotlin.ULong.plus' call
      var this_6 = sum;
      var other_2 = ULongArray__get_impl_pr71q9(largerData, i);
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_6).r2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_3 = i;
      // Inline function 'kotlin.ULong.and' call
      var this_7 = sum;
      var other_3 = this.js_1;
      var tmp$ret$17 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).d3(_ULong___get_data__impl__fggpzb(other_3)));
      ULongArray__set_impl_z19mvh(resultArray, tmp_3, tmp$ret$17);
      // Inline function 'kotlin.ULong.shr' call
      var this_8 = sum;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_8).c3(63));
      i = i + 1 | 0;
    }
  };
  protoOf(BigInteger63Arithmetic).ws = function (first, second) {
    if (isZero(first, this))
      return second;
    if (isZero(second, this))
      return first;
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.aw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.aw(second) | 0;
    var tmp;
    if (firstStart > secondStart) {
      tmp = new Sextuple(_ULongArray___get_size__impl__ju6dtr(first), _ULongArray___get_size__impl__ju6dtr(second), new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp = new Sextuple(_ULongArray___get_size__impl__ju6dtr(second), _ULongArray___get_size__impl__ju6dtr(first), new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var tmp0_container = tmp;
    var largerLength = tmp0_container.ge();
    var smallerLength = tmp0_container.he();
    var largerData = tmp0_container.sl().nm_1;
    var smallerData = tmp0_container.ut().nm_1;
    var largerStart = tmp0_container.vt();
    var smallerStart = tmp0_container.wt();
    // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.possibleAdditionOverflow' call
    var firstMostSignificant = ULongArray__get_impl_pr71q9(largerData, largerStart - 1 | 0);
    var secondMostSignificant = ULongArray__get_impl_pr71q9(smallerData, smallerStart - 1 | 0);
    var tmp_0;
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(new Long(0, 1610612736));
    var tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstMostSignificant).d3(_ULong___get_data__impl__fggpzb(other)));
    if (!equals(tmp$ret$0, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      tmp_0 = true;
    } else {
      // Inline function 'kotlin.ULong.and' call
      var other_0 = _ULong___init__impl__c78o9k(new Long(0, 1610612736));
      var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(secondMostSignificant).d3(_ULong___get_data__impl__fggpzb(other_0)));
      tmp_0 = !equals(tmp$ret$1, _ULong___init__impl__c78o9k(new Long(0, 0)));
    }
    var possibleOverflow = tmp_0;
    var possibleOverflow_0 = possibleOverflow;
    var tmp_1;
    if (possibleOverflow_0) {
      // Inline function 'kotlin.ULongArray' call
      var tmp_2 = 0;
      var tmp_3 = largerLength + 1 | 0;
      var tmp_4 = longArray(tmp_3);
      while (tmp_2 < tmp_3) {
        var tmp_5 = tmp_2;
        // Inline function 'kotlin.ULong.toLong' call
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.add.<anonymous>' call
        var this_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_4[tmp_5] = _ULong___get_data__impl__fggpzb(this_0);
        tmp_2 = tmp_2 + 1 | 0;
      }
      tmp_1 = _ULongArray___init__impl__twm1l3(tmp_4);
    } else {
      // Inline function 'kotlin.ULongArray' call
      var tmp_6 = 0;
      var tmp_7 = longArray(largerLength);
      while (tmp_6 < largerLength) {
        var tmp_8 = tmp_6;
        // Inline function 'kotlin.ULong.toLong' call
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.add.<anonymous>' call
        var this_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_7[tmp_8] = _ULong___get_data__impl__fggpzb(this_1);
        tmp_6 = tmp_6 + 1 | 0;
      }
      tmp_1 = _ULongArray___init__impl__twm1l3(tmp_7);
    }
    var result = tmp_1;
    this.mw(result, 0, first, second);
    var tmp_9;
    if (possibleOverflow_0) {
      tmp_9 = this.ts(result);
    } else {
      tmp_9 = result;
    }
    return tmp_9;
  };
  protoOf(BigInteger63Arithmetic).nw = function (first, second, firstStart, secondStart) {
    var comparison = this.lw(first, second, firstStart, secondStart);
    var firstSize = firstStart + 1 | 0;
    var secondSize = secondStart + 1 | 0;
    var firstIsLarger = comparison === 1;
    if (comparison === 0)
      return this.cs_1;
    if (secondSize === 1 ? equals(ULongArray__get_impl_pr71q9(second, 0), _ULong___init__impl__c78o9k(new Long(0, 0))) : false) {
      return first;
    }
    if (!firstIsLarger) {
      throw RuntimeException_init_$Create$('subtract result less than zero');
    }
    var tmp;
    if (firstIsLarger) {
      tmp = new Quadruple(new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp = new Quadruple(new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var tmp0_container = tmp;
    var largerData = tmp0_container.ge().nm_1;
    var smallerData = tmp0_container.he().nm_1;
    var largerStart = tmp0_container.sl();
    var smallerStart = tmp0_container.ut();
    // Inline function 'kotlin.ULongArray' call
    var tmp_0 = 0;
    var tmp_1 = longArray(largerStart);
    while (tmp_0 < largerStart) {
      var tmp_2 = tmp_0;
      // Inline function 'kotlin.ULong.toLong' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.subtractWithStartIndexes.<anonymous>' call
      var this_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = _ULongArray___init__impl__twm1l3(tmp_1);
    var i = 0;
    var diff = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerStart) {
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.ULong.minus' call
      var this_1 = ULongArray__get_impl_pr71q9(largerData, i);
      var other = ULongArray__get_impl_pr71q9(smallerData, i);
      var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).s2(_ULong___get_data__impl__fggpzb(other)));
      var other_0 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).s2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_3 = i;
      // Inline function 'kotlin.ULong.and' call
      var this_3 = diff;
      var other_1 = this.js_1;
      var tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).d3(_ULong___get_data__impl__fggpzb(other_1)));
      ULongArray__set_impl_z19mvh(result, tmp_3, tmp$ret$6);
      // Inline function 'kotlin.ULong.shr' call
      var this_4 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(63));
      i = i + 1 | 0;
    }
    while (!equals(diff, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      // Inline function 'kotlin.ULong.minus' call
      var this_5 = ULongArray__get_impl_pr71q9(largerData, i);
      var other_2 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).s2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_4 = i;
      // Inline function 'kotlin.ULong.and' call
      var this_6 = diff;
      var other_3 = this.js_1;
      var tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_6).d3(_ULong___get_data__impl__fggpzb(other_3)));
      ULongArray__set_impl_z19mvh(result, tmp_4, tmp$ret$9);
      // Inline function 'kotlin.ULong.shr' call
      var this_7 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).c3(63));
      i = i + 1 | 0;
    }
    while (i < largerStart) {
      ULongArray__set_impl_z19mvh(result, i, ULongArray__get_impl_pr71q9(largerData, i));
      i = i + 1 | 0;
    }
    if (this.aw(result) === (_ULongArray___get_size__impl__ju6dtr(result) - 1 | 0) ? equals(ULongArray__get_impl_pr71q9(result, 0), _ULong___init__impl__c78o9k(new Long(0, 0))) : false) {
      return this.cs_1;
    }
    return this.ts(result);
  };
  protoOf(BigInteger63Arithmetic).vs = function (first, second) {
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.aw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.aw(second) | 0;
    return this.nw(first, second, firstStart, secondStart);
  };
  protoOf(BigInteger63Arithmetic).ct = function (first, second) {
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(first) - this.aw(first) | 0;
    var secondCorrectedSize = _ULongArray___get_size__impl__ju6dtr(second) - this.aw(second) | 0;
    return multiplyWithCorrectedSize(this, first, second, firstCorrectedSize, secondCorrectedSize);
  };
  protoOf(BigInteger63Arithmetic).ow = function (original, numberOfWords, value) {
    // Inline function 'kotlin.ULongArray' call
    var tmp = 0;
    var tmp_0 = _ULongArray___get_size__impl__ju6dtr(original) + numberOfWords | 0;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'kotlin.ULong.toLong' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.extendULongArray.<anonymous>' call
      var this_0 = tmp_2 < _ULongArray___get_size__impl__ju6dtr(original) ? ULongArray__get_impl_pr71q9(original, tmp_2) : value;
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_0);
      tmp = tmp + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_1);
  };
  protoOf(BigInteger63Arithmetic).nv = function (firstUnchecked, secondUnchecked) {
    var tmp;
    if (!((_ULongArray___get_size__impl__ju6dtr(firstUnchecked) % 3 | 0) === 0)) {
      // Inline function 'kotlin.collections.asIterable' call
      // Inline function 'kotlin.ULongArray' call
      var tmp_0 = 0;
      var tmp_1 = imul((_ULongArray___get_size__impl__ju6dtr(firstUnchecked) + 2 | 0) / 3 | 0, 3) - _ULongArray___get_size__impl__ju6dtr(firstUnchecked) | 0;
      var tmp_2 = longArray(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        // Inline function 'kotlin.ULong.toLong' call
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.toomCook3Multiply.<anonymous>' call
        var this_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_2[tmp_3] = _ULong___get_data__impl__fggpzb(this_0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      var tmp$ret$3 = _ULongArray___init__impl__twm1l3(tmp_2);
      var tmp$ret$4 = new ULongArray(tmp$ret$3);
      tmp = plus(new ULongArray(firstUnchecked), tmp$ret$4);
    } else {
      tmp = new ULongArray(firstUnchecked);
    }
    var first = toULongArray(tmp);
    var tmp_4;
    if (!((_ULongArray___get_size__impl__ju6dtr(secondUnchecked) % 3 | 0) === 0)) {
      // Inline function 'kotlin.collections.asIterable' call
      // Inline function 'kotlin.ULongArray' call
      var tmp_5 = 0;
      var tmp_6 = imul((_ULongArray___get_size__impl__ju6dtr(secondUnchecked) + 2 | 0) / 3 | 0, 3) - _ULongArray___get_size__impl__ju6dtr(secondUnchecked) | 0;
      var tmp_7 = longArray(tmp_6);
      while (tmp_5 < tmp_6) {
        var tmp_8 = tmp_5;
        // Inline function 'kotlin.ULong.toLong' call
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.toomCook3Multiply.<anonymous>' call
        var this_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_7[tmp_8] = _ULong___get_data__impl__fggpzb(this_1);
        tmp_5 = tmp_5 + 1 | 0;
      }
      var tmp$ret$8 = _ULongArray___init__impl__twm1l3(tmp_7);
      var tmp$ret$9 = new ULongArray(tmp$ret$8);
      tmp_4 = plus(new ULongArray(secondUnchecked), tmp$ret$9);
    } else {
      tmp_4 = new ULongArray(secondUnchecked);
    }
    var second = toULongArray(tmp_4);
    var firstLength = _ULongArray___get_size__impl__ju6dtr(first);
    var secondLength = _ULongArray___get_size__impl__ju6dtr(second);
    var tmp_9;
    if (firstLength > secondLength) {
      var prepared = this.ow(second, firstLength - secondLength | 0, _ULong___init__impl__c78o9k(new Long(0, 0)));
      tmp_9 = new Pair(new ULongArray(first), new ULongArray(prepared));
    } else if (firstLength < secondLength) {
      var prepared_0 = this.ow(first, secondLength - firstLength | 0, _ULong___init__impl__c78o9k(new Long(0, 0)));
      tmp_9 = new Pair(new ULongArray(prepared_0), new ULongArray(second));
    } else {
      tmp_9 = new Pair(new ULongArray(first), new ULongArray(second));
    }
    var tmp0_container = tmp_9;
    var firstPrepared = tmp0_container.ge().nm_1;
    var secondPrepared = tmp0_container.he().nm_1;
    // Inline function 'kotlin.math.max' call
    var a = _ULongArray___get_size__impl__ju6dtr(first);
    var b = _ULongArray___get_size__impl__ju6dtr(second);
    var longestLength = Math.max(a, b);
    var extendedDigit = (longestLength + 2 | 0) / 3 | 0;
    var m0 = new SignedULongArray(toULongArray(slice(firstPrepared, until(0, extendedDigit))), true);
    var m1 = new SignedULongArray(toULongArray(slice(firstPrepared, until(extendedDigit, imul(extendedDigit, 2)))), true);
    var m2 = new SignedULongArray(toULongArray(slice(firstPrepared, until(imul(extendedDigit, 2), imul(extendedDigit, 3)))), true);
    var n0 = new SignedULongArray(toULongArray(slice(secondPrepared, until(0, extendedDigit))), true);
    var n1 = new SignedULongArray(toULongArray(slice(secondPrepared, until(extendedDigit, imul(extendedDigit, 2)))), true);
    var n2 = new SignedULongArray(toULongArray(slice(secondPrepared, until(imul(extendedDigit, 2), imul(extendedDigit, 3)))), true);
    var p0 = this.vv(m0, m2);
    var pe0 = m0;
    var pe1 = this.vv(p0, m1);
    var pem1 = this.xv(p0, m1);
    var doublePemM2 = this.uv(this.vv(pem1, m2), this.rs_1);
    var pem2 = this.xv(doublePemM2, m0);
    var pinf = m2;
    var q0 = this.vv(n0, n2);
    var qe0 = n0;
    var qe1 = this.vv(q0, n1);
    var qem1 = this.xv(q0, n1);
    var doubleQemN2 = this.uv(this.vv(qem1, n2), this.rs_1);
    var qem2 = this.xv(doubleQemN2, n0);
    var qinf = n2;
    var re0 = this.uv(pe0, qe0);
    var re1 = this.uv(pe1, qe1);
    var rem1 = this.uv(pem1, qem1);
    var rem2 = this.uv(pem2, qem2);
    var rinf = this.uv(pinf, qinf);
    var r0 = re0;
    var r4 = rinf;
    var rem2re1diff = this.xv(rem2, re1);
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$11 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(3, 0))]));
    var r3 = this.pw(rem2re1diff, new SignedULongArray(tmp$ret$11, true));
    var r1 = this.tv(this.xv(re1, rem1), 1);
    var r2 = this.xv(rem1, r0);
    r3 = this.vv(this.tv(this.xv(r2, r3), 1), this.uv(this.rs_1, rinf));
    r2 = this.xv(this.vv(r2, r1), r4);
    r1 = this.xv(r1, r3);
    var bShiftAmount = imul(extendedDigit, 63);
    var rb0 = r0;
    var rb1 = this.wv(r1, bShiftAmount);
    var rb2 = this.wv(r2, imul(bShiftAmount, 2));
    var rb3 = this.wv(r3, imul(bShiftAmount, 3));
    var rb4 = this.wv(r4, imul(bShiftAmount, 4));
    var rb = this.vv(this.vv(this.vv(this.vv(rb0, rb1), rb2), rb3), rb4);
    return rb.yv_1;
  };
  protoOf(BigInteger63Arithmetic).ov = function (first, second) {
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(first) - this.aw(first) | 0;
    return this.qw(first, second, firstCorrectedSize);
  };
  protoOf(BigInteger63Arithmetic).qw = function (first, second, firstCorrectedSize) {
    // Inline function 'kotlin.ULong.and' call
    var other = this.ls_1;
    var secondLow = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(second).d3(_ULong___get_data__impl__fggpzb(other)));
    // Inline function 'kotlin.ULong.shr' call
    var secondHigh = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(second).c3(32));
    var requiredBits = this.jt(first) + this.iw(second) | 0;
    var tmp;
    if (!((requiredBits % 63 | 0) === 0)) {
      tmp = (requiredBits / 63 | 0) + 1 | 0;
    } else {
      tmp = requiredBits / 63 | 0;
    }
    var requiredWords = tmp;
    var result = _ULongArray___init__impl__twm1l3_0(requiredWords);
    var carryIntoNextRound = _ULong___init__impl__c78o9k(new Long(0, 0));
    var i = 0;
    var j = 0;
    while (i < firstCorrectedSize) {
      // Inline function 'kotlin.ULong.and' call
      var this_0 = ULongArray__get_impl_pr71q9(first, i);
      var other_0 = this.ls_1;
      var firstLow = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).d3(_ULong___get_data__impl__fggpzb(other_0)));
      // Inline function 'kotlin.ULong.shr' call
      var this_1 = ULongArray__get_impl_pr71q9(first, i);
      var firstHigh = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).c3(32));
      i = i + 1 | 0;
      // Inline function 'kotlin.ULong.times' call
      var lowerProduct = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstLow).t2(_ULong___get_data__impl__fggpzb(secondLow)));
      // Inline function 'kotlin.ULong.shr' call
      var lowerCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowerProduct).c3(63));
      // Inline function 'kotlin.ULong.plus' call
      var this_2 = carryIntoNextRound;
      // Inline function 'kotlin.ULong.and' call
      var other_1 = this.js_1;
      var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowerProduct).d3(_ULong___get_data__impl__fggpzb(other_1)));
      var lowResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).r2(_ULong___get_data__impl__fggpzb(other_2)));
      // Inline function 'kotlin.ULong.plus' call
      var this_3 = lowerCarry;
      // Inline function 'kotlin.ULong.shr' call
      var this_4 = lowResult;
      var other_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(63));
      lowerCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).r2(_ULong___get_data__impl__fggpzb(other_3)));
      // Inline function 'kotlin.ULong.and' call
      var this_5 = lowResult;
      var other_4 = this.js_1;
      lowResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).d3(_ULong___get_data__impl__fggpzb(other_4)));
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.ULong.times' call
      var this_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstLow).t2(_ULong___get_data__impl__fggpzb(secondHigh)));
      // Inline function 'kotlin.ULong.times' call
      var other_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(secondLow).t2(_ULong___get_data__impl__fggpzb(firstHigh)));
      var middleProduct = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_6).r2(_ULong___get_data__impl__fggpzb(other_5)));
      var middleCarry = lowerCarry;
      // Inline function 'kotlin.ULong.plus' call
      var this_7 = middleCarry;
      // Inline function 'kotlin.ULong.shr' call
      var other_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(middleProduct).c3(31));
      middleCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).r2(_ULong___get_data__impl__fggpzb(other_6)));
      // Inline function 'kotlin.ULong.plus' call
      var this_8 = lowResult;
      // Inline function 'kotlin.ULong.and' call
      // Inline function 'kotlin.ULong.shl' call
      var this_9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(middleProduct).a3(32));
      var other_7 = this.js_1;
      var other_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_9).d3(_ULong___get_data__impl__fggpzb(other_7)));
      lowResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_8).r2(_ULong___get_data__impl__fggpzb(other_8)));
      // Inline function 'kotlin.ULong.plus' call
      var this_10 = middleCarry;
      // Inline function 'kotlin.ULong.shr' call
      var this_11 = lowResult;
      var other_9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_11).c3(63));
      middleCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_10).r2(_ULong___get_data__impl__fggpzb(other_9)));
      var tmp_0 = j;
      // Inline function 'kotlin.ULong.and' call
      var this_12 = lowResult;
      var other_10 = this.js_1;
      var tmp$ret$21 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_12).d3(_ULong___get_data__impl__fggpzb(other_10)));
      ULongArray__set_impl_z19mvh(result, tmp_0, tmp$ret$21);
      var highResult = middleCarry;
      // Inline function 'kotlin.ULong.shl' call
      // Inline function 'kotlin.ULong.times' call
      var this_13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstHigh).t2(_ULong___get_data__impl__fggpzb(secondHigh)));
      var higherProduct = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_13).a3(1));
      // Inline function 'kotlin.ULong.plus' call
      var this_14 = highResult;
      highResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_14).r2(_ULong___get_data__impl__fggpzb(higherProduct)));
      carryIntoNextRound = highResult;
      j = j + 1 | 0;
    }
    if (!equals(carryIntoNextRound, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      ULongArray__set_impl_z19mvh(result, j, carryIntoNextRound);
    }
    return result;
  };
  protoOf(BigInteger63Arithmetic).ht = function (base, exponent) {
    if (exponent.equals(new Long(0, 0))) {
      return this.ds_1;
    }
    if (exponent.equals(new Long(1, 0))) {
      return base;
    }
    if ((_ULongArray___get_size__impl__ju6dtr(base) === 1 ? equals(ULongArray__get_impl_pr71q9(base, 0), _ULong___init__impl__c78o9k(new Long(10, 0))) : false) ? exponent.z(toLong(this.ss_1.length)) < 0 : false) {
      return this.ss_1[exponent.g3()].nm_1;
    }
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(base) - this.aw(base) | 0;
    var helperVar = this.ds_1;
    var exponentVar = exponent;
    var baseVar = base;
    while (exponentVar.z(new Long(1, 0)) > 0) {
      // Inline function 'kotlin.Long.rem' call
      if (exponentVar.v2(toLong(2)).equals(new Long(0, 0))) {
        baseVar = this.fw(baseVar, baseVar);
        // Inline function 'kotlin.Long.div' call
        exponentVar = exponentVar.u2(toLong(2));
      } else {
        helperVar = this.fw(baseVar, helperVar);
        baseVar = this.fw(baseVar, baseVar);
        // Inline function 'kotlin.Long.div' call
        // Inline function 'kotlin.Long.minus' call
        exponentVar = exponentVar.s2(toLong(1)).u2(toLong(2));
      }
    }
    return this.fw(helperVar, baseVar);
  };
  protoOf(BigInteger63Arithmetic).rw = function (dividend, divisor) {
    var divisorSize = _ULongArray___get_size__impl__ju6dtr(divisor);
    var normalizationShift = this.hw(ULongArray__get_impl_pr71q9(divisor, divisorSize - 1 | 0));
    var divisorNormalized = this.pv(divisor, normalizationShift);
    var dividendNormalized = this.pv(dividend, normalizationShift);
    return new Triple(new ULongArray(dividendNormalized), new ULongArray(divisorNormalized), normalizationShift);
  };
  protoOf(BigInteger63Arithmetic).sw = function (remainderNormalized, normalizationShift) {
    var remainder = this.tw(remainderNormalized, normalizationShift);
    return remainder;
  };
  protoOf(BigInteger63Arithmetic).uw = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.ew(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new ULongArray(this.cs_1), new ULongArray(unnormalizedDividend));
    }
    if (_ULongArray___get_size__impl__ju6dtr(unnormalizedDivisor) === 1 ? _ULongArray___get_size__impl__ju6dtr(unnormalizedDividend) === 1 : false) {
      // Inline function 'kotlin.ulongArrayOf' call
      // Inline function 'kotlin.ULong.div' call
      var this_0 = ULongArray__get_impl_pr71q9(unnormalizedDividend, 0);
      var other = ULongArray__get_impl_pr71q9(unnormalizedDivisor, 0);
      var tmp$ret$0 = ulongDivide(this_0, other);
      var tmp$ret$1 = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
      var tmp = this.ts(tmp$ret$1);
      // Inline function 'kotlin.ulongArrayOf' call
      // Inline function 'kotlin.ULong.rem' call
      var this_1 = ULongArray__get_impl_pr71q9(unnormalizedDividend, 0);
      var other_0 = ULongArray__get_impl_pr71q9(unnormalizedDivisor, 0);
      var tmp$ret$2 = ulongRemainder(this_1, other_0);
      var tmp$ret$3 = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$2]));
      return new Pair(new ULongArray(tmp), new ULongArray(this.ts(tmp$ret$3)));
    }
    var bitPrecision = this.jt(unnormalizedDividend) - this.jt(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      return new Pair(new ULongArray(this.ds_1), new ULongArray(this.dw(unnormalizedDividend, unnormalizedDivisor)));
    }
    var tmp0_container = this.rw(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp0_container.ge().nm_1;
    var divisor = tmp0_container.he().nm_1;
    var normalizationShift = tmp0_container.sl();
    var dividendSize = _ULongArray___get_size__impl__ju6dtr(dividend);
    var divisorSize = _ULongArray___get_size__impl__ju6dtr(divisor);
    var divisorCorrectedSize = _ULongArray___get_size__impl__ju6dtr(divisor) - this.aw(divisor) | 0;
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = _ULongArray___init__impl__twm1l3_0(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.pv(divisor, imul(wordPrecision, this.hs_1));
    if (this.ew(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = _ULongArray___init__impl__twm1l3_0(wordPrecision + 1 | 0);
      ULongArray__set_impl_z19mvh(quotient, wordPrecision, _ULong___init__impl__c78o9k(new Long(1, 0)));
      dividend = this.dw(dividend, divisorTimesBaseToPowerOfM);
    }
    var inductionVariable = wordPrecision - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0;
        if ((divisorSize + j | 0) < _ULongArray___get_size__impl__ju6dtr(dividend)) {
          // Inline function 'kotlin.ulongArrayOf' call
          var tmp$ret$4 = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(dividend, divisorSize + j | 0)]));
          tmp_0 = this.vw(this.pv(tmp$ret$4, this.hs_1), ULongArray__get_impl_pr71q9(dividend, (divisorSize + j | 0) - 1 | 0));
        } else {
          var tmp_1;
          if ((divisorSize + j | 0) === _ULongArray___get_size__impl__ju6dtr(dividend)) {
            // Inline function 'kotlin.ulongArrayOf' call
            tmp_1 = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(dividend, (divisorSize + j | 0) - 1 | 0)]));
          } else {
            tmp_1 = this.cs_1;
          }
          tmp_0 = tmp_1;
        }
        var twoDigit = tmp_0;
        var tmp_2 = BigInteger32Arithmetic_getInstance();
        var tmp_3 = this.ww(twoDigit);
        // Inline function 'kotlin.ulongArrayOf' call
        var tmp$ret$6 = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(divisor, divisorSize - 1 | 0)]));
        var convertedResult = tmp_2.hv(tmp_3, this.ww(tmp$ret$6));
        qjhat = this.xw(convertedResult.ee_1.cm_1);
        var tmp_4 = quotient;
        var tmp_5;
        var tmp_6 = qjhat;
        // Inline function 'kotlin.ULong.minus' call
        var this_2 = this.js_1;
        var other_1 = _ULong___init__impl__c78o9k(new Long(1, 0));
        var tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).s2(_ULong___get_data__impl__fggpzb(other_1)));
        if (this.yw(tmp_6, tmp$ret$7) < 0) {
          tmp_5 = ULongArray__get_impl_pr71q9(qjhat, 0);
        } else {
          tmp_5 = this.js_1;
        }
        ULongArray__set_impl_z19mvh(tmp_4, j, tmp_5);
        reconstructedQuotient = this.pv(this.qw(divisor, ULongArray__get_impl_pr71q9(quotient, j), divisorCorrectedSize), imul(j, this.hs_1));
        while (this.ew(reconstructedQuotient, dividend) > 0) {
          var tmp_7 = quotient;
          // Inline function 'kotlin.ULong.minus' call
          var this_3 = ULongArray__get_impl_pr71q9(quotient, j);
          // Inline function 'kotlin.ULong.minus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_4 = _UInt___init__impl__l7qpdl(1);
          var other_2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_4)).d3(new Long(-1, 0)));
          var tmp$ret$10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).s2(_ULong___get_data__impl__fggpzb(other_2)));
          ULongArray__set_impl_z19mvh(tmp_7, j, tmp$ret$10);
          reconstructedQuotient = this.pv(this.qw(divisor, ULongArray__get_impl_pr71q9(quotient, j), divisorCorrectedSize), imul(j, this.hs_1));
        }
        dividend = this.dw(dividend, reconstructedQuotient);
      }
       while (0 <= inductionVariable);
    while (this.ew(dividend, divisor) >= 0) {
      quotient = this.vw(quotient, _ULong___init__impl__c78o9k(new Long(1, 0)));
      dividend = this.dw(dividend, divisor);
    }
    var denormRemainder = this.sw(dividend, normalizationShift);
    return new Pair(new ULongArray(this.ts(quotient)), new ULongArray(denormRemainder));
  };
  protoOf(BigInteger63Arithmetic).zw = function (operand) {
    if (isZero(operand, this))
      return this.cs_1;
    var length = this.jt(operand);
    var tmp;
    if ((length % 64 | 0) === 0) {
      tmp = length / 64 | 0;
    } else {
      tmp = (length / 64 | 0) + 1 | 0;
    }
    var requiredLength = tmp;
    var wordStep;
    var shiftAmount;
    var result = _ULongArray___init__impl__twm1l3_0(requiredLength);
    var inductionVariable = 0;
    if (inductionVariable < requiredLength)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        wordStep = i / 63 | 0;
        shiftAmount = i % 63 | 0;
        if (((i + wordStep | 0) + 1 | 0) < _ULongArray___get_size__impl__ju6dtr(operand)) {
          // Inline function 'kotlin.ULong.or' call
          // Inline function 'kotlin.ULong.shr' call
          var this_0 = ULongArray__get_impl_pr71q9(operand, i + wordStep | 0);
          var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).c3(shiftAmount));
          // Inline function 'kotlin.ULong.shl' call
          var this_2 = ULongArray__get_impl_pr71q9(operand, (i + wordStep | 0) + 1 | 0);
          var bitCount = 63 - shiftAmount | 0;
          var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).a3(bitCount));
          var tmp$ret$2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).e3(_ULong___get_data__impl__fggpzb(other)));
          ULongArray__set_impl_z19mvh(result, i, tmp$ret$2);
        } else {
          // Inline function 'kotlin.ULong.shr' call
          var this_3 = ULongArray__get_impl_pr71q9(operand, i + wordStep | 0);
          var tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).c3(shiftAmount));
          ULongArray__set_impl_z19mvh(result, i, tmp$ret$3);
        }
      }
       while (inductionVariable < requiredLength);
    return this.ts(result);
  };
  protoOf(BigInteger63Arithmetic).ax = function (operand) {
    var power64Representation = this.zw(operand);
    var result = _UIntArray___init__impl__ghjpc6(imul(_ULongArray___get_size__impl__ju6dtr(power64Representation), 2));
    var inductionVariable = 0;
    var last = _ULongArray___get_size__impl__ju6dtr(power64Representation);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = imul(2, i);
        // Inline function 'kotlin.ULong.toUInt' call
        // Inline function 'kotlin.ULong.and' call
        var this_0 = ULongArray__get_impl_pr71q9(power64Representation, i);
        // Inline function 'kotlin.UInt.toULong' call
        var this_1 = BigInteger32Arithmetic_getInstance().iu_1;
        var other = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_1)).d3(new Long(-1, 0)));
        var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).d3(_ULong___get_data__impl__fggpzb(other)));
        // Inline function 'kotlin.toUInt' call
        var this_3 = _ULong___get_data__impl__fggpzb(this_2);
        var tmp$ret$3 = _UInt___init__impl__l7qpdl(this_3.g3());
        UIntArray__set_impl_7f2zu2(result, tmp, tmp$ret$3);
        var tmp_0 = imul(2, i) + 1 | 0;
        // Inline function 'kotlin.ULong.toUInt' call
        // Inline function 'kotlin.ULong.shr' call
        var this_4 = ULongArray__get_impl_pr71q9(power64Representation, i);
        var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(32));
        // Inline function 'kotlin.toUInt' call
        var this_6 = _ULong___get_data__impl__fggpzb(this_5);
        var tmp$ret$6 = _UInt___init__impl__l7qpdl(this_6.g3());
        UIntArray__set_impl_7f2zu2(result, tmp_0, tmp$ret$6);
      }
       while (inductionVariable < last);
    return BigInteger32Arithmetic_getInstance().vu(result);
  };
  protoOf(BigInteger63Arithmetic).bx = function (operand) {
    if (_UIntArray___get_size__impl__r6l8ci(operand) === 0) {
      return this.cs_1;
    }
    if (_UIntArray___get_size__impl__r6l8ci(operand) === 1) {
      // Inline function 'kotlin.ulongArrayOf' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_0 = UIntArray__get_impl_gp5kza(operand, 0);
      var tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_0)).d3(new Long(-1, 0)));
      return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
    }
    var length = BigInteger32Arithmetic_getInstance().tu(operand);
    var tmp;
    if ((length % 63 | 0) === 0) {
      tmp = length / 63 | 0;
    } else {
      tmp = (length / 63 | 0) + 1 | 0;
    }
    var requiredLength = tmp;
    var result = _ULongArray___init__impl__twm1l3_0(requiredLength);
    var skipWordCount;
    var inductionVariable = 0;
    if (inductionVariable < requiredLength)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        skipWordCount = i / 32 | 0;
        var shiftAmount = i % 32 | 0;
        var position = imul(i, 2) - skipWordCount | 0;
        if (requiredLength === 2) {
          // Inline function 'kotlin.ULong.or' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_1 = UIntArray__get_impl_gp5kza(operand, 0);
          var this_2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_1)).d3(new Long(-1, 0)));
          // Inline function 'kotlin.ULong.and' call
          // Inline function 'kotlin.ULong.shl' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_3 = UIntArray__get_impl_gp5kza(operand, 1);
          var this_4 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_3)).d3(new Long(-1, 0)));
          var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).a3(32));
          var other = this.ms_1;
          var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).d3(_ULong___get_data__impl__fggpzb(other)));
          var tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).e3(_ULong___get_data__impl__fggpzb(other_0)));
          ULongArray__set_impl_z19mvh(result, 0, tmp$ret$6);
          if (_UIntArray___get_size__impl__r6l8ci(operand) === 4) {
            // Inline function 'kotlin.ULong.or' call
            // Inline function 'kotlin.ULong.or' call
            // Inline function 'kotlin.ULong.shr' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_6 = UIntArray__get_impl_gp5kza(operand, 1);
            var this_7 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_6)).d3(new Long(-1, 0)));
            var this_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).c3(31));
            // Inline function 'kotlin.ULong.shl' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_9 = UIntArray__get_impl_gp5kza(operand, 2);
            var this_10 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_9)).d3(new Long(-1, 0)));
            var other_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_10).a3(1));
            var this_11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_8).e3(_ULong___get_data__impl__fggpzb(other_1)));
            // Inline function 'kotlin.ULong.shl' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_12 = UIntArray__get_impl_gp5kza(operand, 3);
            var this_13 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_12)).d3(new Long(-1, 0)));
            var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_13).a3(33));
            var tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_11).e3(_ULong___get_data__impl__fggpzb(other_2)));
            ULongArray__set_impl_z19mvh(result, 1, tmp$ret$14);
          } else {
            if (_UIntArray___get_size__impl__r6l8ci(operand) > 2) {
              // Inline function 'kotlin.ULong.or' call
              // Inline function 'kotlin.ULong.shr' call
              // Inline function 'kotlin.UInt.toULong' call
              var this_14 = UIntArray__get_impl_gp5kza(operand, 1);
              var this_15 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_14)).d3(new Long(-1, 0)));
              var this_16 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_15).c3(31));
              // Inline function 'kotlin.ULong.shl' call
              // Inline function 'kotlin.UInt.toULong' call
              var this_17 = UIntArray__get_impl_gp5kza(operand, 2);
              var this_18 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_17)).d3(new Long(-1, 0)));
              var other_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_18).a3(1));
              var tmp$ret$19 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_16).e3(_ULong___get_data__impl__fggpzb(other_3)));
              ULongArray__set_impl_z19mvh(result, 1, tmp$ret$19);
            } else {
              // Inline function 'kotlin.ULong.shr' call
              // Inline function 'kotlin.UInt.toULong' call
              var this_19 = UIntArray__get_impl_gp5kza(operand, 1);
              var this_20 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_19)).d3(new Long(-1, 0)));
              var tmp$ret$21 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_20).c3(31));
              ULongArray__set_impl_z19mvh(result, 1, tmp$ret$21);
            }
          }
        } else {
          if (i === 0) {
            // Inline function 'kotlin.ULong.or' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_21 = UIntArray__get_impl_gp5kza(operand, 0);
            var this_22 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_21)).d3(new Long(-1, 0)));
            // Inline function 'kotlin.ULong.and' call
            // Inline function 'kotlin.ULong.shl' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_23 = UIntArray__get_impl_gp5kza(operand, 1);
            var this_24 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_23)).d3(new Long(-1, 0)));
            var this_25 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_24).a3(32));
            var other_4 = this.ms_1;
            var other_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_25).d3(_ULong___get_data__impl__fggpzb(other_4)));
            var tmp$ret$26 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_22).e3(_ULong___get_data__impl__fggpzb(other_5)));
            ULongArray__set_impl_z19mvh(result, i, tmp$ret$26);
          } else if (1 <= i ? i < (requiredLength - 1 | 0) : false) {
            // Inline function 'kotlin.ULong.or' call
            // Inline function 'kotlin.ULong.or' call
            // Inline function 'kotlin.ULong.shr' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_26 = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
            var this_27 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_26)).d3(new Long(-1, 0)));
            var bitCount = 32 - shiftAmount | 0;
            var this_28 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_27).c3(bitCount));
            // Inline function 'kotlin.ULong.shl' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_29 = UIntArray__get_impl_gp5kza(operand, position);
            var this_30 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_29)).d3(new Long(-1, 0)));
            var other_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_30).a3(shiftAmount));
            var this_31 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_28).e3(_ULong___get_data__impl__fggpzb(other_6)));
            // Inline function 'kotlin.ULong.and' call
            // Inline function 'kotlin.ULong.shl' call
            // Inline function 'kotlin.UInt.toULong' call
            var this_32 = UIntArray__get_impl_gp5kza(operand, position + 1 | 0);
            var this_33 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_32)).d3(new Long(-1, 0)));
            var bitCount_0 = 32 + shiftAmount | 0;
            var this_34 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_33).a3(bitCount_0));
            var other_7 = this.ms_1;
            var other_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_34).d3(_ULong___get_data__impl__fggpzb(other_7)));
            var tmp$ret$35 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_31).e3(_ULong___get_data__impl__fggpzb(other_8)));
            ULongArray__set_impl_z19mvh(result, i, tmp$ret$35);
          } else if (i === (requiredLength - 1 | 0)) {
            if (position < _UIntArray___get_size__impl__r6l8ci(operand)) {
              // Inline function 'kotlin.ULong.or' call
              // Inline function 'kotlin.ULong.shr' call
              // Inline function 'kotlin.UInt.toULong' call
              var this_35 = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
              var this_36 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_35)).d3(new Long(-1, 0)));
              var bitCount_1 = 32 - shiftAmount | 0;
              var this_37 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_36).c3(bitCount_1));
              // Inline function 'kotlin.ULong.shl' call
              // Inline function 'kotlin.UInt.toULong' call
              var this_38 = UIntArray__get_impl_gp5kza(operand, position);
              var this_39 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_38)).d3(new Long(-1, 0)));
              var other_9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_39).a3(shiftAmount));
              var tmp$ret$40 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_37).e3(_ULong___get_data__impl__fggpzb(other_9)));
              ULongArray__set_impl_z19mvh(result, i, tmp$ret$40);
            } else {
              // Inline function 'kotlin.ULong.shr' call
              // Inline function 'kotlin.UInt.toULong' call
              var this_40 = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
              var this_41 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_40)).d3(new Long(-1, 0)));
              var bitCount_2 = 32 - shiftAmount | 0;
              var tmp$ret$42 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_41).c3(bitCount_2));
              ULongArray__set_impl_z19mvh(result, i, tmp$ret$42);
            }
          }
        }
      }
       while (inductionVariable < requiredLength);
    return result;
  };
  protoOf(BigInteger63Arithmetic).et = function (first, second) {
    return this.uw(first, second);
  };
  protoOf(BigInteger63Arithmetic).vv = function (_this__u8e3s4, other) {
    return signedAdd(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).xv = function (_this__u8e3s4, other) {
    return signedSubtract(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).uv = function (_this__u8e3s4, other) {
    return signedMultiply(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).pw = function (_this__u8e3s4, other) {
    return signedDivide(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).tv = function (_this__u8e3s4, places) {
    return new SignedULongArray(this.tw(_this__u8e3s4.yv_1, places), _this__u8e3s4.zv_1);
  };
  protoOf(BigInteger63Arithmetic).wv = function (_this__u8e3s4, places) {
    return new SignedULongArray(this.pv(_this__u8e3s4.yv_1, places), _this__u8e3s4.zv_1);
  };
  protoOf(BigInteger63Arithmetic).sv = function (_this__u8e3s4, operand) {
    return new SignedULongArray(this.cx(_this__u8e3s4.yv_1, operand), _this__u8e3s4.zv_1);
  };
  protoOf(BigInteger63Arithmetic).qr = function (number, base) {
    var parsed = this.cs_1;
    // Inline function 'kotlin.text.forEach' call
    // Inline function 'kotlin.text.toLowerCase' call
    // Inline function 'kotlin.js.asDynamic' call
    var indexedObject = number.toLowerCase();
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(indexedObject)) {
      var element = charSequenceGet(indexedObject, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.parseForBase.<anonymous>' call
      var tmp = BigInteger63Arithmetic_getInstance();
      var tmp_0 = BigInteger63Arithmetic_getInstance();
      var tmp_1 = parsed;
      // Inline function 'kotlin.toULong' call
      var tmp$ret$2 = _ULong___init__impl__c78o9k(toLong(base));
      var tmp_2 = tmp_0.dx(tmp_1, tmp$ret$2);
      // Inline function 'kotlin.toULong' call
      var this_0 = toDigit(element, base);
      var tmp$ret$3 = _ULong___init__impl__c78o9k(toLong(this_0));
      parsed = tmp.vw(tmp_2, tmp$ret$3);
    }
    return this.ts(parsed);
  };
  protoOf(BigInteger63Arithmetic).nt = function (operand, base) {
    // Inline function 'kotlin.collections.copyOf' call
    var copy = _ULongArray___init__impl__twm1l3(copyOf(_ULongArray___get_storage__impl__28e64j(operand)));
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.toULong' call
    var tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(base));
    var baseArray = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    var stringBuilder = StringBuilder_init_$Create$();
    while (!equals(copy, this.cs_1)) {
      var divremResult = this.ex(copy, baseArray);
      if (ULongArray__isEmpty_impl_c3yngu(divremResult.fe_1.nm_1)) {
        stringBuilder.l7(0);
      } else {
        stringBuilder.m7(toString_0(ULongArray__get_impl_pr71q9(divremResult.fe_1.nm_1, 0), base));
      }
      copy = divremResult.ee_1.nm_1;
    }
    // Inline function 'kotlin.text.reversed' call
    var this_0 = stringBuilder.toString();
    return toString(reversed(isCharSequence(this_0) ? this_0 : THROW_CCE()));
  };
  protoOf(BigInteger63Arithmetic).cx = function (operand, mask) {
    var tmp;
    if (_ULongArray___get_size__impl__ju6dtr(operand) > _ULongArray___get_size__impl__ju6dtr(mask)) {
      tmp = new Pair(new ULongArray(operand), new ULongArray(mask));
    } else {
      tmp = new Pair(new ULongArray(mask), new ULongArray(operand));
    }
    var tmp0_container = tmp;
    var bigger = tmp0_container.ge().nm_1;
    var smaller = tmp0_container.he().nm_1;
    // Inline function 'kotlin.ULongArray' call
    var tmp_0 = 0;
    var tmp_1 = _ULongArray___get_size__impl__ju6dtr(smaller);
    var tmp_2 = longArray(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      // Inline function 'kotlin.ULong.toLong' call
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.and.<anonymous>' call
      // Inline function 'kotlin.ULong.and' call
      var this_0 = ULongArray__get_impl_pr71q9(operand, tmp_3);
      var other = ULongArray__get_impl_pr71q9(mask, tmp_3);
      var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).d3(_ULong___get_data__impl__fggpzb(other)));
      tmp_2[tmp_3] = _ULong___get_data__impl__fggpzb(this_1);
      tmp_0 = tmp_0 + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_2);
  };
  protoOf(BigInteger63Arithmetic).pv = function (_this__u8e3s4, places) {
    return this.jw(_this__u8e3s4, places);
  };
  protoOf(BigInteger63Arithmetic).tw = function (_this__u8e3s4, places) {
    return this.kw(_this__u8e3s4, places);
  };
  protoOf(BigInteger63Arithmetic).qv = function (_this__u8e3s4, other) {
    return this.ws(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).dw = function (_this__u8e3s4, other) {
    return this.vs(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).fw = function (_this__u8e3s4, other) {
    return this.ct(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).vw = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.ws(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger63Arithmetic).rv = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.vs(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger63Arithmetic).dx = function (_this__u8e3s4, other) {
    return this.ov(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).gw = function (_this__u8e3s4, other) {
    return this.et(_this__u8e3s4, other).ee_1.nm_1;
  };
  protoOf(BigInteger63Arithmetic).ex = function (_this__u8e3s4, other) {
    return this.et(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).ew = function (_this__u8e3s4, other) {
    return this.zr(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).yw = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.zr(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger63Arithmetic).ww = function (_this__u8e3s4) {
    return this.ax(_this__u8e3s4);
  };
  protoOf(BigInteger63Arithmetic).xw = function (_this__u8e3s4) {
    return this.bx(_this__u8e3s4);
  };
  protoOf(BigInteger63Arithmetic).sr = function (uLong) {
    var tmp;
    // Inline function 'kotlin.ULong.and' call
    var other = this.ns_1;
    var tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(uLong).d3(_ULong___get_data__impl__fggpzb(other)));
    if (!equals(tmp$ret$0, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      // Inline function 'kotlin.ulongArrayOf' call
      // Inline function 'kotlin.ULong.and' call
      var other_0 = this.js_1;
      var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(uLong).d3(_ULong___get_data__impl__fggpzb(other_0)));
      tmp = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1, _ULong___init__impl__c78o9k(new Long(1, 0))]));
    } else {
      // Inline function 'kotlin.ulongArrayOf' call
      tmp = _ULongArray___init__impl__twm1l3(longArrayOf([uLong]));
    }
    return tmp;
  };
  protoOf(BigInteger63Arithmetic).ur = function (uInt) {
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.UInt.toULong' call
    var tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(uInt)).d3(new Long(-1, 0)));
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
  };
  protoOf(BigInteger63Arithmetic).wr = function (uShort) {
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.UShort.toULong' call
    var tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UShort___get_data__impl__g0245(uShort)).d3(new Long(65535, 0)));
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
  };
  protoOf(BigInteger63Arithmetic).yr = function (uByte) {
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.UByte.toULong' call
    var tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UByte___get_data__impl__jof9qr(uByte)).d3(new Long(255, 0)));
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
  };
  protoOf(BigInteger63Arithmetic).ir = function (long) {
    if (long.equals(new Long(0, -2147483648))) {
      // Inline function 'kotlin.ulongArrayOf' call
      return _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    }
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.ULong.and' call
    // Inline function 'kotlin.toULong' call
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = abs(long);
    var this_1 = _ULong___init__impl__c78o9k(this_0);
    var other = this.js_1;
    var tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).d3(_ULong___get_data__impl__fggpzb(other)));
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$3]));
  };
  protoOf(BigInteger63Arithmetic).jr = function (int) {
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.toULong' call
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = toLong(int);
    var this_1 = abs(this_0);
    var tmp$ret$1 = _ULong___init__impl__c78o9k(this_1);
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
  };
  protoOf(BigInteger63Arithmetic).kr = function (short) {
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.toULong' call
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = abs_0(short);
    var tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(this_0));
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
  };
  protoOf(BigInteger63Arithmetic).lr = function (byte) {
    // Inline function 'kotlin.ulongArrayOf' call
    // Inline function 'kotlin.toULong' call
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = abs_0(byte);
    var tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(this_0));
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
  };
  var BigInteger63Arithmetic_instance;
  function BigInteger63Arithmetic_getInstance() {
    if (BigInteger63Arithmetic_instance == null)
      new BigInteger63Arithmetic();
    return BigInteger63Arithmetic_instance;
  }
  function toDigit(_this__u8e3s4, base) {
    base = base === VOID ? 10 : base;
    var tmp;
    if (_Char___init__impl__6a9atx(48) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57) : false) {
      tmp = Char__toInt_impl_vasixd(Char__minus_impl_a2frrh_0(_this__u8e3s4, 48));
    } else if (_Char___init__impl__6a9atx(97) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(122) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(97)) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(90) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65)) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65313) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(65338) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65313)) - 10 | 0;
    } else if (_Char___init__impl__6a9atx(65345) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(65370) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65345)) - 10 | 0;
    } else if (_this__u8e3s4 === _Char___init__impl__6a9atx(46)) {
      throw NumberFormatException_init_$Create$('Invalid digit for radix ' + toString_1(_this__u8e3s4) + ' (Possibly a decimal value, which is not supported by BigInteger parser');
    } else {
      throw NumberFormatException_init_$Create$('Invalid digit for radix ' + toString_1(_this__u8e3s4));
    }
    var digit = tmp;
    if (digit < 0 ? true : digit >= base) {
      throw NumberFormatException_init_$Create$(toString_1(_this__u8e3s4) + ' is not a valid digit for number system with base ' + base);
    }
    return digit;
  }
  function RuntimePlatform() {
  }
  protoOf(RuntimePlatform).cr = function () {
    return Platform_JS_getInstance();
  };
  var RuntimePlatform_instance;
  function RuntimePlatform_getInstance() {
    return RuntimePlatform_instance;
  }
  //region block: post-declaration
  protoOf(Companion).bn = tryFromFloat$default;
  protoOf(Companion).dn = tryFromDouble$default;
  protoOf(Companion).ym = parseString$default;
  protoOf(BigDecimal).vn = intValue$default;
  protoOf(BigDecimal).on = plus_1;
  protoOf(BigDecimal).qn = minus_0;
  protoOf(Companion_1).ym = parseString$default;
  protoOf(Companion_1).bn = tryFromFloat$default;
  protoOf(Companion_1).dn = tryFromDouble$default;
  protoOf(BigInteger).vn = intValue$default;
  protoOf(BigInteger).gn = plus_0;
  protoOf(BigInteger).in = minus;
  protoOf(BigInteger).kn = times;
  protoOf(BigInteger).pn = times_0;
  protoOf(BigInteger).mn = div;
  protoOf(BigInteger).rn = div_0;
  protoOf(BigInteger).sn = rem;
  //endregion
  //region block: init
  RuntimePlatform_instance = new RuntimePlatform();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = times_1;
  _.$_$.b = toBigInteger;
  _.$_$.c = BigInteger_init_$Create$_0;
  _.$_$.d = Companion_getInstance_1;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/Tidyparse-tidyparse-web-frontend.js":
/*!****************************************************!*\
  !*** ./kotlin/Tidyparse-tidyparse-web-frontend.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./galoisenne.js */ "./kotlin/galoisenne.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlinx-coroutines-core.js */ "./kotlin/kotlinx-coroutines-core.js"), __webpack_require__(/*! ./multik-multik-kotlin.js */ "./kotlin/multik-multik-kotlin.js"), __webpack_require__(/*! ./multik-multik-default.js */ "./kotlin/multik-multik-default.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_ai_hypergraph_galoisenne, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core, kotlin_org_jetbrains_kotlinx_multik_kotlin, kotlin_org_jetbrains_kotlinx_multik_default) {
  'use strict';
  //region block: imports
  var parseCFG = kotlin_ai_hypergraph_galoisenne.$_$.b;
  var Unit_instance = kotlin_kotlin.$_$.t2;
  var substringBefore = kotlin_kotlin.$_$.u9;
  var ensureNotNull = kotlin_kotlin.$_$.ya;
  var indexOf = kotlin_kotlin.$_$.g9;
  var split = kotlin_kotlin.$_$.s9;
  var last = kotlin_kotlin.$_$.c4;
  var contains = kotlin_kotlin.$_$.b9;
  var GlobalScope_instance = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.a;
  var VOID = kotlin_kotlin.$_$.c;
  var async = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.c;
  var tokenizeByWhitespace = kotlin_ai_hypergraph_galoisenne.$_$.e;
  var hashCode = kotlin_kotlin.$_$.h7;
  var println = kotlin_kotlin.$_$.q6;
  var enumSeqSmart = kotlin_ai_hypergraph_galoisenne.$_$.a;
  var distinct = kotlin_kotlin.$_$.m8;
  var take = kotlin_kotlin.$_$.y8;
  var parse = kotlin_ai_hypergraph_galoisenne.$_$.c;
  var repairSeq = kotlin_ai_hypergraph_galoisenne.$_$.d;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.f;
  var THROW_CCE = kotlin_kotlin.$_$.na;
  var Map = kotlin_kotlin.$_$.x2;
  var isInterface = kotlin_kotlin.$_$.k7;
  var protoOf = kotlin_kotlin.$_$.v7;
  var Comparator = kotlin_kotlin.$_$.fa;
  var classMeta = kotlin_kotlin.$_$.y6;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var sortedWith = kotlin_kotlin.$_$.a5;
  var joinToString = kotlin_kotlin.$_$.b4;
  var CoroutineImpl = kotlin_kotlin.$_$.o6;
  var CoroutineScope = kotlin_org_jetbrains_kotlinx_kotlinx_coroutines_core.$_$.b;
  var compareValues = kotlin_kotlin.$_$.y5;
  var KProperty0 = kotlin_kotlin.$_$.i8;
  var getPropertyCallableRef = kotlin_kotlin.$_$.f7;
  var lazy = kotlin_kotlin.$_$.za;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.i;
  //endregion
  //region block: pre-declaration
  setMetadataFor(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(updateRecommendations$slambda, 'updateRecommendations$slambda', classMeta, CoroutineImpl, VOID, VOID, VOID, VOID, [1]);
  //endregion
  function set_cfg(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    cfg = _set____db54di;
  }
  function get_cfg() {
    _init_properties_Client_kt__a2ryqz();
    return cfg;
  }
  var cfg;
  function set_cachedGrammar(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    cachedGrammar = _set____db54di;
  }
  function get_cachedGrammar() {
    _init_properties_Client_kt__a2ryqz();
    return cachedGrammar;
  }
  var cachedGrammar;
  function set_ongoingWork(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    ongoingWork = _set____db54di;
  }
  function get_ongoingWork() {
    _init_properties_Client_kt__a2ryqz();
    return ongoingWork;
  }
  var ongoingWork;
  function get_inputField() {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.getValue' call
    var this_0 = inputField$delegate;
    inputField$factory();
    return this_0.e2();
  }
  var inputField$delegate;
  function get_outputField() {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.getValue' call
    var this_0 = outputField$delegate;
    outputField$factory();
    return this_0.e2();
  }
  var outputField$delegate;
  function get_cache() {
    _init_properties_Client_kt__a2ryqz();
    return cache;
  }
  var cache;
  function set_workHash(_set____db54di) {
    _init_properties_Client_kt__a2ryqz();
    workHash = _set____db54di;
  }
  function get_workHash() {
    _init_properties_Client_kt__a2ryqz();
    return workHash;
  }
  var workHash;
  function get_toTake() {
    _init_properties_Client_kt__a2ryqz();
    return toTake;
  }
  var toTake;
  function main() {
    _init_properties_Client_kt__a2ryqz();
    preprocessGrammar();
    var tmp = get_inputField();
    tmp.addEventListener('input', main$lambda);
  }
  function preprocessGrammar() {
    _init_properties_Client_kt__a2ryqz();
    var currentGrammar = grammar(get_inputField());
    if (!(get_cachedGrammar() === currentGrammar)) {
      set_cfg(parseCFG(currentGrammar));
    }
    set_cachedGrammar(currentGrammar);
  }
  function grammar(_this__u8e3s4) {
    _init_properties_Client_kt__a2ryqz();
    return substringBefore(_this__u8e3s4.value, '---');
  }
  function getEndOfLineIdx(_this__u8e3s4) {
    _init_properties_Client_kt__a2ryqz();
    return indexOf(_this__u8e3s4.value, '\n', ensureNotNull(_this__u8e3s4.selectionStart));
  }
  function getCurrentLine(_this__u8e3s4) {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.text.substring' call
    var this_0 = _this__u8e3s4.value;
    var endIndex = getEndOfLineIdx(_this__u8e3s4);
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = this_0.substring(0, endIndex);
    return last(split(tmp$ret$1, ['\n']));
  }
  function isCursorInsideGrammar(_this__u8e3s4) {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.text.substring' call
    var this_0 = _this__u8e3s4.value;
    var endIndex = ensureNotNull(get_inputField().selectionStart);
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = this_0.substring(0, endIndex);
    return contains(tmp$ret$1, '---');
  }
  function processEditorContents() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0_safe_receiver = get_ongoingWork();
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.v1a();
    }
    set_ongoingWork(updateRecommendations());
    preprocessGrammar();
  }
  function updateRecommendations() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = GlobalScope_instance;
    return async(tmp, VOID, VOID, updateRecommendations$slambda_0(null));
  }
  function handleInput(_this__u8e3s4) {
    _init_properties_Client_kt__a2ryqz();
    preprocessGrammar();
    if (!isCursorInsideGrammar(get_inputField()))
      return Unit_instance;
    var line = getCurrentLine(get_inputField());
    set_workHash(hashCode(tokenizeByWhitespace(line)));
    if (!contains(line, '_')) {
      var tmp2_safe_receiver = parse(ensureNotNull(get_cfg()), line);
      var tree = tmp2_safe_receiver == null ? null : tmp2_safe_receiver.q15();
      if (!(tree == null)) {
        get_outputField().textContent = line + '\n\n' + tree;
      } else {
        extractAndRender(take(distinct(repairSeq(ensureNotNull(get_cfg()), tokenizeByWhitespace(line))), get_toTake()).h(), get_workHash());
      }
    } else {
      get_outputField().textContent = 'Solving: ' + line + '\n';
      println('Repairing ' + line);
      extractAndRender(take(distinct(enumSeqSmart(ensureNotNull(get_cfg()), tokenizeByWhitespace(line))), get_toTake()).h(), get_workHash());
    }
  }
  function extractAndRender(_this__u8e3s4, line) {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.collections.mutableListOf' call
    var repairsToDisplay = ArrayList_init_$Create$();
    var workHashWhenStarted = get_workHash();
    // Inline function 'kotlin.collections.contains' call
    // Inline function 'kotlin.collections.containsKey' call
    var this_0 = get_cache();
    if ((isInterface(this_0, Map) ? this_0 : THROW_CCE()).f2(line)) {
      get_outputField().textContent = get_cache().h2(line);
    } else {
      extractAndRender$rerenderAndPause(workHashWhenStarted, _this__u8e3s4, repairsToDisplay, line);
    }
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.p1h_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).yb = function (a, b) {
    return this.p1h_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.yb(a, b);
  };
  function extractAndRender$updateDisplay(repairsToDisplay, suffix) {
    suffix = suffix === VOID ? '' : suffix;
    // Inline function 'kotlin.collections.sortedBy' call
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = extractAndRender$updateDisplay$lambda;
    var tmp$ret$0 = new sam$kotlin_Comparator$0(tmp);
    var tmp$ret$1 = sortedWith(repairsToDisplay, tmp$ret$0);
    var answerSet = joinToString(tmp$ret$1, '\n', '', suffix);
    get_outputField().textContent = answerSet;
    return answerSet;
  }
  function extractAndRender$rerenderAndPause(workHashWhenStarted, $this_extractAndRender, repairsToDisplay, $line) {
    if (workHashWhenStarted === get_workHash()) {
      if ($this_extractAndRender.i()) {
        repairsToDisplay.e($this_extractAndRender.j());
        extractAndRender$updateDisplay(repairsToDisplay);
        var tmp = window;
        tmp.setTimeout(extractAndRender$rerenderAndPause$lambda(workHashWhenStarted, $this_extractAndRender, repairsToDisplay, $line), 10);
      } else {
        // Inline function 'kotlin.collections.set' call
        var this_0 = get_cache();
        var value = extractAndRender$updateDisplay(repairsToDisplay, '\n...');
        this_0.s4($line, value);
      }
    }
  }
  function inputField$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = document.getElementById('tidyparse-input');
    return tmp instanceof HTMLTextAreaElement ? tmp : THROW_CCE();
  }
  function outputField$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = document.getElementById('tidyparse-output');
    return tmp instanceof Node ? tmp : THROW_CCE();
  }
  function main$lambda(it) {
    _init_properties_Client_kt__a2ryqz();
    processEditorContents();
    return Unit_instance;
  }
  function updateRecommendations$slambda(resultContinuation) {
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(updateRecommendations$slambda).z1h = function ($this$async, $completion) {
    var tmp = this.a1i($this$async, $completion);
    tmp.i8_1 = Unit_instance;
    tmp.j8_1 = null;
    return tmp.t8();
  };
  protoOf(updateRecommendations$slambda).i9 = function (p1, $completion) {
    return this.z1h((!(p1 == null) ? isInterface(p1, CoroutineScope) : false) ? p1 : THROW_CCE(), $completion);
  };
  protoOf(updateRecommendations$slambda).t8 = function () {
    var suspendResult = this.i8_1;
    $sm: do
      try {
        var tmp = this.g8_1;
        if (tmp === 0) {
          this.h8_1 = 1;
          handleInput(this.y1h_1);
          return Unit_instance;
        } else if (tmp === 1) {
          throw this.j8_1;
        }
      } catch ($p) {
        var e = $p;
        throw e;
      }
     while (true);
  };
  protoOf(updateRecommendations$slambda).a1i = function ($this$async, completion) {
    var i = new updateRecommendations$slambda(completion);
    i.y1h_1 = $this$async;
    return i;
  };
  function updateRecommendations$slambda_0(resultContinuation) {
    var i = new updateRecommendations$slambda(resultContinuation);
    var l = function ($this$async, $completion) {
      return i.z1h($this$async, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function extractAndRender$updateDisplay$lambda(a, b) {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'extractAndRender.updateDisplay.<anonymous>' call
    var tmp = a.length;
    // Inline function 'extractAndRender.updateDisplay.<anonymous>' call
    var tmp$ret$1 = b.length;
    return compareValues(tmp, tmp$ret$1);
  }
  function extractAndRender$rerenderAndPause$lambda($workHashWhenStarted, $this_extractAndRender, $repairsToDisplay, $line) {
    return function () {
      extractAndRender$rerenderAndPause($workHashWhenStarted, $this_extractAndRender, $repairsToDisplay, $line);
      return Unit_instance;
    };
  }
  function inputField$factory() {
    return getPropertyCallableRef('inputField', 0, KProperty0, function () {
      return get_inputField();
    }, null);
  }
  function outputField$factory() {
    return getPropertyCallableRef('outputField', 0, KProperty0, function () {
      return get_outputField();
    }, null);
  }
  var properties_initialized_Client_kt_4npn83;
  function _init_properties_Client_kt__a2ryqz() {
    if (!properties_initialized_Client_kt_4npn83) {
      properties_initialized_Client_kt_4npn83 = true;
      cfg = null;
      cachedGrammar = null;
      ongoingWork = null;
      inputField$delegate = lazy(inputField$delegate$lambda);
      outputField$delegate = lazy(outputField$delegate$lambda);
      // Inline function 'kotlin.collections.mutableMapOf' call
      cache = LinkedHashMap_init_$Create$();
      workHash = 0;
      toTake = 30;
    }
  }
  function mainWrapper() {
    main();
  }
  //region block: exports
  kotlin_org_jetbrains_kotlinx_multik_kotlin.$jsExportAll$(_);
  kotlin_org_jetbrains_kotlinx_multik_default.$jsExportAll$(_);
  //endregion
  mainWrapper();
  return _;
}));



/***/ }),

/***/ "./kotlin/galoisenne.js":
/*!******************************!*\
  !*** ./kotlin/galoisenne.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./KotlinBigInteger-bignum-js-ir.js */ "./kotlin/KotlinBigInteger-bignum-js-ir.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin, kotlin_com_ionspin_kotlin_bignum) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var tanh = Math.tanh;
  var log2 = Math.log2;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.h3;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.e;
  var Unit_instance = kotlin_kotlin.$_$.t2;
  var VOID = kotlin_kotlin.$_$.c;
  var getStringHashCode = kotlin_kotlin.$_$.g7;
  var Random = kotlin_kotlin.$_$.b8;
  var Collection = kotlin_kotlin.$_$.v2;
  var isInterface = kotlin_kotlin.$_$.k7;
  var KClass = kotlin_kotlin.$_$.h8;
  var NotImplementedError = kotlin_kotlin.$_$.ka;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var toString = kotlin_kotlin.$_$.y7;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.r;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.i;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.f;
  var replaceFirst = kotlin_kotlin.$_$.n9;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.f1;
  var charArrayOf = kotlin_kotlin.$_$.v6;
  var split = kotlin_kotlin.$_$.r9;
  var THROW_CCE = kotlin_kotlin.$_$.na;
  var isCharSequence = kotlin_kotlin.$_$.j7;
  var trim = kotlin_kotlin.$_$.aa;
  var joinToString = kotlin_kotlin.$_$.b4;
  var plus = kotlin_kotlin.$_$.q4;
  var plus_0 = kotlin_kotlin.$_$.r4;
  var charSequenceLength = kotlin_kotlin.$_$.x6;
  var charSequenceGet = kotlin_kotlin.$_$.w6;
  var Char = kotlin_kotlin.$_$.da;
  var Regex_init_$Create$ = kotlin_kotlin.$_$.m;
  var compareBy = kotlin_kotlin.$_$.x5;
  var sortedWith = kotlin_kotlin.$_$.a5;
  var numberToInt = kotlin_kotlin.$_$.r7;
  var to = kotlin_kotlin.$_$.eb;
  var numberRangeToNumber = kotlin_kotlin.$_$.p7;
  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.v;
  var compareTo = kotlin_kotlin.$_$.z6;
  var ensureNotNull = kotlin_kotlin.$_$.ya;
  var substringBefore = kotlin_kotlin.$_$.u9;
  var padStart = kotlin_kotlin.$_$.m9;
  var substringAfter = kotlin_kotlin.$_$.t9;
  var padEnd = kotlin_kotlin.$_$.l9;
  var toCharArray = kotlin_kotlin.$_$.w9;
  var toSet = kotlin_kotlin.$_$.s5;
  var Exception = kotlin_kotlin.$_$.ia;
  var LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.j;
  var protoOf = kotlin_kotlin.$_$.v7;
  var classMeta = kotlin_kotlin.$_$.y6;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var objectCreate = kotlin_kotlin.$_$.t7;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var emptySet = kotlin_kotlin.$_$.s3;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.k;
  var plus_1 = kotlin_kotlin.$_$.o4;
  var toSet_0 = kotlin_kotlin.$_$.q5;
  var interfaceMeta = kotlin_kotlin.$_$.i7;
  var mapCapacity = kotlin_kotlin.$_$.f4;
  var LinkedHashMap_init_$Create$_1 = kotlin_kotlin.$_$.h;
  var flatten = kotlin_kotlin.$_$.x3;
  var toMutableSet = kotlin_kotlin.$_$.p5;
  var retainAll = kotlin_kotlin.$_$.v4;
  var lazy = kotlin_kotlin.$_$.za;
  var toList = kotlin_kotlin.$_$.i5;
  var get_indices = kotlin_kotlin.$_$.z3;
  var zip = kotlin_kotlin.$_$.w5;
  var toMap = kotlin_kotlin.$_$.m5;
  var println = kotlin_kotlin.$_$.q6;
  var checkIndexOverflow = kotlin_kotlin.$_$.f3;
  var List = kotlin_kotlin.$_$.w2;
  var minus = kotlin_kotlin.$_$.j4;
  var setOf = kotlin_kotlin.$_$.w4;
  var intersect = kotlin_kotlin.$_$.a4;
  var plus_2 = kotlin_kotlin.$_$.n4;
  var contains = kotlin_kotlin.$_$.b9;
  var toMutableMap = kotlin_kotlin.$_$.o5;
  var listOf = kotlin_kotlin.$_$.e4;
  var Triple = kotlin_kotlin.$_$.oa;
  var addAll = kotlin_kotlin.$_$.a3;
  var hashCode = kotlin_kotlin.$_$.h7;
  var Pair = kotlin_kotlin.$_$.la;
  var Set = kotlin_kotlin.$_$.z2;
  var equals = kotlin_kotlin.$_$.b7;
  var plus_3 = kotlin_kotlin.$_$.m4;
  var copyToArray = kotlin_kotlin.$_$.m3;
  var Comparator = kotlin_kotlin.$_$.fa;
  var compareValues = kotlin_kotlin.$_$.y5;
  var minus_0 = kotlin_kotlin.$_$.i4;
  var listOf_0 = kotlin_kotlin.$_$.d4;
  var fillArrayVal = kotlin_kotlin.$_$.c7;
  var toIntArray = kotlin_kotlin.$_$.h5;
  var coerceAtLeast = kotlin_kotlin.$_$.e8;
  var KProperty1 = kotlin_kotlin.$_$.j8;
  var getPropertyCallableRef = kotlin_kotlin.$_$.f7;
  var toSet_1 = kotlin_kotlin.$_$.r5;
  var replace = kotlin_kotlin.$_$.o9;
  var emptyList = kotlin_kotlin.$_$.q3;
  var dropLast = kotlin_kotlin.$_$.o3;
  var last = kotlin_kotlin.$_$.c4;
  var removeAll = kotlin_kotlin.$_$.t4;
  var toMutableList = kotlin_kotlin.$_$.n5;
  var takeLast = kotlin_kotlin.$_$.d5;
  var firstOrNull = kotlin_kotlin.$_$.u3;
  var drop = kotlin_kotlin.$_$.p3;
  var first = kotlin_kotlin.$_$.w3;
  var mutableSetOf = kotlin_kotlin.$_$.k4;
  var toSet_2 = kotlin_kotlin.$_$.z8;
  var toBigInteger = kotlin_com_ionspin_kotlin_bignum.$_$.b;
  var Monotonic_instance = kotlin_kotlin.$_$.r2;
  var ValueTimeMark__elapsedNow_impl_eonqvs = kotlin_kotlin.$_$.e1;
  var TimedValue = kotlin_kotlin.$_$.ca;
  var Duration = kotlin_kotlin.$_$.ba;
  var shuffled = kotlin_kotlin.$_$.y4;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.d1;
  var Companion_getInstance = kotlin_com_ionspin_kotlin_bignum.$_$.d;
  var map = kotlin_kotlin.$_$.s8;
  var addAll_0 = kotlin_kotlin.$_$.b3;
  var distinct = kotlin_kotlin.$_$.n3;
  var CoroutineImpl = kotlin_kotlin.$_$.o6;
  var SequenceScope = kotlin_kotlin.$_$.k8;
  var times = kotlin_com_ionspin_kotlin_bignum.$_$.a;
  var get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.a6;
  var asSequence = kotlin_kotlin.$_$.d3;
  var sequence = kotlin_kotlin.$_$.v8;
  var distinct_0 = kotlin_kotlin.$_$.m8;
  var generateSequence = kotlin_kotlin.$_$.r8;
  var Default_getInstance = kotlin_kotlin.$_$.p2;
  var random = kotlin_kotlin.$_$.s4;
  var NoSuchElementException_init_$Create$_0 = kotlin_kotlin.$_$.w;
  var emptyMap = kotlin_kotlin.$_$.r3;
  var Map = kotlin_kotlin.$_$.x2;
  var toMap_0 = kotlin_kotlin.$_$.k5;
  var flatMap = kotlin_kotlin.$_$.q8;
  var BigInteger_init_$Create$ = kotlin_com_ionspin_kotlin_bignum.$_$.c;
  var sequenceOf = kotlin_kotlin.$_$.u8;
  var take = kotlin_kotlin.$_$.y8;
  var drop_0 = kotlin_kotlin.$_$.e9;
  var dropLast_0 = kotlin_kotlin.$_$.d9;
  var lines = kotlin_kotlin.$_$.k9;
  var Exception_init_$Create$ = kotlin_kotlin.$_$.q;
  var booleanArray = kotlin_kotlin.$_$.t6;
  var booleanArrayOf = kotlin_kotlin.$_$.s6;
  var first_0 = kotlin_kotlin.$_$.f9;
  var last_0 = kotlin_kotlin.$_$.j9;
  var setOf_0 = kotlin_kotlin.$_$.x4;
  var filterNot = kotlin_kotlin.$_$.o8;
  var zip_0 = kotlin_kotlin.$_$.a9;
  var toMap_1 = kotlin_kotlin.$_$.l5;
  var isBlank = kotlin_kotlin.$_$.h9;
  var first_1 = kotlin_kotlin.$_$.v3;
  var toBooleanArray = kotlin_kotlin.$_$.e5;
  var until = kotlin_kotlin.$_$.g8;
  var takeWhile = kotlin_kotlin.$_$.x8;
  var filter = kotlin_kotlin.$_$.p8;
  var checkCountOverflow = kotlin_kotlin.$_$.e3;
  var toString_0 = kotlin_kotlin.$_$.k1;
  var union = kotlin_kotlin.$_$.u5;
  var Char__rangeTo_impl_tkncvp = kotlin_kotlin.$_$.i1;
  var plus_4 = kotlin_kotlin.$_$.t8;
  var Long = kotlin_kotlin.$_$.ja;
  var any = kotlin_kotlin.$_$.l8;
  var replace_0 = kotlin_kotlin.$_$.p9;
  var downTo = kotlin_kotlin.$_$.f8;
  var plus_5 = kotlin_kotlin.$_$.p4;
  var toDoubleArray = kotlin_kotlin.$_$.g5;
  var sum = kotlin_kotlin.$_$.c5;
  var filterIndexed = kotlin_kotlin.$_$.n8;
  var shuffled_0 = kotlin_kotlin.$_$.w8;
  var toString_1 = kotlin_kotlin.$_$.y9;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.a2;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.b2;
  var ULongRange = kotlin_kotlin.$_$.d8;
  var nextULong = kotlin_kotlin.$_$.c8;
  var ULong = kotlin_kotlin.$_$.ta;
  var toLong = kotlin_kotlin.$_$.x7;
  var mapOf = kotlin_kotlin.$_$.g4;
  var plus_6 = kotlin_kotlin.$_$.l4;
  var getOrNull = kotlin_kotlin.$_$.y3;
  var toList_0 = kotlin_kotlin.$_$.j5;
  var windowed = kotlin_kotlin.$_$.v5;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.u;
  var firstOrNull_0 = kotlin_kotlin.$_$.t3;
  var getObjectHashCode = kotlin_kotlin.$_$.e7;
  var chunked = kotlin_kotlin.$_$.g3;
  var sorted = kotlin_kotlin.$_$.b5;
  var minus_1 = kotlin_kotlin.$_$.h4;
  var toDoubleArray_0 = kotlin_kotlin.$_$.f5;
  var contentEquals = kotlin_kotlin.$_$.i3;
  var newThrowable = kotlin_kotlin.$_$.o7;
  var stackTraceToString = kotlin_kotlin.$_$.bb;
  //endregion
  //region block: pre-declaration
  setMetadataFor(LRUCache, 'LRUCache', classMeta, VOID, VOID, LRUCache);
  function G1() {
    var tmp = this.yz();
    // Inline function 'kotlin.collections.setOf' call
    return tmp(emptySet());
  }
  function G2(graphs) {
    return this.G4(toList_0(graphs));
  }
  function G3(vertices) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(vertices.length);
    var inductionVariable = 0;
    var last = vertices.length;
    while (inductionVariable < last) {
      var item = vertices[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
      var tmp$ret$0 = get_graph(item);
      destination.e(tmp$ret$0);
    }
    return this.G4(destination);
  }
  function G4(list) {
    // Inline function 'kotlin.let' call
    var tmp;
    if (list.l()) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else if (allAre(list, this.G1())) {
      // Inline function 'kotlin.collections.fold' call
      var accumulator = this.G1();
      var tmp0_iterator = list.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
        accumulator = accumulator.c10(isInterface(element, IGraph) ? element : THROW_CCE());
      }
      tmp = accumulator;
    } else if (allAre(list, first_1(list))) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(list, 10));
      var tmp0_iterator_0 = list.h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
        var tmp$ret$3 = isInterface(item, IVertex) ? item : THROW_CCE();
        destination.e(tmp$ret$3);
      }
      tmp = toSet_0(destination);
    } else {
      throw Exception_init_$Create$('Unsupported constructor: G(' + joinToString(list, ',', VOID, VOID, VOID, VOID, IGF$G$lambda) + ')');
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
    var it = tmp;
    return this.yz()(it);
  }
  setMetadataFor(IGF, 'IGF', interfaceMeta);
  setMetadataFor(AGF, 'AGF', classMeta, VOID, [IGF]);
  function get_index() {
    return new VIndex(this.qz());
  }
  function get(vertexIdx) {
    return this.b10().m(vertexIdx);
  }
  function plus_7(that) {
    return this.yz()(plus_2(plus_2(this.d10(that), this.e10(that)), minus_0(that, this)));
  }
  function minus_2(graph) {
    return this.yz()(minus_0(this.qz(), graph.qz()));
  }
  function join(that) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.sortedBy' call
    var this_0 = intersect(this.qz(), that.qz());
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = IGraph$join$lambda;
    var tmp$ret$0 = new sam$kotlin_Comparator$0_2(tmp);
    var tmp$ret$1 = sortedWith(this_0, tmp$ret$0);
    var tmp_0 = toSet_0(tmp$ret$1);
    // Inline function 'kotlin.collections.sortedBy' call
    var this_1 = intersect(that.qz(), this.qz());
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp_1 = IGraph$join$lambda_0;
    var tmp$ret$2 = new sam$kotlin_Comparator$0_2(tmp_1);
    var tmp$ret$3 = sortedWith(this_1, tmp$ret$2);
    var this_2 = zip(tmp_0, toSet_0(tmp$ret$3));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
    var tmp0_iterator = this_2.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
      var left = item.ge();
      var right = item.he();
      var tmp_2 = this.a10();
      var tmp$ret$4 = tmp_2(left, IGraph$join$lambda_1(left, right));
      destination.e(tmp$ret$4);
    }
    return toSet_0(destination);
  }
  function reversed() {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = this.qz();
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.setOf' call
      var tmp$ret$1 = emptySet();
      result.s4(element, tmp$ret$1);
    }
    var tmp = result;
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var this_1 = this.qz();
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator_0 = this_1.h();
    while (tmp0_iterator_0.i()) {
      var element_0 = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_2 = get_outgoing(element_0);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
      var tmp0_iterator_1 = this_2.h();
      while (tmp0_iterator_1.i()) {
        var item = tmp0_iterator_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>.<anonymous>' call
        var tmp$ret$4 = to(item.i11(), this.zz()(item.i11(), element_0));
        destination_0.e(tmp$ret$4);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_1 = LinkedHashMap_init_$Create$();
    var tmp0_iterator_2 = destination.h();
    while (tmp0_iterator_2.i()) {
      var element_1 = tmp0_iterator_2.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      var key = element_1.ee_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_1.h2(key);
      var tmp_0;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_1.s4(key, answer);
        tmp_0 = answer;
      } else {
        tmp_0 = value;
      }
      var list_0 = tmp_0;
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      var tmp$ret$13 = element_1.fe_1;
      list_0.e(tmp$ret$13);
    }
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_2 = LinkedHashMap_init_$Create$_1(mapCapacity(destination_1.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_iterator_3 = destination_1.j2().h();
    while (tmp0_iterator_3.i()) {
      var element_2 = tmp0_iterator_3.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_1 = element_2.d2();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.component2' call
      var v = element_2.e2();
      var tmp$ret$18 = toSet_0(v);
      destination_2.s4(tmp_1, tmp$ret$18);
    }
    var this_3 = plus_6(tmp, destination_2);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_3 = ArrayList_init_$Create$(this_3.k());
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator_4 = this_3.j2().h();
    while (tmp0_iterator_4.i()) {
      var item_0 = tmp0_iterator_4.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var k = item_0.d2();
      // Inline function 'kotlin.collections.component2' call
      var v_0 = item_0.e2();
      var tmp_2 = this.a10();
      var tmp$ret$25 = tmp_2(k, IGraph$reversed$lambda(v_0));
      destination_3.e(tmp$ret$25);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
    var it = toSet_0(destination_3);
    return this.yz()(it);
  }
  function isomorphicTo(that) {
    return (this.k() === that.k() ? get_edges(this).k() === get_edges(that).k() : false) ? contentEquals(this.vz(), that.vz()) : false;
  }
  function vwise(lf) {
    var tmp = this.k();
    return DoubleMatrix_init_$Create$(tmp, VOID, IGraph$vwise$lambda(this, lf));
  }
  function transitiveClosure(vtxs) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_0 = get_edgList(this);
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.transitiveClosure.<anonymous>' call
      if (vtxs.f1(element.ee_1)) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var tmp0_iterator_0 = destination.h();
    while (tmp0_iterator_0.i()) {
      var item = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.transitiveClosure.<anonymous>' call
      var tmp$ret$3 = item.fe_1.i11();
      destination_0.e(tmp$ret$3);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.transitiveClosure.<anonymous>' call
    var it = minus_0(toSet_0(destination_0), vtxs);
    return it.l() ? vtxs : this.h10(plus_2(vtxs, it));
  }
  function asString() {
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_edgList(this);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.asString.<anonymous>' call
      var tmp$ret$0 = '' + item.ee_1 + ' -> ' + item.fe_1.i11();
      destination.e(tmp$ret$0);
    }
    return formatAsGrid(destination).toString();
  }
  setMetadataFor(IGraph, 'IGraph', interfaceMeta, VOID, [IGF, Set]);
  setMetadataFor(Graph, 'Graph', classMeta, AGF, [AGF, IGraph, Set]);
  function get_E0() {
    return LGFamily$_get_E_$lambda_nhvv0c;
  }
  function get_G0() {
    return LGFamily$_get_G_$lambda_c8zum2;
  }
  function get_V0() {
    return LGFamily$_get_V_$lambda_yfzuln;
  }
  setMetadataFor(LGFamily, 'LGFamily', interfaceMeta, VOID, [IGF]);
  setMetadataFor(LabeledGraph, 'LabeledGraph', classMeta, Graph, [Graph, LGFamily], LabeledGraph);
  setMetadataFor(Companion, 'Companion', objectMeta, LabeledGraph);
  setMetadataFor(LGBuilder, 'LGBuilder', classMeta);
  function neighbors(k, vertices) {
    var tmp;
    if (k === 0 ? true : equals(neighbors_0(vertices, this), vertices)) {
      tmp = vertices;
    } else {
      var tmp_0 = k - 1 | 0;
      var tmp_1 = plus_2(vertices, neighbors_0(vertices, this));
      tmp = this.z10(tmp_0, plus_1(tmp_1, isInterface(this, IVertex) ? this : THROW_CCE()));
    }
    return tmp;
  }
  function neighbors$default(k, vertices, $super) {
    k = k === VOID ? 0 : k;
    var tmp;
    if (vertices === VOID) {
      var tmp_0 = get_neighbors(this);
      tmp = plus_1(tmp_0, isInterface(this, IVertex) ? this : THROW_CCE());
    } else {
      tmp = vertices;
    }
    vertices = tmp;
    return $super === VOID ? this.z10(k, vertices) : neighbors(k, vertices);
  }
  setMetadataFor(IVertex, 'IVertex', interfaceMeta, VOID, [IGF]);
  setMetadataFor(Vertex, 'Vertex', classMeta, AGF, [AGF, IVertex]);
  setMetadataFor(LGVertex, 'LGVertex', classMeta, Vertex, [Vertex, LGFamily], LGVertex_init_$Create$);
  setMetadataFor(Edge, 'Edge', classMeta, AGF, [AGF, IGF]);
  setMetadataFor(LabeledEdge, 'LabeledEdge', classMeta, Edge, [Edge, LGFamily]);
  setMetadataFor(BiMap, 'BiMap', classMeta);
  setMetadataFor(Bindex, 'Bindex', classMeta, VOID, [List]);
  setMetadataFor(JoinMap, 'JoinMap', classMeta);
  setMetadataFor(FrozenCFG, 'FrozenCFG', classMeta, VOID, [Set]);
  setMetadataFor(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(CFL, 'CFL', classMeta);
  setMetadataFor(REL, 'REL', classMeta);
  setMetadataFor(CJL, 'CJL', classMeta);
  setMetadataFor(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(sam$kotlin_Comparator$0_1, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(PTree$sampleStrWithoutReplacement$slambda, 'PTree$sampleStrWithoutReplacement$slambda', classMeta, CoroutineImpl, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(PTree, 'PTree', classMeta, VOID, VOID, PTree);
  setMetadataFor(Repair, 'Repair', classMeta);
  setMetadataFor(Tree, 'Tree', classMeta);
  setMetadataFor(LFSR$slambda, 'LFSR$slambda', classMeta, CoroutineImpl, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(Companion_0, 'Companion', objectMeta);
  function shape() {
    return cc(this.by(), this.cy());
  }
  function plus_8(t) {
    var tmp = equals(this.v16(), t.v16());
    return this.x16(t, VOID, tmp, Matrix$plus$lambda(this, t));
  }
  function new$default(rows, cols, data, alg, $super) {
    rows = rows === VOID ? this.by() : rows;
    cols = cols === VOID ? this.cy() : cols;
    alg = alg === VOID ? this.k16() : alg;
    return $super === VOID ? this.o16(rows, cols, data, alg) : $super.o16.call(this, rows, cols, data, alg);
  }
  function safeJoin(that, ids, criteria, op) {
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!criteria) {
      // Inline function 'ai.hypergraph.kaliningraph.tensor.Matrix.safeJoin.<anonymous>' call
      var message = 'Dimension mismatch: ' + this.by() + ',' + this.cy() + ' . ' + that.by() + ',' + that.cy();
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.tensor.Matrix.safeJoin.<anonymous>' call
    var tmp = this.by();
    var tmp_0 = that.cy();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(ids, 10));
    var tmp0_iterator = ids.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.Matrix.safeJoin.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var i = item.m(0);
      // Inline function 'kotlin.collections.component2' call
      var j = item.m(1);
      var tmp$ret$3 = op(this.k16(), i, j);
      destination.e(tmp$ret$3);
    }
    return this.gx(tmp, tmp_0, destination);
  }
  function safeJoin$default(that, ids, criteria, op, $super) {
    ids = ids === VOID ? allPairs(this.by(), that.cy()) : ids;
    return $super === VOID ? this.w16(that, ids, criteria, op) : safeJoin(that, ids, criteria, op);
  }
  function get_0(r, c) {
    return this.fx().m(imul(r, this.cy()) + c | 0);
  }
  function get_1(r) {
    return toList(this.fx()).c2(imul(r, this.cy()), imul(r, this.cy()) + this.cy() | 0);
  }
  setMetadataFor(Matrix, 'Matrix', interfaceMeta);
  setMetadataFor(AbstractMatrix, 'AbstractMatrix', classMeta, VOID, [Matrix]);
  setMetadataFor(DoubleMatrix, 'DoubleMatrix', classMeta, AbstractMatrix);
  setMetadataFor(Companion_1, 'Companion', objectMeta);
  setMetadataFor(UTMatrix, 'UTMatrix', classMeta, AbstractMatrix);
  setMetadataFor(FreeMatrix, 'FreeMatrix', classMeta, AbstractMatrix);
  setMetadataFor(Companion_2, 'Companion', objectMeta);
  setMetadataFor(BooleanMatrix, 'BooleanMatrix', classMeta, AbstractMatrix);
  setMetadataFor(VT, 'VT', interfaceMeta, VOID, [List]);
  setMetadataFor(of, 'of', classMeta, VOID, [VT, List]);
  setMetadataFor(powerset$slambda, 'powerset$slambda', classMeta, CoroutineImpl, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(S, 'S', classMeta);
  setMetadataFor(O, 'O', objectMeta, S);
  setMetadataFor(VIndex, 'VIndex', classMeta);
  setMetadataFor(sam$kotlin_Comparator$0_2, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(sam$kotlin_properties_ReadOnlyProperty$0, 'sam$kotlin_properties_ReadOnlyProperty$0', classMeta);
  setMetadataFor(Ring, 'Ring', interfaceMeta);
  setMetadataFor(Field, 'Field', interfaceMeta, VOID, [Ring]);
  setMetadataFor(of_0, 'of', classMeta, VOID, [Field]);
  setMetadataFor(of_1, 'of', classMeta, VOID, [Ring]);
  //endregion
  var ACT_TANH;
  var NORM_AVG;
  function elwise(_this__u8e3s4, op) {
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.collections.map' call
    var this_0 = _this__u8e3s4.fx();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.elwise.<anonymous>' call
      var tmp$ret$0 = op(item);
      destination.e(tmp$ret$0);
    }
    return _this__u8e3s4.gx(VOID, VOID, destination);
  }
  function meanNorm(_this__u8e3s4) {
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.fold' call
    var this_0 = _this__u8e3s4.fx();
    var accumulator = VT_0(0.0, 0.0, 0.0);
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.meanNorm.<anonymous>' call
      var destruct = accumulator;
      // Inline function 'kotlin.collections.component1' call
      var a = destruct.m(0);
      // Inline function 'kotlin.collections.component2' call
      var b = destruct.m(1);
      // Inline function 'kotlin.collections.component3' call
      var c = destruct.m(2);
      var tmp = a + element / _this__u8e3s4.fx().k();
      // Inline function 'kotlin.math.min' call
      var tmp_0 = Math.min(b, element);
      // Inline function 'kotlin.math.max' call
      var tmp$ret$4 = Math.max(c, element);
      accumulator = VT_0(tmp, tmp_0, tmp$ret$4);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.meanNorm.<anonymous>' call
    var destruct_0 = accumulator;
    // Inline function 'kotlin.collections.component1' call
    var μ = destruct_0.m(0);
    // Inline function 'kotlin.collections.component2' call
    var min = destruct_0.m(1);
    // Inline function 'kotlin.collections.component3' call
    var max = destruct_0.m(2);
    return elwise(_this__u8e3s4, meanNorm$lambda(μ, max, min));
  }
  function kroneckerDelta(i, j) {
    _init_properties_CommonUtils_kt__3s0my4();
    return i === j ? 1.0 : 0.0;
  }
  function toDoubleMatrix(_this__u8e3s4) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp = _this__u8e3s4.length;
    var tmp_0 = _this__u8e3s4[0].length;
    return DoubleMatrix_init_$Create$(tmp, tmp_0, toDoubleMatrix$lambda(_this__u8e3s4));
  }
  function vectorize(_this__u8e3s4, len) {
    len = len === VOID ? 20 : len;
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.vectorize.<anonymous>' call
    var it = Random(getStringHashCode(_this__u8e3s4));
    return randomVector(len, vectorize$lambda(it));
  }
  function allAre(_this__u8e3s4, that) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(_this__u8e3s4, Collection)) {
        tmp = _this__u8e3s4.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = _this__u8e3s4.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.allAre.<anonymous>' call
        if (!isA(element, that)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function isA(_this__u8e3s4, that) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp;
    var tmp_0;
    if (!isInterface(_this__u8e3s4, KClass)) {
      tmp_0 = !isInterface(that, KClass);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = getKClassFromExpression(_this__u8e3s4).k9(that);
    } else {
      var tmp_1;
      if (!isInterface(_this__u8e3s4, KClass)) {
        tmp_1 = isInterface(that, KClass);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp = getKClassFromExpression(_this__u8e3s4).k9(that);
      } else {
        var tmp_2;
        if (isInterface(_this__u8e3s4, KClass)) {
          tmp_2 = isInterface(that, KClass);
        } else {
          tmp_2 = false;
        }
        if (tmp_2) {
          tmp = _this__u8e3s4.k9(that);
        } else {
          var tmp_3;
          if (isInterface(_this__u8e3s4, KClass)) {
            tmp_3 = !isInterface(that, KClass);
          } else {
            tmp_3 = false;
          }
          if (tmp_3) {
            tmp = _this__u8e3s4.k9(that);
          } else {
            throw new NotImplementedError();
          }
        }
      }
    }
    return tmp;
  }
  function choose(_this__u8e3s4, k) {
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(0 <= k ? 0 <= _this__u8e3s4 : false)) {
      // Inline function 'ai.hypergraph.kaliningraph.choose.<anonymous>' call
      var message = 'Bad (k, n) = (' + k + ', ' + _this__u8e3s4 + ')!';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    if (k > _this__u8e3s4 ? true : k < 0)
      return 0;
    if (k > (_this__u8e3s4 / 2 | 0))
      return choose(_this__u8e3s4, _this__u8e3s4 - k | 0);
    var result = 1;
    var inductionVariable = 1;
    if (inductionVariable <= k)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = imul(result, (_this__u8e3s4 - i | 0) + 1 | 0) / i | 0;
      }
       while (!(i === k));
    return result;
  }
  function ACT_TANH$lambda(it) {
    _init_properties_CommonUtils_kt__3s0my4();
    return elwise(it, ACT_TANH$lambda$lambda);
  }
  function ACT_TANH$lambda$lambda(it) {
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.math.tanh' call
    return tanh(it);
  }
  function NORM_AVG$lambda(it) {
    _init_properties_CommonUtils_kt__3s0my4();
    return meanNorm(it);
  }
  function meanNorm$lambda($μ, $max, $min) {
    return function (e) {
      return (e - $μ) / ($max - $min);
    };
  }
  function toDoubleMatrix$lambda($this_toDoubleMatrix) {
    return function (i, j) {
      return $this_toDoubleMatrix[i][j];
    };
  }
  function vectorize$lambda($it) {
    return function () {
      return $it.oj();
    };
  }
  var properties_initialized_CommonUtils_kt_cxugc6;
  function _init_properties_CommonUtils_kt__3s0my4() {
    if (!properties_initialized_CommonUtils_kt_cxugc6) {
      properties_initialized_CommonUtils_kt_cxugc6 = true;
      ACT_TANH = ACT_TANH$lambda;
      NORM_AVG = NORM_AVG$lambda;
    }
  }
  function get_BRACKETS() {
    _init_properties_StringUtils_kt__hudgtq();
    return BRACKETS;
  }
  var BRACKETS;
  var JUST_PARENS;
  function formatAsGrid(_this__u8e3s4, cols) {
    cols = cols === VOID ? -1 : cols;
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.groupByTo' call
    var destination = LinkedHashMap_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.<anonymous>' call
      var key = formatAsGrid$LHS(element);
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination.h2(key);
      var tmp;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination.s4(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.e(element);
    }
    var groups = destination;
    return formatAsGrid$rec(_this__u8e3s4, cols, groups);
  }
  function splitProd(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.map' call
    var this_0 = split(replaceFirst(_this__u8e3s4, '->', '\u2192'), charArrayOf([_Char___init__impl__6a9atx(8594)]));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.splitProd.<anonymous>' call
      // Inline function 'kotlin.text.trim' call
      var tmp$ret$1 = toString(trim(isCharSequence(item) ? item : THROW_CCE()));
      destination.e(tmp$ret$1);
    }
    return destination;
  }
  function removeEpsilon(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_0 = tokenizeByWhitespace(_this__u8e3s4);
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.removeEpsilon.<anonymous>' call
      if (!(element === '\u03B5')) {
        destination.e(element);
      }
    }
    return joinToString(destination, ' ');
  }
  function intersperse(_this__u8e3s4, i, tok, spacer) {
    i = i === VOID ? 1 : i;
    tok = tok === VOID ? '' : tok;
    var tmp;
    if (spacer === VOID) {
      // Inline function 'kotlin.collections.List' call
      // Inline function 'kotlin.collections.MutableList' call
      var size = i;
      var list = ArrayList_init_$Create$(size);
      // Inline function 'kotlin.repeat' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlin.collections.MutableList.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.intersperse.<anonymous>' call
          var tmp$ret$0 = tok;
          list.e(tmp$ret$0);
        }
         while (inductionVariable < size);
      tmp = list;
    } else {
      tmp = spacer;
    }
    spacer = tmp;
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.fold' call
    var accumulator = spacer;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.intersperse.<anonymous>' call
      var acc = accumulator;
      accumulator = plus_0(plus(acc, spacer), element);
    }
    var tmp$ret$4 = accumulator;
    return plus(tmp$ret$4, spacer);
  }
  function cfgType(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    var tmp;
    if (isNonterminalStub(_this__u8e3s4)) {
      tmp = 'NT/' + _this__u8e3s4;
    } else {
      if (Regex_init_$Create$('[a-zA-Z0-9_]+').fb(_this__u8e3s4)) {
        tmp = 'ID/' + _this__u8e3s4;
      } else {
        var tmp$ret$1;
        $l$block: {
          // Inline function 'kotlin.text.any' call
          var inductionVariable = 0;
          while (inductionVariable < charSequenceLength(_this__u8e3s4)) {
            var element = charSequenceGet(_this__u8e3s4, inductionVariable);
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'ai.hypergraph.kaliningraph.cfgType.<anonymous>' call
            if (get_BRACKETS().f1(new Char(element))) {
              tmp$ret$1 = true;
              break $l$block;
            }
          }
          tmp$ret$1 = false;
        }
        if (tmp$ret$1) {
          tmp = 'BK/' + _this__u8e3s4;
        } else {
          tmp = 'OT';
        }
      }
    }
    return tmp;
  }
  function formatAsGrid$tok(_this__u8e3s4) {
    return splitProd(_this__u8e3s4);
  }
  function formatAsGrid$LHS(_this__u8e3s4) {
    return formatAsGrid$tok(_this__u8e3s4).m(0);
  }
  function formatAsGrid$rec(_this__u8e3s4, $cols, groups) {
    var tmp;
    if ($cols === -1) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.collections.minBy' call
        // Inline function 'kotlin.collections.map' call
        var this_0 = numberRangeToNumber(3, 5);
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var item = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
          var tmp$ret$0 = formatAsGrid(_this__u8e3s4, item);
          destination.e(tmp$ret$0);
        }
        var iterator = destination.h();
        if (!iterator.i())
          throw NoSuchElementException_init_$Create$();
        var minElem = iterator.j();
        if (!iterator.i()) {
          tmp$ret$3 = minElem;
          break $l$block;
        }
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
        var minValue = minElem.toString().length;
        do {
          var e = iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
          var v = e.toString().length;
          if (compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }
        }
         while (iterator.i());
        tmp$ret$3 = minElem;
      }
      tmp = tmp$ret$3;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.let' call
      var tmp_0 = formatAsGrid$rec$lambda(groups);
      var tmp_1 = formatAsGrid$rec$lambda_0(groups);
      var tmp_2 = formatAsGrid$rec$lambda_1;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
      var productions = sortedWith(_this__u8e3s4, compareBy([tmp_0, tmp_1, tmp_2, formatAsGrid$rec$lambda_2]));
      // Inline function 'kotlin.math.ceil' call
      var x = productions.k() / $cols;
      var tmp$ret$6 = Math.ceil(x);
      var _destruct__k2r9zo = to($cols, numberToInt(tmp$ret$6));
      var cols = _destruct__k2r9zo.ge();
      var rows = _destruct__k2r9zo.he();
      // Inline function 'kotlin.collections.List' call
      // Inline function 'kotlin.collections.MutableList' call
      var size = imul(cols, rows) - productions.k() | 0;
      var list = ArrayList_init_$Create$(size);
      // Inline function 'kotlin.repeat' call
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlin.collections.MutableList.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>' call
          list.e('');
        }
         while (inductionVariable < size);
      var padded = plus(productions, list);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
      var up = get_transpose(new FreeMatrix(cols, rows, padded));
      var tmp_3 = up.by();
      var tmp_4 = up.cy();
      tmp = FreeMatrix_init_$Create$(tmp_3, tmp_4, formatAsGrid$rec$lambda_3(up));
    }
    return tmp;
  }
  function formatAsGrid$rec$lambda($groups) {
    return function (it) {
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = ensureNotNull($groups.h2(formatAsGrid$LHS(it))).h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>' call
      var maxValue = iterator.j().length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>' call
        var v = iterator.j().length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      return maxValue;
    };
  }
  function formatAsGrid$rec$lambda_0($groups) {
    return function (it) {
      return -ensureNotNull($groups.h2(formatAsGrid$LHS(it))).k() | 0;
    };
  }
  function formatAsGrid$rec$lambda_1(it) {
    _init_properties_StringUtils_kt__hudgtq();
    return formatAsGrid$LHS(it);
  }
  function formatAsGrid$rec$lambda_2(it) {
    _init_properties_StringUtils_kt__hudgtq();
    return it.length;
  }
  function formatAsGrid$rec$lambda_3($up) {
    return function (r, c) {
      var tmp;
      // Inline function 'kotlin.text.isEmpty' call
      var this_0 = $up.dy(r, c);
      if (charSequenceLength(this_0) === 0) {
        return '';
      }
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
      var it = splitProd($up.dy(r, c));
      var _destruct__k2r9zo = to(it.m(0), it.m(1));
      var lhs = _destruct__k2r9zo.ge();
      var rhs = _destruct__k2r9zo.he();
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = get_transpose($up).m(c).h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
      var it_0 = iterator.j();
      var maxValue = substringBefore(it_0, ' -> ').length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
        var it_1 = iterator.j();
        var v = substringBefore(it_1, ' -> ').length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      var tmp$ret$5 = maxValue;
      var lp = padStart(lhs, tmp$ret$5);
      // Inline function 'kotlin.collections.maxOf' call
      var iterator_0 = get_transpose($up).m(c).h();
      if (!iterator_0.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
      var it_2 = iterator_0.j();
      var maxValue_0 = substringAfter(it_2, ' -> ').length;
      while (iterator_0.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
        var it_3 = iterator_0.j();
        var v_0 = substringAfter(it_3, ' -> ').length;
        if (compareTo(maxValue_0, v_0) < 0) {
          maxValue_0 = v_0;
        }
      }
      var tmp$ret$8 = maxValue_0;
      var rp = padEnd(rhs, tmp$ret$8);
      return lp + ' \u2192 ' + rp;
    };
  }
  var properties_initialized_StringUtils_kt_t01dyo;
  function _init_properties_StringUtils_kt__hudgtq() {
    if (!properties_initialized_StringUtils_kt_t01dyo) {
      properties_initialized_StringUtils_kt_t01dyo = true;
      BRACKETS = toSet(toCharArray('()[]{}<>'));
      JUST_PARENS = toSet(toCharArray('()[]{}'));
    }
  }
  function trimToSize($this) {
    if ($this.hy_1 <= $this.ey_1 ? true : $this.gy_1.l())
      return Unit_instance;
    try {
      var toEvict = $this.gy_1.j2().h().j();
      var key = toEvict.d2();
      var value = toEvict.e2();
      $this.gy_1.i5(key);
      $this.hy_1 = $this.hy_1 - $this.fy_1(key, value) | 0;
      trimToSize($this);
    } catch ($p) {
      if ($p instanceof Exception) {
        var _unused_var__etf5q3 = $p;
      } else {
        throw $p;
      }
    }
  }
  function LRUCache$_init_$lambda_wrqm0(_unused_var__etf5q3, _unused_var__etf5q3_0) {
    return 1;
  }
  function LRUCache(maxSize, sizeOf) {
    maxSize = maxSize === VOID ? 10000 : maxSize;
    var tmp;
    if (sizeOf === VOID) {
      tmp = LRUCache$_init_$lambda_wrqm0;
    } else {
      tmp = sizeOf;
    }
    sizeOf = tmp;
    this.ey_1 = maxSize;
    this.fy_1 = sizeOf;
    this.gy_1 = LinkedHashMap_init_$Create$_0(0, 0.75);
    this.hy_1 = 0;
  }
  protoOf(LRUCache).iy = function (key, value) {
    var tmp0_elvis_lhs = this.gy_1.h2(key);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = value();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.cache.LRUCache.getOrPut.<anonymous>' call
      this.s4(key, this_0);
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(LRUCache).h2 = function (key) {
    return this.gy_1.h2(key);
  };
  protoOf(LRUCache).s4 = function (key, value) {
    this.hy_1 = this.hy_1 + this.fy_1(key, value) | 0;
    var prev = this.gy_1.s4(key, value);
    if (prev == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      this.hy_1 = this.hy_1 - this.fy_1(key, prev) | 0;
    }
    trimToSize(this);
    return prev;
  };
  protoOf(LRUCache).toString = function () {
    return '' + this.hy_1 + '/' + this.ey_1 + ' cached=' + this.gy_1;
  };
  function LabeledGraph_init_$Init$(builder, $this) {
    // Inline function 'kotlin.also' call
    var this_0 = new LGBuilder();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.<init>.<anonymous>' call
    builder(this_0);
    LabeledGraph.call($this, this_0.jy_1.kz());
    return $this;
  }
  function LabeledGraph_init_$Create$(builder) {
    return LabeledGraph_init_$Init$(builder, objectCreate(protoOf(LabeledGraph)));
  }
  function Companion() {
    Companion_instance = this;
    LabeledGraph.call(this);
  }
  var Companion_instance;
  function Companion_getInstance_0() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function LabeledGraph(vertices) {
    Companion_getInstance_0();
    var tmp;
    if (vertices === VOID) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else {
      tmp = vertices;
    }
    vertices = tmp;
    Graph.call(this, vertices);
    this.nz_1 = vertices;
    var tmp_0 = this;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp_0.oz_1 = LinkedHashSet_init_$Create$();
    this.pz_1 = '';
  }
  protoOf(LabeledGraph).qz = function () {
    return this.nz_1;
  };
  function LGBuilder$minus$lambda($v, $this_minus) {
    return function (it) {
      return plus_1(get_outgoing($v), LabeledEdge_init_$Create$($v, $this_minus));
    };
  }
  function LGBuilder() {
    this.jy_1 = new LabeledGraph();
    this.ky_1 = LGVertex_init_$Create$();
    this.ly_1 = LGVertex_init_$Create$();
    this.my_1 = LGVertex_init_$Create$();
    this.ny_1 = LGVertex_init_$Create$();
    this.oy_1 = LGVertex_init_$Create$();
    this.py_1 = LGVertex_init_$Create$();
    this.qy_1 = LGVertex_init_$Create$();
    this.ry_1 = LGVertex_init_$Create$();
    this.sy_1 = LGVertex_init_$Create$();
    this.ty_1 = LGVertex_init_$Create$();
    this.uy_1 = LGVertex_init_$Create$();
    this.vy_1 = LGVertex_init_$Create$();
    this.wy_1 = LGVertex_init_$Create$();
    this.xy_1 = LGVertex_init_$Create$();
    this.yy_1 = LGVertex_init_$Create$();
    this.zy_1 = LGVertex_init_$Create$();
    this.az_1 = LGVertex_init_$Create$();
    this.bz_1 = LGVertex_init_$Create$();
    this.cz_1 = LGVertex_init_$Create$();
    this.dz_1 = LGVertex_init_$Create$();
    this.ez_1 = LGVertex_init_$Create$();
    this.fz_1 = LGVertex_init_$Create$();
    this.gz_1 = LGVertex_init_$Create$();
    this.hz_1 = LGVertex_init_$Create$();
    this.iz_1 = LGVertex_init_$Create$();
    this.jz_1 = LGVertex_init_$Create$();
  }
  protoOf(LGBuilder).j10 = function (_this__u8e3s4, v) {
    // Inline function 'kotlin.also' call
    var tmp = _this__u8e3s4.a10();
    var this_0 = tmp(v, LGBuilder$minus$lambda(v, _this__u8e3s4));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.graphs.LGBuilder.minus.<anonymous>' call
    this.jy_1 = this.jy_1.c10(get_graph(this_0));
    return this_0;
  };
  protoOf(LGBuilder).k10 = function (_this__u8e3s4, v) {
    return this.j10(LGVertex_init_$Create$(_this__u8e3s4), LGVertex_init_$Create$(v));
  };
  function LGVertex_init_$Init$(label, id, out, $this) {
    label = label === VOID ? '#RGEN_' + randomString() : label;
    id = id === VOID ? label : id;
    out = out === VOID ? emptySet() : out;
    LGVertex.call($this, label, id, LGVertex$_init_$lambda_777syc(out, label));
    return $this;
  }
  function LGVertex_init_$Create$(label, id, out) {
    return LGVertex_init_$Init$(label, id, out, objectCreate(protoOf(LGVertex)));
  }
  function LGVertex_init_$Init$_0(lgv, edgeMap, $this) {
    LGVertex.call($this, lgv.s10(), lgv.t10(), edgeMap);
    return $this;
  }
  function LGVertex_init_$Create$_0(lgv, edgeMap) {
    return LGVertex_init_$Init$_0(lgv, edgeMap, objectCreate(protoOf(LGVertex)));
  }
  function LGVertex$_init_$lambda_777syc($out, $label) {
    return function (s) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = $out;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.graphs.LGVertex.<init>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = new LabeledEdge(s, item, substringBefore($label, '#RGEN_'));
        destination.e(tmp$ret$0);
      }
      return toSet_0(destination);
    };
  }
  function LGVertex(label, id, edgeMap) {
    label = label === VOID ? '' : label;
    id = id === VOID ? label : id;
    Vertex.call(this, id);
    this.o10_1 = label;
    this.p10_1 = id;
    this.q10_1 = edgeMap;
    this.r10_1 = false;
  }
  protoOf(LGVertex).s10 = function () {
    return this.o10_1;
  };
  protoOf(LGVertex).t10 = function () {
    return this.p10_1;
  };
  protoOf(LGVertex).u10 = function () {
    return this.q10_1;
  };
  protoOf(LGVertex).vz = function () {
    return vectorize(this.s10());
  };
  protoOf(LGVertex).toString = function () {
    return this.s10();
  };
  function LabeledEdge_init_$Init$(source, target, $this) {
    LabeledEdge.call($this, source, target, null);
    return $this;
  }
  function LabeledEdge_init_$Create$(source, target) {
    return LabeledEdge_init_$Init$(source, target, objectCreate(protoOf(LabeledEdge)));
  }
  function LabeledEdge(source, target, label) {
    label = label === VOID ? null : label;
    Edge.call(this, source, target);
    this.e11_1 = source;
    this.f11_1 = target;
    this.g11_1 = label;
  }
  protoOf(LabeledEdge).h11 = function () {
    return this.e11_1;
  };
  protoOf(LabeledEdge).i11 = function () {
    return this.f11_1;
  };
  function LGFamily$_get_E_$lambda_nhvv0c(s, t) {
    return LabeledEdge_init_$Create$(s, t);
  }
  function LGFamily$_get_G_$lambda_c8zum2(vertices) {
    return new LabeledGraph(vertices);
  }
  function LGFamily$_get_V_$lambda_yfzuln(old, edgeMap) {
    return LGVertex_init_$Create$_0(old, edgeMap);
  }
  function LGFamily() {
  }
  function get_language(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return language$delegate.j11(_this__u8e3s4, language$factory());
  }
  var language$delegate;
  var delimiters$delegate;
  function get_nonterminals(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return nonterminals$delegate.j11(_this__u8e3s4, nonterminals$factory());
  }
  var nonterminals$delegate;
  function get_symbols(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return symbols$delegate.j11(_this__u8e3s4, symbols$factory());
  }
  var symbols$delegate;
  function get_terminals(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return terminals$delegate.j11(_this__u8e3s4, terminals$factory());
  }
  var terminals$delegate;
  function get_terminalUnitProductions(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return terminalUnitProductions$delegate.j11(_this__u8e3s4, terminalUnitProductions$factory());
  }
  var terminalUnitProductions$delegate;
  function get_unitProductions(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return unitProductions$delegate.j11(_this__u8e3s4, unitProductions$factory());
  }
  var unitProductions$delegate;
  function get_nonterminalProductions(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return nonterminalProductions$delegate.j11(_this__u8e3s4, nonterminalProductions$factory());
  }
  var nonterminalProductions$delegate;
  function get_unitNonterminals(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return unitNonterminals$delegate.j11(_this__u8e3s4, unitNonterminals$factory());
  }
  var unitNonterminals$delegate;
  function get_bimap(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return bimap$delegate.j11(_this__u8e3s4, bimap$factory());
  }
  var bimap$delegate;
  var tmap$delegate;
  function get_vindex(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return vindex$delegate.j11(_this__u8e3s4, vindex$factory());
  }
  var vindex$delegate;
  function get_bindex(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return bindex$delegate.j11(_this__u8e3s4, bindex$factory());
  }
  var bindex$delegate;
  function get_normalForm(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return normalForm$delegate.j11(_this__u8e3s4, normalForm$factory());
  }
  var normalForm$delegate;
  function get_depGraph(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return depGraph$delegate.j11(_this__u8e3s4, depGraph$factory());
  }
  var depGraph$delegate;
  var revDepGraph$delegate;
  function get_originalForm(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return originalForm$delegate.j11(_this__u8e3s4, originalForm$factory());
  }
  var originalForm$delegate;
  var nonparametricForm$delegate;
  function get_reachability(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return reachability$delegate.j11(_this__u8e3s4, reachability$factory());
  }
  var reachability$delegate;
  function get_unitReachability(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return unitReachability$delegate.j11(_this__u8e3s4, unitReachability$factory());
  }
  var unitReachability$delegate;
  var noNonterminalStubs$delegate;
  var noEpsilonOrNonterminalStubs$delegate;
  var parikhFPCache$delegate;
  var generators$delegate;
  var nonterminalFormulas$delegate;
  var pruneTreelikeNonterminals$delegate;
  var joinMap$delegate;
  function freeze(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    var tmp;
    if (_this__u8e3s4 instanceof FrozenCFG) {
      tmp = _this__u8e3s4;
    } else {
      tmp = new FrozenCFG(_this__u8e3s4);
    }
    return tmp;
  }
  function get_LHS(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return _this__u8e3s4.ee_1;
  }
  function get_RHS(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.<get-RHS>.<anonymous>' call
    var it = _this__u8e3s4.fe_1;
    var tmp;
    if (it.k() === 1) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(it, 10));
      var tmp0_iterator = it.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        var tmp$ret$0 = _get_RHS_$stripEscapeChars_o9u6es(item);
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = it;
    }
    return tmp;
  }
  function BiMap$L2RHS$delegate$lambda($cfg) {
    return function () {
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.groupBy' call
      // Inline function 'kotlin.collections.groupByTo' call
      var this_0 = $cfg;
      var destination = LinkedHashMap_init_$Create$();
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.L2RHS$delegate.<anonymous>.<anonymous>' call
        var key = get_LHS(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.h2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.s4(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.L2RHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$3 = get_RHS(element);
        list.e(tmp$ret$3);
      }
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_1(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_iterator_0 = destination.j2().h();
      while (tmp0_iterator_0.i()) {
        var element_0 = tmp0_iterator_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.d2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.L2RHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$7 = toSet_0(element_0.e2());
        destination_0.s4(tmp_0, tmp$ret$7);
      }
      return destination_0;
    };
  }
  function BiMap$R2LHS$delegate$lambda($cfg) {
    return function () {
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.groupBy' call
      // Inline function 'kotlin.collections.groupByTo' call
      var this_0 = $cfg;
      var destination = LinkedHashMap_init_$Create$();
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.R2LHS$delegate.<anonymous>.<anonymous>' call
        var key = get_RHS(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.h2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.s4(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.R2LHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$3 = get_LHS(element);
        list.e(tmp$ret$3);
      }
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_1(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_iterator_0 = destination.j2().h();
      while (tmp0_iterator_0.i()) {
        var element_0 = tmp0_iterator_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.d2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.R2LHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$7 = toSet_0(element_0.e2());
        destination_0.s4(tmp_0, tmp$ret$7);
      }
      return destination_0;
    };
  }
  function BiMap$TDEPS$delegate$lambda($cfg) {
    return function () {
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.collections.mutableMapOf' call
      var this_0 = LinkedHashMap_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TDEPS$delegate.<anonymous>.<anonymous>' call
      var _iterator__ex2g4s = $cfg.h();
      while (_iterator__ex2g4s.i()) {
        var _destruct__k2r9zo = _iterator__ex2g4s.j();
        var l = _destruct__k2r9zo.ge();
        var r = _destruct__k2r9zo.he();
        var _iterator__ex2g4s_0 = r.h();
        while (_iterator__ex2g4s_0.i()) {
          var symbol = _iterator__ex2g4s_0.j();
          // Inline function 'kotlin.collections.getOrPut' call
          var value = this_0.h2(symbol);
          var tmp;
          if (value == null) {
            // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TDEPS$delegate.<anonymous>.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.collections.mutableSetOf' call
            var answer = LinkedHashSet_init_$Create$();
            this_0.s4(symbol, answer);
            tmp = answer;
          } else {
            tmp = value;
          }
          tmp.e(l);
        }
      }
      return this_0;
    };
  }
  function BiMap$NDEPS$delegate$lambda($cfg) {
    return function () {
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.collections.mutableMapOf' call
      var this_0 = LinkedHashMap_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.NDEPS$delegate.<anonymous>.<anonymous>' call
      var _iterator__ex2g4s = $cfg.h();
      while (_iterator__ex2g4s.i()) {
        var _destruct__k2r9zo = _iterator__ex2g4s.j();
        var l = _destruct__k2r9zo.ge();
        var r = _destruct__k2r9zo.he();
        var _iterator__ex2g4s_0 = r.h();
        while (_iterator__ex2g4s_0.i()) {
          var symbol = _iterator__ex2g4s_0.j();
          // Inline function 'kotlin.collections.getOrPut' call
          var value = this_0.h2(l);
          var tmp;
          if (value == null) {
            // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.NDEPS$delegate.<anonymous>.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.collections.mutableSetOf' call
            var answer = LinkedHashSet_init_$Create$();
            this_0.s4(l, answer);
            tmp = answer;
          } else {
            tmp = value;
          }
          tmp.e(symbol);
        }
      }
      return this_0;
    };
  }
  function BiMap$TRIPL$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var this_0 = this$0.r11();
      var destination = LinkedHashMap_init_$Create$();
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator = this_0.j2().h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TRIPL$delegate.<anonymous>.<anonymous>' call
        if (element.d2().k() === 2) {
          destination.s4(element.d2(), element.e2());
        }
      }
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(destination.k());
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator_0 = destination.j2().h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TRIPL$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.map' call
        var this_1 = item.e2();
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
        var tmp0_iterator_1 = this_1.h();
        while (tmp0_iterator_1.i()) {
          var item_0 = tmp0_iterator_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TRIPL$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$5 = to_0(to(item_0, item.d2().m(0)), item.d2().m(1));
          destination_1.e(tmp$ret$5);
        }
        destination_0.e(destination_1);
      }
      return flatten(destination_0);
    };
  }
  function BiMap$X2WZ$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.groupBy' call
      // Inline function 'kotlin.collections.groupByTo' call
      var this_0 = this$0.s11();
      var destination = LinkedHashMap_init_$Create$();
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.X2WZ$delegate.<anonymous>.<anonymous>' call
        var key = element.ql_1;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.h2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.s4(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        list.e(element);
      }
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_1(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_iterator_0 = destination.j2().h();
      while (tmp0_iterator_0.i()) {
        var element_0 = tmp0_iterator_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.d2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.X2WZ$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.map' call
        var this_1 = element_0.e2();
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
        var tmp0_iterator_1 = this_1.h();
        while (tmp0_iterator_1.i()) {
          var item = tmp0_iterator_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.X2WZ$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$6 = to_0(to(item.pl_1, item.ql_1), item.rl_1);
          destination_1.e(tmp$ret$6);
        }
        destination_0.s4(tmp_0, destination_1);
      }
      return destination_0;
    };
  }
  function BiMap$UNITS$delegate$lambda$lambda($cfg) {
    return function (it) {
      return get_RHS(it).k() === 1 ? !get_nonterminals($cfg).f1(get_RHS(it).m(0)) : false;
    };
  }
  function BiMap$UNITS$delegate$lambda($cfg) {
    return function () {
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.groupBy' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var this_0 = $cfg;
      var predicate = BiMap$UNITS$delegate$lambda$lambda($cfg);
      // Inline function 'kotlin.apply' call
      var this_1 = toMutableSet(this_0);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_1, predicate);
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var tmp0_iterator = this_1.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.UNITS$delegate.<anonymous>.<anonymous>' call
        var key = get_LHS(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.h2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.s4(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.UNITS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$5 = get_RHS(element).m(0);
        list.e(tmp$ret$5);
      }
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_1(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var tmp0_iterator_0 = destination.j2().h();
      while (tmp0_iterator_0.i()) {
        var element_0 = tmp0_iterator_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.d2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.UNITS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$9 = toSet_0(element_0.e2());
        destination_0.s4(tmp_0, tmp$ret$9);
      }
      return destination_0;
    };
  }
  function BiMap(cfg) {
    var tmp = this;
    tmp.k11_1 = lazy(BiMap$L2RHS$delegate$lambda(cfg));
    var tmp_0 = this;
    tmp_0.l11_1 = lazy(BiMap$R2LHS$delegate$lambda(cfg));
    var tmp_1 = this;
    tmp_1.m11_1 = lazy(BiMap$TDEPS$delegate$lambda(cfg));
    var tmp_2 = this;
    tmp_2.n11_1 = lazy(BiMap$NDEPS$delegate$lambda(cfg));
    var tmp_3 = this;
    tmp_3.o11_1 = lazy(BiMap$TRIPL$delegate$lambda(this));
    var tmp_4 = this;
    tmp_4.p11_1 = lazy(BiMap$X2WZ$delegate$lambda(this));
    var tmp_5 = this;
    tmp_5.q11_1 = lazy(BiMap$UNITS$delegate$lambda(cfg));
  }
  protoOf(BiMap).t11 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.k11_1;
    L2RHS$factory();
    return this_0.e2();
  };
  protoOf(BiMap).r11 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.l11_1;
    R2LHS$factory();
    return this_0.e2();
  };
  protoOf(BiMap).u11 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.m11_1;
    TDEPS$factory();
    return this_0.e2();
  };
  protoOf(BiMap).v11 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.n11_1;
    NDEPS$factory();
    return this_0.e2();
  };
  protoOf(BiMap).s11 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.o11_1;
    TRIPL$factory();
    return this_0.e2();
  };
  protoOf(BiMap).w11 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.q11_1;
    UNITS$factory();
    return this_0.e2();
  };
  protoOf(BiMap).x11 = function (p) {
    var tmp0_elvis_lhs = this.r11().h2(p);
    return tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
  };
  protoOf(BiMap).y11 = function (p) {
    var tmp0_elvis_lhs = this.t11().h2(p);
    return tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
  };
  function Bindex(set, indexedNTs, ntIndices) {
    indexedNTs = indexedNTs === VOID ? toList(set) : indexedNTs;
    ntIndices = ntIndices === VOID ? toMap(zip(indexedNTs, get_indices(indexedNTs))) : ntIndices;
    this.z11_1 = indexedNTs;
    this.a12_1 = set;
    this.b12_1 = ntIndices;
  }
  protoOf(Bindex).m = function (index) {
    return this.z11_1.m(index);
  };
  protoOf(Bindex).zd = function (element) {
    return this.z11_1.f1(element);
  };
  protoOf(Bindex).f1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.zd((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(Bindex).ae = function (elements) {
    return this.z11_1.b2(elements);
  };
  protoOf(Bindex).b2 = function (elements) {
    return this.ae(elements);
  };
  protoOf(Bindex).l = function () {
    return this.z11_1.l();
  };
  protoOf(Bindex).h = function () {
    return this.z11_1.h();
  };
  protoOf(Bindex).r = function (index) {
    return this.z11_1.r(index);
  };
  protoOf(Bindex).c2 = function (fromIndex, toIndex) {
    return this.z11_1.c2(fromIndex, toIndex);
  };
  protoOf(Bindex).k = function () {
    return this.z11_1.k();
  };
  protoOf(Bindex).c12 = function (s) {
    var tmp0_elvis_lhs = this.b12_1.h2(s);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Bindex.get.<anonymous>' call
      println('Unknown nonterminal: ' + s);
      ensureNotNull(null);
      tmp = 1;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(Bindex).toString = function () {
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = this.z11_1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Bindex.toString.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var tmp$ret$0 = '' + checkIndexOverflow(tmp1) + ': ' + item;
      destination.e(tmp$ret$0);
    }
    return joinToString(destination, '\n', 'Bindex:\n', '\n');
  };
  function dependencyGraph(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return LabeledGraph_init_$Create$(dependencyGraph$lambda(_this__u8e3s4));
  }
  function revDependencyGraph(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return LabeledGraph_init_$Create$(revDependencyGraph$lambda(_this__u8e3s4));
  }
  function toFormula(_this__u8e3s4, nt) {
    _init_properties_CFG_kt__oelqcy();
    var tmp;
    if (get_terminals(_this__u8e3s4).f1(nt)) {
      tmp = nt;
    } else if (!get_nonterminals(_this__u8e3s4).f1(nt)) {
      tmp = 'false';
    } else {
      var tmp_0 = get_bimap(_this__u8e3s4).y11(nt);
      tmp = joinToString(tmp_0, ' or ', '( ', ' )', VOID, VOID, toFormula$lambda(_this__u8e3s4));
    }
    return tmp;
  }
  function isTreelikeNonterminalIn(_this__u8e3s4, cfg, reachables, nonTreeLike) {
    reachables = reachables === VOID ? minus(reachableSymbols(cfg, _this__u8e3s4), _this__u8e3s4) : reachables;
    nonTreeLike = nonTreeLike === VOID ? setOf(_this__u8e3s4) : nonTreeLike;
    _init_properties_CFG_kt__oelqcy();
    var tmp;
    if (contains(_this__u8e3s4, '\u03B5')) {
      tmp = true;
    } else {
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!intersect(reachables, nonTreeLike).l()) {
        tmp = false;
      } else {
        var tmp$ret$1;
        $l$block_0: {
          // Inline function 'kotlin.collections.all' call
          var tmp_0;
          if (isInterface(reachables, Collection)) {
            tmp_0 = reachables.l();
          } else {
            tmp_0 = false;
          }
          if (tmp_0) {
            tmp$ret$1 = true;
            break $l$block_0;
          }
          var tmp0_iterator = reachables.h();
          while (tmp0_iterator.i()) {
            var element = tmp0_iterator.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.isTreelikeNonterminalIn.<anonymous>' call
            if (!(get_terminals(cfg).f1(element) ? true : isTreelikeNonterminalIn(element, cfg, VOID, plus_2(nonTreeLike, reachables)))) {
              tmp$ret$1 = false;
              break $l$block_0;
            }
          }
          tmp$ret$1 = true;
        }
        tmp = tmp$ret$1;
      }
    }
    return tmp;
  }
  function JoinMap(CFG) {
    this.d12_1 = CFG;
    var tmp = this;
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.sequences.associateWith' call
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>' call
    var it = choose_0(get_nonterminals(this.d12_1), numberRangeToNumber(1, 3));
    var this_0 = times_2(it, it);
    var result = LinkedHashMap_init_$Create$();
    // Inline function 'kotlin.sequences.associateWithTo' call
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>' call
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>.<anonymous>' call
      var l = element.ge();
      var r = element.he();
      var tmp$ret$4 = this.f12(l, r);
      result.s4(element, tmp$ret$4);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>' call
    println('Precomputed join map has ' + result.k() + ' entries.');
    tmp.e12_1 = toMutableMap(result);
  }
  protoOf(JoinMap).g12 = function (l, r, tryCache) {
    var tmp;
    if (tryCache) {
      var tmp0_elvis_lhs = this.e12_1.h2(to(l, r));
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'kotlin.also' call
        var this_0 = this.g12(l, r, false);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.join.<anonymous>' call
        // Inline function 'kotlin.collections.set' call
        var this_1 = this.e12_1;
        var key = to(l, r);
        this_1.s4(key, this_0);
        tmp_0 = this_0;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var this_2 = times_3(l, r);
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator = this_2.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.join.<anonymous>' call
        var l_0 = element.ge();
        var r_0 = element.he();
        // Inline function 'kotlin.collections.map' call
        var this_3 = get_bimap(this.d12_1).x11(listOf([l_0, r_0]));
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
        var tmp0_iterator_0 = this_3.h();
        while (tmp0_iterator_0.i()) {
          var item = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.join.<anonymous>.<anonymous>' call
          var tmp$ret$1 = new Triple(item, l_0, r_0);
          destination_0.e(tmp$ret$1);
        }
        var list = destination_0;
        addAll(destination, list);
      }
      tmp = toSet_0(destination);
    }
    return tmp;
  };
  protoOf(JoinMap).f12 = function (l, r, tryCache, $super) {
    tryCache = tryCache === VOID ? false : tryCache;
    return $super === VOID ? this.g12(l, r, tryCache) : $super.g12.call(this, l, r, tryCache);
  };
  function FrozenCFG(cfg) {
    this.h12_1 = cfg;
    this.i12_1 = hashCode(this.h12_1);
  }
  protoOf(FrozenCFG).j12 = function (element) {
    return this.h12_1.f1(element);
  };
  protoOf(FrozenCFG).f1 = function (element) {
    if (!(element instanceof Pair))
      return false;
    return this.j12(element instanceof Pair ? element : THROW_CCE());
  };
  protoOf(FrozenCFG).k12 = function (elements) {
    return this.h12_1.b2(elements);
  };
  protoOf(FrozenCFG).b2 = function (elements) {
    return this.k12(elements);
  };
  protoOf(FrozenCFG).l = function () {
    return this.h12_1.l();
  };
  protoOf(FrozenCFG).h = function () {
    return this.h12_1.h();
  };
  protoOf(FrozenCFG).k = function () {
    return this.h12_1.k();
  };
  protoOf(FrozenCFG).equals = function (other) {
    var tmp;
    var tmp5_safe_receiver = other instanceof FrozenCFG ? other : null;
    if ((tmp5_safe_receiver == null ? null : tmp5_safe_receiver.i12_1) === this.i12_1) {
      tmp = true;
    } else {
      tmp = equals((!(other == null) ? isInterface(other, Set) : false) ? other : null, this.h12_1);
    }
    return tmp;
  };
  protoOf(FrozenCFG).hashCode = function () {
    return this.i12_1;
  };
  function _get_RHS_$stripEscapeChars_o9u6es(p0) {
    return stripEscapeChars(p0);
  }
  function language$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new CFL($this$cache);
  }
  function delimiters$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.toTypedArray' call
    // Inline function 'kotlin.collections.sortedBy' call
    var this_0 = get_terminals($this$cache);
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = delimiters$delegate$lambda$lambda;
    var tmp$ret$0 = new sam$kotlin_Comparator$0(tmp);
    var tmp_0 = sortedWith(this_0, tmp$ret$0);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$4 = [get_HOLE_MARKER(), ' '];
    var this_1 = plus_3(tmp_0, tmp$ret$4);
    return copyToArray(this_1);
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.l12_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).yb = function (a, b) {
    return this.l12_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.yb(a, b);
  };
  function delimiters$delegate$lambda$lambda(a, b) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.delimiters$delegate.<anonymous>.<anonymous>' call
    var tmp = -a.length | 0;
    // Inline function 'ai.hypergraph.kaliningraph.parsing.delimiters$delegate.<anonymous>.<anonymous>' call
    var tmp$ret$1 = -b.length | 0;
    return compareValues(tmp, tmp$ret$1);
  }
  function nonterminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var tmp0_iterator = $this$cache.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.nonterminals$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_LHS(item);
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function symbols$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp = get_nonterminals($this$cache);
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = $this$cache.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.symbols$delegate.<anonymous>.<anonymous>' call
      var list = get_RHS(element);
      addAll(destination, list);
    }
    return plus_2(tmp, destination);
  }
  function terminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return minus_0(get_symbols($this$cache), get_nonterminals($this$cache));
  }
  function terminalUnitProductions$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = terminalUnitProductions$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    return this_0;
  }
  function terminalUnitProductions$delegate$lambda$lambda($this_cache) {
    return function (it) {
      return get_RHS(it).k() === 1 ? !get_nonterminals($this_cache).f1(get_RHS(it).m(0)) : false;
    };
  }
  function unitProductions$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = unitProductions$delegate$lambda$lambda;
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    return this_0;
  }
  function unitProductions$delegate$lambda$lambda(it) {
    _init_properties_CFG_kt__oelqcy();
    return get_RHS(it).k() === 1;
  }
  function nonterminalProductions$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = nonterminalProductions$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    return this_0;
  }
  function nonterminalProductions$delegate$lambda$lambda($this_cache) {
    return function (it) {
      return !get_terminalUnitProductions($this_cache).f1(it);
    };
  }
  function unitNonterminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_terminalUnitProductions($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitNonterminals$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_LHS(item);
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function bimap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new BiMap($this$cache);
  }
  function tmap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_terminals($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = to(get_bimap($this$cache).x11(listOf_0(item)), item);
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_0 = LinkedHashMap_init_$Create$();
    var tmp0_iterator_0 = destination.h();
    while (tmp0_iterator_0.i()) {
      var element = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>' call
      var key = element.ee_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_0.h2(key);
      var tmp;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_0.s4(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.e(element);
    }
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_1 = LinkedHashMap_init_$Create$_1(mapCapacity(destination_0.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_iterator_1 = destination_0.j2().h();
    while (tmp0_iterator_1.i()) {
      var element_0 = tmp0_iterator_1.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_0 = element_0.d2();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = element_0.e2();
      // Inline function 'kotlin.collections.mapTo' call
      var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var tmp0_iterator_2 = this_1.h();
      while (tmp0_iterator_2.i()) {
        var item_0 = tmp0_iterator_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$9 = item_0.fe_1;
        destination_2.e(tmp$ret$9);
      }
      var tmp$ret$12 = toSet_0(destination_2);
      destination_1.s4(tmp_0, tmp$ret$12);
    }
    return destination_1;
  }
  function vindex$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp = 0;
    var tmp_0 = get_bindex($this$cache).z11_1.k();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(tmp_0), null);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var this_0 = get_bimap($this$cache).y11(get_bindex($this$cache).m(tmp_2));
      var predicate = vindex$delegate$lambda$lambda;
      // Inline function 'kotlin.apply' call
      var this_1 = toMutableSet(this_0);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_1, predicate);
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator = this_1.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.vindex$delegate.<anonymous>.<anonymous>' call
        var list = listOf([get_bindex($this$cache).c12(element.m(0)), get_bindex($this$cache).c12(element.m(1))]);
        addAll(destination, list);
      }
      tmp_1[tmp_2] = toIntArray(destination);
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function vindex$delegate$lambda$lambda(it) {
    _init_properties_CFG_kt__oelqcy();
    return it.k() > 1;
  }
  function bindex$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new Bindex(get_nonterminals($this$cache));
  }
  function normalForm$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return normalize($this$cache);
  }
  function depGraph$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return dependencyGraph($this$cache);
  }
  function revDepGraph$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return revDependencyGraph($this$cache);
  }
  function originalForm$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp6_safe_receiver = get_rewriteHistory().h2($this$cache);
    var tmp0_elvis_lhs = tmp6_safe_receiver == null ? null : tmp6_safe_receiver.m(0);
    return tmp0_elvis_lhs == null ? $this$cache : tmp0_elvis_lhs;
  }
  function nonparametricForm$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return ensureNotNull(get_rewriteHistory().h2($this$cache)).m(1);
  }
  function reachability$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.mutableMapOf' call
    return LinkedHashMap_init_$Create$();
  }
  function unitReachability$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = get_symbols($this$cache);
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var it = LabeledGraph_init_$Create$(unitReachability$delegate$lambda$lambda($this$cache));
      var this_1 = plus_2(setOf(element), plus_2(transitiveClosure_0(it, setOf(element)), transitiveClosure_0(it.kz(), setOf(element))));
      var predicate = unitReachability$delegate$lambda$lambda_0($this$cache);
      // Inline function 'kotlin.apply' call
      var this_2 = toMutableSet(this_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_2, predicate);
      result.s4(element, this_2);
    }
    return result;
  }
  function unitReachability$delegate$lambda$lambda($this_cache) {
    return function ($this$LabeledGraph) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_unitProductions($this_cache);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(get_LHS(item), get_RHS(item).m(0));
        destination.e(tmp$ret$0);
      }
      var tmp0_iterator_0 = destination.h();
      while (tmp0_iterator_0.i()) {
        var element = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var a = element.ge();
        var b = element.he();
        $this$LabeledGraph.k10(a, b);
      }
      return Unit_instance;
    };
  }
  function unitReachability$delegate$lambda$lambda_0($this_cache) {
    return function (it) {
      return get_nonterminals($this_cache).f1(it);
    };
  }
  function noNonterminalStubs$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    println('Disabling nonterminal stubs!');
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = noNonterminalStubs$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    var this_1 = toSet_0(this_0);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    var tmp = get_rewriteHistory();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
    var it = freeze($this$cache);
    var tmp$ret$3 = plus(ensureNotNull(get_rewriteHistory().h2(it)), listOf_0(it));
    tmp.s4(this_1, tmp$ret$3);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    get_blocked(this_1).q(get_blocked($this$cache));
    return this_1;
  }
  function noNonterminalStubs$delegate$lambda$lambda($this_cache) {
    return function (it) {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.none' call
        var this_0 = get_RHS(it);
        var tmp;
        if (isInterface(this_0, Collection)) {
          tmp = this_0.l();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
          if (isNonterminalStubIn(element, $this_cache)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function noEpsilonOrNonterminalStubs$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    println('Disabling nonterminal stubs!');
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = noEpsilonOrNonterminalStubs$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    var predicate_0 = noEpsilonOrNonterminalStubs$delegate$lambda$lambda_0;
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableSet(this_0);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_1, predicate_0);
    var this_2 = toSet_0(this_1);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    var tmp = get_rewriteHistory();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
    var it = freeze($this$cache);
    var tmp$ret$5 = plus(ensureNotNull(get_rewriteHistory().h2(it)), listOf_0(it));
    tmp.s4(this_2, tmp$ret$5);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    get_blocked(this_2).q(get_blocked($this$cache));
    return this_2;
  }
  function noEpsilonOrNonterminalStubs$delegate$lambda$lambda($this_cache) {
    return function (it) {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.none' call
        var this_0 = get_RHS(it);
        var tmp;
        if (isInterface(this_0, Collection)) {
          tmp = this_0.l();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
          if (isNonterminalStubIn(element, $this_cache)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function noEpsilonOrNonterminalStubs$delegate$lambda$lambda_0(it) {
    _init_properties_CFG_kt__oelqcy();
    return !contains(it.toString(), '\u03B5');
  }
  function parikhFPCache$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.TODO' call
    throw new NotImplementedError();
  }
  function generators$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var tmp0_iterator = $this$cache.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_RHS(item);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator_0 = this_0.h();
      while (tmp0_iterator_0.i()) {
        var item_0 = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(item_0, get_LHS(item));
        destination_0.e(tmp$ret$0);
      }
      destination.e(destination_0);
    }
    // Inline function 'kotlin.collections.groupByTo' call
    var this_1 = flatten(destination);
    var destination_1 = LinkedHashMap_init_$Create$();
    var tmp0_iterator_1 = this_1.h();
    while (tmp0_iterator_1.i()) {
      var element = tmp0_iterator_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>' call
      var key = element.ee_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_1.h2(key);
      var tmp;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_1.s4(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.e(element);
    }
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_2 = LinkedHashMap_init_$Create$_1(mapCapacity(destination_1.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var tmp0_iterator_2 = destination_1.j2().h();
    while (tmp0_iterator_2.i()) {
      var element_0 = tmp0_iterator_2.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_0 = element_0.d2();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_2 = element_0.e2();
      // Inline function 'kotlin.collections.mapTo' call
      var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
      var tmp0_iterator_3 = this_2.h();
      while (tmp0_iterator_3.i()) {
        var item_1 = tmp0_iterator_3.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$12 = item_1.fe_1;
        destination_3.e(tmp$ret$12);
      }
      var tmp$ret$15 = toSet_0(destination_3);
      destination_2.s4(tmp_0, tmp$ret$15);
    }
    return destination_2;
  }
  function nonterminalFormulas$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = get_nonterminals($this$cache);
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.nonterminalFormulas$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = toFormula($this$cache, element);
      result.s4(element, tmp$ret$0);
    }
    return result;
  }
  function pruneTreelikeNonterminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    println('Pruning treelike nonterminals!');
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = pruneTreelikeNonterminals$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    var cfg = toSet_0(this_0);
    var brokenReferences = get_terminals(cfg);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_0 = pruneTreelikeNonterminals$delegate$lambda$lambda_0($this$cache);
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableSet(brokenReferences);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_1, predicate_0);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var tmp0_iterator = this_1.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp$ret$4 = to(item, listOf_0('<' + item + '>'));
      destination.e(tmp$ret$4);
    }
    var tmp = plus_2(cfg, destination);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var this_2 = get_nonterminals(cfg);
    var predicate_1 = pruneTreelikeNonterminals$delegate$lambda$lambda_1;
    // Inline function 'kotlin.apply' call
    var this_3 = toMutableSet(this_2);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_3, predicate_1);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
    var tmp0_iterator_0 = this_3.h();
    while (tmp0_iterator_0.i()) {
      var item_0 = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp$ret$9 = to(item_0, listOf_0('<' + item_0 + '>'));
      destination_0.e(tmp$ret$9);
    }
    var tmp_0 = plus_2(tmp, destination_0);
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_2 = pruneTreelikeNonterminals$delegate$lambda$lambda_2($this$cache);
    // Inline function 'kotlin.apply' call
    var this_4 = toMutableSet(brokenReferences);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_4, predicate_2);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_4, 10));
    var tmp0_iterator_1 = this_4.h();
    while (tmp0_iterator_1.i()) {
      var item_1 = tmp0_iterator_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate_3 = pruneTreelikeNonterminals$delegate$lambda$lambda_3(item_1);
      // Inline function 'kotlin.apply' call
      var this_5 = toMutableSet($this$cache);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_5, predicate_3);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(this_5, 10));
      var tmp0_iterator_2 = this_5.h();
      while (tmp0_iterator_2.i()) {
        var item_2 = tmp0_iterator_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$16 = to(item_1, get_RHS(item_2));
        destination_2.e(tmp$ret$16);
      }
      destination_1.e(destination_2);
    }
    var this_6 = toSet_0(flatten(destination_1));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
    println('Restored productions: ' + prettyPrint(this_6));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    var it = plus_2(tmp_0, this_6);
    var this_7 = transformIntoCNF(it);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    var tmp_1 = get_rewriteHistory();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
    var it_0 = freeze($this$cache);
    var tmp$ret$28 = plus(listOf_0(ensureNotNull(get_rewriteHistory().h2(it_0)).m(0)), listOf_0(it_0));
    tmp_1.s4(this_7, tmp$ret$28);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    get_blocked(this_7).q(get_blocked($this$cache));
    return this_7;
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda($this_cache) {
    return function (it) {
      var tmp;
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var this_0 = get_RHS(it);
        var tmp_0;
        if (isInterface(this_0, Collection)) {
          tmp_0 = this_0.l();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
          if (!isTreelikeNonterminalIn(element, $this_cache)) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
        }
        tmp$ret$0 = false;
      }
      if (tmp$ret$0) {
        tmp = true;
      } else {
        tmp = contains(get_LHS(it), '\u03B5');
      }
      return tmp;
    };
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_0($this_cache) {
    return function (it) {
      return get_terminals($this_cache).f1('<' + it + '>');
    };
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_1(it) {
    _init_properties_CFG_kt__oelqcy();
    return isOrganicNonterminal(it);
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_2($this_cache) {
    return function (it) {
      return isSyntheticNonterminal(it) ? get_nonterminals($this_cache).f1(it) : false;
    };
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_3($l) {
    return function (it) {
      return get_LHS(it) === $l;
    };
  }
  function joinMap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new JoinMap($this$cache);
  }
  function dependencyGraph$lambda($this_dependencyGraph) {
    return function ($this$LabeledGraph) {
      var tmp0_iterator = $this_dependencyGraph.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.dependencyGraph.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator_0 = element.fe_1.h();
        while (tmp0_iterator_0.i()) {
          var element_0 = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.dependencyGraph.<anonymous>.<anonymous>.<anonymous>' call
          $this$LabeledGraph.k10(get_LHS(element), element_0);
        }
      }
      return Unit_instance;
    };
  }
  function revDependencyGraph$lambda($this_revDependencyGraph) {
    return function ($this$LabeledGraph) {
      var tmp0_iterator = $this_revDependencyGraph.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.revDependencyGraph.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator_0 = element.fe_1.h();
        while (tmp0_iterator_0.i()) {
          var element_0 = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.revDependencyGraph.<anonymous>.<anonymous>.<anonymous>' call
          $this$LabeledGraph.k10(element_0, get_LHS(element));
        }
      }
      return Unit_instance;
    };
  }
  function toFormula$lambda$lambda($this_toFormula) {
    return function (it) {
      return toFormula($this_toFormula, it);
    };
  }
  function toFormula$lambda($this_toFormula) {
    return function (it) {
      return joinToString(it, ' and ', '( ', ' )', VOID, VOID, toFormula$lambda$lambda($this_toFormula));
    };
  }
  function language$factory() {
    return getPropertyCallableRef('language', 1, KProperty1, function (receiver) {
      return get_language(receiver);
    }, null);
  }
  function nonterminals$factory() {
    return getPropertyCallableRef('nonterminals', 1, KProperty1, function (receiver) {
      return get_nonterminals(receiver);
    }, null);
  }
  function symbols$factory() {
    return getPropertyCallableRef('symbols', 1, KProperty1, function (receiver) {
      return get_symbols(receiver);
    }, null);
  }
  function terminals$factory() {
    return getPropertyCallableRef('terminals', 1, KProperty1, function (receiver) {
      return get_terminals(receiver);
    }, null);
  }
  function terminalUnitProductions$factory() {
    return getPropertyCallableRef('terminalUnitProductions', 1, KProperty1, function (receiver) {
      return get_terminalUnitProductions(receiver);
    }, null);
  }
  function unitProductions$factory() {
    return getPropertyCallableRef('unitProductions', 1, KProperty1, function (receiver) {
      return get_unitProductions(receiver);
    }, null);
  }
  function nonterminalProductions$factory() {
    return getPropertyCallableRef('nonterminalProductions', 1, KProperty1, function (receiver) {
      return get_nonterminalProductions(receiver);
    }, null);
  }
  function unitNonterminals$factory() {
    return getPropertyCallableRef('unitNonterminals', 1, KProperty1, function (receiver) {
      return get_unitNonterminals(receiver);
    }, null);
  }
  function bimap$factory() {
    return getPropertyCallableRef('bimap', 1, KProperty1, function (receiver) {
      return get_bimap(receiver);
    }, null);
  }
  function vindex$factory() {
    return getPropertyCallableRef('vindex', 1, KProperty1, function (receiver) {
      return get_vindex(receiver);
    }, null);
  }
  function bindex$factory() {
    return getPropertyCallableRef('bindex', 1, KProperty1, function (receiver) {
      return get_bindex(receiver);
    }, null);
  }
  function normalForm$factory() {
    return getPropertyCallableRef('normalForm', 1, KProperty1, function (receiver) {
      return get_normalForm(receiver);
    }, null);
  }
  function depGraph$factory() {
    return getPropertyCallableRef('depGraph', 1, KProperty1, function (receiver) {
      return get_depGraph(receiver);
    }, null);
  }
  function originalForm$factory() {
    return getPropertyCallableRef('originalForm', 1, KProperty1, function (receiver) {
      return get_originalForm(receiver);
    }, null);
  }
  function reachability$factory() {
    return getPropertyCallableRef('reachability', 1, KProperty1, function (receiver) {
      return get_reachability(receiver);
    }, null);
  }
  function unitReachability$factory() {
    return getPropertyCallableRef('unitReachability', 1, KProperty1, function (receiver) {
      return get_unitReachability(receiver);
    }, null);
  }
  function L2RHS$factory() {
    return getPropertyCallableRef('L2RHS', 1, KProperty1, function (receiver) {
      return receiver.t11();
    }, null);
  }
  function R2LHS$factory() {
    return getPropertyCallableRef('R2LHS', 1, KProperty1, function (receiver) {
      return receiver.r11();
    }, null);
  }
  function TDEPS$factory() {
    return getPropertyCallableRef('TDEPS', 1, KProperty1, function (receiver) {
      return receiver.u11();
    }, null);
  }
  function NDEPS$factory() {
    return getPropertyCallableRef('NDEPS', 1, KProperty1, function (receiver) {
      return receiver.v11();
    }, null);
  }
  function TRIPL$factory() {
    return getPropertyCallableRef('TRIPL', 1, KProperty1, function (receiver) {
      return receiver.s11();
    }, null);
  }
  function UNITS$factory() {
    return getPropertyCallableRef('UNITS', 1, KProperty1, function (receiver) {
      return receiver.w11();
    }, null);
  }
  var properties_initialized_CFG_kt_kkv418;
  function _init_properties_CFG_kt__oelqcy() {
    if (!properties_initialized_CFG_kt_kkv418) {
      properties_initialized_CFG_kt_kkv418 = true;
      language$delegate = cache_0(VOID, language$delegate$lambda);
      delimiters$delegate = cache_0(VOID, delimiters$delegate$lambda);
      nonterminals$delegate = cache_0(VOID, nonterminals$delegate$lambda);
      symbols$delegate = cache_0(VOID, symbols$delegate$lambda);
      terminals$delegate = cache_0(VOID, terminals$delegate$lambda);
      terminalUnitProductions$delegate = cache_0(VOID, terminalUnitProductions$delegate$lambda);
      unitProductions$delegate = cache_0(VOID, unitProductions$delegate$lambda);
      nonterminalProductions$delegate = cache_0(VOID, nonterminalProductions$delegate$lambda);
      unitNonterminals$delegate = cache_0(VOID, unitNonterminals$delegate$lambda);
      bimap$delegate = cache_0(VOID, bimap$delegate$lambda);
      tmap$delegate = cache_0(VOID, tmap$delegate$lambda);
      vindex$delegate = cache_0(VOID, vindex$delegate$lambda);
      bindex$delegate = cache_0(VOID, bindex$delegate$lambda);
      normalForm$delegate = cache_0(VOID, normalForm$delegate$lambda);
      depGraph$delegate = cache_0(VOID, depGraph$delegate$lambda);
      revDepGraph$delegate = cache_0(VOID, revDepGraph$delegate$lambda);
      originalForm$delegate = cache_0(VOID, originalForm$delegate$lambda);
      nonparametricForm$delegate = cache_0(VOID, nonparametricForm$delegate$lambda);
      reachability$delegate = cache_0(VOID, reachability$delegate$lambda);
      unitReachability$delegate = cache_0(VOID, unitReachability$delegate$lambda);
      noNonterminalStubs$delegate = cache_0(VOID, noNonterminalStubs$delegate$lambda);
      noEpsilonOrNonterminalStubs$delegate = cache_0(VOID, noEpsilonOrNonterminalStubs$delegate$lambda);
      parikhFPCache$delegate = cache_0(VOID, parikhFPCache$delegate$lambda);
      generators$delegate = cache_0(VOID, generators$delegate$lambda);
      nonterminalFormulas$delegate = cache_0(VOID, nonterminalFormulas$delegate$lambda);
      pruneTreelikeNonterminals$delegate = cache_0(VOID, pruneTreelikeNonterminals$delegate$lambda);
      joinMap$delegate = cache_0(VOID, joinMap$delegate$lambda);
    }
  }
  function get_pretty(_this__u8e3s4) {
    _init_properties_Debugging_kt__gvw5j0();
    return pretty$delegate.j11(_this__u8e3s4, pretty$factory());
  }
  var pretty$delegate;
  function prettyPrint(_this__u8e3s4) {
    _init_properties_Debugging_kt__gvw5j0();
    return get_pretty(_this__u8e3s4).toString();
  }
  function pretty(_this__u8e3s4) {
    _init_properties_Debugging_kt__gvw5j0();
    return get_LHS(_this__u8e3s4) + ' -> ' + joinToString(get_RHS(_this__u8e3s4), ' ');
  }
  function pretty$delegate$lambda($this$cache) {
    _init_properties_Debugging_kt__gvw5j0();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var tmp0_iterator = $this$cache.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pretty$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = pretty(item);
      destination.e(tmp$ret$0);
    }
    return formatAsGrid(destination, 3);
  }
  function pretty$factory() {
    return getPropertyCallableRef('pretty', 1, KProperty1, function (receiver) {
      return get_pretty(receiver);
    }, null);
  }
  var properties_initialized_Debugging_kt_lkmgf6;
  function _init_properties_Debugging_kt__gvw5j0() {
    if (!properties_initialized_Debugging_kt_lkmgf6) {
      properties_initialized_Debugging_kt_lkmgf6 = true;
      pretty$delegate = cache_0(VOID, pretty$delegate$lambda);
    }
  }
  var language$delegate_0;
  var asCFG$delegate;
  var asCJL$delegate;
  function CFL(cfg) {
    this.m12_1 = cfg;
  }
  protoOf(CFL).toString = function () {
    return 'CFL(cfg=' + this.m12_1 + ')';
  };
  protoOf(CFL).hashCode = function () {
    return hashCode(this.m12_1);
  };
  protoOf(CFL).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CFL))
      return false;
    var tmp0_other_with_cast = other instanceof CFL ? other : THROW_CCE();
    if (!equals(this.m12_1, tmp0_other_with_cast.m12_1))
      return false;
    return true;
  };
  function REL(reg) {
    this.n12_1 = reg;
  }
  protoOf(REL).toString = function () {
    return 'REL(reg=' + this.n12_1 + ')';
  };
  protoOf(REL).hashCode = function () {
    return hashCode(this.n12_1);
  };
  protoOf(REL).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof REL))
      return false;
    var tmp0_other_with_cast = other instanceof REL ? other : THROW_CCE();
    if (!equals(this.n12_1, tmp0_other_with_cast.n12_1))
      return false;
    return true;
  };
  function intersect_0($this, item) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = $this.t12();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item_0 = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.CJL.intersect.<anonymous>' call
      var tmp$ret$0 = item(item_0);
      destination.e(tmp$ret$0);
    }
    return intersect_1(destination);
  }
  function CJL$cfgs$delegate$lambda($cfls) {
    return function ($this$cache) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = $cfls;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.length);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var item = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.CJL.cfgs$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = item.m12_1;
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function CJL$nonterminals$delegate$lambda($this$cache) {
    return intersect_0($this$cache, CJL$nonterminals$delegate$lambda$lambda);
  }
  function CJL$nonterminals$delegate$lambda$lambda($this$intersect) {
    return get_nonterminals($this$intersect);
  }
  function CJL$terminals$delegate$lambda($this$cache) {
    return intersect_0($this$cache, CJL$terminals$delegate$lambda$lambda);
  }
  function CJL$terminals$delegate$lambda$lambda($this$intersect) {
    return get_terminals($this$intersect);
  }
  function CJL$symbols$delegate$lambda($this$cache) {
    return intersect_0($this$cache, CJL$symbols$delegate$lambda$lambda);
  }
  function CJL$symbols$delegate$lambda$lambda($this$intersect) {
    return get_symbols($this$intersect);
  }
  function CJL(cfls) {
    var tmp = this;
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_0 = toSet_1(cfls);
    tmp.o12_1 = copyToArray(this_0);
    var tmp_0 = this;
    tmp_0.p12_1 = cache_0(VOID, CJL$cfgs$delegate$lambda(cfls));
    var tmp_1 = this;
    tmp_1.q12_1 = cache_0(VOID, CJL$nonterminals$delegate$lambda);
    var tmp_2 = this;
    tmp_2.r12_1 = cache_0(VOID, CJL$terminals$delegate$lambda);
    var tmp_3 = this;
    tmp_3.s12_1 = cache_0(VOID, CJL$symbols$delegate$lambda);
  }
  protoOf(CJL).t12 = function () {
    return this.p12_1.j11(this, cfgs$factory());
  };
  function contains_0(_this__u8e3s4, s) {
    _init_properties_FLTheory_kt__k6sxcb();
    return isValid(_this__u8e3s4.m12_1, s);
  }
  function language$delegate$lambda_0($this$cache) {
    _init_properties_FLTheory_kt__k6sxcb();
    return new REL($this$cache);
  }
  function asCFG$delegate$lambda($this$cache) {
    _init_properties_FLTheory_kt__k6sxcb();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var tmp0_iterator = $this$cache.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.asCFG$delegate.<anonymous>.<anonymous>' call
      var a = item.ge();
      var b = item.he();
      var tmp$ret$0 = to(a, listOf_0(b));
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function asCJL$delegate$lambda($this$cache) {
    _init_properties_FLTheory_kt__k6sxcb();
    return new CJL([get_language($this$cache)]);
  }
  function cfgs$factory() {
    return getPropertyCallableRef('cfgs', 1, KProperty1, function (receiver) {
      return receiver.t12();
    }, null);
  }
  var properties_initialized_FLTheory_kt_tf02wj;
  function _init_properties_FLTheory_kt__k6sxcb() {
    if (!properties_initialized_FLTheory_kt_tf02wj) {
      properties_initialized_FLTheory_kt_tf02wj = true;
      language$delegate_0 = cache_0(VOID, language$delegate$lambda_0);
      asCFG$delegate = cache_0(VOID, asCFG$delegate$lambda);
      asCJL$delegate = cache_0(VOID, asCJL$delegate$lambda);
    }
  }
  function get_rewriteHistory() {
    _init_properties_Normalization_kt__nz9twr();
    return rewriteHistory;
  }
  var rewriteHistory;
  function get_START_SYMBOL() {
    _init_properties_Normalization_kt__nz9twr();
    return START_SYMBOL;
  }
  var START_SYMBOL;
  function normalize(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.mutableListOf' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>' call
    var rewrites = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.also' call
    var this_0 = expandOr(addGlobalStartSymbol(_this__u8e3s4));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>.<anonymous>' call
    rewrites.e(this_0);
    var this_1 = eliminateParametricityFromLHS(this_0);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>.<anonymous>' call
    rewrites.e(this_1);
    var this_2 = generateNonterminalStubs(transformIntoCNF(this_1));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>.<anonymous>' call
    get_rewriteHistory().s4(freeze(this_2), rewrites);
    return this_2;
  }
  function transitiveClosure_0(_this__u8e3s4, from) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = transitiveClosure$lambda(from);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    var this_1 = _this__u8e3s4.h10(this_0);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var tmp0_iterator = this_1.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.transitiveClosure.<anonymous>' call
      var tmp$ret$2 = item.s10();
      destination.e(tmp$ret$2);
    }
    return toSet_0(destination);
  }
  function transformIntoCNF(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    return removeUselessSymbols(terminalsToUnitProds(refactorRHS(elimVarUnitProds(refactorEpsilonProds(addEpsilonProduction(_this__u8e3s4))))));
  }
  function isSyntheticNonterminal(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    return (!(split(_this__u8e3s4, charArrayOf([_Char___init__impl__6a9atx(46)])).k() === 1) ? true : contains(_this__u8e3s4, '\u03B5')) ? true : _this__u8e3s4 === 'START';
  }
  function isOrganicNonterminal(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    return (split(_this__u8e3s4, charArrayOf([_Char___init__impl__6a9atx(46)])).k() === 1 ? !contains(_this__u8e3s4, '\u03B5') : false) ? !(_this__u8e3s4 === 'START') : false;
  }
  function reachableSymbols(_this__u8e3s4, from) {
    from = from === VOID ? get_START_SYMBOL() : from;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = get_reachability(_this__u8e3s4);
    var value = this_0.h2(from);
    var tmp;
    if (value == null) {
      // Inline function 'ai.hypergraph.kaliningraph.parsing.reachableSymbols.<anonymous>' call
      var answer = transitiveClosure_0(get_depGraph(_this__u8e3s4), setOf(from));
      this_0.s4(from, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    return tmp;
  }
  function generateNonterminalStubs(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = generateNonterminalStubs$lambda;
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generateNonterminalStubs.<anonymous>' call
      var tmp$ret$2 = to(get_LHS(item), listOf_0('<' + get_LHS(item) + '>'));
      destination.e(tmp$ret$2);
    }
    return plus_2(_this__u8e3s4, addEpsilonProduction(toSet_0(destination)));
  }
  function eliminateParametricityFromLHS(_this__u8e3s4, parameters) {
    var tmp;
    if (parameters === VOID) {
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var this_0 = get_nonterminals(_this__u8e3s4);
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>' call
        var list = getParametersIn(element, _this__u8e3s4);
        addAll(destination, list);
      }
      tmp = toSet_0(destination);
    } else {
      tmp = parameters;
    }
    parameters = tmp;
    _init_properties_Normalization_kt__nz9twr();
    var tmp_0;
    if (parameters.l()) {
      tmp_0 = _this__u8e3s4;
    } else {
      var i = false;
      // Inline function 'kotlin.collections.setOf' call
      var tmp$ret$3 = emptySet();
      var _destruct__k2r9zo = to('', tmp$ret$3);
      var ntReplaced = _destruct__k2r9zo.ge();
      var ntReplacements = _destruct__k2r9zo.he();
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination_0 = ArrayList_init_$Create$_0();
      var tmp0_iterator_0 = _this__u8e3s4.h();
      while (tmp0_iterator_0.i()) {
        var element_0 = tmp0_iterator_0.j();
        var tmp$ret$4;
        $l$block: {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>' call
          var params = getParametersIn(get_LHS(element_0), _this__u8e3s4);
          if (params.l() ? true : i) {
            tmp$ret$4 = listOf_0(element_0);
            break $l$block;
          }
          i = true;
          ntReplaced = get_LHS(element_0);
          // Inline function 'kotlin.collections.associateWith' call
          var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(params, 10)), 16));
          // Inline function 'kotlin.collections.associateWithTo' call
          var tmp0_iterator_1 = params.h();
          while (tmp0_iterator_1.i()) {
            var element_1 = tmp0_iterator_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.collections.map' call
            var this_1 = get_bimap(_this__u8e3s4).y11(element_1);
            // Inline function 'kotlin.collections.mapTo' call
            var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
            var tmp0_iterator_2 = this_1.h();
            while (tmp0_iterator_2.i()) {
              var item = tmp0_iterator_2.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$5 = item.m(0);
              destination_1.e(tmp$ret$5);
            }
            var tmp$ret$8 = toSet_0(destination_1);
            result.s4(element_1, tmp$ret$8);
          }
          var map = result;
          var tmp$ret$11;
          $l$block_1: {
            // Inline function 'kotlin.collections.maxByOrNull' call
            var iterator = map.j2().h();
            if (!iterator.i()) {
              tmp$ret$11 = null;
              break $l$block_1;
            }
            var maxElem = iterator.j();
            if (!iterator.i()) {
              tmp$ret$11 = maxElem;
              break $l$block_1;
            }
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
            var maxValue = maxElem.e2().k();
            do {
              var e = iterator.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
              var v = e.e2().k();
              if (compareTo(maxValue, v) < 0) {
                maxElem = e;
                maxValue = v;
              }
            }
             while (iterator.i());
            tmp$ret$11 = maxElem;
          }
          var _destruct__k2r9zo_0 = ensureNotNull(tmp$ret$11);
          // Inline function 'kotlin.collections.component1' call
          var s = _destruct__k2r9zo_0.d2();
          // Inline function 'kotlin.collections.component2' call
          var r = _destruct__k2r9zo_0.e2();
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(r, 10));
          var tmp0_iterator_3 = r.h();
          while (tmp0_iterator_3.i()) {
            var item_0 = tmp0_iterator_3.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.also' call
            var this_2 = replace(get_LHS(element_0), '<' + s + '>', '<' + item_0 + '>');
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>.<anonymous>' call
            ntReplacements = plus_1(ntReplacements, this_2);
            var tmp_1 = this_2;
            // Inline function 'kotlin.collections.map' call
            var this_3 = get_RHS(element_0);
            // Inline function 'kotlin.collections.mapTo' call
            var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
            var tmp0_iterator_4 = this_3.h();
            while (tmp0_iterator_4.i()) {
              var item_1 = tmp0_iterator_4.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$17 = replace(item_1, '<' + s + '>', '<' + item_0 + '>');
              destination_3.e(tmp$ret$17);
            }
            var tmp$ret$20 = to(tmp_1, destination_3);
            destination_2.e(tmp$ret$20);
          }
          tmp$ret$4 = destination_2;
        }
        var list_0 = tmp$ret$4;
        addAll(destination_0, list_0);
      }
      tmp_0 = eliminateParametricityFromLHS(eliminateParametricityFromRHS(toSet_0(destination_0), ntReplaced, ntReplacements));
    }
    return tmp_0;
  }
  function expandOr(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.expandOr.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.fold' call
      var this_0 = get_RHS(element);
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$0 = emptyList();
      var accumulator = listOf_0(tmp$ret$0);
      var tmp0_iterator_0 = this_0.h();
      while (tmp0_iterator_0.i()) {
        var element_0 = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.expandOr.<anonymous>.<anonymous>' call
        var acc = accumulator;
        var tmp;
        if (element_0 === '|') {
          // Inline function 'kotlin.collections.listOf' call
          var tmp$ret$1 = emptyList();
          tmp = plus(acc, listOf_0(tmp$ret$1));
        } else {
          tmp = plus(dropLast(acc, 1), listOf_0(plus_0(last(acc), element_0)));
        }
        accumulator = tmp;
      }
      var this_1 = accumulator;
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var tmp0_iterator_1 = this_1.h();
      while (tmp0_iterator_1.i()) {
        var item = tmp0_iterator_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.expandOr.<anonymous>.<anonymous>' call
        var tmp$ret$4 = to(get_LHS(element), item);
        destination_0.e(tmp$ret$4);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function addGlobalStartSymbol(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    var tmp;
    if (get_nonterminals(_this__u8e3s4).f1(get_START_SYMBOL())) {
      tmp = emptySet();
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_nonterminals(_this__u8e3s4);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.addGlobalStartSymbol.<anonymous>' call
        var tmp$ret$0 = to(get_START_SYMBOL(), listOf_0(item));
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    }
    return plus_2(_this__u8e3s4, tmp);
  }
  function removeUselessSymbols(_this__u8e3s4, generating, reachable) {
    generating = generating === VOID ? genSym(_this__u8e3s4) : generating;
    reachable = reachable === VOID ? reachSym(_this__u8e3s4) : reachable;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.removeUselessSymbols.<anonymous>' call
    removeAll(this_0, removeUselessSymbols$lambda(generating, reachable));
    return this_0;
  }
  function terminalsToUnitProds(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    $l$1: do {
      $l$0: do {
        var tmp$ret$3;
        $l$block_1: {
          // Inline function 'kotlin.collections.firstOrNull' call
          var tmp0_iterator = get_nonterminalProductions($this).h();
          while (tmp0_iterator.i()) {
            var element = tmp0_iterator.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>' call
            var tmp$ret$0;
            $l$block_0: {
              // Inline function 'kotlin.collections.any' call
              var this_0 = get_RHS(element);
              var tmp;
              if (isInterface(this_0, Collection)) {
                tmp = this_0.l();
              } else {
                tmp = false;
              }
              if (tmp) {
                tmp$ret$0 = false;
                break $l$block_0;
              }
              var tmp0_iterator_0 = this_0.h();
              while (tmp0_iterator_0.i()) {
                var element_0 = tmp0_iterator_0.j();
                // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>.<anonymous>' call
                if (!get_nonterminals($this).f1(element_0)) {
                  tmp$ret$0 = true;
                  break $l$block_0;
                }
              }
              tmp$ret$0 = false;
            }
            if (tmp$ret$0) {
              tmp$ret$3 = element;
              break $l$block_1;
            }
          }
          tmp$ret$3 = null;
        }
        var tmp0_elvis_lhs = tmp$ret$3;
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          return $this;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        var mixProd = tmp_0;
        var tmp$ret$5;
        $l$block_2: {
          // Inline function 'kotlin.collections.indexOfFirst' call
          var index = 0;
          var tmp0_iterator_1 = get_RHS(mixProd).h();
          while (tmp0_iterator_1.i()) {
            var item = tmp0_iterator_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>' call
            if (!get_nonterminals($this).f1(item)) {
              tmp$ret$5 = index;
              break $l$block_2;
            }
            index = index + 1 | 0;
          }
          tmp$ret$5 = -1;
        }
        var termIdx = tmp$ret$5;
        var freshName = 'F.' + get_RHS(mixProd).m(termIdx);
        // Inline function 'kotlin.also' call
        var this_1 = toMutableList(get_RHS(mixProd));
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>' call
        this_1.t(termIdx, freshName);
        var freshRHS = this_1;
        var newProd = to(freshName, listOf_0(get_RHS(mixProd).m(termIdx)));
        var newGrammar = plus_1(plus_1(minus($this, mixProd), to(get_LHS(mixProd), freshRHS)), newProd);
        var tmp_1;
        if (equals($this, newGrammar)) {
          tmp_1 = $this;
        } else {
          $this = newGrammar;
          continue $l$0;
        }
        return tmp_1;
      }
       while (false);
    }
     while (true);
  }
  function refactorRHS(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    $l$1: do {
      $l$0: do {
        var tmp$ret$1;
        $l$block: {
          // Inline function 'kotlin.collections.firstOrNull' call
          var tmp0_iterator = $this.h();
          while (tmp0_iterator.i()) {
            var element = tmp0_iterator.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorRHS.<anonymous>' call
            if (get_RHS(element).k() > 2) {
              tmp$ret$1 = element;
              break $l$block;
            }
          }
          tmp$ret$1 = null;
        }
        var tmp0_elvis_lhs = tmp$ret$1;
        var tmp;
        if (tmp0_elvis_lhs == null) {
          return $this;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var longProd = tmp;
        var freshName = joinToString(takeLast(get_RHS(longProd), 2), '.');
        var newProd = to(freshName, takeLast(get_RHS(longProd), 2));
        var shortProd = to(get_LHS(longProd), plus_0(dropLast(get_RHS(longProd), 2), freshName));
        var newGrammar = plus_1(plus_1(minus($this, longProd), shortProd), newProd);
        var tmp_0;
        if (equals($this, newGrammar)) {
          tmp_0 = $this;
        } else {
          $this = newGrammar;
          continue $l$0;
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function elimVarUnitProds(_this__u8e3s4, toVisit, vars, toElim) {
    toVisit = toVisit === VOID ? get_nonterminals(_this__u8e3s4) : toVisit;
    vars = vars === VOID ? get_nonterminals(_this__u8e3s4) : vars;
    toElim = toElim === VOID ? firstOrNull(toVisit) : toElim;
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    var toVisit_0 = toVisit;
    var vars_0 = vars;
    var toElim_0 = toElim;
    $l$1: do {
      $l$0: do {
        if (toElim_0 == null) {
          // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
          var this_0 = $this;
          var predicate = elimVarUnitProds$lambda(vars_0);
          // Inline function 'kotlin.apply' call
          var this_1 = toMutableSet(this_0);
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
          retainAll(this_1, predicate);
          return this_1;
        }
        // Inline function 'kotlin.collections.map' call
        // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
        var this_2 = $this;
        var predicate_0 = elimVarUnitProds$lambda_0(toElim_0);
        // Inline function 'kotlin.apply' call
        var this_3 = toMutableSet(this_2);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
        retainAll(this_3, predicate_0);
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
        var tmp0_iterator = this_3.h();
        while (tmp0_iterator.i()) {
          var item = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.elimVarUnitProds.<anonymous>' call
          var tmp$ret$4 = get_LHS(item);
          destination.e(tmp$ret$4);
        }
        var varsThatMapToMe = toSet_0(destination);
        // Inline function 'kotlin.collections.map' call
        // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
        var this_4 = $this;
        var predicate_1 = elimVarUnitProds$lambda_1(toElim_0);
        // Inline function 'kotlin.apply' call
        var this_5 = toMutableSet(this_4);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
        retainAll(this_5, predicate_1);
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_5, 10));
        var tmp0_iterator_0 = this_5.h();
        while (tmp0_iterator_0.i()) {
          var item_0 = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.elimVarUnitProds.<anonymous>' call
          var tmp$ret$9 = get_RHS(item_0);
          destination_0.e(tmp$ret$9);
        }
        var thingsIMapTo = toSet_0(destination_0);
        // Inline function 'kotlin.collections.fold' call
        var accumulator = $this;
        var tmp0_iterator_1 = times_3(varsThatMapToMe, thingsIMapTo).h();
        while (tmp0_iterator_1.i()) {
          var element = tmp0_iterator_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.elimVarUnitProds.<anonymous>' call
          var g = accumulator;
          accumulator = plus_1(g, element);
        }
        var tmp0 = accumulator;
        var tmp1 = toSet_0(drop(toVisit_0, 1));
        $this = tmp0;
        toVisit_0 = tmp1;
        vars_0 = vars_0;
        toElim_0 = firstOrNull(tmp1);
        continue $l$0;
      }
       while (false);
    }
     while (true);
  }
  function refactorEpsilonProds(_this__u8e3s4, nlbls) {
    nlbls = nlbls === VOID ? nullableNonterminals(_this__u8e3s4) : nlbls;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var this_0 = plus_2(_this__u8e3s4, setOf(to(get_START_SYMBOL(), listOf([get_START_SYMBOL(), '\u03B5']))));
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorEpsilonProds.<anonymous>' call
      var tmp;
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var this_1 = get_RHS(element);
        var tmp_0;
        if (isInterface(this_1, Collection)) {
          tmp_0 = this_1.l();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
        var tmp0_iterator_0 = this_1.h();
        while (tmp0_iterator_0.i()) {
          var element_0 = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorEpsilonProds.<anonymous>.<anonymous>' call
          if (nlbls.f1(element_0)) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
        }
        tmp$ret$0 = false;
      }
      if (tmp$ret$0) {
        tmp = allSubSeq(element, nlbls);
      } else {
        tmp = listOf_0(element);
      }
      var list = tmp;
      addAll(destination, list);
    }
    // Inline function 'kotlin.collections.filterTo' call
    var destination_0 = ArrayList_init_$Create$_0();
    var tmp0_iterator_1 = destination.h();
    while (tmp0_iterator_1.i()) {
      var element_1 = tmp0_iterator_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorEpsilonProds.<anonymous>' call
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!get_RHS(element_1).l()) {
        destination_0.e(element_1);
      }
    }
    return toSet_0(destination_0);
  }
  function addEpsilonProduction(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.fold' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.filterNot' call
    // Inline function 'kotlin.collections.filterNotTo' call
    var this_0 = get_terminalUnitProductions(_this__u8e3s4);
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.addEpsilonProduction.<anonymous>' call
      if (!contains(pretty(element), '\u03B5')) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var tmp0_iterator_0 = destination.h();
    while (tmp0_iterator_0.i()) {
      var item = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.addEpsilonProduction.<anonymous>' call
      var tmp$ret$3 = get_LHS(item);
      destination_0.e(tmp$ret$3);
    }
    var accumulator = _this__u8e3s4;
    var tmp0_iterator_1 = toSet_0(destination_0).h();
    while (tmp0_iterator_1.i()) {
      var element_0 = tmp0_iterator_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.addEpsilonProduction.<anonymous>' call
      var acc = accumulator;
      accumulator = plus_1(plus_1(acc, to(element_0, listOf([element_0, '\u03B5+']))), to(element_0, listOf(['\u03B5+', element_0])));
    }
    var tmp$ret$7 = accumulator;
    return plus_1(plus_1(tmp$ret$7, to('\u03B5+', listOf(['\u03B5+', '\u03B5+']))), to('\u03B5+', listOf_0('\u03B5')));
  }
  function getParametersIn(_this__u8e3s4, cfg) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_unitProductions(cfg);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.getParametersIn.<anonymous>' call
      var tmp$ret$0 = get_LHS(item);
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.filterTo' call
    var destination_0 = ArrayList_init_$Create$_0();
    var tmp0_iterator_0 = destination.h();
    while (tmp0_iterator_0.i()) {
      var element = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.getParametersIn.<anonymous>' call
      if (contains(_this__u8e3s4, '<' + element + '>')) {
        destination_0.e(element);
      }
    }
    return destination_0;
  }
  function eliminateParametricityFromRHS(_this__u8e3s4, ntReplaced, ntReplacements) {
    _init_properties_Normalization_kt__nz9twr();
    var tmp;
    if (ntReplacements.l()) {
      tmp = _this__u8e3s4;
    } else {
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator = _this__u8e3s4.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>' call
        var tmp_0;
        var tmp$ret$0;
        $l$block_0: {
          // Inline function 'kotlin.collections.none' call
          var this_0 = get_RHS(element);
          var tmp_1;
          if (isInterface(this_0, Collection)) {
            tmp_1 = this_0.l();
          } else {
            tmp_1 = false;
          }
          if (tmp_1) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
          var tmp0_iterator_0 = this_0.h();
          while (tmp0_iterator_0.i()) {
            var element_0 = tmp0_iterator_0.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>.<anonymous>' call
            if (contains(element_0, ntReplaced)) {
              tmp$ret$0 = false;
              break $l$block_0;
            }
          }
          tmp$ret$0 = true;
        }
        if (tmp$ret$0) {
          tmp_0 = listOf_0(element);
        } else {
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(ntReplacements, 10));
          var tmp0_iterator_1 = ntReplacements.h();
          while (tmp0_iterator_1.i()) {
            var item = tmp0_iterator_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>.<anonymous>' call
            var tmp_2 = get_LHS(element);
            // Inline function 'kotlin.collections.map' call
            var this_1 = get_RHS(element);
            // Inline function 'kotlin.collections.mapTo' call
            var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
            var tmp0_iterator_2 = this_1.h();
            while (tmp0_iterator_2.i()) {
              var item_0 = tmp0_iterator_2.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$2 = item_0 === ntReplaced ? item : item_0;
              destination_1.e(tmp$ret$2);
            }
            var tmp$ret$5 = to(tmp_2, destination_1);
            destination_0.e(tmp$ret$5);
          }
          tmp_0 = destination_0;
        }
        var list = tmp_0;
        addAll(destination, list);
      }
      tmp = toSet_0(destination);
    }
    return tmp;
  }
  function genSym(_this__u8e3s4, from) {
    var tmp;
    if (from === VOID) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_terminalUnitProductions(_this__u8e3s4);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.genSym.<anonymous>' call
        var tmp$ret$0 = get_LHS(item);
        destination.e(tmp$ret$0);
      }
      tmp = toSet_0(destination);
    } else {
      tmp = from;
    }
    from = tmp;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.mutableSetOf' call
    var allGenerating = LinkedHashSet_init_$Create$();
    var nextGenerating = toMutableSet(from);
    $l$1: do {
      $l$0: do {
        var t = first(nextGenerating);
        nextGenerating.r3(t);
        // Inline function 'kotlin.collections.plusAssign' call
        allGenerating.e(t);
        // Inline function 'kotlin.collections.plusAssign' call
        // Inline function 'kotlin.collections.filter' call
        var tmp0_elvis_lhs = get_bimap(_this__u8e3s4).u11().h2(t);
        // Inline function 'kotlin.collections.filterTo' call
        var this_1 = tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
        var destination_0 = ArrayList_init_$Create$_0();
        var tmp0_iterator_0 = this_1.h();
        while (tmp0_iterator_0.i()) {
          var element = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.genSym.<anonymous>' call
          if (!allGenerating.f1(element) ? !nextGenerating.f1(element) : false) {
            destination_0.e(element);
          }
        }
        addAll(nextGenerating, destination_0);
      }
       while (false);
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp$ret$7 = !nextGenerating.l();
    }
     while (tmp$ret$7);
    return allGenerating;
  }
  function reachSym(_this__u8e3s4, from) {
    from = from === VOID ? get_START_SYMBOL() : from;
    _init_properties_Normalization_kt__nz9twr();
    var allReachable = mutableSetOf([from]);
    var nextReachable = mutableSetOf([from]);
    $l$1: do {
      $l$0: do {
        var t = first(nextReachable);
        nextReachable.r3(t);
        // Inline function 'kotlin.collections.plusAssign' call
        allReachable.e(t);
        // Inline function 'kotlin.collections.plusAssign' call
        // Inline function 'kotlin.collections.filter' call
        var tmp0_elvis_lhs = get_bimap(_this__u8e3s4).v11().h2(t);
        // Inline function 'kotlin.collections.filterTo' call
        var this_0 = tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
        var destination = ArrayList_init_$Create$_0();
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.reachSym.<anonymous>' call
          if (!allReachable.f1(element) ? !nextReachable.f1(element) : false) {
            destination.e(element);
          }
        }
        addAll(nextReachable, destination);
      }
       while (false);
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp$ret$3 = !nextReachable.l();
    }
     while (tmp$ret$3);
    return allReachable;
  }
  function nullableNonterminals(_this__u8e3s4, nbls, nnts) {
    nbls = nbls === VOID ? setOf('\u03B5') : nbls;
    var tmp;
    if (nnts === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate = nullableNonterminals$lambda(nbls);
      // Inline function 'kotlin.apply' call
      var this_0 = toMutableSet(_this__u8e3s4);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_0, predicate);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.nullableNonterminals.<anonymous>' call
        var tmp$ret$2 = get_LHS(item);
        destination.e(tmp$ret$2);
      }
      tmp = toSet_0(destination);
    } else {
      tmp = nnts;
    }
    nnts = tmp;
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    var nbls_0 = nbls;
    var nnts_0 = nnts;
    $l$1: do {
      $l$0: do {
        var tmp_0;
        if (equals(nnts_0, minus(nbls_0, '\u03B5'))) {
          tmp_0 = nnts_0;
        } else {
          var tmp0 = $this;
          var tmp1 = plus_2(nnts_0, nbls_0);
          // Inline function 'kotlin.collections.map' call
          // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
          var predicate_0 = nullableNonterminals$lambda_0(tmp1);
          // Inline function 'kotlin.apply' call
          var this_1 = toMutableSet(tmp0);
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
          retainAll(this_1, predicate_0);
          // Inline function 'kotlin.collections.mapTo' call
          var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
          var tmp0_iterator_0 = this_1.h();
          while (tmp0_iterator_0.i()) {
            var item_0 = tmp0_iterator_0.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.nullableNonterminals.<anonymous>' call
            var tmp$ret$7 = get_LHS(item_0);
            destination_0.e(tmp$ret$7);
          }
          $this = tmp0;
          nbls_0 = tmp1;
          nnts_0 = toSet_0(destination_0);
          continue $l$0;
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function allSubSeq(_this__u8e3s4, nullables) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_0 = get_indices(get_RHS(_this__u8e3s4));
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.allSubSeq.<anonymous>' call
      if (nullables.f1(get_RHS(_this__u8e3s4).m(element))) {
        destination.e(element);
      }
    }
    var this_1 = toSet_2(powerset(destination));
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var tmp0_iterator_0 = this_1.h();
    while (tmp0_iterator_0.i()) {
      var item = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.allSubSeq.<anonymous>' call
      var tmp$ret$3 = to(get_LHS(_this__u8e3s4), drop_1(get_RHS(_this__u8e3s4), nullables, item));
      destination_0.e(tmp$ret$3);
    }
    return toSet_0(destination_0);
  }
  function drop_1(_this__u8e3s4, nullables, keep) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var destination = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.drop.<anonymous>' call
      var i = checkIndexOverflow(tmp1);
      var tmp0_safe_receiver = (nullables.f1(item) ? !keep.f1(i) : false) ? null : (nullables.f1(item) ? keep.f1(i) : false) ? item : item;
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        destination.e(tmp0_safe_receiver);
      }
    }
    return destination;
  }
  function elimVarUnitProds$isVariableUnitProd(_this__u8e3s4, vars) {
    return get_RHS(_this__u8e3s4).k() === 1 ? vars.f1(get_RHS(_this__u8e3s4).m(0)) : false;
  }
  function transitiveClosure$lambda($from) {
    return function (it) {
      return $from.f1(it.s10());
    };
  }
  function generateNonterminalStubs$lambda(it) {
    _init_properties_Normalization_kt__nz9twr();
    return isOrganicNonterminal(get_LHS(it));
  }
  function removeUselessSymbols$lambda($generating, $reachable) {
    return function (_destruct__k2r9zo) {
      var s = _destruct__k2r9zo.ge();
      return !$generating.f1(s) ? true : !$reachable.f1(s);
    };
  }
  function elimVarUnitProds$lambda($vars) {
    return function (it) {
      return !elimVarUnitProds$isVariableUnitProd(it, $vars);
    };
  }
  function elimVarUnitProds$lambda_0($toElim) {
    return function (it) {
      return get_RHS(it).k() === 1 ? get_RHS(it).m(0) === $toElim : false;
    };
  }
  function elimVarUnitProds$lambda_1($toElim) {
    return function (it) {
      return get_LHS(it) === $toElim;
    };
  }
  function nullableNonterminals$lambda($nbls) {
    return function (it) {
      return $nbls.b2(get_RHS(it));
    };
  }
  function nullableNonterminals$lambda_0($tmp1) {
    return function (it) {
      return $tmp1.b2(get_RHS(it));
    };
  }
  var properties_initialized_Normalization_kt_pqmvir;
  function _init_properties_Normalization_kt__nz9twr() {
    if (!properties_initialized_Normalization_kt_pqmvir) {
      properties_initialized_Normalization_kt_pqmvir = true;
      rewriteHistory = new LRUCache();
      START_SYMBOL = 'START';
    }
  }
  var maxTrees;
  function _get_choice__ksxcom($this) {
    // Inline function 'kotlin.getValue' call
    var this_0 = $this.e13_1;
    choice$factory();
    return this_0.e2();
  }
  function decodeString($this, i) {
    if ($this.v12_1.l())
      return to(contains($this.u12_1, '\u03B5') ? '' : $this.u12_1, i);
    var _destruct__k2r9zo = i.no(toBigInteger($this.v12_1.k()));
    var quotient1 = _destruct__k2r9zo.ge();
    var remainder = _destruct__k2r9zo.he();
    var _destruct__k2r9zo_0 = $this.f13().m(remainder.vn());
    var lb = _destruct__k2r9zo_0.ge();
    var rb = _destruct__k2r9zo_0.he();
    var _destruct__k2r9zo_1 = decodeString(lb, quotient1);
    var l = _destruct__k2r9zo_1.ge();
    var quotient2 = _destruct__k2r9zo_1.he();
    var _destruct__k2r9zo_2 = decodeString(rb, quotient2);
    var r = _destruct__k2r9zo_2.ge();
    var quotient3 = _destruct__k2r9zo_2.he();
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(l) === 0) {
      tmp = r;
    } else {
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(r) === 0) {
        tmp = l;
      } else {
        tmp = l + ' ' + r;
      }
    }
    var concat = tmp;
    return to(concat, quotient3);
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.g13_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).yb = function (a, b) {
    return this.g13_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.yb(a, b);
  };
  function sam$kotlin_Comparator$0_1(function_0) {
    this.h13_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_1).yb = function (a, b) {
    return this.h13_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_1).compare = function (a, b) {
    return this.yb(a, b);
  };
  function PTree$branchRatio$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.v12_1.l()) {
        tmp = to(0.0, 0.0);
      } else {
        var tmp_0 = this$0.v12_1.k();
        // Inline function 'kotlin.collections.sumOf' call
        var sum = 0.0;
        var tmp0_iterator = this$0.v12_1.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          var tmp_1 = sum;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.branchRatio$delegate.<anonymous>.<anonymous>' call
          var l = element.ge();
          var r = element.he();
          sum = tmp_1 + (l.i13().ee_1 + r.i13().ee_1);
        }
        var tmp_2 = tmp_0 + sum;
        // Inline function 'kotlin.collections.sumOf' call
        var sum_0 = 0.0;
        var tmp0_iterator_0 = this$0.v12_1.h();
        while (tmp0_iterator_0.i()) {
          var element_0 = tmp0_iterator_0.j();
          var tmp_3 = sum_0;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.branchRatio$delegate.<anonymous>.<anonymous>' call
          var l_0 = element_0.ge();
          var r_0 = element_0.he();
          sum_0 = tmp_3 + (l_0.i13().fe_1 + r_0.i13().fe_1);
        }
        var tmp$ret$3 = sum_0;
        tmp = to(tmp_2, 1 + tmp$ret$3);
      }
      return tmp;
    };
  }
  function PTree$allTerminals$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.v12_1.l()) {
        tmp = setOf(this$0.u12_1);
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.v12_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var item = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.allTerminals$delegate.<anonymous>.<anonymous>' call
          var l = item.ge();
          var r = item.he();
          var tmp$ret$0 = plus_2(l.j13(), r.j13());
          destination.e(tmp$ret$0);
        }
        tmp = toSet_0(flatten(destination));
      }
      return tmp;
    };
  }
  function PTree$inverseDensity$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.also' call
      // Inline function 'kotlin.time.measureTimedValue' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.time.measureTimedValue' call
      // Inline function 'kotlin.contracts.contract' call
      var mark = Monotonic_instance.ic();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.inverseDensity$delegate.<anonymous>.<anonymous>' call
      var result = toBigInteger(this$0.j13().k()).it(this$0.k13()).mn(this$0.l13());
      var this_0 = new TimedValue(result, ValueTimeMark__elapsedNow_impl_eonqvs(mark));
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.inverseDensity$delegate.<anonymous>.<anonymous>' call
      println('Solution density was: 1/' + this_0.jl_1 + ' (' + new Duration(this_0.kl_1) + ')');
      return this_0.jl_1;
    };
  }
  function PTree$shuffledBranches$delegate$lambda$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.shuffledBranches$delegate.<anonymous>.<anonymous>' call
    var tmp = !contains(a.ee_1.u12_1 + a.fe_1.u12_1, '\u03B5');
    // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.shuffledBranches$delegate.<anonymous>.<anonymous>' call
    var tmp$ret$1 = !contains(b.ee_1.u12_1 + b.fe_1.u12_1, '\u03B5');
    return compareValues(tmp, tmp$ret$1);
  }
  function PTree$shuffledBranches$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.sortedBy' call
      var this_0 = shuffled(this$0.v12_1);
      // Inline function 'kotlin.comparisons.compareBy' call
      var tmp = PTree$shuffledBranches$delegate$lambda$lambda;
      var tmp$ret$0 = new sam$kotlin_Comparator$0_0(tmp);
      return sortedWith(this_0, tmp$ret$0);
    };
  }
  function PTree$totalTrees$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.v12_1.l()) {
        tmp = Companion_getInstance().do_1;
      } else {
        // Inline function 'kotlin.collections.reduce' call
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.v12_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var item = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.totalTrees$delegate.<anonymous>.<anonymous>' call
          var l = item.ge();
          var r = item.he();
          var tmp$ret$0 = l.l13().kn(r.l13());
          destination.e(tmp$ret$0);
        }
        var iterator = destination.h();
        if (!iterator.i())
          throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
        var accumulator = iterator.j();
        while (iterator.i()) {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.totalTrees$delegate.<anonymous>.<anonymous>' call
          var acc = accumulator;
          var it = iterator.j();
          accumulator = acc.gn(it);
        }
        tmp = accumulator;
      }
      return tmp;
    };
  }
  function PTree$numEpsilons$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.v12_1.l()) {
        tmp = this$0.u12_1 === '\u03B5' ? Companion_getInstance().do_1 : Companion_getInstance().co_1;
      } else {
        // Inline function 'kotlin.collections.reduce' call
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.v12_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var item = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.numEpsilons$delegate.<anonymous>.<anonymous>' call
          var l = item.ge();
          var r = item.he();
          var tmp$ret$0 = l.l13().kn(r.l13());
          destination.e(tmp$ret$0);
        }
        var iterator = destination.h();
        if (!iterator.i())
          throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
        var accumulator = iterator.j();
        while (iterator.i()) {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.numEpsilons$delegate.<anonymous>.<anonymous>' call
          var acc = accumulator;
          var it = iterator.j();
          accumulator = acc.gn(it);
        }
        tmp = accumulator;
      }
      return tmp;
    };
  }
  function PTree$epsSortedBranches$delegate$lambda$lambda(this$0) {
    return function (a, b) {
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.epsSortedBranches$delegate.<anonymous>.<anonymous>' call
      var tmp = this$0.m13(a).y2();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.epsSortedBranches$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$1 = this$0.m13(b).y2();
      return compareValues(tmp, tmp$ret$1);
    };
  }
  function PTree$epsSortedBranches$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.sortedBy' call
      var this_0 = this$0.v12_1;
      // Inline function 'kotlin.comparisons.compareBy' call
      var tmp = PTree$epsSortedBranches$delegate$lambda$lambda(this$0);
      var tmp$ret$0 = new sam$kotlin_Comparator$0_1(tmp);
      return sortedWith(this_0, tmp$ret$0);
    };
  }
  function PTree$depth$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.v12_1.l()) {
        tmp = 0;
      } else {
        // Inline function 'kotlin.collections.maxOf' call
        var iterator = this$0.v12_1.h();
        if (!iterator.i())
          throw NoSuchElementException_init_$Create$();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.depth$delegate.<anonymous>.<anonymous>' call
        var destruct = iterator.j();
        var l = destruct.ge();
        var r = destruct.he();
        // Inline function 'kotlin.comparisons.maxOf' call
        var a = l.k13();
        var b = r.k13();
        var maxValue = Math.max(a, b) + 1 | 0;
        while (iterator.i()) {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.depth$delegate.<anonymous>.<anonymous>' call
          var destruct_0 = iterator.j();
          var l_0 = destruct_0.ge();
          var r_0 = destruct_0.he();
          // Inline function 'kotlin.comparisons.maxOf' call
          var a_0 = l_0.k13();
          var b_0 = r_0.k13();
          var v = Math.max(a_0, b_0) + 1 | 0;
          if (compareTo(maxValue, v) < 0) {
            maxValue = v;
          }
        }
        tmp = maxValue;
      }
      return tmp;
    };
  }
  function PTree$choice$delegate$lambda$lambda(_destruct__k2r9zo) {
    var a = _destruct__k2r9zo.ge();
    var b = _destruct__k2r9zo.he();
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(a) === 0) {
      tmp = b;
    } else {
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(b) === 0) {
        tmp = a;
      } else {
        tmp = a + ' ' + b;
      }
    }
    return tmp;
  }
  function PTree$choice$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.v12_1.l()) {
        tmp = listOf_0(contains(this$0.u12_1, '\u03B5') ? '' : this$0.u12_1);
      } else {
        // Inline function 'kotlin.collections.flatMap' call
        // Inline function 'kotlin.collections.flatMapTo' call
        var this_0 = this$0.f13();
        var destination = ArrayList_init_$Create$_0();
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.choice$delegate.<anonymous>.<anonymous>' call
          var l = element.ge();
          var r = element.he();
          var tmp_0 = times_2(l.n13(), r.n13());
          var list = map(tmp_0, PTree$choice$delegate$lambda$lambda);
          addAll_0(destination, list);
        }
        tmp = distinct(destination);
      }
      return tmp;
    };
  }
  function PTree$sampleStrWithoutReplacement$slambda(this$0, resultContinuation) {
    this.w13_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(PTree$sampleStrWithoutReplacement$slambda).z13 = function ($this$sequence, $completion) {
    var tmp = this.a14($this$sequence, $completion);
    tmp.i8_1 = Unit_instance;
    tmp.j8_1 = null;
    return tmp.t8();
  };
  protoOf(PTree$sampleStrWithoutReplacement$slambda).i9 = function (p1, $completion) {
    return this.z13(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(PTree$sampleStrWithoutReplacement$slambda).t8 = function () {
    var suspendResult = this.i8_1;
    $sm: do
      try {
        var tmp = this.g8_1;
        switch (tmp) {
          case 0:
            this.h8_1 = 4;
            this.y13_1 = Companion_getInstance().co_1;
            this.g8_1 = 1;
            continue $sm;
          case 1:
            if (!(this.y13_1.sq(times(3, this.w13_1.l13())) < 0)) {
              this.g8_1 = 3;
              continue $sm;
            }

            this.g8_1 = 2;
            var _unary__edvuaz = this.y13_1;
            this.y13_1 = _unary__edvuaz.w2();
            suspendResult = this.x13_1.le(decodeString(this.w13_1, _unary__edvuaz).ee_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.g8_1 = 1;
            continue $sm;
          case 3:
            return Unit_instance;
          case 4:
            throw this.j8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.h8_1 === 4) {
          throw e;
        } else {
          this.g8_1 = this.h8_1;
          this.j8_1 = e;
        }
      }
     while (true);
  };
  protoOf(PTree$sampleStrWithoutReplacement$slambda).a14 = function ($this$sequence, completion) {
    var i = new PTree$sampleStrWithoutReplacement$slambda(this.w13_1, completion);
    i.x13_1 = $this$sequence;
    return i;
  };
  function PTree$sampleStrWithoutReplacement$slambda_0(this$0, resultContinuation) {
    var i = new PTree$sampleStrWithoutReplacement$slambda(this$0, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.z13($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function PTree$sampleWithReplacement$lambda(this$0) {
    return function () {
      return this$0.b14();
    };
  }
  function PTree$sampleWRGD$lambda(this$0) {
    return function () {
      return this$0.c14();
    };
  }
  function PTree(root, branches) {
    root = root === VOID ? '.\u03B5' : root;
    var tmp;
    if (branches === VOID) {
      // Inline function 'kotlin.collections.listOf' call
      tmp = emptyList();
    } else {
      tmp = branches;
    }
    branches = tmp;
    this.u12_1 = root;
    this.v12_1 = branches;
    var tmp_0 = this;
    tmp_0.w12_1 = lazy(PTree$branchRatio$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.x12_1 = lazy(PTree$allTerminals$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.y12_1 = lazy(PTree$inverseDensity$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.z12_1 = lazy(PTree$shuffledBranches$delegate$lambda(this));
    var tmp_4 = this;
    tmp_4.a13_1 = lazy(PTree$totalTrees$delegate$lambda(this));
    var tmp_5 = this;
    tmp_5.b13_1 = lazy(PTree$numEpsilons$delegate$lambda(this));
    var tmp_6 = this;
    tmp_6.c13_1 = lazy(PTree$epsSortedBranches$delegate$lambda(this));
    var tmp_7 = this;
    tmp_7.d13_1 = lazy(PTree$depth$delegate$lambda(this));
    var tmp_8 = this;
    tmp_8.e13_1 = lazy(PTree$choice$delegate$lambda(this));
  }
  protoOf(PTree).i13 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.w12_1;
    branchRatio$factory();
    return this_0.e2();
  };
  protoOf(PTree).j13 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.x12_1;
    allTerminals$factory();
    return this_0.e2();
  };
  protoOf(PTree).d14 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.y12_1;
    inverseDensity$factory();
    return this_0.e2();
  };
  protoOf(PTree).f13 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.z12_1;
    shuffledBranches$factory();
    return this_0.e2();
  };
  protoOf(PTree).l13 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.a13_1;
    totalTrees$factory();
    return this_0.e2();
  };
  protoOf(PTree).e14 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.b13_1;
    numEpsilons$factory();
    return this_0.e2();
  };
  protoOf(PTree).m13 = function (_this__u8e3s4) {
    return _this__u8e3s4.ee_1.e14().gn(_this__u8e3s4.fe_1.e14());
  };
  protoOf(PTree).f14 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.c13_1;
    epsSortedBranches$factory();
    return this_0.e2();
  };
  protoOf(PTree).k13 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.d13_1;
    depth$factory();
    return this_0.e2();
  };
  protoOf(PTree).n13 = function () {
    return asSequence(_get_choice__ksxcom(this));
  };
  protoOf(PTree).g14 = function () {
    return distinct_0(sequence(PTree$sampleStrWithoutReplacement$slambda_0(this, null)));
  };
  protoOf(PTree).h14 = function () {
    return generateSequence(PTree$sampleWithReplacement$lambda(this));
  };
  protoOf(PTree).b14 = function () {
    var tmp;
    if (this.v12_1.l()) {
      tmp = contains(this.u12_1, '\u03B5') ? '' : this.u12_1;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.collections.random' call
      var this_0 = this.v12_1;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.sample.<anonymous>' call
      var destruct = random(this_0, Default_getInstance());
      var l = destruct.ge();
      var r = destruct.he();
      var _destruct__k2r9zo = to(l.b14(), r.b14());
      var a = _destruct__k2r9zo.ge();
      var b = _destruct__k2r9zo.he();
      var tmp_0;
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(a) === 0) {
        tmp_0 = b;
      } else {
        // Inline function 'kotlin.text.isEmpty' call
        if (charSequenceLength(b) === 0) {
          tmp_0 = a;
        } else {
          tmp_0 = a + ' ' + b;
        }
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(PTree).i14 = function () {
    return generateSequence(PTree$sampleWRGD$lambda(this));
  };
  protoOf(PTree).c14 = function () {
    var tmp;
    if (this.v12_1.l()) {
      tmp = contains(this.u12_1, '.\u03B5') ? '' : this.u12_1;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.sampleStrWithGeomDecay.<anonymous>' call
      var destruct = this.j14(this.f14());
      var l = destruct.ge();
      var r = destruct.he();
      var _destruct__k2r9zo = to(l.c14(), r.c14());
      var a = _destruct__k2r9zo.ge();
      var b = _destruct__k2r9zo.he();
      var tmp_0;
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(a) === 0) {
        tmp_0 = b;
      } else {
        // Inline function 'kotlin.text.isEmpty' call
        if (charSequenceLength(b) === 0) {
          tmp_0 = a;
        } else {
          tmp_0 = a + ' ' + b;
        }
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(PTree).j14 = function (_this__u8e3s4) {
    if (_this__u8e3s4.l())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    var r = 0.5;
    // Inline function 'kotlin.math.pow' call
    var n = _this__u8e3s4.k();
    var total = (1 - Math.pow(r, n)) / (1 - r);
    var rnd = Default_getInstance().oj() * total;
    var cumulativeSum = 0.0;
    var index = 0;
    $l$loop: while (index < _this__u8e3s4.k()) {
      var tmp = cumulativeSum;
      // Inline function 'kotlin.math.pow' call
      var x = index;
      cumulativeSum = tmp + Math.pow(r, x);
      if (rnd < cumulativeSum)
        break $l$loop;
      index = index + 1 | 0;
    }
    return _this__u8e3s4.m(index);
  };
  function initPForestMat(_this__u8e3s4, tokens) {
    // Inline function 'kotlin.collections.toTypedArray' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var tmp0_iterator = tokens.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initPForestMat.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.associateWith' call
      var this_0 = !(item === get_HOLE_MARKER()) ? get_bimap(_this__u8e3s4).x11(listOf_0(item)) : get_unitNonterminals(_this__u8e3s4);
      var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
      // Inline function 'kotlin.collections.associateWithTo' call
      var tmp0_iterator_0 = this_0.h();
      while (tmp0_iterator_0.i()) {
        var element = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initPForestMat.<anonymous>.<anonymous>' call
        var tmp;
        if (!(item === get_HOLE_MARKER())) {
          tmp = PSingleton(item);
        } else {
          var tmp8_safe_receiver = get_bimap(_this__u8e3s4).w11().h2(element);
          var tmp_0;
          if (tmp8_safe_receiver == null) {
            tmp_0 = null;
          } else {
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp8_safe_receiver, 10));
            var tmp0_iterator_1 = tmp8_safe_receiver.h();
            while (tmp0_iterator_1.i()) {
              var item_0 = tmp0_iterator_1.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.initPForestMat.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$0 = PSingleton(item_0);
              destination_0.e(tmp$ret$0);
            }
            tmp_0 = destination_0;
          }
          var tmp9_safe_receiver = tmp_0;
          var tmp0_elvis_lhs = tmp9_safe_receiver == null ? null : flatten(tmp9_safe_receiver);
          var tmp_1;
          if (tmp0_elvis_lhs == null) {
            // Inline function 'kotlin.collections.listOf' call
            tmp_1 = emptyList();
          } else {
            tmp_1 = tmp0_elvis_lhs;
          }
          tmp = tmp_1;
        }
        var tmp$ret$4 = tmp;
        result.s4(element, tmp$ret$4);
      }
      // Inline function 'kotlin.collections.mapTo' call
      var destination_1 = ArrayList_init_$Create$(result.k());
      // Inline function 'kotlin.collections.iterator' call
      var tmp0_iterator_2 = result.j2().h();
      while (tmp0_iterator_2.i()) {
        var item_1 = tmp0_iterator_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initPForestMat.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var k = item_1.d2();
        // Inline function 'kotlin.collections.component2' call
        var v = item_1.e2();
        var tmp$ret$10 = to(k, new PTree(k, v));
        destination_1.e(tmp$ret$10);
      }
      var tmp$ret$13 = toMap(destination_1);
      destination.e(tmp$ret$13);
    }
    var tmp_2 = copyToArray(destination);
    var tmp_3 = emptyMap();
    var tmp_4 = initPForestMat$lambda;
    return UTMatrix_init_$Create$(tmp_2, new of_1(tmp_3, VOID, tmp_4, initPForestMat$lambda_0(_this__u8e3s4)));
  }
  function PSingleton(v) {
    return listOf_0(to(new PTree(v), new PTree()));
  }
  function merge(X, Z) {
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableMap(X);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.merge.<anonymous>' call
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = Z.j2().h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.merge.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var k = element.d2();
      // Inline function 'kotlin.collections.component2' call
      var v = element.e2();
      // Inline function 'kotlin.collections.contains' call
      // Inline function 'kotlin.collections.containsKey' call
      if ((isInterface(this_0, Map) ? this_0 : THROW_CCE()).f2(k)) {
        // Inline function 'kotlin.collections.set' call
        var value = new PTree(k, distinct(plus(ensureNotNull(this_0.h2(k)).v12_1, v.v12_1)));
        this_0.s4(k, value);
      } else {
        // Inline function 'kotlin.collections.set' call
        this_0.s4(k, v);
      }
    }
    return toMap_0(this_0);
  }
  function joinSeq(_this__u8e3s4, X, Z) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_0 = get_bimap(_this__u8e3s4).s11();
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.joinSeq.<anonymous>' call
      var x = element.he();
      var z = element.sl();
      var tmp;
      // Inline function 'kotlin.collections.contains' call
      // Inline function 'kotlin.collections.containsKey' call
      if ((isInterface(X, Map) ? X : THROW_CCE()).f2(x)) {
        // Inline function 'kotlin.collections.contains' call
        // Inline function 'kotlin.collections.containsKey' call
        tmp = (isInterface(Z, Map) ? Z : THROW_CCE()).f2(z);
      } else {
        tmp = false;
      }
      if (tmp) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var tmp0_iterator_0 = destination.h();
    while (tmp0_iterator_0.i()) {
      var item = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.joinSeq.<anonymous>' call
      var w = item.ge();
      var x_0 = item.he();
      var z_0 = item.sl();
      var tmp$ret$7 = new Triple(w, ensureNotNull(X.h2(x_0)), ensureNotNull(Z.h2(z_0)));
      destination_0.e(tmp$ret$7);
    }
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_1 = LinkedHashMap_init_$Create$();
    var tmp0_iterator_1 = destination_0.h();
    while (tmp0_iterator_1.i()) {
      var element_0 = tmp0_iterator_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.joinSeq.<anonymous>' call
      var key = element_0.pl_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_1.h2(key);
      var tmp_0;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_1.s4(key, answer);
        tmp_0 = answer;
      } else {
        tmp_0 = value;
      }
      var list = tmp_0;
      list.e(element_0);
    }
    // Inline function 'kotlin.collections.mapTo' call
    var destination_2 = ArrayList_init_$Create$(destination_1.k());
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator_2 = destination_1.j2().h();
    while (tmp0_iterator_2.i()) {
      var item_0 = tmp0_iterator_2.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.joinSeq.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var k = item_0.d2();
      // Inline function 'kotlin.collections.component2' call
      var v = item_0.e2();
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(v, 10));
      var tmp0_iterator_3 = v.h();
      while (tmp0_iterator_3.i()) {
        var item_1 = tmp0_iterator_3.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.joinSeq.<anonymous>.<anonymous>' call
        var tmp$ret$18 = to(item_1.ql_1, item_1.rl_1);
        destination_3.e(tmp$ret$18);
      }
      var tmp$ret$21 = to(k, new PTree(k, destination_3));
      destination_2.e(tmp$ret$21);
    }
    return toMap(destination_2);
  }
  function repairSeq(_this__u8e3s4, tokens) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.repairSeq.<anonymous>' call
    var prompt = intersperse(tokens, 2, '\u03B5');
    var tmp = hammingBallRepair(_this__u8e3s4, prompt);
    var tmp_0 = distinct_0(flatMap(tmp, repairSeq$lambda(prompt, _this__u8e3s4)));
    return distinct_0(map(tmp_0, repairSeq$lambda_0));
  }
  function enumSeqSmart(_this__u8e3s4, tokens) {
    var tmp13_safe_receiver = startPTree(_this__u8e3s4, tokens);
    var tmp;
    if (tmp13_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.enumSeqSmart.<anonymous>' call
      var tmp_0;
      if (Companion_getInstance().do_1.sq(tmp13_safe_receiver.d14()) < 0) {
        var tmp_1;
        if (tmp13_safe_receiver.l13().sq(BigInteger_init_$Create$(maxTrees)) < 0) {
          println('Small number of parse trees (' + tmp13_safe_receiver.l13() + '), sampling without replacement!');
          tmp_1 = tmp13_safe_receiver.g14();
        } else {
          println('Large number of parse trees (' + tmp13_safe_receiver.l13() + '), sampling with replacement!');
          tmp_1 = tmp13_safe_receiver.h14();
        }
        tmp_0 = tmp_1;
      } else {
        println('Ambiguity exceeds total solutions, switching to bottom-up na\xEFve search!');
        tmp_0 = solve(tokens, _this__u8e3s4);
      }
      tmp = tmp_0;
    }
    var tmp0_elvis_lhs = tmp;
    return tmp0_elvis_lhs == null ? sequenceOf([]) : tmp0_elvis_lhs;
  }
  function hammingBallRepair(_this__u8e3s4, tokens) {
    // Inline function 'ai.hypergraph.kaliningraph.sampling.choose' call
    var this_0 = toSet_0(get_indices(tokens));
    var numEl = choose(this_0.k(), 5);
    var order = randomSequenceWithoutRepetition(numberRangeToNumber(0, numEl));
    // Inline function 'kotlin.collections.toTypedArray' call
    var asArray = copyToArray(this_0);
    var tmp;
    if (this_0.k() <= 5) {
      tmp = sequenceOf([this_0]);
    } else {
      tmp = map(order, hammingBallRepair$lambda(5, asArray));
    }
    var tmp_0 = tmp;
    var tmp_1 = map(tmp_0, hammingBallRepair$lambda_0(tokens));
    return flatMap(tmp_1, hammingBallRepair$lambda_1(_this__u8e3s4));
  }
  function startPTree(_this__u8e3s4, tokens) {
    // Inline function 'kotlin.also' call
    // Inline function 'kotlin.time.measureTimedValue' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.time.measureTimedValue' call
    // Inline function 'kotlin.contracts.contract' call
    var mark = Monotonic_instance.ic();
    // Inline function 'ai.hypergraph.kaliningraph.parsing.startPTree.<anonymous>' call
    var result = last(initPForestMat(_this__u8e3s4, tokens).t14().q14_1).m(0).h2(get_START_SYMBOL());
    var this_0 = new TimedValue(result, ValueTimeMark__elapsedNow_impl_eonqvs(mark));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.startPTree.<anonymous>' call
    println('Took ' + new Duration(this_0.kl_1) + ' to compute parse forest');
    return this_0.jl_1;
  }
  function enumSWOR(_this__u8e3s4, tokens) {
    var tmp16_safe_receiver = startPTree(_this__u8e3s4, tokens);
    var tmp0_elvis_lhs = tmp16_safe_receiver == null ? null : tmp16_safe_receiver.i14();
    return tmp0_elvis_lhs == null ? sequenceOf([]) : tmp0_elvis_lhs;
  }
  function initPForestMat$lambda($this$of, x, y) {
    return merge(x, y);
  }
  function initPForestMat$lambda_0($this_initPForestMat) {
    return function ($this$of, x, y) {
      return joinSeq($this_initPForestMat, x, y);
    };
  }
  function repairSeq$lambda$lambda($this_repairSeq) {
    return function (it) {
      var tmp = get_language($this_repairSeq);
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator = it.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.repairSeq.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        if (!(element === '\u03B5')) {
          destination.e(element);
        }
      }
      return contains_0(tmp, destination);
    };
  }
  function repairSeq$lambda$lambda_0($edit) {
    return function (it) {
      return $edit.k();
    };
  }
  function repairSeq$lambda($prompt, $this_repairSeq) {
    return function (it) {
      var result = tokenizeByWhitespace(it);
      var edit = calcEdit($prompt, tokenizeByWhitespace(it));
      var tmp = new Repair($prompt, edit, result, 0.0);
      var tmp_0 = repairSeq$lambda$lambda($this_repairSeq);
      return tmp.b15(tmp_0, repairSeq$lambda$lambda_0(edit));
    };
  }
  function repairSeq$lambda_0(it) {
    return removeEpsilon(it.c15());
  }
  function hammingBallRepair$lambda($k, $asArray) {
    return function (it) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = decodeCombo(it, $k);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.choose.<anonymous>.<anonymous>' call
        var tmp$ret$0 = $asArray[item];
        destination.e(tmp$ret$0);
      }
      return toSet_0(destination);
    };
  }
  function hammingBallRepair$lambda$lambda(it, i) {
    return '_';
  }
  function hammingBallRepair$lambda_0($tokens) {
    return function (it) {
      return substituteIndices($tokens, it, hammingBallRepair$lambda$lambda);
    };
  }
  function hammingBallRepair$lambda_1($this_hammingBallRepair) {
    return function (it) {
      return take(enumSWOR($this_hammingBallRepair, it), 100);
    };
  }
  function branchRatio$factory() {
    return getPropertyCallableRef('branchRatio', 1, KProperty1, function (receiver) {
      return receiver.i13();
    }, null);
  }
  function allTerminals$factory() {
    return getPropertyCallableRef('allTerminals', 1, KProperty1, function (receiver) {
      return receiver.j13();
    }, null);
  }
  function inverseDensity$factory() {
    return getPropertyCallableRef('inverseDensity', 1, KProperty1, function (receiver) {
      return receiver.d14();
    }, null);
  }
  function shuffledBranches$factory() {
    return getPropertyCallableRef('shuffledBranches', 1, KProperty1, function (receiver) {
      return receiver.f13();
    }, null);
  }
  function totalTrees$factory() {
    return getPropertyCallableRef('totalTrees', 1, KProperty1, function (receiver) {
      return receiver.l13();
    }, null);
  }
  function numEpsilons$factory() {
    return getPropertyCallableRef('numEpsilons', 1, KProperty1, function (receiver) {
      return receiver.e14();
    }, null);
  }
  function epsSortedBranches$factory() {
    return getPropertyCallableRef('epsSortedBranches', 1, KProperty1, function (receiver) {
      return receiver.f14();
    }, null);
  }
  function depth$factory() {
    return getPropertyCallableRef('depth', 1, KProperty1, function (receiver) {
      return receiver.k13();
    }, null);
  }
  function choice$factory() {
    return getPropertyCallableRef('choice', 1, KProperty1, function (receiver) {
      return _get_choice__ksxcom(receiver);
    }, null);
  }
  function get_bitwiseAlgebra(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return bitwiseAlgebra$delegate.j11(_this__u8e3s4, bitwiseAlgebra$factory());
  }
  var bitwiseAlgebra$delegate;
  var satLitAlgebra$delegate;
  function get_HOLE_MARKER() {
    _init_properties_SetValiant_kt__o4zw83();
    return HOLE_MARKER;
  }
  var HOLE_MARKER;
  function get_freshNames() {
    _init_properties_SetValiant_kt__o4zw83();
    return freshNames;
  }
  var freshNames;
  function isNonterminalStubIn(_this__u8e3s4, cfg) {
    _init_properties_SetValiant_kt__o4zw83();
    return isNonterminalStub(_this__u8e3s4) ? get_nonterminals(cfg).f1(dropLast_0(drop_0(_this__u8e3s4, 1), 1)) : false;
  }
  function stripEscapeChars(_this__u8e3s4, escapeSeq) {
    escapeSeq = escapeSeq === VOID ? '`' : escapeSeq;
    _init_properties_SetValiant_kt__o4zw83();
    return replace(_this__u8e3s4, escapeSeq, '');
  }
  function parseCFG(_this__u8e3s4, normalize, validate_0) {
    normalize = normalize === VOID ? true : normalize;
    validate_0 = validate_0 === VOID ? false : validate_0;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_0 = lines(validate_0 ? validate(_this__u8e3s4) : _this__u8e3s4);
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>' call
      if (contains(element, '->')) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var tmp0_iterator_0 = destination.h();
    while (tmp0_iterator_0.i()) {
      var item = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>' call
      var prod = splitProd(item);
      var tmp;
      if (2 === prod.k() ? !contains(prod.m(0), ' ') : false) {
        tmp = to(prod.m(0), tokenizeByWhitespace(prod.m(1)));
      } else {
        throw Exception_init_$Create$('Invalid production ' + prod.k() + ': ' + item);
      }
      var tmp$ret$3 = tmp;
      destination_0.e(tmp$ret$3);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>' call
    var it = toSet_0(destination_0);
    return normalize ? get_normalForm(it) : it;
  }
  function union_0(left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    var result = booleanArray(left.length);
    var inductionVariable = 0;
    var last = left.length - 1 | 0;
    if (inductionVariable <= last)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result[i] = left[i];
        if (result[i])
          continue $l$loop;
        result[i] = right[i];
      }
       while (inductionVariable <= last);
    return result;
  }
  function fastJoin(vidx, left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (left.length === 0) {
      tmp = true;
    } else {
      // Inline function 'kotlin.collections.isEmpty' call
      tmp = right.length === 0;
    }
    if (tmp) {
      // Inline function 'kotlin.booleanArrayOf' call
      return booleanArrayOf([]);
    }
    var result = booleanArray(vidx.length);
    var inductionVariable = 0;
    var last = vidx.length;
    while (inductionVariable < last) {
      var i = inductionVariable;
      var indexArray = vidx[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var j = 0;
      $l$loop: while (j < indexArray.length) {
        if (left[indexArray[j]] ? right[indexArray[j + 1 | 0]] : false) {
          result[i] = true;
          break $l$loop;
        }
        j = j + 2 | 0;
      }
    }
    return result;
  }
  function maybeUnion(left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    if (left == null ? true : right == null) {
      tmp = left == null ? right : left;
    } else {
      var tmp_0;
      // Inline function 'kotlin.collections.isEmpty' call
      if (left.length === 0) {
        // Inline function 'kotlin.collections.isNotEmpty' call
        // Inline function 'kotlin.collections.isEmpty' call
        tmp_0 = !(right.length === 0);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = right;
      } else {
        var tmp_1;
        // Inline function 'kotlin.collections.isNotEmpty' call
        // Inline function 'kotlin.collections.isEmpty' call
        if (!(left.length === 0)) {
          // Inline function 'kotlin.collections.isEmpty' call
          tmp_1 = right.length === 0;
        } else {
          tmp_1 = false;
        }
        if (tmp_1) {
          tmp = left;
        } else {
          tmp = union_0(left, right);
        }
      }
    }
    return tmp;
  }
  function maybeJoin(vindexFast, left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    return (left == null ? true : right == null) ? null : fastJoin(vindexFast, left, right);
  }
  function isNonterminalStub(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    var tmp_0;
    // Inline function 'kotlin.text.isNotEmpty' call
    if (charSequenceLength(_this__u8e3s4) > 0) {
      tmp_0 = first_0(_this__u8e3s4) === _Char___init__impl__6a9atx(60);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = last_0(_this__u8e3s4) === _Char___init__impl__6a9atx(62);
    } else {
      tmp = false;
    }
    return tmp;
  }
  function validate(_this__u8e3s4, presets, tokens, names) {
    presets = presets === VOID ? setOf_0(['|', '->']) : presets;
    var tmp;
    if (tokens === VOID) {
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var this_0 = tokenizeByWhitespace(_this__u8e3s4);
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.validate.<anonymous>' call
        if (!presets.f1(element)) {
          destination.e(element);
        }
      }
      tmp = asSequence(destination);
    } else {
      tmp = tokens;
    }
    tokens = tmp;
    var tmp_0;
    if (names === VOID) {
      var tmp_1 = get_freshNames();
      tmp_0 = toMap_1(zip_0(filterNot(tmp_1, validate$contains$ref(_this__u8e3s4)), tokens));
    } else {
      tmp_0 = names;
    }
    names = tmp_0;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_1 = lines(_this__u8e3s4);
    var destination_0 = ArrayList_init_$Create$_0();
    var tmp0_iterator_0 = this_1.h();
    while (tmp0_iterator_0.i()) {
      var element_0 = tmp0_iterator_0.j();
      // Inline function 'kotlin.text.isNotBlank' call
      if (!isBlank(element_0)) {
        destination_0.e(element_0);
      }
    }
    var tmp_2 = tokenizeByWhitespace(joinToString(destination_0, ' \\n '));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.validate.<anonymous>' call
    var it = joinToString(tmp_2, ' ', VOID, VOID, VOID, VOID, validate$lambda(names));
    var tmp_3;
    if (matches(it, CFGCFG(names.i2()))) {
      tmp_3 = _this__u8e3s4;
    } else {
      throw Exception_init_$Create$('!CFL: ' + it);
    }
    return tmp_3;
  }
  function matches(_this__u8e3s4, CFG) {
    _init_properties_SetValiant_kt__o4zw83();
    return isValid(CFG, tokenizeByWhitespace(_this__u8e3s4));
  }
  function CFGCFG(names) {
    _init_properties_SetValiant_kt__o4zw83();
    return parseCFG('\n    START -> CFG\n    CFG -> PRD | CFG \\n CFG\n    PRD -> VAR `->` RHS\n    VAR -> ' + joinToString(names, ' | ') + '\n    RHS -> VAR | RHS RHS | RHS `|` RHS\n  ', VOID, false);
  }
  function isValid(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    if (str.k() === 1) {
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp = !checkUnitWord(_this__u8e3s4, first_1(str)).l();
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.isValid.<anonymous>' call
      tmp = last(initialUTBMatrix(_this__u8e3s4, pad3(str)).t14().q14_1).m(0)[get_bindex(_this__u8e3s4).c12(get_START_SYMBOL())];
    }
    return tmp;
  }
  function checkUnitWord(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    if (tokenizeByWhitespace(str).k() === 1 ? get_bimap(_this__u8e3s4).x11(listOf_0(str)).f1(get_START_SYMBOL()) : false) {
      tmp = setOf(new Tree(get_START_SYMBOL(), str, []));
    } else {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    }
    return tmp;
  }
  function initialUTBMatrix(_this__u8e3s4, tokens, allNTs, bmp, unitReach) {
    allNTs = allNTs === VOID ? get_nonterminals(_this__u8e3s4) : allNTs;
    bmp = bmp === VOID ? get_bimap(_this__u8e3s4) : bmp;
    unitReach = unitReach === VOID ? get_unitReachability(get_originalForm(_this__u8e3s4)) : unitReach;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.toTypedArray' call
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var tmp0_iterator = tokens.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>' call
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>' call
      var nts = bmp.x11(listOf_0(item));
      var tmp;
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.none' call
        var tmp_0;
        if (isInterface(tokens, Collection)) {
          tmp_0 = tokens.l();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator_0 = tokens.h();
        while (tmp0_iterator_0.i()) {
          var element = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>.<anonymous>' call
          if (isNonterminalStubInNTs(element, allNTs)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      if (tmp$ret$0) {
        tmp = nts;
      } else {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(nts, 10));
        var tmp0_iterator_1 = nts.h();
        while (tmp0_iterator_1.i()) {
          var item_0 = tmp0_iterator_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>.<anonymous>' call
          var tmp0_elvis_lhs = unitReach.h2(item_0);
          var tmp$ret$2 = tmp0_elvis_lhs == null ? setOf(item_0) : tmp0_elvis_lhs;
          destination_0.e(tmp$ret$2);
        }
        tmp = toSet_0(flatten(destination_0));
      }
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>' call
      var nts_0 = tmp;
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(allNTs, 10));
      var tmp0_iterator_2 = allNTs.h();
      while (tmp0_iterator_2.i()) {
        var item_1 = tmp0_iterator_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$7 = nts_0.f1(item_1);
        destination_1.e(tmp$ret$7);
      }
      var tmp$ret$12 = toBooleanArray(destination_1);
      destination.e(tmp$ret$12);
    }
    var tmp$ret$15 = copyToArray(destination);
    return UTMatrix_init_$Create$(tmp$ret$15, get_bitwiseAlgebra(_this__u8e3s4));
  }
  function pad3(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return _this__u8e3s4.l() ? listOf(['\u03B5', '\u03B5', '\u03B5']) : _this__u8e3s4.k() === 1 ? listOf(['\u03B5', first_1(_this__u8e3s4), '\u03B5']) : _this__u8e3s4;
  }
  function isNonterminalStubInNTs(_this__u8e3s4, nts) {
    _init_properties_SetValiant_kt__o4zw83();
    return isNonterminalStub(_this__u8e3s4) ? nts.f1(dropLast_0(drop_0(_this__u8e3s4, 1), 1)) : false;
  }
  function parse(_this__u8e3s4, s) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    try {
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.collections.firstOrNull' call
        var tmp0_iterator = parseForest(_this__u8e3s4, s).h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.parse.<anonymous>' call
          if (element.d15_1 === get_START_SYMBOL()) {
            tmp$ret$1 = element;
            break $l$block;
          }
        }
        tmp$ret$1 = null;
      }
      var tmp17_safe_receiver = tmp$ret$1;
      tmp = tmp17_safe_receiver == null ? null : tmp17_safe_receiver.k15();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Exception) {
        var e = $p;
        // Inline function 'kotlin.collections.ifEmpty' call
        var this_0 = checkUnitWord(_this__u8e3s4, s);
        var tmp_1;
        if (this_0.l()) {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.parse.<anonymous>' call
          tmp_1 = null;
        } else {
          tmp_1 = this_0;
        }
        var tmp18_safe_receiver = tmp_1;
        tmp_0 = tmp18_safe_receiver == null ? null : firstOrNull(tmp18_safe_receiver);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function parseForest(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    return last(solveFixedpoint(_this__u8e3s4, tokenizeByWhitespace(str)).m(0));
  }
  function solveFixedpoint(_this__u8e3s4, tokens, utMatrix) {
    utMatrix = utMatrix === VOID ? initialUTMatrix(_this__u8e3s4, tokens) : utMatrix;
    _init_properties_SetValiant_kt__o4zw83();
    return utMatrix.t14().l15();
  }
  function initialUTMatrix(_this__u8e3s4, tokens, origCFG, bmp, unitReach) {
    origCFG = origCFG === VOID ? get_originalForm(_this__u8e3s4) : origCFG;
    bmp = bmp === VOID ? get_bimap(_this__u8e3s4) : bmp;
    unitReach = unitReach === VOID ? get_unitReachability(origCFG) : unitReach;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.toTypedArray' call
    // Inline function 'kotlin.collections.mapIndexed' call
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var index = 0;
    var tmp0_iterator = tokens.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var i = checkIndexOverflow(tmp1);
      var tmp;
      if (item === get_HOLE_MARKER()) {
        // Inline function 'kotlin.collections.map' call
        var this_0 = toSet_0(flatten(get_unitReachability(_this__u8e3s4).i2()));
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var tmp0_iterator_0 = this_0.h();
        while (tmp0_iterator_0.i()) {
          var item_0 = tmp0_iterator_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>' call
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.filter' call
          // Inline function 'kotlin.collections.map' call
          // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
          var this_1 = bmp.y11(item_0);
          var predicate = initialUTMatrix$lambda;
          // Inline function 'kotlin.apply' call
          var this_2 = toMutableSet(this_1);
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
          retainAll(this_2, predicate);
          // Inline function 'kotlin.collections.mapTo' call
          var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
          var tmp0_iterator_1 = this_2.h();
          while (tmp0_iterator_1.i()) {
            var item_1 = tmp0_iterator_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$2 = first_1(item_1);
            destination_1.e(tmp$ret$2);
          }
          // Inline function 'kotlin.collections.filterTo' call
          var destination_2 = ArrayList_init_$Create$_0();
          var tmp0_iterator_2 = destination_1.h();
          while (tmp0_iterator_2.i()) {
            var element = tmp0_iterator_2.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            if (get_terminals(_this__u8e3s4).f1(element)) {
              destination_2.e(element);
            }
          }
          // Inline function 'kotlin.collections.mapTo' call
          var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(destination_2, 10));
          var tmp0_iterator_3 = destination_2.h();
          while (tmp0_iterator_3.i()) {
            var item_2 = tmp0_iterator_3.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$8 = new Tree(item_0, item_2, [], until(i, i + 1 | 0));
            destination_3.e(tmp$ret$8);
          }
          destination_0.e(destination_3);
        }
        tmp = toSet_0(flatten(destination_0));
      } else {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>' call
        var nts = bmp.x11(listOf_0(item));
        var tmp_0;
        var tmp$ret$14;
        $l$block_0: {
          // Inline function 'kotlin.collections.none' call
          var tmp_1;
          if (isInterface(tokens, Collection)) {
            tmp_1 = tokens.l();
          } else {
            tmp_1 = false;
          }
          if (tmp_1) {
            tmp$ret$14 = true;
            break $l$block_0;
          }
          var tmp0_iterator_4 = tokens.h();
          while (tmp0_iterator_4.i()) {
            var element_0 = tmp0_iterator_4.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            if (isNonterminalStubIn(element_0, _this__u8e3s4)) {
              tmp$ret$14 = false;
              break $l$block_0;
            }
          }
          tmp$ret$14 = true;
        }
        if (tmp$ret$14) {
          tmp_0 = nts;
        } else {
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_4 = ArrayList_init_$Create$(collectionSizeOrDefault(nts, 10));
          var tmp0_iterator_5 = nts.h();
          while (tmp0_iterator_5.i()) {
            var item_3 = tmp0_iterator_5.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            var tmp0_elvis_lhs = unitReach.h2(item_3);
            var tmp$ret$16 = tmp0_elvis_lhs == null ? setOf(item_3) : tmp0_elvis_lhs;
            destination_4.e(tmp$ret$16);
          }
          tmp_0 = toSet_0(flatten(destination_4));
        }
        var this_3 = tmp_0;
        // Inline function 'kotlin.collections.mapTo' call
        var destination_5 = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
        var tmp0_iterator_6 = this_3.h();
        while (tmp0_iterator_6.i()) {
          var item_4 = tmp0_iterator_6.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>' call
          var tmp$ret$21 = new Tree(item_4, item, [], until(i, i + 1 | 0));
          destination_5.e(tmp$ret$21);
        }
        tmp = toSet_0(destination_5);
      }
      var tmp$ret$24 = tmp;
      destination.e(tmp$ret$24);
    }
    var tmp$ret$27 = copyToArray(destination);
    return UTMatrix_init_$Create$(tmp$ret$27, makeForestAlgebra(_this__u8e3s4));
  }
  function makeForestAlgebra(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.setOf' call
    var tmp = emptySet();
    var tmp_0 = makeForestAlgebra$lambda;
    return new of_1(tmp, VOID, tmp_0, makeForestAlgebra$lambda_0(_this__u8e3s4));
  }
  function treeJoin(_this__u8e3s4, left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var this_0 = times_3(left, right);
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.treeJoin.<anonymous>' call
      var lt = element.ge();
      var rt = element.he();
      // Inline function 'kotlin.collections.map' call
      var this_1 = get_bimap(_this__u8e3s4).x11(listOf([lt.d15_1, rt.d15_1]));
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var tmp0_iterator_0 = this_1.h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.treeJoin.<anonymous>.<anonymous>' call
        var tmp$ret$0 = new Tree(item, null, [lt, rt]);
        destination_0.e(tmp$ret$0);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function solve(_this__u8e3s4, CFG, fillers, takeMoreWhile) {
    fillers = fillers === VOID ? minus_0(get_terminals(CFG), get_blocked(CFG)) : fillers;
    var tmp;
    if (takeMoreWhile === VOID) {
      tmp = solve$lambda;
    } else {
      tmp = takeMoreWhile;
    }
    takeMoreWhile = tmp;
    _init_properties_SetValiant_kt__o4zw83();
    var tmp_0 = genCandidates(_this__u8e3s4, CFG, fillers);
    var tmp_1 = takeWhile(tmp_0, solve$lambda_0(takeMoreWhile));
    var tmp_2 = filter(tmp_1, solve$lambda_1(CFG));
    return map(tmp_2, solve$lambda_2);
  }
  function genCandidates(_this__u8e3s4, CFG, fillers) {
    fillers = fillers === VOID ? get_terminals(CFG) : fillers;
    _init_properties_SetValiant_kt__o4zw83();
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlin.collections.count' call
      var tmp;
      if (isInterface(_this__u8e3s4, Collection)) {
        tmp = _this__u8e3s4.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = 0;
        break $l$block;
      }
      var count = 0;
      var tmp0_iterator = _this__u8e3s4.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.genCandidates.<anonymous>' call
        if (element === get_HOLE_MARKER()) {
          count = count + 1 | 0;
          checkCountOverflow(count);
        }
      }
      tmp$ret$0 = count;
    }
    var tmp_0 = MDSamplerWithoutReplacement(fillers, tmp$ret$0);
    return map(tmp_0, genCandidates$lambda(_this__u8e3s4));
  }
  function validate$contains(receiver, p0) {
    return contains(receiver, p0);
  }
  function bitwiseAlgebra$delegate$lambda($this$cache) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.bitwiseAlgebra$delegate.<anonymous>.<anonymous>' call
    var it = get_vindex($this$cache);
    var tmp = 0;
    var tmp_0 = get_nonterminals($this$cache).k();
    var tmp_1 = booleanArray(tmp_0);
    while (tmp < tmp_0) {
      tmp_1[tmp] = false;
      tmp = tmp + 1 | 0;
    }
    var tmp_2 = bitwiseAlgebra$delegate$lambda$lambda;
    return new of_1(tmp_1, VOID, tmp_2, bitwiseAlgebra$delegate$lambda$lambda_0(it));
  }
  function bitwiseAlgebra$delegate$lambda$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return union_0(x, y);
  }
  function bitwiseAlgebra$delegate$lambda$lambda_0($it) {
    return function ($this$of, x, y) {
      return fastJoin($it, x, y);
    };
  }
  function satLitAlgebra$delegate$lambda($this$cache) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.satLitAlgebra$delegate.<anonymous>.<anonymous>' call
    var it = get_vindex($this$cache);
    var tmp = 0;
    var tmp_0 = get_nonterminals($this$cache).k();
    var tmp_1 = booleanArray(tmp_0);
    while (tmp < tmp_0) {
      tmp_1[tmp] = false;
      tmp = tmp + 1 | 0;
    }
    var tmp_2 = satLitAlgebra$delegate$lambda$lambda;
    return new of_1(tmp_1, VOID, tmp_2, satLitAlgebra$delegate$lambda$lambda_0(it));
  }
  function satLitAlgebra$delegate$lambda$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return maybeUnion(x, y);
  }
  function satLitAlgebra$delegate$lambda$lambda_0($it) {
    return function ($this$of, x, y) {
      return maybeJoin($it, x, y);
    };
  }
  function freshNames$lambda(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return toString_0(it.p1_1);
  }
  function freshNames$lambda_0(_destruct__k2r9zo) {
    _init_properties_SetValiant_kt__o4zw83();
    var a = _destruct__k2r9zo.ge();
    var b = _destruct__k2r9zo.he();
    return a + b;
  }
  function freshNames$lambda_1(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return !(it === get_START_SYMBOL());
  }
  function validate$contains$ref($boundThis) {
    return function (p0) {
      return validate$contains($boundThis, p0);
    };
  }
  function validate$lambda($names) {
    return function (it) {
      var tmp0_elvis_lhs = $names.h2(it);
      return tmp0_elvis_lhs == null ? it : tmp0_elvis_lhs;
    };
  }
  function initialUTMatrix$lambda(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return it.k() === 1;
  }
  function makeForestAlgebra$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return union(x, y);
  }
  function makeForestAlgebra$lambda_0($this_makeForestAlgebra) {
    return function ($this$of, x, y) {
      return treeJoin($this_makeForestAlgebra, x, y);
    };
  }
  function solve$lambda() {
    _init_properties_SetValiant_kt__o4zw83();
    return true;
  }
  function solve$lambda_0($takeMoreWhile) {
    return function (it) {
      return $takeMoreWhile();
    };
  }
  function solve$lambda_1($CFG) {
    return function (it) {
      return matches(it, $CFG);
    };
  }
  function solve$lambda_2(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return removeEpsilon(it);
  }
  function genCandidates$lambda($this_genCandidates) {
    return function (it) {
      // Inline function 'kotlin.text.trim' call
      // Inline function 'kotlin.collections.fold' call
      var this_0 = $this_genCandidates;
      var accumulator = to('', it);
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.genCandidates.<anonymous>.<anonymous>' call
        var destruct = accumulator;
        var a = destruct.ge();
        var b = destruct.he();
        accumulator = element === get_HOLE_MARKER() ? to(a + ' ' + b.m(0), drop(b, 1)) : to(a + ' ' + element, b);
      }
      var tmp$ret$1 = accumulator;
      var this_1 = replace(tmp$ret$1.ee_1, '\u03B5 ', '');
      return toString(trim(isCharSequence(this_1) ? this_1 : THROW_CCE()));
    };
  }
  function bitwiseAlgebra$factory() {
    return getPropertyCallableRef('bitwiseAlgebra', 1, KProperty1, function (receiver) {
      return get_bitwiseAlgebra(receiver);
    }, null);
  }
  var properties_initialized_SetValiant_kt_hyxtcv;
  function _init_properties_SetValiant_kt__o4zw83() {
    if (!properties_initialized_SetValiant_kt_hyxtcv) {
      properties_initialized_SetValiant_kt_hyxtcv = true;
      bitwiseAlgebra$delegate = cache_0(VOID, bitwiseAlgebra$delegate$lambda);
      satLitAlgebra$delegate = cache_0(VOID, satLitAlgebra$delegate$lambda);
      HOLE_MARKER = '_';
      // Inline function 'kotlin.let' call
      var tmp = asSequence(Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(65), _Char___init__impl__6a9atx(90)));
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.freshNames.<anonymous>' call
      var it = map(tmp, freshNames$lambda);
      var tmp_0 = times_2(it, it);
      var tmp_1 = plus_4(it, map(tmp_0, freshNames$lambda_0));
      freshNames = filter(tmp_1, freshNames$lambda_1);
    }
  }
  function Repair$editSignature$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapIndexed' call
      var this_0 = this$0.u14_1;
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var index = 0;
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Repair.editSignature$delegate.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var i = checkIndexOverflow(tmp1);
        var tmp$ret$1;
        $l$block: {
          // Inline function 'kotlin.collections.firstOrNull' call
          var tmp0_iterator_0 = this$0.v14_1.h();
          while (tmp0_iterator_0.i()) {
            var element = tmp0_iterator_0.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.Repair.editSignature$delegate.<anonymous>.<anonymous>.<anonymous>' call
            if (i === element.ee_1) {
              tmp$ret$1 = element;
              break $l$block;
            }
          }
          tmp$ret$1 = null;
        }
        var tmp36_safe_receiver = tmp$ret$1;
        var tmp0_elvis_lhs = tmp36_safe_receiver == null ? null : tmp36_safe_receiver.fe_1;
        var tmp$ret$2 = to(item, tmp0_elvis_lhs == null ? item : tmp0_elvis_lhs);
        destination.e(tmp$ret$2);
      }
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
      var tmp0_iterator_1 = destination.h();
      while (tmp0_iterator_1.i()) {
        var item_0 = tmp0_iterator_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Repair.editSignature$delegate.<anonymous>.<anonymous>' call
        var ot = item_0.ge();
        var nt = item_0.he();
        var tmp;
        if (ot === nt) {
          tmp = 'E';
        } else if (!(ot === '') ? nt === '\u03B5' : false) {
          tmp = 'D';
        } else if (!(ot === '') ? !(nt === '\u03B5') : false) {
          tmp = 'C.' + cfgType(nt);
        } else if (ot === '' ? nt === '\u03B5' : false) {
          tmp = '';
        } else if (ot === '' ? !(nt === '\u03B5') : false) {
          tmp = 'I.' + cfgType(nt);
        } else {
          throw Exception_init_$Create$('Unreachable');
        }
        var tmp$ret$5 = tmp;
        destination_0.e(tmp$ret$5);
      }
      // Inline function 'kotlin.collections.filterTo' call
      var destination_1 = ArrayList_init_$Create$_0();
      var tmp0_iterator_2 = destination_0.h();
      while (tmp0_iterator_2.i()) {
        var element_0 = tmp0_iterator_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Repair.editSignature$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.text.isNotBlank' call
        if (!isBlank(element_0)) {
          destination_1.e(element_0);
        }
      }
      return joinToString(destination_1, ' ');
    };
  }
  function Repair$minimalAdmissibleSubrepairs$lambda$lambda($filter, this$0) {
    return function (it) {
      return $filter(apply(this$0.u14_1, it));
    };
  }
  function Repair$minimalAdmissibleSubrepairs$lambda($filter, this$0) {
    return function (it) {
      return filter(it, Repair$minimalAdmissibleSubrepairs$lambda$lambda($filter, this$0));
    };
  }
  function Repair$minimalAdmissibleSubrepairs$lambda_0(this$0, $score) {
    return function (subedit) {
      var result = apply(this$0.u14_1, subedit);
      return new Repair(this$0.u14_1, subedit, result, $score(result));
    };
  }
  function Repair(orig, edit, result, score) {
    this.u14_1 = orig;
    this.v14_1 = edit;
    this.w14_1 = result;
    this.x14_1 = score;
    this.y14_1 = new Long(-1, -1);
    var tmp = this;
    tmp.z14_1 = lazy(Repair$editSignature$delegate$lambda(this));
    var tmp_0 = this;
    // Inline function 'kotlin.collections.listOf' call
    tmp_0.a15_1 = emptyList();
  }
  protoOf(Repair).c15 = function () {
    return joinToString(this.w14_1, ' ');
  };
  protoOf(Repair).hashCode = function () {
    return hashCode(this.w14_1);
  };
  protoOf(Repair).equals = function (other) {
    var tmp;
    if (other instanceof Repair) {
      tmp = equals(this.w14_1, other.w14_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Repair).b15 = function (filter, score) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.sequences.firstOrNull' call
      var tmp = subedits(this.v14_1);
      var tmp0_iterator = map(tmp, Repair$minimalAdmissibleSubrepairs$lambda(filter, this)).h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Repair.minimalAdmissibleSubrepairs.<anonymous>' call
        if (any(element)) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    var tmp37_safe_receiver = tmp$ret$1;
    var tmp_0;
    if (tmp37_safe_receiver == null) {
      tmp_0 = null;
    } else {
      tmp_0 = map(tmp37_safe_receiver, Repair$minimalAdmissibleSubrepairs$lambda_0(this, score));
    }
    var tmp0_elvis_lhs = tmp_0;
    return tmp0_elvis_lhs == null ? sequenceOf([new Repair(this.u14_1, this.v14_1, this.w14_1, score(this.w14_1))]) : tmp0_elvis_lhs;
  };
  function calcEdit(_this__u8e3s4, o) {
    var tmp;
    if (!(_this__u8e3s4.k() === o.k())) {
      throw Exception_init_$Create$('Lists must be of equal length: ' + _this__u8e3s4 + ' vs ' + o);
    } else {
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.mapIndexed' call
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(o, 10));
      var index = 0;
      var tmp0_iterator = o.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.calcEdit.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var i = checkIndexOverflow(tmp1);
        var tmp$ret$0 = to(i, item);
        destination.e(tmp$ret$0);
      }
      // Inline function 'kotlin.collections.filterTo' call
      var destination_0 = ArrayList_init_$Create$_0();
      var tmp0_iterator_0 = destination.h();
      while (tmp0_iterator_0.i()) {
        var element = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.calcEdit.<anonymous>' call
        if (!(element.fe_1 === _this__u8e3s4.m(element.ee_1))) {
          destination_0.e(element);
        }
      }
      tmp = destination_0;
    }
    return tmp;
  }
  function apply(_this__u8e3s4, edit) {
    var res = toMutableList(_this__u8e3s4);
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = edit.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.apply.<anonymous>' call
      var i = element.ge();
      var nt = element.he();
      res.t(i, nt);
    }
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator_0 = res.h();
    while (tmp0_iterator_0.i()) {
      var element_0 = tmp0_iterator_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.apply.<anonymous>' call
      var tmp;
      if (!(element_0 === '\u03B5')) {
        // Inline function 'kotlin.text.isNotBlank' call
        tmp = !isBlank(element_0);
      } else {
        tmp = false;
      }
      if (tmp) {
        destination.e(element_0);
      }
    }
    return destination;
  }
  function subedits(_this__u8e3s4) {
    var tmp = asSequence(numberRangeToNumber(1, _this__u8e3s4.k()));
    return map(tmp, subedits$lambda(_this__u8e3s4));
  }
  function subedits$lambda$lambda($k, $asArray) {
    return function (it) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = decodeCombo(it, $k);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.choose.<anonymous>.<anonymous>' call
        var tmp$ret$0 = $asArray[item];
        destination.e(tmp$ret$0);
      }
      return toSet_0(destination);
    };
  }
  function subedits$lambda$lambda_0(it) {
    return toList(it);
  }
  function subedits$lambda($this_subedits) {
    return function (it) {
      // Inline function 'ai.hypergraph.kaliningraph.sampling.choose' call
      var this_0 = $this_subedits;
      var numEl = choose(this_0.k(), it);
      // Inline function 'kotlin.collections.toTypedArray' call
      var asArray = copyToArray(this_0);
      var tmp;
      if (this_0.k() <= it) {
        tmp = sequenceOf([toSet_0(this_0)]);
      } else {
        var tmp_0 = asSequence(until(0, numEl));
        tmp = map(tmp_0, subedits$lambda$lambda(it, asArray));
      }
      var tmp_1 = tmp;
      return map(tmp_1, subedits$lambda$lambda_0);
    };
  }
  var MAX_SORT_CAPACITY;
  var MAX_SAMPLE;
  var MAX_TOKENS;
  var TIMEOUT_MS;
  var MAX_REPAIR;
  function get_blocked(_this__u8e3s4) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    return blocked$delegate.j11(_this__u8e3s4, blocked$factory());
  }
  var blocked$delegate;
  var impossibleBigrams$delegate;
  var possibleBigrams$delegate;
  var startSymbols$delegate;
  function tokenizeByWhitespace(_this__u8e3s4) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.text.split' call
    // Inline function 'kotlin.collections.filterTo' call
    var this_0 = Regex_init_$Create$('\\s+').ib(_this__u8e3s4, 0);
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tokenizeByWhitespace.<anonymous>' call
      // Inline function 'kotlin.text.isNotBlank' call
      if (!isBlank(element)) {
        destination.e(element);
      }
    }
    return destination;
  }
  function substituteIndices(_this__u8e3s4, idxs, sub) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.mapIndexed' call
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.substituteIndices.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var i = checkIndexOverflow(tmp1);
      var tmp$ret$0 = !idxs.f1(i) ? item : sub(item, i);
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function blocked$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.mutableSetOf' call
    return LinkedHashSet_init_$Create$();
  }
  function impossibleBigrams$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.mutableSetOf' call
    return LinkedHashSet_init_$Create$();
  }
  function possibleBigrams$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.mutableSetOf' call
    return LinkedHashSet_init_$Create$();
  }
  function startSymbols$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    return mutableSetOf([get_START_SYMBOL()]);
  }
  function blocked$factory() {
    return getPropertyCallableRef('blocked', 1, KProperty1, function (receiver) {
      return get_blocked(receiver);
    }, null);
  }
  var properties_initialized_SyntaxRepair_kt_8h5b0y;
  function _init_properties_SyntaxRepair_kt__jnbhn4() {
    if (!properties_initialized_SyntaxRepair_kt_8h5b0y) {
      properties_initialized_SyntaxRepair_kt_8h5b0y = true;
      MAX_SAMPLE = 20;
      MAX_TOKENS = 80;
      TIMEOUT_MS = 90000;
      MAX_REPAIR = 2;
      blocked$delegate = cache_0(VOID, blocked$delegate$lambda);
      impossibleBigrams$delegate = cache_0(VOID, impossibleBigrams$delegate$lambda);
      possibleBigrams$delegate = cache_0(VOID, possibleBigrams$delegate$lambda);
      startSymbols$delegate = cache_0(VOID, startSymbols$delegate$lambda);
    }
  }
  function htmlify(_this__u8e3s4, $this) {
    return replace_0(replace_0(_this__u8e3s4, _Char___init__impl__6a9atx(60), _Char___init__impl__6a9atx(10216)), _Char___init__impl__6a9atx(62), _Char___init__impl__6a9atx(10217));
  }
  function denormalize$removeSynthetic(_this__u8e3s4, refactoredChildren, isSynthetic) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (_this__u8e3s4.f15_1.length === 0) {
      tmp = listOf_0(new Tree(_this__u8e3s4.d15_1, _this__u8e3s4.e15_1, [], _this__u8e3s4.g15_1));
    } else {
      if (isSynthetic(_this__u8e3s4)) {
        tmp = refactoredChildren;
      } else {
        // Inline function 'kotlin.collections.toTypedArray' call
        var tmp$ret$4 = copyToArray(refactoredChildren);
        tmp = listOf_0(new Tree(_this__u8e3s4.d15_1, VOID, tmp$ret$4.slice(), _this__u8e3s4.g15_1));
      }
    }
    return tmp;
  }
  function denormalize$removeSynthetic$default(_this__u8e3s4, refactoredChildren, isSynthetic, $super) {
    var tmp;
    if (refactoredChildren === VOID) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = _this__u8e3s4.f15_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.length);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var item = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.denormalize.removeSynthetic.<anonymous>' call
        var tmp$ret$0 = denormalize$removeSynthetic$default(item);
        destination.e(tmp$ret$0);
      }
      tmp = flatten(destination);
    } else {
      tmp = refactoredChildren;
    }
    refactoredChildren = tmp;
    var tmp_0;
    if (isSynthetic === VOID) {
      tmp_0 = Tree$denormalize$removeSynthetic$lambda(_this__u8e3s4);
    } else {
      tmp_0 = isSynthetic;
    }
    isSynthetic = tmp_0;
    return denormalize$removeSynthetic(_this__u8e3s4, refactoredChildren, isSynthetic);
  }
  function Tree$hash$delegate$lambda(this$0) {
    return function () {
      var tmp = getStringHashCode(this$0.d15_1);
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver = this$0.e15_1;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
      return (tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0) + getStringHashCode(this$0.m15()) | 0;
    };
  }
  function Tree$indxInfo$delegate$lambda(this$0) {
    return function () {
      return this$0.g15_1.ck_1 < 2147483647 ? ' [' + this$0.g15_1.ck_1 + ']' : '';
    };
  }
  function Tree$spanInfo$delegate$lambda(this$0) {
    return function () {
      return this$0.g15_1.ck_1 < 2147483647 ? ' [' + this$0.g15_1 + ']' : '';
    };
  }
  function Tree$denormalize$removeSynthetic$lambda($this_removeSynthetic) {
    return function (it) {
      return 2 <= split($this_removeSynthetic.d15_1, charArrayOf([_Char___init__impl__6a9atx(46)])).k();
    };
  }
  function Tree(root, terminal, children, span) {
    terminal = terminal === VOID ? null : terminal;
    var tmp;
    if (span === VOID) {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.collections.fold' call
      var accumulator = to(2147483647, -2147483648);
      var inductionVariable = 0;
      var last = children.length;
      while (inductionVariable < last) {
        var element = children[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.<init>.<anonymous>' call
        var destruct = accumulator;
        var a = destruct.ge();
        var b = destruct.he();
        // Inline function 'kotlin.comparisons.minOf' call
        var b_0 = element.g15_1.ck_1;
        var tmp_0 = Math.min(a, b_0);
        // Inline function 'kotlin.comparisons.maxOf' call
        var b_1 = element.g15_1.dk_1;
        var tmp$ret$1 = Math.max(b, b_1);
        accumulator = to(tmp_0, tmp$ret$1);
      }
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.<init>.<anonymous>' call
      var it = accumulator;
      tmp = numberRangeToNumber(it.ee_1, it.fe_1);
    } else {
      tmp = span;
    }
    span = tmp;
    this.d15_1 = root;
    this.e15_1 = terminal;
    this.f15_1 = children;
    this.g15_1 = span;
    var tmp_1 = this;
    tmp_1.h15_1 = lazy(Tree$hash$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.i15_1 = lazy(Tree$indxInfo$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.j15_1 = lazy(Tree$spanInfo$delegate$lambda(this));
  }
  protoOf(Tree).y10 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.h15_1;
    hash$factory();
    return this_0.e2();
  };
  protoOf(Tree).toString = function () {
    return this.d15_1;
  };
  protoOf(Tree).hashCode = function () {
    return this.y10();
  };
  protoOf(Tree).equals = function (other) {
    var tmp = this.hashCode();
    // Inline function 'kotlin.hashCode' call
    var tmp1_elvis_lhs = other == null ? null : hashCode(other);
    return tmp === (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs);
  };
  protoOf(Tree).n15 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.i15_1;
    indxInfo$factory();
    return this_0.e2();
  };
  protoOf(Tree).o15 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.j15_1;
    spanInfo$factory();
    return this_0.e2();
  };
  protoOf(Tree).p15 = function (buffer, prefix, nextPrefix) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (this.f15_1.length === 0) {
      var tmp_0 = buffer + prefix;
      var tmp14_safe_receiver = this.e15_1;
      tmp = tmp_0 + ('' + (tmp14_safe_receiver == null ? null : htmlify(tmp14_safe_receiver, this)) + this.n15() + '\n');
    } else {
      // Inline function 'kotlin.collections.foldIndexed' call
      var this_0 = this.f15_1;
      var tmp_1 = buffer + prefix + htmlify(this.d15_1, this);
      var tmp_2;
      var progression = this.g15_1;
      var containsLower = progression.ck_1;
      if (!(-1 <= progression.dk_1 ? containsLower <= -1 : false)) {
        tmp_2 = this.o15();
      } else {
        tmp_2 = '';
      }
      var index = 0;
      var accumulator = tmp_1 + tmp_2 + '\n';
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var element = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.prettyPrint.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var acc = accumulator;
        accumulator = tmp1 === (this.f15_1.length - 1 | 0) ? element.p15(acc + '', nextPrefix + '\u2514\u2500\u2500 ', nextPrefix + '    ') : element.p15(acc, nextPrefix + '\u251C\u2500\u2500 ', nextPrefix + '\u2502   ');
      }
      tmp = accumulator;
    }
    return tmp;
  };
  protoOf(Tree).q15 = function (buffer, prefix, nextPrefix, $super) {
    buffer = buffer === VOID ? '' : buffer;
    prefix = prefix === VOID ? '' : prefix;
    nextPrefix = nextPrefix === VOID ? '' : nextPrefix;
    return $super === VOID ? this.p15(buffer, prefix, nextPrefix) : $super.p15.call(this, buffer, prefix, nextPrefix);
  };
  protoOf(Tree).k15 = function () {
    return first_1(denormalize$removeSynthetic$default(this));
  };
  protoOf(Tree).r15 = function (removeEpsilon) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (this.f15_1.length === 0) {
      tmp = '' + this.e15_1;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.collections.map' call
      var this_0 = this.f15_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.length);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var item = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.contents.<anonymous>' call
        var tmp$ret$1 = item.r15(removeEpsilon);
        destination.e(tmp$ret$1);
      }
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.contents.<anonymous>' call
      var tmp_0;
      if (removeEpsilon) {
        // Inline function 'kotlin.collections.filter' call
        // Inline function 'kotlin.collections.filterTo' call
        var destination_0 = ArrayList_init_$Create$_0();
        var tmp0_iterator = destination.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.contents.<anonymous>.<anonymous>' call
          if (!(element === '\u03B5')) {
            destination_0.e(element);
          }
        }
        tmp_0 = destination_0;
      } else {
        tmp_0 = destination;
      }
      var tmp$ret$8 = tmp_0;
      tmp = joinToString(tmp$ret$8, ' ');
    }
    return tmp;
  };
  protoOf(Tree).m15 = function (removeEpsilon, $super) {
    removeEpsilon = removeEpsilon === VOID ? false : removeEpsilon;
    return $super === VOID ? this.r15(removeEpsilon) : $super.r15.call(this, removeEpsilon);
  };
  function hash$factory() {
    return getPropertyCallableRef('hash', 1, KProperty1, function (receiver) {
      return receiver.y10();
    }, null);
  }
  function indxInfo$factory() {
    return getPropertyCallableRef('indxInfo', 1, KProperty1, function (receiver) {
      return receiver.n15();
    }, null);
  }
  function spanInfo$factory() {
    return getPropertyCallableRef('spanInfo', 1, KProperty1, function (receiver) {
      return receiver.o15();
    }, null);
  }
  function decodeCombo(_this__u8e3s4, k) {
    var choice = k - 1 | 0;
    while (choose(choice, k) < _this__u8e3s4) {
      choice = choice + 1 | 0;
    }
    var N = _this__u8e3s4;
    var kk = k;
    // Inline function 'kotlin.collections.mutableSetOf' call
    var result = LinkedHashSet_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = downTo(choice, 0).h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.sampling.decodeCombo.<anonymous>' call
      if (choose(element, kk) <= N) {
        var tmp = N;
        var _unary__edvuaz = kk;
        kk = _unary__edvuaz - 1 | 0;
        N = tmp - choose(element, _unary__edvuaz) | 0;
        result.e(element);
      }
    }
    return result;
  }
  function get_lecuyerGenerator() {
    _init_properties_Samplers_kt__aqfyff();
    return lecuyerGenerator;
  }
  var lecuyerGenerator;
  function get_generator() {
    _init_properties_Samplers_kt__aqfyff();
    return generator;
  }
  var generator;
  function randomString(length, alphabet) {
    length = length === VOID ? 5 : length;
    alphabet = alphabet === VOID ? plus(plus_5(Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(97), _Char___init__impl__6a9atx(122)), Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(65), _Char___init__impl__6a9atx(90))), Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(48), _Char___init__impl__6a9atx(57))) : alphabet;
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(length);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.randomString.<anonymous>' call
        // Inline function 'kotlin.collections.random' call
        var tmp$ret$1 = random(alphabet, Default_getInstance()).p1_1;
        list.e(new Char(tmp$ret$1));
      }
       while (inductionVariable < length);
    return joinToString(list, '');
  }
  function choose_0(_this__u8e3s4, i) {
    _init_properties_Samplers_kt__aqfyff();
    var tmp = asSequence(i);
    return distinct_0(flatMap(tmp, choose$lambda(_this__u8e3s4)));
  }
  function findAll(base, dimension) {
    dimension = dimension === VOID ? 1 : dimension;
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(dimension);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < dimension)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>' call
        list.e(base);
      }
       while (inductionVariable < dimension);
    return findAll_0(list);
  }
  function findAll_0(dimensions, cardinalities, asList) {
    var tmp;
    if (cardinalities === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var tmp0_iterator = dimensions.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>' call
        var tmp$ret$0 = item.k();
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = cardinalities;
    }
    cardinalities = tmp;
    var tmp_0;
    if (asList === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var tmp0_iterator_0 = dimensions.h();
      while (tmp0_iterator_0.i()) {
        var item_0 = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>' call
        var tmp$ret$0_0 = shuffled(item_0);
        destination_0.e(tmp$ret$0_0);
      }
      tmp_0 = destination_0;
    } else {
      tmp_0 = asList;
    }
    asList = tmp_0;
    _init_properties_Samplers_kt__aqfyff();
    var tmp_1 = all(cardinalities);
    return map(tmp_1, findAll$lambda(asList));
  }
  function all(i, l) {
    l = l === VOID ? emptyList() : l;
    _init_properties_Samplers_kt__aqfyff();
    var tmp;
    if (i.l()) {
      tmp = sequenceOf([l]);
    } else {
      var tmp_0 = asSequence(until(0, i.m(0)));
      tmp = flatMap(tmp_0, all$lambda(i, l));
    }
    return tmp;
  }
  function randomVector(size, rand) {
    var tmp;
    if (rand === VOID) {
      tmp = randomVector$lambda;
    } else {
      tmp = rand;
    }
    rand = tmp;
    _init_properties_Samplers_kt__aqfyff();
    var tmp_0 = 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(size), null);
    while (tmp_0 < size) {
      tmp_1[tmp_0] = rand();
      tmp_0 = tmp_0 + 1 | 0;
    }
    return toDoubleArray(tmp_1);
  }
  function MDSamplerWithoutReplacement(set, dimension, skip, shift) {
    dimension = dimension === VOID ? 1 : dimension;
    skip = skip === VOID ? 1 : skip;
    shift = shift === VOID ? 0 : shift;
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(dimension);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < dimension)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        list.e(set);
      }
       while (inductionVariable < dimension);
    return MDSamplerWithoutReplacement_0(list, VOID, skip, shift);
  }
  function randomSequenceWithoutRepetition(range) {
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.math.ceil' call
    // Inline function 'kotlin.math.log2' call
    var x = (range.dk_1 - range.ck_1 | 0) + 1 | 0;
    var x_0 = log2(x);
    var tmp$ret$1 = Math.ceil(x_0);
    var tmp = LFSR(numberToInt(tmp$ret$1));
    var tmp_0 = filter(tmp, randomSequenceWithoutRepetition$lambda(range));
    return map(tmp_0, randomSequenceWithoutRepetition$lambda_0(range));
  }
  function MDSamplerWithoutReplacement_0(dimensions, cardinalities, skip, shift, shuffledDims, bitLens, degree) {
    var tmp;
    if (cardinalities === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var tmp0_iterator = dimensions.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        var tmp$ret$0 = item.k();
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = cardinalities;
    }
    cardinalities = tmp;
    skip = skip === VOID ? 1 : skip;
    shift = shift === VOID ? 0 : shift;
    var tmp_0;
    if (shuffledDims === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var tmp0_iterator_0 = dimensions.h();
      while (tmp0_iterator_0.i()) {
        var item_0 = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        var tmp$ret$0_0 = shuffled(item_0);
        destination_0.e(tmp$ret$0_0);
      }
      tmp_0 = destination_0;
    } else {
      tmp_0 = shuffledDims;
    }
    shuffledDims = tmp_0;
    var tmp_1;
    if (bitLens === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var tmp0_iterator_1 = dimensions.h();
      while (tmp0_iterator_1.i()) {
        var item_1 = tmp0_iterator_1.j();
        var tmp$ret$0_1 = item_1.k();
        destination_1.e(tmp$ret$0_1);
      }
      tmp_1 = toBitLens2(destination_1);
    } else {
      tmp_1 = bitLens;
    }
    bitLens = tmp_1;
    degree = degree === VOID ? sum(bitLens) : degree;
    _init_properties_Samplers_kt__aqfyff();
    var tmp_2;
    if (degree < 4) {
      tmp_2 = shuffled_0(findAll_0(dimensions));
    } else {
      // Inline function 'kotlin.collections.contains' call
      // Inline function 'kotlin.collections.containsKey' call
      var this_0 = get_generator();
      if (!(isInterface(this_0, Map) ? this_0 : THROW_CCE()).f2(degree)) {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
        var tmp0_iterator_2 = dimensions.h();
        while (tmp0_iterator_2.i()) {
          var item_2 = tmp0_iterator_2.j();
          // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
          var tmp$ret$11 = item_2.k();
          destination_2.e(tmp$ret$11);
        }
        throw Exception_init_$Create$('Space is too large! (' + degree + ') dim=' + joinToString(destination_2, 'x', '[', ']'));
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        var it = LFSR(degree);
        var tmp_3;
        if (skip === 1) {
          tmp_3 = it;
        } else {
          tmp_3 = filterIndexed(it, MDSamplerWithoutReplacement$lambda(skip, shift));
        }
        var tmp_4 = tmp_3;
        var tmp_5 = hastyPuddingTrick(map(tmp_4, MDSamplerWithoutReplacement$lambda_0(degree)), cardinalities);
        var tmp_6 = map(tmp_5, MDSamplerWithoutReplacement$lambda_1(shuffledDims));
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(shuffledDims, 10));
        var tmp0_iterator_3 = shuffledDims.h();
        while (tmp0_iterator_3.i()) {
          var item_3 = tmp0_iterator_3.j();
          // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
          var tmp$ret$16 = item_3.m(0);
          destination_3.e(tmp$ret$16);
        }
        tmp_2 = plus_4(tmp_6, sequenceOf([destination_3]));
      }
    }
    return tmp_2;
  }
  function LFSR(degree, primitivePolynomial) {
    degree = degree === VOID ? 16 : degree;
    var tmp;
    if (primitivePolynomial === VOID) {
      // Inline function 'kotlin.text.mapIndexedNotNull' call
      // Inline function 'kotlin.collections.random' call
      var this_0 = ensureNotNull(get_generator().h2(degree));
      var tmp$ret$0 = random(this_0, Default_getInstance());
      // Inline function 'kotlin.text.mapIndexedNotNullTo' call
      var this_1 = toString_1(tmp$ret$0, 2);
      var destination = ArrayList_init_$Create$_0();
      // Inline function 'kotlin.text.forEachIndexed' call
      var index = 0;
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(this_1)) {
        var item = charSequenceGet(this_1, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.text.mapIndexedNotNullTo.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.sampling.LFSR.<anonymous>' call
        var tmp0_safe_receiver = item === _Char___init__impl__6a9atx(49) ? tmp1 : null;
        if (tmp0_safe_receiver == null)
          null;
        else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          destination.e(tmp0_safe_receiver);
        }
      }
      tmp = destination;
    } else {
      tmp = primitivePolynomial;
    }
    primitivePolynomial = tmp;
    _init_properties_Samplers_kt__aqfyff();
    var tmp_0;
    if (degree === 0) {
      tmp_0 = sequenceOf([]);
    } else {
      tmp_0 = sequence(LFSR$slambda_0(degree, primitivePolynomial, null));
    }
    return tmp_0;
  }
  function toBitLens2(_this__u8e3s4) {
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.sampling.toBitLens2.<anonymous>' call
      var tmp$ret$0 = log_2(item);
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function hastyPuddingTrick(_this__u8e3s4, cardinalities) {
    _init_properties_Samplers_kt__aqfyff();
    var tmp = map(_this__u8e3s4, hastyPuddingTrick$lambda(cardinalities));
    return filter(tmp, hastyPuddingTrick$lambda_0(cardinalities));
  }
  function toBitList2(_this__u8e3s4, len) {
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.collections.mutableListOf' call
    var bits = ArrayList_init_$Create$_0();
    var i = _this__u8e3s4;
    var inductionVariable = 0;
    if (inductionVariable < len)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.ULong.and' call
        var this_0 = i;
        var other = _ULong___init__impl__c78o9k(new Long(1, 0));
        var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).d3(_ULong___get_data__impl__fggpzb(other)));
        bits.e(equals(tmp$ret$1, _ULong___init__impl__c78o9k(new Long(1, 0))));
        // Inline function 'kotlin.ULong.shr' call
        var this_1 = i;
        i = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).c3(1));
      }
       while (inductionVariable < len);
    return bits;
  }
  function log_2(x) {
    _init_properties_Samplers_kt__aqfyff();
    var i = 0;
    var j = x;
    while (j > 0) {
      j = j >> 1;
      i = i + 1 | 0;
    }
    return i;
  }
  function toIndexes2(_this__u8e3s4, bitLens) {
    _init_properties_Samplers_kt__aqfyff();
    // Inline function 'kotlin.collections.mutableListOf' call
    var indexes = ArrayList_init_$Create$_0();
    var i = 0;
    var _iterator__ex2g4s = bitLens.h();
    while (_iterator__ex2g4s.i()) {
      var len = _iterator__ex2g4s.j();
      indexes.e(toIntFast(_this__u8e3s4.c2(i, i + len | 0)));
      i = i + len | 0;
    }
    return indexes;
  }
  function toIntFast(_this__u8e3s4) {
    _init_properties_Samplers_kt__aqfyff();
    var i = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var b = _iterator__ex2g4s.j();
      i = i << 1 | (b ? 1 : 0);
    }
    return i;
  }
  function choose$lambda$lambda(it) {
    _init_properties_Samplers_kt__aqfyff();
    return toSet_0(it);
  }
  function choose$lambda($this_choose) {
    return function (it) {
      var tmp = findAll($this_choose, it);
      return map(tmp, choose$lambda$lambda);
    };
  }
  function findAll$lambda($asList) {
    return function (it) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = zip($asList, it);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>.<anonymous>' call
        var l = item.ge();
        var i = item.he();
        var tmp$ret$0 = l.m(i);
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function all$lambda($i, $l) {
    return function (it) {
      return all(drop($i, 1), plus_0($l, it));
    };
  }
  function randomVector$lambda() {
    _init_properties_Samplers_kt__aqfyff();
    return Default_getInstance().oj();
  }
  function randomSequenceWithoutRepetition$lambda($range) {
    return function (it) {
      // Inline function 'kotlin.ULong.toInt' call
      var this_0 = it.o1_1;
      return _ULong___get_data__impl__fggpzb(this_0).g3() <= ($range.dk_1 - $range.ck_1 | 0);
    };
  }
  function randomSequenceWithoutRepetition$lambda_0($range) {
    return function (it) {
      // Inline function 'kotlin.ULong.toInt' call
      var this_0 = it.o1_1;
      var tmp$ret$0 = _ULong___get_data__impl__fggpzb(this_0).g3();
      return ($range.ck_1 + tmp$ret$0 | 0) - 1 | 0;
    };
  }
  function MDSamplerWithoutReplacement$lambda($skip, $shift) {
    return function (i, _unused_var__etf5q3) {
      return (i % $skip | 0) === $shift;
    };
  }
  function MDSamplerWithoutReplacement$lambda_0($degree) {
    return function (it) {
      return toBitList2(it.o1_1, $degree);
    };
  }
  function MDSamplerWithoutReplacement$lambda_1($shuffledDims) {
    return function (it) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = zip($shuffledDims, it);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>.<anonymous>' call
        var dims = item.ge();
        var idx = item.he();
        var tmp$ret$0 = dims.m(idx);
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function LFSR$slambda($degree, $primitivePolynomial, resultContinuation) {
    this.a16_1 = $degree;
    this.b16_1 = $primitivePolynomial;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(LFSR$slambda).i16 = function ($this$sequence, $completion) {
    var tmp = this.j16($this$sequence, $completion);
    tmp.i8_1 = Unit_instance;
    tmp.j8_1 = null;
    return tmp.t8();
  };
  protoOf(LFSR$slambda).i9 = function (p1, $completion) {
    return this.i16(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(LFSR$slambda).t8 = function () {
    var suspendResult = this.i8_1;
    $sm: do
      try {
        var tmp = this.g8_1;
        switch (tmp) {
          case 0:
            this.h8_1 = 4;
            this.d16_1 = (new Long(1, 0)).a3(this.a16_1);
            var tmp_0 = this;
            var tmp_1 = Default_getInstance();
            var this_0 = _ULong___init__impl__c78o9k(new Long(1, 0));
            var this_1 = this.d16_1;
            var other = _ULong___init__impl__c78o9k(this_1);
            tmp_0.e16_1 = nextULong(tmp_1, new ULongRange(this_0, other));
            this.f16_1 = this.e16_1;
            this.g16_1 = 0;
            this.g8_1 = 1;
            continue $sm;
          case 1:
            var tmp_2 = this;
            var this_2 = this.b16_1;
            var accumulator = _ULong___init__impl__c78o9k(new Long(0, 0));
            var tmp0_iterator = this_2.h();
            while (tmp0_iterator.i()) {
              var element = tmp0_iterator.j();
              var this_3 = accumulator;
              var this_4 = this.f16_1;
              var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(element));
              accumulator = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).f3(_ULong___get_data__impl__fggpzb(other_0)));
            }

            var this_5 = accumulator;
            var other_1 = _ULong___init__impl__c78o9k(new Long(1, 0));
            tmp_2.h16_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).d3(_ULong___get_data__impl__fggpzb(other_1)));
            var tmp_3 = this;
            var this_6 = this.f16_1;
            var this_7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_6).c3(1));
            var this_8 = this.h16_1;
            var bitCount = this.a16_1 - 1 | 0;
            var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_8).a3(bitCount));
            tmp_3.f16_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).e3(_ULong___get_data__impl__fggpzb(other_2)));
            this.g8_1 = 2;
            suspendResult = this.c16_1.le(new ULong(this.f16_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.g16_1 = this.g16_1 + 1 | 0;
            var tmp_4 = toLong(this.g16_1);
            var this_9 = this.d16_1;
            if (tmp_4.z(this_9.s2(toLong(1))) < 0) {
              this.g8_1 = 1;
              continue $sm;
            }

            this.g8_1 = 3;
            continue $sm;
          case 3:
            return Unit_instance;
          case 4:
            throw this.j8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.h8_1 === 4) {
          throw e;
        } else {
          this.g8_1 = this.h8_1;
          this.j8_1 = e;
        }
      }
     while (true);
  };
  protoOf(LFSR$slambda).j16 = function ($this$sequence, completion) {
    var i = new LFSR$slambda(this.a16_1, this.b16_1, completion);
    i.c16_1 = $this$sequence;
    return i;
  };
  function LFSR$slambda_0($degree, $primitivePolynomial, resultContinuation) {
    var i = new LFSR$slambda($degree, $primitivePolynomial, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.i16($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function hastyPuddingTrick$lambda($cardinalities) {
    return function (it) {
      return toIndexes2(it, toBitLens2($cardinalities));
    };
  }
  function hastyPuddingTrick$lambda_0($cardinalities) {
    return function (it) {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var this_0 = zip(it, $cardinalities);
        var tmp;
        if (isInterface(this_0, Collection)) {
          tmp = this_0.l();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.sampling.hastyPuddingTrick.<anonymous>.<anonymous>' call
          var a = element.ge();
          var b = element.he();
          if (!(a < b)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  var properties_initialized_Samplers_kt_8hmveb;
  function _init_properties_Samplers_kt__aqfyff() {
    if (!properties_initialized_Samplers_kt_8hmveb) {
      properties_initialized_Samplers_kt_8hmveb = true;
      // Inline function 'kotlin.collections.mapIndexed' call
      var this_0 = listOf([1, 3, 7, 11, 13, 19, 25, 37, 59, 47, 61, 55, 41, 67, 97, 91, 109, 103, 115, 131, 193, 137, 145, 143, 241, 157, 185, 167, 229, 171, 213, 191, 253, 203, 211, 239, 247, 285, 369, 299, 425, 301, 361, 333, 357, 351, 501, 355, 397, 391, 451, 463, 487, 529, 545, 539, 865, 557, 721, 563, 817, 601, 617, 607, 1001, 623, 985, 631, 953, 637, 761, 647, 901, 661, 677, 675, 789, 687, 981, 695, 949, 701, 757, 719, 973, 731, 877, 787, 803, 799, 995, 827, 883, 847, 971, 859, 875, 895, 1019, 911, 967, 1033, 1153, 1051, 1729, 1063, 1825, 1069, 1441, 1125, 1329, 1135, 1969, 1163, 1673, 1221, 1305, 1239, 1881, 1255, 1849, 1267, 1657, 1279, 2041, 1293, 1413, 1315, 1573, 1341, 1509, 1347, 1557, 1367, 1877, 1387, 1717, 1423, 1933, 1431, 1869, 1479, 1821, 1527, 1917, 1531, 1789, 1555, 1603, 1591, 1891, 1615, 1939, 1627, 1747, 1663, 2035, 1759, 2011, 1815, 1863, 2053, 2561, 2071, 3713, 2091, 3393, 2093, 2881, 2119, 3617, 2147, 3169, 2149, 2657, 2161, 2273, 2171, 3553, 2189, 2833, 2197, 2705, 2207, 3985, 2217, 2385, 2225, 2257, 2255, 3889, 2279, 3697, 2283, 3441, 2293, 2801, 2317, 2825, 2323, 3209, 2341, 2633, 2345, 2377, 2363, 3529, 2365, 3017, 2373, 2601, 2395, 3497, 2419, 3305, 2421, 2793, 2431, 4073, 2435, 3097, 2447, 3865, 2475, 3417, 2477, 2905, 2489, 2521, 2503, 3641, 2533, 2681, 2551, 3833, 2567, 3589, 2579, 3205, 2581, 2693, 2669, 2917, 2687, 4069, 2717, 2965, 2727, 3669, 2731, 3413, 2739, 3285, 2741, 2773, 2783, 4021, 2799, 3957, 2811, 3573, 2819, 3085, 2867, 3277, 2879, 4045, 2891, 3373, 2911, 4013, 2927, 3949, 2941, 3053, 2951, 3613, 2955, 3357, 2963, 3229, 2991, 3933, 2999, 3805, 3005, 3037, 3035, 3517, 3047, 3709, 3083, 3331, 3103, 3971, 3159, 3747, 3179, 3427, 3187, 3299, 3223, 3731, 3227, 3475, 3251, 3283, 3263, 4051, 3271, 3635, 3319, 3827, 3343, 3851, 3367, 3659, 3399, 3627, 3439, 3947, 3487, 3995, 3515, 3547, 3543, 3771, 3559, 3707, 3623, 3655, 3679, 4007, 3743, 3991, 3791, 3895, 4179, 6465, 4201, 4801, 4219, 7105, 4221, 6081, 4249, 4897, 4305, 4449, 4331, 6881, 4359, 7185, 4383, 7953, 4387, 6289, 4411, 7057, 4431]);
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var index = 0;
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.lecuyerGenerator.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var i = checkIndexOverflow(tmp1);
        var tmp$ret$0 = to(i, listOf_0(toLong(item)));
        destination.e(tmp$ret$0);
      }
      lecuyerGenerator = toMap(destination);
      var tmp = mapOf([to(0, listOf_0(new Long(0, 0))), to(1, listOf_0(new Long(1, 0))), to(2, listOf_0(new Long(7, 0))), to(3, listOf_0(new Long(11, 0))), to(4, listOf([new Long(19, 0), new Long(25, 0)])), to(5, listOf([new Long(37, 0), new Long(41, 0), new Long(47, 0), new Long(55, 0), new Long(59, 0), new Long(61, 0)])), to(6, listOf([new Long(67, 0), new Long(91, 0), new Long(97, 0), new Long(103, 0), new Long(109, 0), new Long(115, 0)])), to(7, listOf([new Long(131, 0), new Long(137, 0), new Long(143, 0), new Long(145, 0), new Long(157, 0), new Long(167, 0), new Long(171, 0), new Long(185, 0), new Long(191, 0), new Long(193, 0), new Long(203, 0), new Long(211, 0), new Long(213, 0), new Long(229, 0), new Long(239, 0), new Long(241, 0), new Long(247, 0), new Long(253, 0)])), to(8, listOf([new Long(285, 0), new Long(299, 0), new Long(301, 0), new Long(333, 0), new Long(351, 0), new Long(355, 0), new Long(357, 0), new Long(361, 0), new Long(369, 0), new Long(391, 0), new Long(397, 0), new Long(425, 0), new Long(451, 0), new Long(463, 0), new Long(487, 0), new Long(501, 0)])), to(9, listOf([new Long(529, 0), new Long(539, 0), new Long(545, 0), new Long(557, 0), new Long(563, 0), new Long(601, 0), new Long(607, 0), new Long(617, 0), new Long(623, 0), new Long(631, 0), new Long(637, 0), new Long(647, 0), new Long(661, 0), new Long(675, 0), new Long(677, 0), new Long(687, 0), new Long(695, 0), new Long(701, 0), new Long(719, 0), new Long(721, 0), new Long(731, 0), new Long(757, 0), new Long(761, 0), new Long(787, 0), new Long(789, 0), new Long(799, 0), new Long(803, 0), new Long(817, 0), new Long(827, 0), new Long(847, 0), new Long(859, 0), new Long(865, 0), new Long(875, 0), new Long(877, 0), new Long(883, 0), new Long(895, 0), new Long(901, 0), new Long(911, 0), new Long(949, 0), new Long(953, 0), new Long(967, 0), new Long(971, 0), new Long(973, 0), new Long(981, 0), new Long(985, 0), new Long(995, 0), new Long(1001, 0), new Long(1019, 0)])), to(10, listOf([new Long(1033, 0), new Long(1051, 0), new Long(1063, 0), new Long(1069, 0), new Long(1125, 0), new Long(1135, 0), new Long(1153, 0), new Long(1163, 0), new Long(1221, 0), new Long(1239, 0), new Long(1255, 0), new Long(1267, 0), new Long(1279, 0), new Long(1293, 0), new Long(1305, 0), new Long(1315, 0), new Long(1329, 0), new Long(1341, 0), new Long(1347, 0), new Long(1367, 0), new Long(1387, 0), new Long(1413, 0), new Long(1423, 0), new Long(1431, 0), new Long(1441, 0), new Long(1479, 0), new Long(1509, 0), new Long(1527, 0), new Long(1531, 0), new Long(1555, 0), new Long(1557, 0), new Long(1573, 0), new Long(1591, 0), new Long(1603, 0), new Long(1615, 0), new Long(1627, 0), new Long(1657, 0), new Long(1663, 0), new Long(1673, 0), new Long(1717, 0), new Long(1729, 0), new Long(1747, 0), new Long(1759, 0), new Long(1789, 0), new Long(1815, 0), new Long(1821, 0), new Long(1825, 0), new Long(1849, 0), new Long(1863, 0), new Long(1869, 0), new Long(1877, 0), new Long(1881, 0), new Long(1891, 0), new Long(1917, 0), new Long(1933, 0), new Long(1939, 0), new Long(1969, 0), new Long(2011, 0), new Long(2035, 0), new Long(2041, 0)])), to(11, listOf([new Long(2053, 0), new Long(2071, 0), new Long(2091, 0), new Long(2093, 0), new Long(2119, 0), new Long(2147, 0), new Long(2149, 0), new Long(2161, 0), new Long(2171, 0), new Long(2189, 0), new Long(2197, 0), new Long(2207, 0), new Long(2217, 0), new Long(2225, 0), new Long(2255, 0), new Long(2257, 0), new Long(2273, 0), new Long(2279, 0), new Long(2283, 0), new Long(2293, 0), new Long(2317, 0), new Long(2323, 0), new Long(2341, 0), new Long(2345, 0), new Long(2363, 0), new Long(2365, 0), new Long(2373, 0), new Long(2377, 0), new Long(2385, 0), new Long(2395, 0), new Long(2419, 0), new Long(2421, 0), new Long(2431, 0), new Long(2435, 0), new Long(2447, 0), new Long(2475, 0), new Long(2477, 0), new Long(2489, 0), new Long(2503, 0), new Long(2521, 0), new Long(2533, 0), new Long(2551, 0), new Long(2561, 0), new Long(2567, 0), new Long(2579, 0), new Long(2581, 0), new Long(2601, 0), new Long(2633, 0), new Long(2657, 0), new Long(2669, 0), new Long(2681, 0), new Long(2687, 0), new Long(2693, 0), new Long(2705, 0), new Long(2717, 0), new Long(2727, 0), new Long(2731, 0), new Long(2739, 0), new Long(2741, 0), new Long(2773, 0), new Long(2783, 0), new Long(2793, 0), new Long(2799, 0), new Long(2801, 0), new Long(2811, 0), new Long(2819, 0), new Long(2825, 0), new Long(2833, 0), new Long(2867, 0), new Long(2879, 0), new Long(2881, 0), new Long(2891, 0), new Long(2905, 0), new Long(2911, 0), new Long(2917, 0), new Long(2927, 0), new Long(2941, 0), new Long(2951, 0), new Long(2955, 0), new Long(2963, 0), new Long(2965, 0), new Long(2991, 0), new Long(2999, 0), new Long(3005, 0), new Long(3017, 0), new Long(3035, 0), new Long(3037, 0), new Long(3047, 0), new Long(3053, 0), new Long(3083, 0), new Long(3085, 0), new Long(3097, 0), new Long(3103, 0), new Long(3159, 0), new Long(3169, 0), new Long(3179, 0), new Long(3187, 0), new Long(3205, 0), new Long(3209, 0), new Long(3223, 0), new Long(3227, 0), new Long(3229, 0), new Long(3251, 0), new Long(3263, 0), new Long(3271, 0), new Long(3277, 0), new Long(3283, 0), new Long(3285, 0), new Long(3299, 0), new Long(3305, 0), new Long(3319, 0), new Long(3331, 0), new Long(3343, 0), new Long(3357, 0), new Long(3367, 0), new Long(3373, 0), new Long(3393, 0), new Long(3399, 0), new Long(3413, 0), new Long(3417, 0), new Long(3427, 0), new Long(3439, 0), new Long(3441, 0), new Long(3475, 0), new Long(3487, 0), new Long(3497, 0), new Long(3515, 0), new Long(3517, 0), new Long(3529, 0), new Long(3543, 0), new Long(3547, 0), new Long(3553, 0), new Long(3559, 0), new Long(3573, 0), new Long(3589, 0), new Long(3613, 0), new Long(3617, 0), new Long(3623, 0), new Long(3627, 0), new Long(3635, 0), new Long(3641, 0), new Long(3655, 0), new Long(3659, 0), new Long(3669, 0), new Long(3679, 0), new Long(3697, 0), new Long(3707, 0), new Long(3709, 0), new Long(3713, 0), new Long(3731, 0), new Long(3743, 0), new Long(3747, 0), new Long(3771, 0), new Long(3791, 0), new Long(3805, 0), new Long(3827, 0), new Long(3833, 0), new Long(3851, 0), new Long(3865, 0), new Long(3889, 0), new Long(3895, 0), new Long(3933, 0), new Long(3947, 0), new Long(3949, 0), new Long(3957, 0), new Long(3971, 0), new Long(3985, 0), new Long(3991, 0), new Long(3995, 0), new Long(4007, 0), new Long(4013, 0), new Long(4021, 0), new Long(4045, 0), new Long(4051, 0), new Long(4069, 0), new Long(4073, 0)])), to(12, listOf([new Long(4179, 0), new Long(4201, 0), new Long(4219, 0), new Long(4221, 0), new Long(4249, 0), new Long(4305, 0), new Long(4331, 0), new Long(4359, 0), new Long(4383, 0), new Long(4387, 0), new Long(4411, 0), new Long(4431, 0), new Long(4439, 0), new Long(4449, 0), new Long(4459, 0), new Long(4485, 0), new Long(4531, 0), new Long(4569, 0), new Long(4575, 0), new Long(4621, 0), new Long(4663, 0), new Long(4669, 0), new Long(4711, 0), new Long(4723, 0), new Long(4735, 0), new Long(4793, 0), new Long(4801, 0), new Long(4811, 0), new Long(4879, 0), new Long(4893, 0), new Long(4897, 0), new Long(4921, 0), new Long(4927, 0), new Long(4941, 0), new Long(4977, 0), new Long(5017, 0), new Long(5027, 0), new Long(5033, 0), new Long(5127, 0), new Long(5169, 0), new Long(5175, 0), new Long(5199, 0), new Long(5213, 0), new Long(5223, 0), new Long(5237, 0), new Long(5287, 0), new Long(5293, 0), new Long(5331, 0), new Long(5391, 0), new Long(5405, 0), new Long(5453, 0), new Long(5523, 0), new Long(5573, 0), new Long(5591, 0), new Long(5597, 0), new Long(5611, 0), new Long(5641, 0), new Long(5703, 0), new Long(5717, 0), new Long(5721, 0), new Long(5797, 0), new Long(5821, 0), new Long(5909, 0), new Long(5913, 0), new Long(5955, 0), new Long(5957, 0), new Long(6005, 0), new Long(6025, 0), new Long(6061, 0), new Long(6067, 0), new Long(6079, 0), new Long(6081, 0), new Long(6231, 0), new Long(6237, 0), new Long(6289, 0), new Long(6295, 0), new Long(6329, 0), new Long(6383, 0), new Long(6427, 0), new Long(6453, 0), new Long(6465, 0), new Long(6501, 0), new Long(6523, 0), new Long(6539, 0), new Long(6577, 0), new Long(6589, 0), new Long(6601, 0), new Long(6607, 0), new Long(6631, 0), new Long(6683, 0), new Long(6699, 0), new Long(6707, 0), new Long(6761, 0), new Long(6795, 0), new Long(6865, 0), new Long(6881, 0), new Long(6901, 0), new Long(6923, 0), new Long(6931, 0), new Long(6943, 0), new Long(6999, 0), new Long(7057, 0), new Long(7079, 0), new Long(7103, 0), new Long(7105, 0), new Long(7123, 0), new Long(7173, 0), new Long(7185, 0), new Long(7191, 0), new Long(7207, 0), new Long(7245, 0), new Long(7303, 0), new Long(7327, 0), new Long(7333, 0), new Long(7355, 0), new Long(7365, 0), new Long(7369, 0), new Long(7375, 0), new Long(7411, 0), new Long(7431, 0), new Long(7459, 0), new Long(7491, 0), new Long(7505, 0), new Long(7515, 0), new Long(7541, 0), new Long(7557, 0), new Long(7561, 0), new Long(7701, 0), new Long(7705, 0), new Long(7727, 0), new Long(7749, 0), new Long(7761, 0), new Long(7783, 0), new Long(7795, 0), new Long(7823, 0), new Long(7907, 0), new Long(7953, 0), new Long(7963, 0), new Long(7975, 0), new Long(8049, 0), new Long(8089, 0), new Long(8123, 0), new Long(8125, 0), new Long(8137, 0)])), to(13, listOf([new Long(8219, 0), new Long(8231, 0), new Long(8245, 0), new Long(8275, 0), new Long(8293, 0), new Long(8303, 0), new Long(8331, 0), new Long(8333, 0), new Long(8351, 0), new Long(8357, 0), new Long(8367, 0), new Long(8379, 0), new Long(8381, 0), new Long(8387, 0), new Long(8393, 0), new Long(8417, 0), new Long(8435, 0), new Long(8461, 0), new Long(8469, 0), new Long(8489, 0), new Long(8495, 0), new Long(8507, 0), new Long(8515, 0), new Long(8551, 0), new Long(8555, 0), new Long(8569, 0), new Long(8585, 0), new Long(8599, 0), new Long(8605, 0), new Long(8639, 0)])), to(14, listOf([new Long(16427, 0), new Long(16441, 0), new Long(16467, 0), new Long(16479, 0), new Long(16507, 0), new Long(16553, 0), new Long(16559, 0), new Long(16571, 0), new Long(16573, 0), new Long(16591, 0), new Long(16619, 0), new Long(16627, 0), new Long(16653, 0), new Long(16659, 0), new Long(16699, 0), new Long(16707, 0), new Long(16795, 0), new Long(16797, 0), new Long(16807, 0), new Long(16813, 0), new Long(16821, 0), new Long(16853, 0), new Long(16857, 0), new Long(16881, 0)])), to(15, listOf([new Long(32771, 0), new Long(32785, 0), new Long(32791, 0), new Long(32813, 0), new Long(32821, 0), new Long(32863, 0), new Long(32887, 0), new Long(32897, 0), new Long(32903, 0), new Long(32915, 0), new Long(32933, 0), new Long(32963, 0), new Long(32975, 0), new Long(32989, 0), new Long(32999, 0), new Long(33013, 0), new Long(33025, 0), new Long(33045, 0), new Long(33061, 0), new Long(33111, 0), new Long(33117, 0), new Long(33121, 0), new Long(33133, 0), new Long(33157, 0)])), to(16, listOf([new Long(65581, 0), new Long(65593, 0), new Long(65599, 0), new Long(65619, 0), new Long(65725, 0), new Long(65751, 0), new Long(65839, 0), new Long(65853, 0), new Long(65871, 0), new Long(65885, 0), new Long(65943, 0), new Long(65953, 0), new Long(65965, 0), new Long(65983, 0), new Long(65991, 0), new Long(66069, 0), new Long(66073, 0), new Long(66085, 0), new Long(66095, 0), new Long(66141, 0), new Long(66157, 0), new Long(66181, 0), new Long(66193, 0), new Long(66209, 0)])), to(17, listOf([new Long(131081, 0), new Long(131087, 0), new Long(131105, 0), new Long(131117, 0), new Long(131123, 0), new Long(131135, 0), new Long(131137, 0), new Long(131157, 0), new Long(131177, 0), new Long(131195, 0), new Long(131213, 0), new Long(131225, 0), new Long(131235, 0), new Long(131247, 0), new Long(131259, 0), new Long(131269, 0), new Long(131317, 0)])), to(18, listOf([new Long(262183, 0), new Long(262207, 0), new Long(262221, 0), new Long(262267, 0), new Long(262273, 0), new Long(262363, 0), new Long(262375, 0), new Long(262381, 0), new Long(262407, 0)])), to(19, listOf([new Long(524327, 0), new Long(524351, 0), new Long(524359, 0), new Long(524371, 0), new Long(524377, 0), new Long(524387, 0), new Long(524399, 0), new Long(524413, 0), new Long(524435, 0), new Long(524463, 0)])), to(20, listOf([new Long(1048585, 0), new Long(1048659, 0), new Long(1048677, 0), new Long(1048681, 0), new Long(1048699, 0)])), to(21, listOf([new Long(2097157, 0), new Long(2097191, 0), new Long(2097215, 0), new Long(2097253, 0)])), to(22, listOf([new Long(4194307, 0), new Long(4194361, 0)])), to(23, listOf([new Long(8388641, 0), new Long(8388651, 0), new Long(8388653, 0), new Long(8388659, 0), new Long(8388671, 0), new Long(8388685, 0), new Long(8388709, 0)])), to(24, listOf_0(new Long(16777243, 0))), to(25, listOf_0(new Long(33554441, 0))), to(26, listOf_0(new Long(67108935, 0))), to(27, listOf_0(new Long(134217767, 0))), to(28, listOf_0(new Long(268435465, 0))), to(29, listOf_0(new Long(536870917, 0))), to(30, listOf_0(new Long(1073741907, 0))), to(31, listOf_0(new Long(-2147483639, 0))), to(32, listOf_0(new Long(197, 1)))]);
      // Inline function 'kotlin.collections.associateWith' call
      var this_1 = numberRangeToNumber(33, 64);
      var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_1, 10)), 16));
      // Inline function 'kotlin.collections.associateWithTo' call
      var tmp0_iterator_0 = this_1.h();
      while (tmp0_iterator_0.i()) {
        var element = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.generator.<anonymous>' call
        var tmp$ret$0_0 = ensureNotNull(get_lecuyerGenerator().h2(element));
        result.s4(element, tmp$ret$0_0);
      }
      generator = plus_6(tmp, result);
    }
  }
  function get_idxs(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return idxs$delegate.j11(_this__u8e3s4, idxs$factory());
  }
  var idxs$delegate;
  function get_rows(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return rows$delegate.j11(_this__u8e3s4, rows$factory());
  }
  var rows$delegate;
  function get_cols(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return cols$delegate.j11(_this__u8e3s4, cols$factory());
  }
  var cols$delegate;
  function get_transpose(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return transpose$delegate.j11(_this__u8e3s4, transpose$factory());
  }
  var transpose$delegate;
  function get_BOOLEAN_ALGEBRA() {
    _init_properties_Tensor_kt__gweomx();
    return BOOLEAN_ALGEBRA;
  }
  var BOOLEAN_ALGEBRA;
  var XOR_ALGEBRA;
  var INTEGER_FIELD;
  function get_DOUBLE_FIELD() {
    _init_properties_Tensor_kt__gweomx();
    return DOUBLE_FIELD;
  }
  var DOUBLE_FIELD;
  var MINPLUS_ALGEBRA;
  var MAXPLUS_ALGEBRA;
  var GF2_ALGEBRA;
  function DoubleMatrix_init_$Init$(numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.DoubleMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    DoubleMatrix.call($this, numRows, numCols, list);
    return $this;
  }
  function DoubleMatrix_init_$Create$(numRows, numCols, f) {
    return DoubleMatrix_init_$Init$(numRows, numCols, f, objectCreate(protoOf(DoubleMatrix)));
  }
  function Companion_0() {
  }
  var Companion_instance_0;
  function Companion_getInstance_1() {
    return Companion_instance_0;
  }
  function DoubleMatrix(numRows, numCols, data, algebra) {
    numCols = numCols === VOID ? numRows : numCols;
    algebra = algebra === VOID ? get_DOUBLE_FIELD() : algebra;
    AbstractMatrix.call(this, algebra, numRows, numCols);
    this.nx_1 = numRows;
    this.ox_1 = numCols;
    this.px_1 = data;
    this.qx_1 = algebra;
  }
  protoOf(DoubleMatrix).by = function () {
    return this.nx_1;
  };
  protoOf(DoubleMatrix).cy = function () {
    return this.ox_1;
  };
  protoOf(DoubleMatrix).fx = function () {
    return this.px_1;
  };
  protoOf(DoubleMatrix).k16 = function () {
    return this.qx_1;
  };
  protoOf(DoubleMatrix).l16 = function (that) {
    return this.m16(times_0(-1.0, that));
  };
  protoOf(DoubleMatrix).n16 = function (rows, cols, data, alg) {
    return new DoubleMatrix(rows, cols, data, alg);
  };
  protoOf(DoubleMatrix).o16 = function (rows, cols, data, alg) {
    return this.n16(rows, cols, data, isInterface(alg, Field) ? alg : THROW_CCE());
  };
  function Matrix$plus$lambda(this$0, $t) {
    return function ($this$safeJoin, i, j) {
      return $this$safeJoin.y16(this$0.dy(i, j), $t.dy(i, j));
    };
  }
  function Matrix() {
  }
  function flip(_this__u8e3s4, $this) {
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = _this__u8e3s4.k();
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.Companion.flip.<anonymous>' call
        // Inline function 'kotlin.collections.mapNotNull' call
        // Inline function 'kotlin.collections.mapNotNullTo' call
        var destination = ArrayList_init_$Create$_0();
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator = _this__u8e3s4.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.tensor.Companion.flip.<anonymous>.<anonymous>' call
          // Inline function 'kotlin.collections.elementAtOrNull' call
          var tmp0_safe_receiver = getOrNull(element, index);
          if (tmp0_safe_receiver == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            destination.e(tmp0_safe_receiver);
          }
        }
        list.e(destination);
      }
       while (inductionVariable < size);
    return list;
  }
  function UTMatrix_init_$Init$(ts, algebra, $this) {
    UTMatrix.call($this, listOf_0(toList_0(ts)), algebra);
    return $this;
  }
  function UTMatrix_init_$Create$(ts, algebra) {
    return UTMatrix_init_$Init$(ts, algebra, objectCreate(protoOf(UTMatrix)));
  }
  function UTMatrix_init_$Init$_0(numRows, numCols, data, alg, $this) {
    var tmp29_subject = data.k();
    var tmp;
    if (tmp29_subject === imul(numRows, numCols)) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = until(0, numRows);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.<init>.<anonymous>' call
        // Inline function 'kotlin.collections.mapNotNull' call
        // Inline function 'kotlin.collections.mapNotNullTo' call
        var this_1 = until(item + 1 | 0, numCols);
        var destination_0 = ArrayList_init_$Create$_0();
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator_0 = this_1.h();
        while (tmp0_iterator_0.i()) {
          var element = tmp0_iterator_0.j();
          // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.<init>.<anonymous>.<anonymous>' call
          var tmp0_safe_receiver = data.m(imul(item, numCols) + element | 0);
          if (tmp0_safe_receiver == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            destination_0.e(tmp0_safe_receiver);
          }
        }
        destination.e(destination_0);
      }
      tmp = dropLast(flip(destination, Companion_instance_1), 1);
    } else if (tmp29_subject === ((imul(numRows, numCols) - numRows | 0) / 2 | 0)) {
      // Inline function 'kotlin.collections.fold' call
      var this_2 = downTo(numCols - 1 | 0, 1);
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$7 = emptyList();
      var accumulator = to(tmp$ret$7, 0);
      var tmp0_iterator_1 = this_2.h();
      while (tmp0_iterator_1.i()) {
        var element_0 = tmp0_iterator_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.<init>.<anonymous>' call
        var acc = accumulator;
        accumulator = to(plus(acc.ee_1, listOf_0(data.c2(acc.fe_1, acc.fe_1 + element_0 | 0))), acc.fe_1 + element_0 | 0);
      }
      var tmp$ret$9 = accumulator;
      tmp = flip(tmp$ret$9.ee_1, Companion_instance_1);
    } else {
      throw Exception_init_$Create$('Invalid UTMatrix shape: ' + numRows + '.' + numCols + ' != ' + data.k());
    }
    UTMatrix.call($this, tmp, alg);
    return $this;
  }
  function UTMatrix_init_$Create$_0(numRows, numCols, data, alg) {
    return UTMatrix_init_$Init$_0(numRows, numCols, data, alg, objectCreate(protoOf(UTMatrix)));
  }
  function Companion_1() {
  }
  var Companion_instance_1;
  function Companion_getInstance_2() {
    return Companion_instance_1;
  }
  function UTMatrix$data$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = flip(plus(this$0.q14_1, listOf_0(emptyList())), Companion_instance_1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.data$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.List' call
        // Inline function 'kotlin.collections.MutableList' call
        var size = (this$0.q14_1.k() + 1 | 0) - item.k() | 0;
        var list = ArrayList_init_$Create$(size);
        // Inline function 'kotlin.repeat' call
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable = 0;
        if (inductionVariable < size)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.collections.MutableList.<anonymous>' call
            // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.data$delegate.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$0 = this$0.r14_1.z16();
            list.e(tmp$ret$0);
          }
           while (inductionVariable < size);
        var tmp$ret$3 = plus(list, item);
        destination.e(tmp$ret$3);
      }
      return flatten(destination);
    };
  }
  function UTMatrix$toFullMatrix$lambda(this$0) {
    return function (r, c) {
      return c <= r ? this$0.r14_1.z16() : this$0.q14_1.m((c - r | 0) - 1 | 0).m(r);
    };
  }
  function UTMatrix(diagonals, algebra) {
    AbstractMatrix.call(this, algebra, first_1(diagonals).k() + 1 | 0);
    this.q14_1 = diagonals;
    this.r14_1 = algebra;
    var tmp = this;
    tmp.s14_1 = lazy(UTMatrix$data$delegate$lambda(this));
  }
  protoOf(UTMatrix).k16 = function () {
    return this.r14_1;
  };
  protoOf(UTMatrix).fx = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.s14_1;
    data$factory();
    return this_0.e2();
  };
  protoOf(UTMatrix).a17 = function (carry, iteration, maxIterations) {
    var tmp;
    if (last(this.q14_1).k() === 1) {
      tmp = this;
    } else if (iteration === maxIterations) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = downTo(last(this.q14_1).k() - 1 | 0, 1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
        // Inline function 'kotlin.collections.List' call
        // Inline function 'kotlin.collections.MutableList' call
        var list = ArrayList_init_$Create$(item);
        // Inline function 'kotlin.repeat' call
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable = 0;
        if (inductionVariable < item)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.collections.MutableList.<anonymous>' call
            // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
            var tmp$ret$3 = this.r14_1.z16();
            list.e(tmp$ret$3);
          }
           while (inductionVariable < item);
        destination.e(list);
      }
      tmp = new UTMatrix(plus(this.q14_1, destination), this.r14_1);
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = windowed(carry, 2, 1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var tmp0_iterator_0 = this_1.h();
      while (tmp0_iterator_0.i()) {
        var item_0 = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.collections.fold' call
        // Inline function 'kotlin.collections.map' call
        var this_2 = zip(item_0.m(0).ql_1, item_0.m(1).rl_1);
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
        var tmp0_iterator_1 = this_2.h();
        while (tmp0_iterator_1.i()) {
          var item_1 = tmp0_iterator_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
          var l = item_1.ge();
          var r = item_1.he();
          // Inline function 'kotlin.with' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$11 = this.r14_1.b17(l, r);
          destination_1.e(tmp$ret$11);
        }
        var accumulator = this.r14_1.z16();
        var tmp0_iterator_2 = destination_1.h();
        while (tmp0_iterator_2.i()) {
          var element = tmp0_iterator_2.j();
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
          var t = accumulator;
          // Inline function 'kotlin.with' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>.<anonymous>' call
          accumulator = this.r14_1.y16(element, t);
        }
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
        var it = accumulator;
        var tmp$ret$20 = to_0(to(it, plus_0(item_0.m(0).ql_1, it)), plus(listOf_0(it), item_0.m(1).rl_1));
        destination_0.e(tmp$ret$20);
      }
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(destination_0, 10));
      var tmp0_iterator_3 = destination_0.h();
      while (tmp0_iterator_3.i()) {
        var item_2 = tmp0_iterator_3.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
        var tmp$ret$23 = item_2.pl_1;
        destination_2.e(tmp$ret$23);
      }
      tmp = (new UTMatrix(plus(this.q14_1, listOf_0(destination_2)), this.r14_1)).a17(destination_0, iteration + 1 | 0, maxIterations);
    }
    return tmp;
  };
  protoOf(UTMatrix).t14 = function (carry, iteration, maxIterations, $super) {
    var tmp;
    if (carry === VOID) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = last(this.q14_1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
        var tmp$ret$0 = to_0(to(item, listOf_0(item)), listOf_0(item));
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = carry;
    }
    carry = tmp;
    iteration = iteration === VOID ? 0 : iteration;
    maxIterations = maxIterations === VOID ? first_1(this.q14_1).k() : maxIterations;
    return $super === VOID ? this.a17(carry, iteration, maxIterations) : $super.a17.call(this, carry, iteration, maxIterations);
  };
  protoOf(UTMatrix).l15 = function () {
    var tmp;
    if (!(last(this.q14_1).k() === 1)) {
      throw IndexOutOfBoundsException_init_$Create$('OOB: [' + first_1(this.q14_1).k() + ', ' + last(this.q14_1).k() + ']');
    } else {
      var tmp_0 = this.q14_1.k() + 1 | 0;
      var tmp_1 = this.q14_1.k() + 1 | 0;
      tmp = FreeMatrix_init_$Create$_0(this.r14_1, tmp_0, tmp_1, UTMatrix$toFullMatrix$lambda(this));
    }
    return tmp;
  };
  protoOf(UTMatrix).c17 = function (rows, cols, data, alg) {
    return UTMatrix_init_$Create$_0(rows, cols, data, alg);
  };
  protoOf(UTMatrix).o16 = function (rows, cols, data, alg) {
    return this.c17(rows, cols, data, isInterface(alg, Ring) ? alg : THROW_CCE());
  };
  function FreeMatrix_init_$Init$(numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    FreeMatrix.call($this, numRows, numCols, list);
    return $this;
  }
  function FreeMatrix_init_$Create$(numRows, numCols, f) {
    return FreeMatrix_init_$Init$(numRows, numCols, f, objectCreate(protoOf(FreeMatrix)));
  }
  function FreeMatrix_init_$Init$_0(algebra, numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    FreeMatrix.call($this, numRows, numCols, list, algebra);
    return $this;
  }
  function FreeMatrix_init_$Create$_0(algebra, numRows, numCols, f) {
    return FreeMatrix_init_$Init$_0(algebra, numRows, numCols, f, objectCreate(protoOf(FreeMatrix)));
  }
  function FreeMatrix$toString$lambda($colWidth) {
    return function (it) {
      // Inline function 'kotlin.collections.mapIndexed' call
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(it, 10));
      var index = 0;
      var tmp0_iterator = it.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var i = checkIndexOverflow(tmp1);
        var tmp$ret$0 = padEnd('' + item, $colWidth.m(i));
        destination.e(tmp$ret$0);
      }
      return joinToString(destination, '  |  ', '|  ', '  |');
    };
  }
  function FreeMatrix(numRows, numCols, data, algebra) {
    numCols = numCols === VOID ? numRows : numCols;
    var tmp;
    if (algebra === VOID) {
      var tmp_0 = TODO_ALGEBRA(firstOrNull_0(data));
      tmp = isInterface(tmp_0, Ring) ? tmp_0 : THROW_CCE();
    } else {
      tmp = algebra;
    }
    algebra = tmp;
    AbstractMatrix.call(this, algebra, numRows, numCols);
    this.xx_1 = numRows;
    this.yx_1 = numCols;
    this.zx_1 = data;
    this.ay_1 = algebra;
  }
  protoOf(FreeMatrix).by = function () {
    return this.xx_1;
  };
  protoOf(FreeMatrix).cy = function () {
    return this.yx_1;
  };
  protoOf(FreeMatrix).fx = function () {
    return this.zx_1;
  };
  protoOf(FreeMatrix).k16 = function () {
    return this.ay_1;
  };
  protoOf(FreeMatrix).c17 = function (rows, cols, data, alg) {
    return new FreeMatrix(rows, cols, data, this.k16());
  };
  protoOf(FreeMatrix).o16 = function (rows, cols, data, alg) {
    return this.c17(rows, cols, data, isInterface(alg, Ring) ? alg : THROW_CCE());
  };
  protoOf(FreeMatrix).toString = function () {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_cols(this);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>' call
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = item.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>.<anonymous>' call
      var maxValue = ('' + iterator.j()).length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>.<anonymous>' call
        var v = ('' + iterator.j()).length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      var tmp$ret$3 = maxValue;
      destination.e(tmp$ret$3);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>' call
    var tmp = get_rows(this);
    return '\n' + joinToString(tmp, '\n', VOID, VOID, VOID, VOID, FreeMatrix$toString$lambda(destination));
  };
  function AbstractMatrix$values$delegate$lambda(this$0) {
    return function () {
      return toSet_0(this$0.fx());
    };
  }
  function AbstractMatrix$map$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.fold' call
      var this_0 = get_idxs(this$0);
      // Inline function 'kotlin.collections.mutableMapOf' call
      var accumulator = LinkedHashMap_init_$Create$();
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.map$delegate.<anonymous>.<anonymous>' call
        var map = accumulator;
        // Inline function 'kotlin.collections.component1' call
        var r = element.m(0);
        // Inline function 'kotlin.collections.component2' call
        var c = element.m(1);
        var element_0 = this$0.dy(r, c);
        if (!equals(element_0, this$0.k16().z16())) {
          // Inline function 'kotlin.collections.set' call
          var key = Π(r, c, element_0);
          map.s4(key, 1);
        }
        accumulator = map;
      }
      return accumulator;
    };
  }
  function AbstractMatrix$toString$lambda($colWidth) {
    return function (it) {
      // Inline function 'kotlin.collections.mapIndexed' call
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(it, 10));
      var index = 0;
      var tmp0_iterator = it.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>.<anonymous>.<anonymous>' call
        var tmp1 = index;
        index = tmp1 + 1 | 0;
        var i = checkIndexOverflow(tmp1);
        var tmp$ret$0 = padEnd('' + item, $colWidth.m(i));
        destination.e(tmp$ret$0);
      }
      return joinToString(destination, '  ');
    };
  }
  function AbstractMatrix$hash$delegate$lambda(this$0) {
    return function () {
      var result = getObjectHashCode(this$0);
      result = imul(31, result) + this$0.by() | 0;
      result = imul(31, result) + this$0.cy() | 0;
      result = imul(31, result) + hashCode(this$0.fx()) | 0;
      result = imul(31, result) + hashCode(this$0.k16()) | 0;
      return result;
    };
  }
  function AbstractMatrix(algebra, numRows, numCols) {
    numCols = numCols === VOID ? numRows : numCols;
    this.p16_1 = algebra;
    this.q16_1 = numRows;
    this.r16_1 = numCols;
    var tmp = this;
    tmp.s16_1 = lazy(AbstractMatrix$values$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.t16_1 = lazy(AbstractMatrix$map$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.u16_1 = lazy(AbstractMatrix$hash$delegate$lambda(this));
  }
  protoOf(AbstractMatrix).k16 = function () {
    return this.p16_1;
  };
  protoOf(AbstractMatrix).by = function () {
    return this.q16_1;
  };
  protoOf(AbstractMatrix).cy = function () {
    return this.r16_1;
  };
  protoOf(AbstractMatrix).toString = function () {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_cols(this);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>' call
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = item.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>.<anonymous>' call
      var maxValue = ('' + iterator.j()).length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>.<anonymous>' call
        var v = ('' + iterator.j()).length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      var tmp$ret$3 = maxValue;
      destination.e(tmp$ret$3);
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>' call
    var tmp = get_rows(this);
    return '\n' + joinToString(tmp, '\n', VOID, VOID, VOID, VOID, AbstractMatrix$toString$lambda(destination));
  };
  protoOf(AbstractMatrix).equals = function (other) {
    if (this === other)
      return true;
    if (other == null ? true : !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other instanceof AbstractMatrix))
      THROW_CCE();
    if (!(this.by() === other.by()))
      return false;
    if (!(this.cy() === other.cy()))
      return false;
    if (!equals(this.fx(), other.fx()))
      return false;
    return true;
  };
  protoOf(AbstractMatrix).y10 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.u16_1;
    hash$factory_0();
    return this_0.e2();
  };
  protoOf(AbstractMatrix).hashCode = function () {
    return this.y10();
  };
  function times_0(_this__u8e3s4, value) {
    _init_properties_Tensor_kt__gweomx();
    return times_1(value, _this__u8e3s4);
  }
  function TODO_ALGEBRA(t) {
    _init_properties_Tensor_kt__gweomx();
    var tmp = TODO_ALGEBRA$lambda;
    return new of_1(t, VOID, tmp, TODO_ALGEBRA$lambda_0);
  }
  function times_1(_this__u8e3s4, value) {
    _init_properties_Tensor_kt__gweomx();
    var tmp = _this__u8e3s4.by();
    var tmp_0 = _this__u8e3s4.cy();
    // Inline function 'kotlin.collections.map' call
    var this_0 = _this__u8e3s4.fx();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.times.<anonymous>' call
      var tmp$ret$0 = item * value;
      destination.e(tmp$ret$0);
    }
    return new DoubleMatrix(tmp, tmp_0, destination);
  }
  function BooleanMatrix$Companion$one$lambda(i, j) {
    return i === j;
  }
  function BooleanMatrix_init_$Init$(numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.BooleanMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    BooleanMatrix.call($this, numRows, numCols, list);
    return $this;
  }
  function BooleanMatrix_init_$Create$(numRows, numCols, f) {
    return BooleanMatrix_init_$Init$(numRows, numCols, f, objectCreate(protoOf(BooleanMatrix)));
  }
  function Companion_2() {
  }
  protoOf(Companion_2).d17 = function (size) {
    return BooleanMatrix_init_$Create$(size, VOID, BooleanMatrix$Companion$one$lambda);
  };
  var Companion_instance_2;
  function Companion_getInstance_3() {
    return Companion_instance_2;
  }
  function BooleanMatrix$isFull$delegate$lambda(this$0) {
    return function () {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var this_0 = this$0.fx();
        var tmp;
        if (isInterface(this_0, Collection)) {
          tmp = this_0.l();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.tensor.BooleanMatrix.isFull$delegate.<anonymous>.<anonymous>' call
          if (!element) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function BooleanMatrix$toString$lambda(it) {
    return joinToString(it, ' ', VOID, VOID, VOID, VOID, BooleanMatrix$toString$lambda$lambda);
  }
  function BooleanMatrix$toString$lambda$lambda(it) {
    return it ? '1' : '0';
  }
  function BooleanMatrix(numRows, numCols, data, algebra) {
    numCols = numCols === VOID ? numRows : numCols;
    algebra = algebra === VOID ? get_BOOLEAN_ALGEBRA() : algebra;
    AbstractMatrix.call(this, algebra, numRows, numCols);
    this.k17_1 = numRows;
    this.l17_1 = numCols;
    this.m17_1 = data;
    this.n17_1 = algebra;
    var tmp = this;
    tmp.o17_1 = lazy(BooleanMatrix$isFull$delegate$lambda(this));
  }
  protoOf(BooleanMatrix).by = function () {
    return this.k17_1;
  };
  protoOf(BooleanMatrix).cy = function () {
    return this.l17_1;
  };
  protoOf(BooleanMatrix).fx = function () {
    return this.m17_1;
  };
  protoOf(BooleanMatrix).k16 = function () {
    return this.n17_1;
  };
  protoOf(BooleanMatrix).toString = function () {
    var tmp = chunked(this.fx(), this.cy());
    return joinToString(tmp, '\n', '\n', VOID, VOID, VOID, BooleanMatrix$toString$lambda);
  };
  protoOf(BooleanMatrix).p17 = function (rows, cols, data, alg) {
    return new BooleanMatrix(rows, cols, data, alg);
  };
  protoOf(BooleanMatrix).o16 = function (rows, cols, data, alg) {
    return this.p17(rows, cols, data, isInterface(alg, Ring) ? alg : THROW_CCE());
  };
  function minus_3(_this__u8e3s4, mat) {
    _init_properties_Tensor_kt__gweomx();
    return _this__u8e3s4.l16(toDoubleMatrix_0(mat));
  }
  function toDoubleMatrix_0(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    var tmp = _this__u8e3s4.by();
    var tmp_0 = _this__u8e3s4.cy();
    return DoubleMatrix_init_$Create$(tmp, tmp_0, toDoubleMatrix$lambda_0(_this__u8e3s4));
  }
  function idxs$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    return allPairs($this$cache.by(), $this$cache.cy());
  }
  function rows$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    return chunked($this$cache.fx(), $this$cache.cy());
  }
  function cols$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.collections.map' call
    var this_0 = until(0, $this$cache.cy());
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.cols$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = get_rows($this$cache);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var tmp0_iterator_0 = this_1.h();
      while (tmp0_iterator_0.i()) {
        var item_0 = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.cols$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = item_0.m(item);
        destination_0.e(tmp$ret$0);
      }
      destination.e(destination_0);
    }
    return destination;
  }
  function transpose$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    return $this$cache.gx($this$cache.cy(), $this$cache.by(), flatten(get_cols($this$cache)));
  }
  function BOOLEAN_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a ? true : b;
  }
  function BOOLEAN_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a ? b : false;
  }
  function XOR_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return !!(a ^ b);
  }
  function XOR_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return !!(a & b);
  }
  function INTEGER_FIELD$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b | 0;
  }
  function INTEGER_FIELD$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return imul(a, b);
  }
  function INTEGER_FIELD$lambda_1($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a - b | 0;
  }
  function INTEGER_FIELD$lambda_2($this$of, _unused_var__etf5q3, _unused_var__etf5q3_0) {
    _init_properties_Tensor_kt__gweomx();
    throw new NotImplementedError('Division not defined on integer field.');
  }
  function DOUBLE_FIELD$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b;
  }
  function DOUBLE_FIELD$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a * b;
  }
  function DOUBLE_FIELD$lambda_1($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a - b;
  }
  function DOUBLE_FIELD$lambda_2($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a / b;
  }
  function MINPLUS_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.math.min' call
    return Math.min(a, b);
  }
  function MINPLUS_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b | 0;
  }
  function MAXPLUS_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.math.max' call
    return Math.max(a, b);
  }
  function MAXPLUS_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b | 0;
  }
  function GF2_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return (a + b | 0) % 2 | 0;
  }
  function GF2_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return imul(a, b) % 2 | 0;
  }
  function TODO_ALGEBRA$lambda($this$of, _unused_var__etf5q3, _unused_var__etf5q3_0) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.TODO' call
    throw new NotImplementedError();
  }
  function TODO_ALGEBRA$lambda_0($this$of, _unused_var__etf5q3, _unused_var__etf5q3_0) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.TODO' call
    throw new NotImplementedError();
  }
  function toDoubleMatrix$lambda_0($this_toDoubleMatrix) {
    return function (i, j) {
      return $this_toDoubleMatrix.dy(i, j) ? 1.0 : 0.0;
    };
  }
  function idxs$factory() {
    return getPropertyCallableRef('idxs', 1, KProperty1, function (receiver) {
      return get_idxs(receiver);
    }, null);
  }
  function rows$factory() {
    return getPropertyCallableRef('rows', 1, KProperty1, function (receiver) {
      return get_rows(receiver);
    }, null);
  }
  function cols$factory() {
    return getPropertyCallableRef('cols', 1, KProperty1, function (receiver) {
      return get_cols(receiver);
    }, null);
  }
  function transpose$factory() {
    return getPropertyCallableRef('transpose', 1, KProperty1, function (receiver) {
      return get_transpose(receiver);
    }, null);
  }
  function data$factory() {
    return getPropertyCallableRef('data', 1, KProperty1, function (receiver) {
      return receiver.fx();
    }, null);
  }
  function hash$factory_0() {
    return getPropertyCallableRef('hash', 1, KProperty1, function (receiver) {
      return receiver.y10();
    }, null);
  }
  var properties_initialized_Tensor_kt_e1l3et;
  function _init_properties_Tensor_kt__gweomx() {
    if (!properties_initialized_Tensor_kt_e1l3et) {
      properties_initialized_Tensor_kt_e1l3et = true;
      idxs$delegate = cache_0(VOID, idxs$delegate$lambda);
      rows$delegate = cache_0(VOID, rows$delegate$lambda);
      cols$delegate = cache_0(VOID, cols$delegate$lambda);
      transpose$delegate = cache_0(VOID, transpose$delegate$lambda);
      var tmp = BOOLEAN_ALGEBRA$lambda;
      BOOLEAN_ALGEBRA = new of_1(false, true, tmp, BOOLEAN_ALGEBRA$lambda_0);
      var tmp_0 = XOR_ALGEBRA$lambda;
      XOR_ALGEBRA = new of_1(false, true, tmp_0, XOR_ALGEBRA$lambda_0);
      var tmp_1 = INTEGER_FIELD$lambda;
      var tmp_2 = INTEGER_FIELD$lambda_0;
      var tmp_3 = INTEGER_FIELD$lambda_1;
      INTEGER_FIELD = new of_0(0, 1, tmp_1, tmp_2, tmp_3, INTEGER_FIELD$lambda_2);
      var tmp_4 = DOUBLE_FIELD$lambda;
      var tmp_5 = DOUBLE_FIELD$lambda_0;
      var tmp_6 = DOUBLE_FIELD$lambda_1;
      DOUBLE_FIELD = new of_0(0.0, 1.0, tmp_4, tmp_5, tmp_6, DOUBLE_FIELD$lambda_2);
      var tmp_7 = MINPLUS_ALGEBRA$lambda;
      MINPLUS_ALGEBRA = new of_1(2147483647, 0, tmp_7, MINPLUS_ALGEBRA$lambda_0);
      var tmp_8 = MAXPLUS_ALGEBRA$lambda;
      MAXPLUS_ALGEBRA = new of_1(-2147483648, 0, tmp_8, MAXPLUS_ALGEBRA$lambda_0);
      var tmp_9 = GF2_ALGEBRA$lambda;
      GF2_ALGEBRA = new of_1(0, 1, tmp_9, GF2_ALGEBRA$lambda_0);
    }
  }
  function wl(_this__u8e3s4, k, label) {
    k = k === VOID ? 5 : k;
    var tmp;
    if (label === VOID) {
      tmp = wl$lambda(_this__u8e3s4);
    } else {
      tmp = label;
    }
    label = tmp;
    var $this = _this__u8e3s4;
    var k_0 = k;
    var label_0 = label;
    $l$1: do {
      $l$0: do {
        // Inline function 'kotlin.collections.associateWith' call
        var this_0 = $this;
        var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
        // Inline function 'kotlin.collections.associateWithTo' call
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.theory.wl.<anonymous>' call
          // Inline function 'kotlin.collections.map' call
          var this_1 = get_neighbors(element);
          // Inline function 'kotlin.collections.mapTo' call
          var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
          var tmp0_iterator_0 = this_1.h();
          while (tmp0_iterator_0.i()) {
            var item = tmp0_iterator_0.j();
            destination.e(label_0(item));
          }
          var tmp$ret$2 = hashCode(sorted(destination));
          result.s4(element, tmp$ret$2);
        }
        var updates = result;
        var tmp_0;
        var tmp_1;
        if (k_0 <= 0) {
          tmp_1 = true;
        } else {
          var tmp$ret$5;
          $l$block_0: {
            // Inline function 'kotlin.collections.all' call
            var this_2 = $this;
            var tmp_2;
            if (isInterface(this_2, Collection)) {
              tmp_2 = this_2.l();
            } else {
              tmp_2 = false;
            }
            if (tmp_2) {
              tmp$ret$5 = true;
              break $l$block_0;
            }
            var tmp0_iterator_1 = this_2.h();
            while (tmp0_iterator_1.i()) {
              var element_0 = tmp0_iterator_1.j();
              // Inline function 'ai.hypergraph.kaliningraph.theory.wl.<anonymous>' call
              if (!(label_0(element_0) === updates.h2(element_0))) {
                tmp$ret$5 = false;
                break $l$block_0;
              }
            }
            tmp$ret$5 = true;
          }
          tmp_1 = tmp$ret$5;
        }
        if (tmp_1) {
          tmp_0 = updates;
        } else {
          $this = $this;
          k_0 = k_0 - 1 | 0;
          label_0 = wl$lambda_0(updates);
          continue $l$0;
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function wl$lambda($this_wl) {
    return function (it) {
      return ensureNotNull(get_histogram($this_wl).h2(it));
    };
  }
  function wl$lambda_0($updates) {
    return function (it) {
      return ensureNotNull($updates.h2(it));
    };
  }
  function of_init_$Init$(l, es, $this) {
    of.call($this, l, toList_0(es));
    return $this;
  }
  function of_init_$Create$(l, es) {
    return of_init_$Init$(l, es, objectCreate(protoOf(of)));
  }
  function of(len, l) {
    this.q17_1 = l;
    this.r17_1 = len;
  }
  protoOf(of).s17 = function () {
    return this.q17_1;
  };
  protoOf(of).f1 = function (element) {
    return this.q17_1.f1(element);
  };
  protoOf(of).b2 = function (elements) {
    return this.q17_1.b2(elements);
  };
  protoOf(of).m = function (index) {
    return this.q17_1.m(index);
  };
  protoOf(of).l = function () {
    return this.q17_1.l();
  };
  protoOf(of).h = function () {
    return this.q17_1.h();
  };
  protoOf(of).r = function (index) {
    return this.q17_1.r(index);
  };
  protoOf(of).c2 = function (fromIndex, toIndex) {
    return this.q17_1.c2(fromIndex, toIndex);
  };
  protoOf(of).k = function () {
    return this.q17_1.k();
  };
  protoOf(of).equals = function (other) {
    var tmp31_safe_receiver = (!(other == null) ? isInterface(other, VT) : false) ? other : null;
    return equals(tmp31_safe_receiver == null ? null : tmp31_safe_receiver.s17(), this.q17_1);
  };
  protoOf(of).toString = function () {
    return toString(this.q17_1);
  };
  function VT() {
  }
  function VT_0(v1, v2, v3) {
    return of_init_$Create$(get_S3(), [v1, v2, v3]);
  }
  function to_0(_this__u8e3s4, that) {
    return Π(get_π1(_this__u8e3s4), get_π2(_this__u8e3s4), that);
  }
  function times_2(_this__u8e3s4, other) {
    return flatMap(_this__u8e3s4, times$lambda(other));
  }
  function times_3(_this__u8e3s4, s) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(s, 10));
      var tmp0_iterator_0 = s.h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        var tmp$ret$0 = to(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = toSet_0(destination_0);
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function intersect_1(_this__u8e3s4) {
    // Inline function 'kotlin.collections.fold' call
    var accumulator = toMutableSet(first(_this__u8e3s4));
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.intersect.<anonymous>' call
      // Inline function 'kotlin.apply' call
      var this_0 = accumulator;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.intersect.<anonymous>.<anonymous>' call
      this_0.u3(element);
      accumulator = this_0;
    }
    return accumulator;
  }
  function powerset(_this__u8e3s4) {
    return sequence(powerset$slambda_0(_this__u8e3s4, null));
  }
  function allPairs(numRows, numCols) {
    return times_4(until(0, numRows), until(0, numCols));
  }
  function cc(_this__u8e3s4, that) {
    return VT_1(_this__u8e3s4, that);
  }
  function Π(π1, π2, π3) {
    return new Triple(π1, π2, π3);
  }
  function get_π1(_this__u8e3s4) {
    return _this__u8e3s4.ee_1;
  }
  function get_π2(_this__u8e3s4) {
    return _this__u8e3s4.fe_1;
  }
  function times_4(_this__u8e3s4, s) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(s, 10));
      var tmp0_iterator_0 = s.h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        var tmp$ret$0 = cc(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = toSet_0(destination_0);
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function VT_1(v1, v2) {
    return of_init_$Create$(get_S2(), [v1, v2]);
  }
  function get_second(_this__u8e3s4) {
    // Inline function 'kotlin.collections.component2' call
    return _this__u8e3s4.m(1);
  }
  function get_first(_this__u8e3s4) {
    // Inline function 'kotlin.collections.component1' call
    return _this__u8e3s4.m(0);
  }
  function times_5(_this__u8e3s4, s) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(s, 10));
      var tmp0_iterator_0 = s.h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        var tmp$ret$0 = to_0(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function to$ref($boundThis) {
    var l = function (p0) {
      return to($boundThis, p0);
    };
    l.callableName = 'to';
    return l;
  }
  function times$lambda($other) {
    return function (it) {
      return map($other, to$ref(it));
    };
  }
  function powerset$slambda($this_powerset, resultContinuation) {
    this.b18_1 = $this_powerset;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(powerset$slambda).k18 = function ($this$sequence, $completion) {
    var tmp = this.l18($this$sequence, $completion);
    tmp.i8_1 = Unit_instance;
    tmp.j8_1 = null;
    return tmp.t8();
  };
  protoOf(powerset$slambda).i9 = function (p1, $completion) {
    return this.k18(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(powerset$slambda).t8 = function () {
    var suspendResult = this.i8_1;
    $sm: do
      try {
        var tmp = this.g8_1;
        switch (tmp) {
          case 0:
            this.h8_1 = 7;
            this.d18_1 = this.b18_1.k();
            if (this.d18_1 === 0) {
              this.g8_1 = 5;
              suspendResult = this.c18_1.le(emptySet(), this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.e18_1 = first(this.b18_1);
              this.f18_1 = minus_1(this.b18_1, this.e18_1);
              this.g8_1 = 1;
              suspendResult = this.c18_1.ne(powerset(this.f18_1), this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            }

          case 1:
            var tmp_0 = this;
            tmp_0.g18_1 = powerset(this.f18_1);
            this.h18_1 = this.g18_1.h();
            this.g8_1 = 2;
            continue $sm;
          case 2:
            if (!this.h18_1.i()) {
              this.g8_1 = 4;
              continue $sm;
            }

            this.i18_1 = this.h18_1.j();
            var tmp_1 = this;
            tmp_1.j18_1 = this.i18_1;
            this.g8_1 = 3;
            suspendResult = this.c18_1.le(plus_2(setOf(this.e18_1), this.j18_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 3:
            this.g8_1 = 2;
            continue $sm;
          case 4:
            this.g8_1 = 6;
            continue $sm;
          case 5:
            this.g8_1 = 6;
            continue $sm;
          case 6:
            return Unit_instance;
          case 7:
            throw this.j8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.h8_1 === 7) {
          throw e;
        } else {
          this.g8_1 = this.h8_1;
          this.j8_1 = e;
        }
      }
     while (true);
  };
  protoOf(powerset$slambda).l18 = function ($this$sequence, completion) {
    var i = new powerset$slambda(this.b18_1, completion);
    i.c18_1 = $this$sequence;
    return i;
  };
  function powerset$slambda_0($this_powerset, resultContinuation) {
    var i = new powerset$slambda($this_powerset, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.k18($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  var S0;
  function get_S1() {
    _init_properties_Church_kt__lnrkav();
    return S1;
  }
  var S1;
  function get_S2() {
    _init_properties_Church_kt__lnrkav();
    return S2;
  }
  var S2;
  function get_S3() {
    _init_properties_Church_kt__lnrkav();
    return S3;
  }
  var S3;
  function get_S4() {
    _init_properties_Church_kt__lnrkav();
    return S4;
  }
  var S4;
  function get_S5() {
    _init_properties_Church_kt__lnrkav();
    return S5;
  }
  var S5;
  function get_S6() {
    _init_properties_Church_kt__lnrkav();
    return S6;
  }
  var S6;
  function get_S7() {
    _init_properties_Church_kt__lnrkav();
    return S7;
  }
  var S7;
  function get_S8() {
    _init_properties_Church_kt__lnrkav();
    return S8;
  }
  var S8;
  var S9;
  function S(x) {
    this.m18_1 = x;
  }
  protoOf(S).equals = function (other) {
    var tmp;
    if (other instanceof S) {
      tmp = (this.m18_1 == null ? other.m18_1 == null : false) ? true : equals(this.m18_1, other.m18_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(S).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.m18_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  function O() {
    O_instance = this;
    S.call(this, null);
  }
  var O_instance;
  function O_getInstance() {
    if (O_instance == null)
      new O();
    return O_instance;
  }
  var properties_initialized_Church_kt_g6sfr;
  function _init_properties_Church_kt__lnrkav() {
    if (!properties_initialized_Church_kt_g6sfr) {
      properties_initialized_Church_kt_g6sfr = true;
      S0 = O_getInstance();
      S1 = new S(O_getInstance());
      S2 = new S(get_S1());
      S3 = new S(get_S2());
      S4 = new S(get_S3());
      S5 = new S(get_S4());
      S6 = new S(get_S5());
      S7 = new S(get_S6());
      S8 = new S(get_S7());
      S9 = new S(get_S8());
    }
  }
  function get_D(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return D$delegate.j11(_this__u8e3s4, D$factory());
  }
  var D$delegate;
  function get_A(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return A$delegate.j11(_this__u8e3s4, A$factory());
  }
  var A$delegate;
  var A_AUG$delegate;
  function get_ASYMNORM(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return ASYMNORM$delegate.j11(_this__u8e3s4, ASYMNORM$factory());
  }
  var ASYMNORM$delegate;
  var L$delegate;
  function get_I(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return I$delegate.j11(_this__u8e3s4, I$factory());
  }
  var I$delegate;
  var LSYMNORM$delegate;
  var ENCODED$delegate;
  var APSP$delegate;
  var degMap$delegate;
  function get_edges(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return edges$delegate.j11(_this__u8e3s4, edges$factory());
  }
  var edges$delegate;
  function get_edgList(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return edgList$delegate.j11(_this__u8e3s4, edgList$factory());
  }
  var edgList$delegate;
  function get_adjList(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return adjList$delegate.j11(_this__u8e3s4, adjList$factory());
  }
  var adjList$delegate;
  function get_edgMap(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return edgMap$delegate.j11(_this__u8e3s4, edgMap$factory());
  }
  var edgMap$delegate;
  function get_histogram(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return histogram$delegate.j11(_this__u8e3s4, histogram$factory());
  }
  var histogram$delegate;
  function get_cache() {
    _init_properties_Graph_kt__cdxgws();
    return cache;
  }
  var cache;
  var graph$delegate;
  function get_graph(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return graph$delegate_0.j11(_this__u8e3s4, graph$factory());
  }
  var graph$delegate_0;
  var incoming$delegate;
  function get_outgoing(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return outgoing$delegate.j11(_this__u8e3s4, outgoing$factory());
  }
  var outgoing$delegate;
  function get_neighbors(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return neighbors$delegate.j11(_this__u8e3s4, neighbors$factory());
  }
  var neighbors$delegate;
  function Vertex$hash$delegate$lambda(this$0) {
    return function () {
      return getStringHashCode(this$0.t10());
    };
  }
  function Vertex(id) {
    AGF.call(this);
    this.w10_1 = id;
    var tmp = this;
    tmp.x10_1 = lazy(Vertex$hash$delegate$lambda(this));
  }
  protoOf(Vertex).t10 = function () {
    return this.w10_1;
  };
  protoOf(Vertex).y10 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.x10_1;
    hash$factory_1();
    return this_0.e2();
  };
  protoOf(Vertex).equals = function (other) {
    var tmp39_safe_receiver = other instanceof Vertex ? other : null;
    var tmp;
    if (tmp39_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.Vertex.equals.<anonymous>' call
      tmp = this.t10() === tmp39_safe_receiver.t10();
    }
    var tmp0_elvis_lhs = tmp;
    return tmp0_elvis_lhs == null ? false : tmp0_elvis_lhs;
  };
  protoOf(Vertex).vz = function () {
    return vectorize(this.t10());
  };
  protoOf(Vertex).hashCode = function () {
    return this.y10();
  };
  protoOf(Vertex).toString = function () {
    return this.t10();
  };
  function Graph(vertices) {
    var tmp;
    if (vertices === VOID) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else {
      tmp = vertices;
    }
    vertices = tmp;
    AGF.call(this);
    this.sz_1 = vertices;
  }
  protoOf(Graph).qz = function () {
    return this.sz_1;
  };
  protoOf(Graph).tz = function (element) {
    return this.sz_1.f1(element);
  };
  protoOf(Graph).f1 = function (element) {
    if (!(element instanceof Vertex))
      return false;
    return this.tz(element instanceof Vertex ? element : THROW_CCE());
  };
  protoOf(Graph).uz = function (elements) {
    return this.sz_1.b2(elements);
  };
  protoOf(Graph).b2 = function (elements) {
    return this.uz(elements);
  };
  protoOf(Graph).l = function () {
    return this.sz_1.l();
  };
  protoOf(Graph).h = function () {
    return this.sz_1.h();
  };
  protoOf(Graph).k = function () {
    return this.sz_1.k();
  };
  protoOf(Graph).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp37_safe_receiver = other instanceof Graph ? other : null;
      var tmp_0;
      if (tmp37_safe_receiver == null) {
        tmp_0 = null;
      } else {
        tmp_0 = tmp37_safe_receiver.f10(this instanceof Graph ? this : THROW_CCE());
      }
      var tmp0_elvis_lhs = tmp_0;
      tmp = tmp0_elvis_lhs == null ? false : tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(Graph).vz = function () {
    var tmp;
    if (this.l()) {
      var tmp_0 = 0;
      var tmp_1 = new Float64Array(10);
      while (tmp_0 < 10) {
        tmp_1[tmp_0] = 0.0;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_1;
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = sorted(wl(this).i2());
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.Graph.encode.<anonymous>' call
        destination.e(item);
      }
      tmp = toDoubleArray_0(destination);
    }
    return tmp;
  };
  protoOf(Graph).toString = function () {
    return this.i10();
  };
  function Edge(source, target) {
    AGF.call(this);
    this.o18_1 = source;
    this.p18_1 = target;
  }
  protoOf(Edge).h11 = function () {
    return this.o18_1;
  };
  protoOf(Edge).i11 = function () {
    return this.p18_1;
  };
  protoOf(Edge).equals = function (other) {
    var tmp;
    if ((other instanceof Edge ? other : null) == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.Edge.equals.<anonymous>' call
      tmp = this.hashCode() === other.hashCode();
    }
    var tmp0_elvis_lhs = tmp;
    return tmp0_elvis_lhs == null ? false : tmp0_elvis_lhs;
  };
  protoOf(Edge).hashCode = function () {
    return this.h11().hashCode() + this.i11().hashCode() | 0;
  };
  protoOf(Edge).toString = function () {
    return '' + this.h11() + '\u2192' + this.i11();
  };
  function IGF$G$lambda(it) {
    return ensureNotNull(getKClassFromExpression(it).j9());
  }
  function IGF() {
  }
  function cache_0(caller, fn) {
    caller = caller === VOID ? getCaller() : caller;
    _init_properties_Graph_kt__cdxgws();
    var tmp = cache$lambda(caller, fn);
    return new sam$kotlin_properties_ReadOnlyProperty$0(tmp);
  }
  function VIndex(set) {
    this.q18_1 = set;
    this.r18_1 = toList(this.q18_1);
    var tmp = this;
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = this.r18_1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.VIndex.map.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var index_0 = checkIndexOverflow(tmp1);
      var tmp$ret$0 = to(item, index_0);
      destination.e(tmp$ret$0);
    }
    tmp.s18_1 = toMap(destination);
  }
  protoOf(VIndex).m = function (it) {
    return this.r18_1.m(it);
  };
  function sam$kotlin_Comparator$0_2(function_0) {
    this.t18_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_2).yb = function (a, b) {
    return this.t18_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_2).compare = function (a, b) {
    return this.yb(a, b);
  };
  function IGraph$join$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp = a.t10();
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp$ret$1 = b.t10();
    return compareValues(tmp, tmp$ret$1);
  }
  function IGraph$join$lambda_0(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp = a.t10();
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp$ret$1 = b.t10();
    return compareValues(tmp, tmp$ret$1);
  }
  function IGraph$join$lambda_1($left, $right) {
    return function (it) {
      return plus_2(get_outgoing($left), get_outgoing($right));
    };
  }
  function IGraph$reversed$lambda($v) {
    return function (it) {
      return $v;
    };
  }
  function IGraph$vwise$lambda(this$0, $lf) {
    return function (i, j) {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.vwise.<anonymous>.<anonymous>' call
      var destruct = cc(this$0.m(i), this$0.m(j));
      // Inline function 'kotlin.collections.component1' call
      var v = destruct.m(0);
      // Inline function 'kotlin.collections.component2' call
      var n = destruct.m(1);
      return get_neighbors(v).f1(n) ? $lf(this$0, v, n) : 0.0;
    };
  }
  function IGraph() {
  }
  function neighbors_0(_this__u8e3s4, $this) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IVertex.neighbors.<anonymous>' call
      var list = element.a11();
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function IVertex() {
  }
  function get_outdegree(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return get_neighbors(_this__u8e3s4).k();
  }
  function AGF() {
    this.wz_1 = Default_getInstance().ie();
  }
  protoOf(AGF).xz = function () {
    return this.wz_1;
  };
  protoOf(AGF).hashCode = function () {
    return this.xz();
  };
  function getCaller() {
    _init_properties_Graph_kt__cdxgws();
    return getStringHashCode(lines(stackTraceToString(newThrowable())).m(3));
  }
  function sam$kotlin_properties_ReadOnlyProperty$0(function_0) {
    this.u18_1 = function_0;
  }
  protoOf(sam$kotlin_properties_ReadOnlyProperty$0).j11 = function (thisRef, property) {
    return this.u18_1(thisRef, property);
  };
  function D$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.k();
    return DoubleMatrix_init_$Create$(tmp, VOID, D$delegate$lambda$lambda($this$cache));
  }
  function D$delegate$lambda$lambda($this_cache) {
    return function (i, j) {
      return i === j ? get_neighbors($this_cache.m(i)).k() : 0.0;
    };
  }
  function A$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.k();
    return BooleanMatrix_init_$Create$(tmp, VOID, A$delegate$lambda$lambda($this$cache));
  }
  function A$delegate$lambda$lambda($this_cache) {
    return function (i, j) {
      return get_neighbors($this_cache.m(i)).f1($this_cache.m(j));
    };
  }
  function A_AUG$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return get_A($this$cache).m16(get_transpose(get_A($this$cache))).m16(Companion_instance_2.d17($this$cache.k()));
  }
  function ASYMNORM$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return $this$cache.g10(ASYMNORM$delegate$lambda$lambda);
  }
  function ASYMNORM$delegate$lambda$lambda($this$vwise, v, n) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.math.sqrt' call
    var x = get_outdegree(v) * get_outdegree(n);
    return 1.0 / Math.sqrt(x);
  }
  function L$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return minus_3(get_D($this$cache), get_A($this$cache));
  }
  function I$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.k();
    var tmp_0 = $this$cache.k();
    return DoubleMatrix_init_$Create$(tmp, tmp_0, kroneckerDelta$ref());
  }
  function kroneckerDelta$ref() {
    var l = function (p0, p1) {
      return kroneckerDelta(p0, p1);
    };
    l.callableName = 'kroneckerDelta';
    return l;
  }
  function LSYMNORM$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return get_I($this$cache).l16(get_ASYMNORM($this$cache));
  }
  function ENCODED$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.toTypedArray' call
    // Inline function 'kotlin.collections.map' call
    var this_0 = $this$cache.qz();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.ENCODED$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = item.vz();
      destination.e(tmp$ret$0);
    }
    var tmp$ret$3 = copyToArray(destination);
    return toDoubleMatrix(tmp$ret$3);
  }
  function APSP$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.mutableMapOf' call
    var dist = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s = times_3($this$cache.qz(), $this$cache.qz()).h();
    while (_iterator__ex2g4s.i()) {
      var _destruct__k2r9zo = _iterator__ex2g4s.j();
      var u = _destruct__k2r9zo.ge();
      var v = _destruct__k2r9zo.he();
      // Inline function 'kotlin.collections.set' call
      var key = to(v, u);
      var value = equals(v, u) ? 0 : 2147483647;
      dist.s4(key, value);
    }
    var _iterator__ex2g4s_0 = get_adjList($this$cache).h();
    while (_iterator__ex2g4s_0.i()) {
      var e = _iterator__ex2g4s_0.j();
      // Inline function 'kotlin.collections.set' call
      var key_0 = to(get_first(e), get_second(e));
      dist.s4(key_0, 1);
    }
    $l$loop: while (true) {
      var done = true;
      var _iterator__ex2g4s_1 = times_5(times_3($this$cache.qz(), $this$cache.qz()), $this$cache.qz()).h();
      while (_iterator__ex2g4s_1.i()) {
        var _destruct__k2r9zo_0 = _iterator__ex2g4s_1.j();
        var k = _destruct__k2r9zo_0.ge();
        var i = _destruct__k2r9zo_0.he();
        var j = _destruct__k2r9zo_0.sl();
        if (ensureNotNull(dist.h2(to(i, k))) < 2147483647 ? ensureNotNull(dist.h2(to(k, j))) < 2147483647 : false) {
          var newDist = ensureNotNull(dist.h2(to(i, k))) + ensureNotNull(dist.h2(to(k, j))) | 0;
          if (newDist < ensureNotNull(dist.h2(to(i, j)))) {
            // Inline function 'kotlin.collections.set' call
            var key_1 = to(i, j);
            dist.s4(key_1, newDist);
            done = false;
          }
        }
      }
      if (done)
        break $l$loop;
    }
    return dist;
  }
  function degMap$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = $this$cache.qz();
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.degMap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_neighbors(element).k();
      result.s4(element, tmp$ret$0);
    }
    return result;
  }
  function edges$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return toSet_0(flatten(get_edgMap($this$cache).i2()));
  }
  function edgList$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var this_0 = $this$cache.qz();
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.edgList$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = get_outgoing(element);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var tmp0_iterator_0 = this_1.h();
      while (tmp0_iterator_0.i()) {
        var item = tmp0_iterator_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.edgList$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return destination;
  }
  function adjList$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_edgList($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.adjList$delegate.<anonymous>.<anonymous>' call
      var v = item.ge();
      var e = item.he();
      var tmp$ret$0 = cc(v, e.i11());
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function edgMap$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = $this$cache.qz();
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.edgMap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_outgoing(element);
      result.s4(element, tmp$ret$0);
    }
    return result;
  }
  function histogram$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var result = LinkedHashMap_init_$Create$_1(coerceAtLeast(mapCapacity(collectionSizeOrDefault($this$cache, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var tmp0_iterator = $this$cache.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.histogram$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_neighbors(element).k();
      result.s4(element, tmp$ret$0);
    }
    return result;
  }
  function graph$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return get_graph($this$cache.i11());
  }
  function graph$delegate$lambda_0($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return $this$cache.yz()($this$cache.a11(-1));
  }
  function incoming$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.get' call
    var this_0 = get_edgMap(get_graph($this$cache).kz());
    var tmp0_elvis_lhs = (isInterface(this_0, Map) ? this_0 : THROW_CCE()).h2($this$cache);
    return tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
  }
  function outgoing$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.u10();
    return toSet_0(tmp(isInterface($this$cache, IVertex) ? $this$cache : THROW_CCE()));
  }
  function neighbors$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_outgoing($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.neighbors$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = item.i11();
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function cache$lambda$lambda($fn, $y) {
    return function () {
      var tmp = $fn($y);
      return !(tmp == null) ? tmp : THROW_CCE();
    };
  }
  function cache$lambda($caller, $fn) {
    return function (y, _unused_var__etf5q3) {
      var tmp;
      if (!(y == null) ? isInterface(y, IGF) : false) {
        tmp = y.xz();
      } else {
        // Inline function 'kotlin.hashCode' call
        var tmp1_elvis_lhs = y == null ? null : hashCode(y);
        tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
      }
      var id = tmp;
      var csg = '' + id + $caller;
      var tmp_0 = get_cache();
      var tmp_1 = tmp_0.iy(csg, cache$lambda$lambda($fn, y));
      return !(tmp_1 == null) ? tmp_1 : THROW_CCE();
    };
  }
  function D$factory() {
    return getPropertyCallableRef('D', 1, KProperty1, function (receiver) {
      return get_D(receiver);
    }, null);
  }
  function A$factory() {
    return getPropertyCallableRef('A', 1, KProperty1, function (receiver) {
      return get_A(receiver);
    }, null);
  }
  function ASYMNORM$factory() {
    return getPropertyCallableRef('ASYMNORM', 1, KProperty1, function (receiver) {
      return get_ASYMNORM(receiver);
    }, null);
  }
  function I$factory() {
    return getPropertyCallableRef('I', 1, KProperty1, function (receiver) {
      return get_I(receiver);
    }, null);
  }
  function edges$factory() {
    return getPropertyCallableRef('edges', 1, KProperty1, function (receiver) {
      return get_edges(receiver);
    }, null);
  }
  function edgList$factory() {
    return getPropertyCallableRef('edgList', 1, KProperty1, function (receiver) {
      return get_edgList(receiver);
    }, null);
  }
  function adjList$factory() {
    return getPropertyCallableRef('adjList', 1, KProperty1, function (receiver) {
      return get_adjList(receiver);
    }, null);
  }
  function edgMap$factory() {
    return getPropertyCallableRef('edgMap', 1, KProperty1, function (receiver) {
      return get_edgMap(receiver);
    }, null);
  }
  function histogram$factory() {
    return getPropertyCallableRef('histogram', 1, KProperty1, function (receiver) {
      return get_histogram(receiver);
    }, null);
  }
  function graph$factory() {
    return getPropertyCallableRef('graph', 1, KProperty1, function (receiver) {
      return get_graph(receiver);
    }, null);
  }
  function outgoing$factory() {
    return getPropertyCallableRef('outgoing', 1, KProperty1, function (receiver) {
      return get_outgoing(receiver);
    }, null);
  }
  function neighbors$factory() {
    return getPropertyCallableRef('neighbors', 1, KProperty1, function (receiver) {
      return get_neighbors(receiver);
    }, null);
  }
  function hash$factory_1() {
    return getPropertyCallableRef('hash', 1, KProperty1, function (receiver) {
      return receiver.y10();
    }, null);
  }
  var properties_initialized_Graph_kt_ngaj0i;
  function _init_properties_Graph_kt__cdxgws() {
    if (!properties_initialized_Graph_kt_ngaj0i) {
      properties_initialized_Graph_kt_ngaj0i = true;
      D$delegate = cache_0(VOID, D$delegate$lambda);
      A$delegate = cache_0(VOID, A$delegate$lambda);
      A_AUG$delegate = cache_0(VOID, A_AUG$delegate$lambda);
      ASYMNORM$delegate = cache_0(VOID, ASYMNORM$delegate$lambda);
      L$delegate = cache_0(VOID, L$delegate$lambda);
      I$delegate = cache_0(VOID, I$delegate$lambda);
      LSYMNORM$delegate = cache_0(VOID, LSYMNORM$delegate$lambda);
      ENCODED$delegate = cache_0(VOID, ENCODED$delegate$lambda);
      APSP$delegate = cache_0(VOID, APSP$delegate$lambda);
      degMap$delegate = cache_0(VOID, degMap$delegate$lambda);
      edges$delegate = cache_0(VOID, edges$delegate$lambda);
      edgList$delegate = cache_0(VOID, edgList$delegate$lambda);
      adjList$delegate = cache_0(VOID, adjList$delegate$lambda);
      edgMap$delegate = cache_0(VOID, edgMap$delegate$lambda);
      histogram$delegate = cache_0(VOID, histogram$delegate$lambda);
      cache = new LRUCache();
      graph$delegate = cache_0(VOID, graph$delegate$lambda);
      graph$delegate_0 = cache_0(VOID, graph$delegate$lambda_0);
      incoming$delegate = cache_0(VOID, incoming$delegate$lambda);
      outgoing$delegate = cache_0(VOID, outgoing$delegate$lambda);
      neighbors$delegate = cache_0(VOID, neighbors$delegate$lambda);
    }
  }
  function of_0(nil, one, plus, times, minus, div) {
    this.v18_1 = nil;
    this.w18_1 = one;
    this.x18_1 = plus;
    this.y18_1 = times;
    this.z18_1 = minus;
    this.a19_1 = div;
  }
  protoOf(of_0).z16 = function () {
    return this.v18_1;
  };
  protoOf(of_0).y16 = function (_this__u8e3s4, t) {
    return this.x18_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  protoOf(of_0).b17 = function (_this__u8e3s4, t) {
    return this.y18_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  function Field() {
  }
  function of_1(nil, one, plus, times) {
    one = one === VOID ? nil : one;
    this.b19_1 = nil;
    this.c19_1 = one;
    this.d19_1 = plus;
    this.e19_1 = times;
  }
  protoOf(of_1).z16 = function () {
    return this.b19_1;
  };
  protoOf(of_1).y16 = function (_this__u8e3s4, t) {
    return this.d19_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  protoOf(of_1).b17 = function (_this__u8e3s4, t) {
    return this.e19_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  function Ring() {
  }
  //region block: post-declaration
  protoOf(AGF).G1 = G1;
  protoOf(AGF).G2 = G2;
  protoOf(AGF).G3 = G3;
  protoOf(AGF).G4 = G4;
  protoOf(Graph).m = get;
  protoOf(Graph).b10 = get_index;
  protoOf(Graph).c10 = plus_7;
  protoOf(Graph).d10 = minus_2;
  protoOf(Graph).e10 = join;
  protoOf(Graph).kz = reversed;
  protoOf(Graph).f10 = isomorphicTo;
  protoOf(Graph).g10 = vwise;
  protoOf(Graph).h10 = transitiveClosure;
  protoOf(Graph).i10 = asString;
  protoOf(LabeledGraph).yz = get_G0;
  protoOf(LabeledGraph).zz = get_E0;
  protoOf(LabeledGraph).a10 = get_V0;
  protoOf(Vertex).z10 = neighbors;
  protoOf(Vertex).a11 = neighbors$default;
  protoOf(LGVertex).yz = get_G0;
  protoOf(LGVertex).zz = get_E0;
  protoOf(LGVertex).a10 = get_V0;
  protoOf(LabeledEdge).yz = get_G0;
  protoOf(LabeledEdge).zz = get_E0;
  protoOf(LabeledEdge).a10 = get_V0;
  protoOf(AbstractMatrix).v16 = shape;
  protoOf(AbstractMatrix).dy = get_0;
  protoOf(AbstractMatrix).m = get_1;
  protoOf(AbstractMatrix).m16 = plus_8;
  protoOf(AbstractMatrix).gx = new$default;
  protoOf(AbstractMatrix).w16 = safeJoin;
  protoOf(AbstractMatrix).x16 = safeJoin$default;
  //endregion
  //region block: init
  maxTrees = 100000;
  MAX_SORT_CAPACITY = 50;
  Companion_instance_0 = new Companion_0();
  Companion_instance_1 = new Companion_1();
  Companion_instance_2 = new Companion_2();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = enumSeqSmart;
  _.$_$.b = parseCFG;
  _.$_$.c = parse;
  _.$_$.d = repairSeq;
  _.$_$.e = tokenizeByWhitespace;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-kotlin-stdlib.js":
/*!****************************************!*\
  !*** ./kotlin/kotlin-kotlin-stdlib.js ***!
  \****************************************/
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//region block: polyfills
if (typeof Math.imul === 'undefined') {
  Math.imul = function imul(a, b) {
    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;
  };
}
if (typeof ArrayBuffer.isView === 'undefined') {
  ArrayBuffer.isView = function (a) {
    return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
  };
}
if (typeof Array.prototype.fill === 'undefined') {
  // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill
  Object.defineProperty(Array.prototype, 'fill', {value: function (value) {
    // Steps 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }
    var O = Object(this); // Steps 3-5.
    var len = O.length >>> 0; // Steps 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0; // Step 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0; // Step 11.
    var finalValue = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 12.
    while (k < finalValue) {
      O[k] = value;
      k++;
    }
    ; // Step 13.
    return O;
  }});
}
[Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array].forEach(function (TypedArray) {
  if (typeof TypedArray.prototype.fill === 'undefined') {
    Object.defineProperty(TypedArray.prototype, 'fill', {value: Array.prototype.fill});
  }
});
if (typeof Math.log2 === 'undefined') {
  Math.log2 = function (x) {
    return Math.log(x) * Math.LOG2E;
  };
}
if (typeof Math.tanh === 'undefined') {
  var epsilon = 2.220446049250313E-16;
  var taylor_2_bound = Math.sqrt(epsilon);
  var taylor_n_bound = Math.sqrt(taylor_2_bound);
  Math.tanh = function (x) {
    if (Math.abs(x) < taylor_n_bound) {
      var result = x;
      if (Math.abs(x) > taylor_2_bound) {
        result -= x * x * x / 3;
      }
      return result;
    } else {
      var a = Math.exp(+x), b = Math.exp(-x);
      return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);
    }
  };
}
if (typeof Math.log10 === 'undefined') {
  Math.log10 = function (x) {
    return Math.log(x) * Math.LOG10E;
  };
}
if (typeof Math.clz32 === 'undefined') {
  Math.clz32 = function (log, LN2) {
    return function (x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log(asUint) / LN2 | 0) | 0; // the "| 0" acts like math.floor
    };
  }(Math.log, Math.LN2);
}
//endregion
(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var isView = ArrayBuffer.isView;
  var clz32 = Math.clz32;
  //endregion
  //region block: pre-declaration
  setMetadataFor(CharSequence, 'CharSequence', interfaceMeta);
  setMetadataFor(Comparable, 'Comparable', interfaceMeta);
  setMetadataFor(Number_0, 'Number', classMeta);
  setMetadataFor(Unit, 'Unit', objectMeta);
  setMetadataFor(_no_name_provided__qut3iv, VOID, classMeta);
  setMetadataFor(_no_name_provided__qut3iv_0, VOID, classMeta);
  setMetadataFor(_no_name_provided__qut3iv_1, VOID, classMeta);
  setMetadataFor(Companion, 'Companion', objectMeta);
  setMetadataFor(Char, 'Char', classMeta, VOID, [Comparable]);
  setMetadataFor(Collection, 'Collection', interfaceMeta);
  setMetadataFor(List, 'List', interfaceMeta, VOID, [Collection]);
  setMetadataFor(Entry, 'Entry', interfaceMeta);
  setMetadataFor(Map_0, 'Map', interfaceMeta);
  setMetadataFor(Set, 'Set', interfaceMeta, VOID, [Collection]);
  setMetadataFor(MutableIterable, 'MutableIterable', interfaceMeta);
  setMetadataFor(Companion_0, 'Companion', objectMeta);
  setMetadataFor(Enum, 'Enum', classMeta, VOID, [Comparable]);
  setMetadataFor(Companion_1, 'Companion', objectMeta);
  setMetadataFor(Long, 'Long', classMeta, Number_0, [Number_0, Comparable]);
  setMetadataFor(arrayIterator$1, VOID, classMeta);
  setMetadataFor(Digit, 'Digit', objectMeta);
  setMetadataFor(AbstractCollection, 'AbstractCollection', classMeta, VOID, [Collection]);
  setMetadataFor(AbstractList, 'AbstractList', classMeta, AbstractCollection, [AbstractCollection, List]);
  setMetadataFor(RandomAccess, 'RandomAccess', interfaceMeta);
  setMetadataFor(asList$1, VOID, classMeta, AbstractList, [AbstractList, RandomAccess]);
  setMetadataFor(Comparator, 'Comparator', interfaceMeta);
  setMetadataFor(AbstractMutableCollection, 'AbstractMutableCollection', classMeta, AbstractCollection, [AbstractCollection, Collection, MutableIterable]);
  setMetadataFor(IteratorImpl, 'IteratorImpl', classMeta);
  setMetadataFor(ListIteratorImpl, 'ListIteratorImpl', classMeta, IteratorImpl);
  setMetadataFor(AbstractMutableList, 'AbstractMutableList', classMeta, AbstractMutableCollection, [AbstractMutableCollection, Collection, List, MutableIterable]);
  setMetadataFor(SubList, 'SubList', classMeta, AbstractMutableList, [AbstractMutableList, RandomAccess]);
  setMetadataFor(AbstractMap, 'AbstractMap', classMeta, VOID, [Map_0]);
  setMetadataFor(AbstractMutableMap, 'AbstractMutableMap', classMeta, AbstractMap, [AbstractMap, Map_0]);
  setMetadataFor(AbstractMutableSet, 'AbstractMutableSet', classMeta, AbstractMutableCollection, [AbstractMutableCollection, Collection, MutableIterable, Set]);
  setMetadataFor(Companion_2, 'Companion', objectMeta);
  setMetadataFor(ArrayList, 'ArrayList', classMeta, AbstractMutableList, [AbstractMutableList, Collection, List, MutableIterable, RandomAccess], ArrayList_init_$Create$);
  setMetadataFor(HashMap, 'HashMap', classMeta, AbstractMutableMap, [AbstractMutableMap, Map_0], HashMap_init_$Create$);
  setMetadataFor(HashMapValues, 'HashMapValues', classMeta, AbstractMutableCollection, [Collection, MutableIterable, AbstractMutableCollection]);
  setMetadataFor(HashMapEntrySetBase, 'HashMapEntrySetBase', classMeta, AbstractMutableSet, [Collection, MutableIterable, Set, AbstractMutableSet]);
  setMetadataFor(HashMapEntrySet, 'HashMapEntrySet', classMeta, HashMapEntrySetBase);
  setMetadataFor(HashMapValuesDefault$iterator$1, VOID, classMeta);
  setMetadataFor(HashMapValuesDefault, 'HashMapValuesDefault', classMeta, AbstractMutableCollection);
  setMetadataFor(HashSet, 'HashSet', classMeta, AbstractMutableSet, [AbstractMutableSet, Collection, MutableIterable, Set], HashSet_init_$Create$);
  setMetadataFor(Companion_3, 'Companion', objectMeta);
  setMetadataFor(Itr, 'Itr', classMeta);
  setMetadataFor(KeysItr, 'KeysItr', classMeta, Itr);
  setMetadataFor(ValuesItr, 'ValuesItr', classMeta, Itr);
  setMetadataFor(EntriesItr, 'EntriesItr', classMeta, Itr);
  setMetadataFor(EntryRef, 'EntryRef', classMeta, VOID, [Entry]);
  function containsAllEntries(m) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(m, Collection)) {
        tmp = m.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = m.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.InternalMap.containsAllEntries.<anonymous>' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var entry = element;
        var tmp_0;
        if (!(entry == null) ? isInterface(entry, Entry) : false) {
          tmp_0 = this.q7(entry);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  setMetadataFor(InternalMap, 'InternalMap', interfaceMeta);
  setMetadataFor(InternalHashMap, 'InternalHashMap', classMeta, VOID, [InternalMap], InternalHashMap_init_$Create$);
  setMetadataFor(LinkedHashMap, 'LinkedHashMap', classMeta, HashMap, [HashMap, Map_0], LinkedHashMap_init_$Create$);
  setMetadataFor(LinkedHashSet, 'LinkedHashSet', classMeta, HashSet, [HashSet, Collection, MutableIterable, Set], LinkedHashSet_init_$Create$);
  setMetadataFor(BaseOutput, 'BaseOutput', classMeta);
  setMetadataFor(NodeJsOutput, 'NodeJsOutput', classMeta, BaseOutput);
  setMetadataFor(BufferedOutput, 'BufferedOutput', classMeta, BaseOutput, VOID, BufferedOutput);
  setMetadataFor(BufferedOutputToConsoleLog, 'BufferedOutputToConsoleLog', classMeta, BufferedOutput, VOID, BufferedOutputToConsoleLog);
  setMetadataFor(Continuation, 'Continuation', interfaceMeta);
  setMetadataFor(CoroutineImpl, 'CoroutineImpl', classMeta, VOID, [Continuation]);
  setMetadataFor(CompletedContinuation, 'CompletedContinuation', objectMeta, VOID, [Continuation]);
  setMetadataFor(Exception, 'Exception', classMeta, Error, VOID, Exception_init_$Create$);
  setMetadataFor(RuntimeException, 'RuntimeException', classMeta, Exception, VOID, RuntimeException_init_$Create$);
  setMetadataFor(IllegalStateException, 'IllegalStateException', classMeta, RuntimeException, VOID, IllegalStateException_init_$Create$);
  setMetadataFor(CancellationException, 'CancellationException', classMeta, IllegalStateException, VOID, CancellationException_init_$Create$);
  setMetadataFor(_no_name_provided__qut3iv_2, VOID, classMeta, CoroutineImpl);
  setMetadataFor(IllegalArgumentException, 'IllegalArgumentException', classMeta, RuntimeException, VOID, IllegalArgumentException_init_$Create$);
  setMetadataFor(IndexOutOfBoundsException, 'IndexOutOfBoundsException', classMeta, RuntimeException, VOID, IndexOutOfBoundsException_init_$Create$);
  setMetadataFor(UnsupportedOperationException, 'UnsupportedOperationException', classMeta, RuntimeException, VOID, UnsupportedOperationException_init_$Create$);
  setMetadataFor(NoSuchElementException, 'NoSuchElementException', classMeta, RuntimeException, VOID, NoSuchElementException_init_$Create$);
  setMetadataFor(Error_0, 'Error', classMeta, Error, VOID, Error_init_$Create$);
  setMetadataFor(ClassCastException, 'ClassCastException', classMeta, RuntimeException, VOID, ClassCastException_init_$Create$);
  setMetadataFor(ArithmeticException, 'ArithmeticException', classMeta, RuntimeException, VOID, ArithmeticException_init_$Create$);
  setMetadataFor(NumberFormatException, 'NumberFormatException', classMeta, IllegalArgumentException, VOID, NumberFormatException_init_$Create$);
  setMetadataFor(AssertionError, 'AssertionError', classMeta, Error_0, VOID, AssertionError_init_$Create$);
  setMetadataFor(ConcurrentModificationException, 'ConcurrentModificationException', classMeta, RuntimeException, VOID, ConcurrentModificationException_init_$Create$);
  setMetadataFor(NullPointerException, 'NullPointerException', classMeta, RuntimeException, VOID, NullPointerException_init_$Create$);
  setMetadataFor(NoWhenBranchMatchedException, 'NoWhenBranchMatchedException', classMeta, RuntimeException, VOID, NoWhenBranchMatchedException_init_$Create$);
  setMetadataFor(UninitializedPropertyAccessException, 'UninitializedPropertyAccessException', classMeta, RuntimeException, VOID, UninitializedPropertyAccessException_init_$Create$);
  setMetadataFor(KClass, 'KClass', interfaceMeta);
  setMetadataFor(KClassImpl, 'KClassImpl', classMeta, VOID, [KClass]);
  setMetadataFor(NothingKClassImpl, 'NothingKClassImpl', objectMeta, KClassImpl);
  setMetadataFor(ErrorKClass, 'ErrorKClass', classMeta, VOID, [KClass], ErrorKClass);
  setMetadataFor(PrimitiveKClassImpl, 'PrimitiveKClassImpl', classMeta, KClassImpl);
  setMetadataFor(SimpleKClassImpl, 'SimpleKClassImpl', classMeta, KClassImpl);
  setMetadataFor(KProperty1, 'KProperty1', interfaceMeta);
  setMetadataFor(KProperty0, 'KProperty0', interfaceMeta);
  setMetadataFor(PrimitiveClasses, 'PrimitiveClasses', objectMeta);
  setMetadataFor(ConstrainedOnceSequence, 'ConstrainedOnceSequence', classMeta);
  setMetadataFor(StringBuilder, 'StringBuilder', classMeta, VOID, [CharSequence], StringBuilder_init_$Create$_1);
  setMetadataFor(Companion_4, 'Companion', objectMeta);
  setMetadataFor(Regex, 'Regex', classMeta);
  setMetadataFor(MatchGroup, 'MatchGroup', classMeta);
  setMetadataFor(findNext$1$groups$1, VOID, classMeta, AbstractCollection, [Collection, AbstractCollection]);
  setMetadataFor(findNext$1, VOID, classMeta);
  setMetadataFor(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(ExceptionTraceBuilder, 'ExceptionTraceBuilder', classMeta, VOID, VOID, ExceptionTraceBuilder);
  setMetadataFor(DurationUnit, 'DurationUnit', classMeta, Enum);
  setMetadataFor(MonotonicTimeSource, 'MonotonicTimeSource', objectMeta);
  setMetadataFor(Reading, 'Reading', classMeta);
  setMetadataFor(HrTimeSource, 'HrTimeSource', classMeta);
  setMetadataFor(PerformanceTimeSource, 'PerformanceTimeSource', classMeta);
  setMetadataFor(DateNowTimeSource, 'DateNowTimeSource', objectMeta);
  setMetadataFor(AbstractIterator, 'AbstractIterator', classMeta);
  setMetadataFor(SubList_0, 'SubList', classMeta, AbstractList, [AbstractList, RandomAccess]);
  setMetadataFor(IteratorImpl_0, 'IteratorImpl', classMeta);
  setMetadataFor(ListIteratorImpl_0, 'ListIteratorImpl', classMeta, IteratorImpl_0);
  setMetadataFor(Companion_5, 'Companion', objectMeta);
  setMetadataFor(AbstractMap$values$1$iterator$1, VOID, classMeta);
  setMetadataFor(Companion_6, 'Companion', objectMeta);
  setMetadataFor(AbstractMap$values$1, VOID, classMeta, AbstractCollection);
  setMetadataFor(Companion_7, 'Companion', objectMeta);
  setMetadataFor(Companion_8, 'Companion', objectMeta);
  setMetadataFor(ArrayDeque, 'ArrayDeque', classMeta, AbstractMutableList, VOID, ArrayDeque_init_$Create$);
  setMetadataFor(EmptyList, 'EmptyList', objectMeta, VOID, [List, RandomAccess]);
  setMetadataFor(ArrayAsCollection, 'ArrayAsCollection', classMeta, VOID, [Collection]);
  setMetadataFor(EmptyIterator, 'EmptyIterator', objectMeta);
  setMetadataFor(IndexedValue, 'IndexedValue', classMeta);
  setMetadataFor(EmptyMap, 'EmptyMap', objectMeta, VOID, [Map_0]);
  setMetadataFor(IntIterator, 'IntIterator', classMeta);
  setMetadataFor(CharIterator, 'CharIterator', classMeta);
  setMetadataFor(SequenceScope, 'SequenceScope', classMeta, VOID, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(SequenceBuilderIterator, 'SequenceBuilderIterator', classMeta, SequenceScope, [SequenceScope, Continuation], SequenceBuilderIterator, VOID, VOID, [1]);
  setMetadataFor(_no_name_provided__qut3iv_3, VOID, classMeta);
  setMetadataFor(TransformingSequence$iterator$1, VOID, classMeta);
  setMetadataFor(TransformingSequence, 'TransformingSequence', classMeta);
  setMetadataFor(DistinctSequence, 'DistinctSequence', classMeta);
  setMetadataFor(FilteringSequence$iterator$1, VOID, classMeta);
  setMetadataFor(FilteringSequence, 'FilteringSequence', classMeta);
  setMetadataFor(MergingSequence$iterator$1, VOID, classMeta);
  setMetadataFor(MergingSequence, 'MergingSequence', classMeta);
  setMetadataFor(FlatteningSequence$iterator$1, VOID, classMeta);
  setMetadataFor(FlatteningSequence, 'FlatteningSequence', classMeta);
  setMetadataFor(DropTakeSequence, 'DropTakeSequence', interfaceMeta);
  setMetadataFor(TakeSequence$iterator$1, VOID, classMeta);
  setMetadataFor(TakeSequence, 'TakeSequence', classMeta, VOID, [DropTakeSequence]);
  setMetadataFor(GeneratorSequence$iterator$1, VOID, classMeta);
  setMetadataFor(GeneratorSequence, 'GeneratorSequence', classMeta);
  setMetadataFor(EmptySequence, 'EmptySequence', objectMeta, VOID, [DropTakeSequence]);
  setMetadataFor(DistinctIterator, 'DistinctIterator', classMeta, AbstractIterator);
  setMetadataFor(TakeWhileSequence$iterator$1, VOID, classMeta);
  setMetadataFor(TakeWhileSequence, 'TakeWhileSequence', classMeta);
  setMetadataFor(IndexingSequence$iterator$1, VOID, classMeta);
  setMetadataFor(IndexingSequence, 'IndexingSequence', classMeta);
  setMetadataFor(shuffled$slambda, 'shuffled$slambda', classMeta, CoroutineImpl, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(EmptySet, 'EmptySet', objectMeta, VOID, [Set]);
  setMetadataFor(RingBuffer$iterator$1, VOID, classMeta, AbstractIterator);
  setMetadataFor(RingBuffer, 'RingBuffer', classMeta, AbstractList, [AbstractList, RandomAccess]);
  setMetadataFor(windowedIterator$slambda, 'windowedIterator$slambda', classMeta, CoroutineImpl, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(NaturalOrderComparator, 'NaturalOrderComparator', objectMeta, VOID, [Comparator]);
  setMetadataFor(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', classMeta, VOID, [Comparator]);
  setMetadataFor(Key, 'Key', objectMeta);
  function plus(context) {
    var tmp;
    if (context === EmptyCoroutineContext_getInstance()) {
      tmp = this;
    } else {
      tmp = context.dj(this, CoroutineContext$plus$lambda);
    }
    return tmp;
  }
  setMetadataFor(CoroutineContext, 'CoroutineContext', interfaceMeta);
  function get(key) {
    var tmp;
    if (equals(this.d2(), key)) {
      tmp = isInterface(this, Element) ? this : THROW_CCE();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function fold(initial, operation) {
    return operation(initial, this);
  }
  function minusKey(key) {
    return equals(this.d2(), key) ? EmptyCoroutineContext_getInstance() : this;
  }
  setMetadataFor(Element, 'Element', interfaceMeta, VOID, [CoroutineContext]);
  function releaseInterceptedContinuation(continuation) {
  }
  function get_0(key) {
    if (key instanceof AbstractCoroutineContextKey) {
      var tmp;
      if (key.bj(this.d2())) {
        var tmp_0 = key.aj(this);
        tmp = (!(tmp_0 == null) ? isInterface(tmp_0, Element) : false) ? tmp_0 : null;
      } else {
        tmp = null;
      }
      return tmp;
    }
    var tmp_1;
    if (Key_instance === key) {
      tmp_1 = isInterface(this, Element) ? this : THROW_CCE();
    } else {
      tmp_1 = null;
    }
    return tmp_1;
  }
  function minusKey_0(key) {
    if (key instanceof AbstractCoroutineContextKey) {
      return (key.bj(this.d2()) ? !(key.aj(this) == null) : false) ? EmptyCoroutineContext_getInstance() : this;
    }
    return Key_instance === key ? EmptyCoroutineContext_getInstance() : this;
  }
  setMetadataFor(ContinuationInterceptor, 'ContinuationInterceptor', interfaceMeta, VOID, [Element]);
  setMetadataFor(EmptyCoroutineContext, 'EmptyCoroutineContext', objectMeta, VOID, [CoroutineContext]);
  setMetadataFor(CombinedContext, 'CombinedContext', classMeta, VOID, [CoroutineContext]);
  setMetadataFor(AbstractCoroutineContextKey, 'AbstractCoroutineContextKey', classMeta);
  setMetadataFor(AbstractCoroutineContextElement, 'AbstractCoroutineContextElement', classMeta, VOID, [Element]);
  setMetadataFor(CoroutineSingletons, 'CoroutineSingletons', classMeta, Enum);
  setMetadataFor(Random, 'Random', classMeta);
  setMetadataFor(Default, 'Default', objectMeta, Random);
  setMetadataFor(Companion_9, 'Companion', objectMeta);
  setMetadataFor(XorWowRandom, 'XorWowRandom', classMeta, Random);
  setMetadataFor(Companion_10, 'Companion', objectMeta);
  setMetadataFor(IntProgression, 'IntProgression', classMeta);
  setMetadataFor(IntRange, 'IntRange', classMeta, IntProgression);
  setMetadataFor(Companion_11, 'Companion', objectMeta);
  setMetadataFor(CharProgression, 'CharProgression', classMeta);
  setMetadataFor(CharRange, 'CharRange', classMeta, CharProgression);
  setMetadataFor(IntProgressionIterator, 'IntProgressionIterator', classMeta, IntIterator);
  setMetadataFor(CharProgressionIterator, 'CharProgressionIterator', classMeta, CharIterator);
  setMetadataFor(Companion_12, 'Companion', objectMeta);
  setMetadataFor(Companion_13, 'Companion', objectMeta);
  setMetadataFor(DelimitedRangesSequence$iterator$1, VOID, classMeta);
  setMetadataFor(DelimitedRangesSequence, 'DelimitedRangesSequence', classMeta);
  setMetadataFor(Companion_14, 'Companion', objectMeta);
  setMetadataFor(Duration, 'Duration', classMeta, VOID, [Comparable]);
  function compareTo(other) {
    return Duration__compareTo_impl_pchp0f(this.il(other), Companion_getInstance_14().oc_1);
  }
  setMetadataFor(ComparableTimeMark, 'ComparableTimeMark', interfaceMeta, VOID, [Comparable]);
  setMetadataFor(ValueTimeMark, 'ValueTimeMark', classMeta, VOID, [ComparableTimeMark]);
  setMetadataFor(Monotonic, 'Monotonic', objectMeta);
  setMetadataFor(TimedValue, 'TimedValue', classMeta);
  setMetadataFor(UnsafeLazyImpl, 'UnsafeLazyImpl', classMeta);
  setMetadataFor(UNINITIALIZED_VALUE, 'UNINITIALIZED_VALUE', objectMeta);
  setMetadataFor(Companion_15, 'Companion', objectMeta);
  setMetadataFor(Failure, 'Failure', classMeta);
  setMetadataFor(NotImplementedError, 'NotImplementedError', classMeta, Error_0, VOID, NotImplementedError);
  setMetadataFor(Pair, 'Pair', classMeta);
  setMetadataFor(Triple, 'Triple', classMeta);
  setMetadataFor(UByte, 'UByte', classMeta, VOID, [Comparable]);
  setMetadataFor(Companion_16, 'Companion', objectMeta);
  setMetadataFor(UInt, 'UInt', classMeta, VOID, [Comparable]);
  setMetadataFor(Iterator, 'Iterator', classMeta);
  setMetadataFor(UIntArray, 'UIntArray', classMeta, VOID, [Collection]);
  setMetadataFor(Companion_17, 'Companion', objectMeta);
  setMetadataFor(ULong, 'ULong', classMeta, VOID, [Comparable]);
  setMetadataFor(Iterator_0, 'Iterator', classMeta);
  setMetadataFor(ULongArray, 'ULongArray', classMeta, VOID, [Collection]);
  setMetadataFor(Companion_18, 'Companion', objectMeta);
  setMetadataFor(ULongProgression, 'ULongProgression', classMeta);
  setMetadataFor(ULongRange, 'ULongRange', classMeta, ULongProgression);
  setMetadataFor(Companion_19, 'Companion', objectMeta);
  setMetadataFor(ULongProgressionIterator, 'ULongProgressionIterator', classMeta);
  setMetadataFor(UShort, 'UShort', classMeta, VOID, [Comparable]);
  //endregion
  function CharSequence() {
  }
  function Comparable() {
  }
  function Number_0() {
  }
  function Unit() {
  }
  protoOf(Unit).toString = function () {
    return 'kotlin.Unit';
  };
  var Unit_instance;
  function Unit_getInstance() {
    return Unit_instance;
  }
  function toList(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptyList();
      case 1:
        return listOf(_this__u8e3s4[0]);
      default:
        return toMutableList(_this__u8e3s4);
    }
  }
  function toSet(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptySet();
      case 1:
        return setOf(new Char(_this__u8e3s4[0]));
      default:
        return toCollection(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(coerceAtMost(_this__u8e3s4.length, 128))));
    }
  }
  function toSet_0(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptySet();
      case 1:
        return setOf(_this__u8e3s4[0]);
      default:
        return toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.length)));
    }
  }
  function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function toDoubleArray(_this__u8e3s4) {
    var tmp = 0;
    var tmp_0 = _this__u8e3s4.length;
    var tmp_1 = new Float64Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = _this__u8e3s4[tmp_2];
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function toMutableList(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(asCollection(_this__u8e3s4));
  }
  function toCollection(_this__u8e3s4, destination) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    while (inductionVariable < last) {
      var item = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.e(new Char(item));
    }
    return destination;
  }
  function toCollection_0(_this__u8e3s4, destination) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    while (inductionVariable < last) {
      var item = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.e(item);
    }
    return destination;
  }
  function joinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.f(prefix);
    var count = 0;
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    $l$loop: while (inductionVariable < last) {
      var element = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      count = count + 1 | 0;
      if (count > 1) {
        buffer.f(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.f(truncated);
    }
    buffer.f(postfix);
    return buffer;
  }
  function get_lastIndex(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function contains(_this__u8e3s4, element) {
    return indexOf(_this__u8e3s4, element) >= 0;
  }
  function contains_0(_this__u8e3s4, element) {
    return indexOf_0(_this__u8e3s4, element) >= 0;
  }
  function contains_1(_this__u8e3s4, element) {
    return indexOf_1(_this__u8e3s4, element) >= 0;
  }
  function single(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.length) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('Array is empty.');
      case 1:
        tmp = _this__u8e3s4[0];
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('Array has more than one element.');
    }
    return tmp;
  }
  function asSequence(_this__u8e3s4) {
    // Inline function 'kotlin.collections.isEmpty' call
    if (_this__u8e3s4.length === 0)
      return emptySequence();
    // Inline function 'kotlin.sequences.Sequence' call
    return new _no_name_provided__qut3iv(_this__u8e3s4);
  }
  function indexOf(_this__u8e3s4, element) {
    if (element == null) {
      var inductionVariable = 0;
      var last = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (_this__u8e3s4[index] == null) {
            return index;
          }
        }
         while (inductionVariable <= last);
    } else {
      var inductionVariable_0 = 0;
      var last_0 = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals(element, _this__u8e3s4[index_0])) {
            return index_0;
          }
        }
         while (inductionVariable_0 <= last_0);
    }
    return -1;
  }
  function indexOf_0(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element.equals(_this__u8e3s4[index])) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function indexOf_1(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element === _this__u8e3s4[index]) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function _no_name_provided__qut3iv($this_asSequence) {
    this.g_1 = $this_asSequence;
  }
  protoOf(_no_name_provided__qut3iv).h = function () {
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    return arrayIterator(this.g_1);
  };
  function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.f(prefix);
    var count = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    $l$loop: while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      count = count + 1 | 0;
      if (count > 1) {
        buffer.f(separator);
      }
      if (limit < 0 ? true : count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 ? count > limit : false) {
      buffer.f(truncated);
    }
    buffer.f(postfix);
    return buffer;
  }
  function toIntArray(_this__u8e3s4) {
    var result = new Int32Array(_this__u8e3s4.k());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function first(_this__u8e3s4) {
    if (_this__u8e3s4.l())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.m(0);
  }
  function toMutableList_0(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(_this__u8e3s4);
  }
  function plus_0(_this__u8e3s4, elements) {
    if (isInterface(elements, Collection)) {
      var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + elements.k() | 0);
      result.q(_this__u8e3s4);
      result.q(elements);
      return result;
    } else {
      var result_0 = ArrayList_init_$Create$_1(_this__u8e3s4);
      addAll(result_0, elements);
      return result_0;
    }
  }
  function chunked(_this__u8e3s4, size) {
    return windowed(_this__u8e3s4, size, size, true);
  }
  function takeLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.takeLast.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    if (n === 0)
      return emptyList();
    var size = _this__u8e3s4.k();
    if (n >= size)
      return toList_0(_this__u8e3s4);
    if (n === 1)
      return listOf(last(_this__u8e3s4));
    var list = ArrayList_init_$Create$_0(n);
    if (isInterface(_this__u8e3s4, RandomAccess)) {
      var inductionVariable = size - n | 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          list.e(_this__u8e3s4.m(index));
        }
         while (inductionVariable < size);
    } else {
      // Inline function 'kotlin.collections.iterator' call
      var tmp1_iterator = _this__u8e3s4.r(size - n | 0);
      while (tmp1_iterator.i()) {
        var item = tmp1_iterator.j();
        list.e(item);
      }
    }
    return list;
  }
  function toList_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
        case 0:
          tmp = emptyList();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List)) {
            tmp_0 = _this__u8e3s4.m(0);
          } else {
            tmp_0 = _this__u8e3s4.h().j();
          }

          tmp = listOf(tmp_0);
          break;
        default:
          tmp = toMutableList_0(_this__u8e3s4);
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyList(toMutableList_1(_this__u8e3s4));
  }
  function drop(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.drop.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    if (n === 0)
      return toList_0(_this__u8e3s4);
    var list;
    if (isInterface(_this__u8e3s4, Collection)) {
      var resultSize = _this__u8e3s4.k() - n | 0;
      if (resultSize <= 0)
        return emptyList();
      if (resultSize === 1)
        return listOf(last_0(_this__u8e3s4));
      list = ArrayList_init_$Create$_0(resultSize);
      if (isInterface(_this__u8e3s4, List)) {
        if (isInterface(_this__u8e3s4, RandomAccess)) {
          var inductionVariable = n;
          var last = _this__u8e3s4.k();
          if (inductionVariable < last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              list.e(_this__u8e3s4.m(index));
            }
             while (inductionVariable < last);
        } else {
          // Inline function 'kotlin.collections.iterator' call
          var tmp1_iterator = _this__u8e3s4.r(n);
          while (tmp1_iterator.i()) {
            var item = tmp1_iterator.j();
            list.e(item);
          }
        }
        return list;
      }
    } else {
      list = ArrayList_init_$Create$();
    }
    var count = 0;
    var tmp2_iterator = _this__u8e3s4.h();
    while (tmp2_iterator.i()) {
      var item_0 = tmp2_iterator.j();
      if (count >= n) {
        list.e(item_0);
      } else {
        count = count + 1 | 0;
      }
    }
    return optimizeReadOnlyList(list);
  }
  function dropLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.dropLast.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return take(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.k() - n | 0, 0));
  }
  function toSet_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
        case 0:
          tmp = emptySet();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List)) {
            tmp_0 = _this__u8e3s4.m(0);
          } else {
            tmp_0 = _this__u8e3s4.h().j();
          }

          tmp = setOf(tmp_0);
          break;
        default:
          tmp = toCollection_1(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.k())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlySet(toCollection_1(_this__u8e3s4, LinkedHashSet_init_$Create$()));
  }
  function firstOrNull(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, List)) {
      if (_this__u8e3s4.l())
        return null;
      else
        return _this__u8e3s4.m(0);
    } else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        return null;
      return iterator.j();
    }
  }
  function plus_1(_this__u8e3s4, elements) {
    var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + elements.length | 0);
    result.q(_this__u8e3s4);
    addAll_0(result, elements);
    return result;
  }
  function zip(_this__u8e3s4, other) {
    // Inline function 'kotlin.collections.zip' call
    var first = _this__u8e3s4.h();
    var second = other.h();
    // Inline function 'kotlin.comparisons.minOf' call
    var a = collectionSizeOrDefault(_this__u8e3s4, 10);
    var b = collectionSizeOrDefault(other, 10);
    var tmp$ret$0 = Math.min(a, b);
    var list = ArrayList_init_$Create$_0(tmp$ret$0);
    while (first.i() ? second.i() : false) {
      // Inline function 'kotlin.collections.zip.<anonymous>' call
      var t1 = first.j();
      var t2 = second.j();
      var tmp$ret$1 = to(t1, t2);
      list.e(tmp$ret$1);
    }
    return list;
  }
  function intersect(_this__u8e3s4, other) {
    var set = toMutableSet(_this__u8e3s4);
    retainAll_0(set, other);
    return set;
  }
  function plus_2(_this__u8e3s4, element) {
    var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + 1 | 0);
    result.q(_this__u8e3s4);
    result.e(element);
    return result;
  }
  function last(_this__u8e3s4) {
    if (_this__u8e3s4.l())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.m(get_lastIndex_0(_this__u8e3s4));
  }
  function toMutableSet(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = LinkedHashSet_init_$Create$_0(_this__u8e3s4);
    } else {
      tmp = toCollection_1(_this__u8e3s4, LinkedHashSet_init_$Create$());
    }
    return tmp;
  }
  function first_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, List))
      return first(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      return iterator.j();
    }
  }
  function distinct(_this__u8e3s4) {
    return toList_0(toMutableSet(_this__u8e3s4));
  }
  function asSequence_0(_this__u8e3s4) {
    // Inline function 'kotlin.sequences.Sequence' call
    return new _no_name_provided__qut3iv_0(_this__u8e3s4);
  }
  function toBooleanArray(_this__u8e3s4) {
    var result = booleanArray(_this__u8e3s4.k());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function plus_3(_this__u8e3s4, elements) {
    if (isInterface(_this__u8e3s4, Collection))
      return plus_0(_this__u8e3s4, elements);
    var result = ArrayList_init_$Create$();
    addAll(result, _this__u8e3s4);
    addAll(result, elements);
    return result;
  }
  function take(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.take.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    if (n === 0)
      return emptyList();
    if (isInterface(_this__u8e3s4, Collection)) {
      if (n >= _this__u8e3s4.k())
        return toList_0(_this__u8e3s4);
      if (n === 1)
        return listOf(first_0(_this__u8e3s4));
    }
    var count = 0;
    var list = ArrayList_init_$Create$_0(n);
    var tmp0_iterator = _this__u8e3s4.h();
    $l$loop: while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      list.e(item);
      count = count + 1 | 0;
      if (count === n)
        break $l$loop;
    }
    return optimizeReadOnlyList(list);
  }
  function windowed(_this__u8e3s4, size, step, partialWindows) {
    step = step === VOID ? 1 : step;
    partialWindows = partialWindows === VOID ? false : partialWindows;
    checkWindowSizeStep(size, step);
    var tmp;
    if (isInterface(_this__u8e3s4, RandomAccess)) {
      tmp = isInterface(_this__u8e3s4, List);
    } else {
      tmp = false;
    }
    if (tmp) {
      var thisSize = _this__u8e3s4.k();
      var resultCapacity = (thisSize / step | 0) + ((thisSize % step | 0) === 0 ? 0 : 1) | 0;
      var result = ArrayList_init_$Create$_0(resultCapacity);
      var index = 0;
      $l$loop: while (0 <= index ? index < thisSize : false) {
        var windowSize = coerceAtMost(size, thisSize - index | 0);
        if (windowSize < size ? !partialWindows : false)
          break $l$loop;
        // Inline function 'kotlin.collections.List' call
        // Inline function 'kotlin.collections.MutableList' call
        var list = ArrayList_init_$Create$_0(windowSize);
        // Inline function 'kotlin.repeat' call
        // Inline function 'kotlin.contracts.contract' call
        var inductionVariable = 0;
        if (inductionVariable < windowSize)
          do {
            var index_0 = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.collections.MutableList.<anonymous>' call
            // Inline function 'kotlin.collections.windowed.<anonymous>' call
            var tmp$ret$0 = _this__u8e3s4.m(index_0 + index | 0);
            list.e(tmp$ret$0);
          }
           while (inductionVariable < windowSize);
        result.e(list);
        index = index + step | 0;
      }
      return result;
    }
    var result_0 = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var tmp0_iterator = windowedIterator(_this__u8e3s4.h(), size, step, partialWindows, false);
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      // Inline function 'kotlin.collections.windowed.<anonymous>' call
      result_0.e(element);
    }
    return result_0;
  }
  function firstOrNull_0(_this__u8e3s4) {
    return _this__u8e3s4.l() ? null : _this__u8e3s4.m(0);
  }
  function minus(_this__u8e3s4, element) {
    var result = ArrayList_init_$Create$_0(collectionSizeOrDefault(_this__u8e3s4, 10));
    var removed = false;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element_0 = tmp0_iterator.j();
      // Inline function 'kotlin.collections.minus.<anonymous>' call
      var tmp;
      if (!removed ? equals(element_0, element) : false) {
        removed = true;
        tmp = false;
      } else {
        tmp = true;
      }
      if (tmp) {
        result.e(element_0);
      }
    }
    return result;
  }
  function toDoubleArray_0(_this__u8e3s4) {
    var result = new Float64Array(_this__u8e3s4.k());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      result[tmp1] = element;
    }
    return result;
  }
  function sorted(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      if (_this__u8e3s4.k() <= 1)
        return toList_0(_this__u8e3s4);
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp = copyToArray(_this__u8e3s4);
      var this_0 = isArray(tmp) ? tmp : THROW_CCE();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.sorted.<anonymous>' call
      sort(this_0);
      return asList(this_0);
    }
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableList_1(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.sorted.<anonymous>' call
    sort_0(this_1);
    return this_1;
  }
  function random(_this__u8e3s4, random) {
    if (_this__u8e3s4.l())
      throw NoSuchElementException_init_$Create$_0('Collection is empty.');
    return elementAt(_this__u8e3s4, random.s(_this__u8e3s4.k()));
  }
  function sortedWith(_this__u8e3s4, comparator) {
    if (isInterface(_this__u8e3s4, Collection)) {
      if (_this__u8e3s4.k() <= 1)
        return toList_0(_this__u8e3s4);
      // Inline function 'kotlin.apply' call
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp = copyToArray(_this__u8e3s4);
      var this_0 = isArray(tmp) ? tmp : THROW_CCE();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.sortedWith.<anonymous>' call
      sortWith(this_0, comparator);
      return asList(this_0);
    }
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableList_1(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.sortedWith.<anonymous>' call
    sortWith_0(this_1, comparator);
    return this_1;
  }
  function toMutableList_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return toMutableList_0(_this__u8e3s4);
    return toCollection_1(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function last_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, List))
      return last(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      var last_0 = iterator.j();
      while (iterator.i())
        last_0 = iterator.j();
      return last_0;
    }
  }
  function toCollection_1(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      destination.e(item);
    }
    return destination;
  }
  function getOrNull(_this__u8e3s4, index) {
    return (index >= 0 ? index <= get_lastIndex_0(_this__u8e3s4) : false) ? _this__u8e3s4.m(index) : null;
  }
  function elementAt(_this__u8e3s4, index) {
    if (isInterface(_this__u8e3s4, List))
      return _this__u8e3s4.m(index);
    return elementAtOrElse(_this__u8e3s4, index, elementAt$lambda(index));
  }
  function elementAtOrElse(_this__u8e3s4, index, defaultValue) {
    if (isInterface(_this__u8e3s4, List)) {
      // Inline function 'kotlin.collections.getOrElse' call
      return (index >= 0 ? index <= get_lastIndex_0(_this__u8e3s4) : false) ? _this__u8e3s4.m(index) : defaultValue(index);
    }
    if (index < 0)
      return defaultValue(index);
    var iterator = _this__u8e3s4.h();
    var count = 0;
    while (iterator.i()) {
      var element = iterator.j();
      var tmp0 = count;
      count = tmp0 + 1 | 0;
      if (index === tmp0)
        return element;
    }
    return defaultValue(index);
  }
  function shuffle(_this__u8e3s4, random) {
    var inductionVariable = get_lastIndex_0(_this__u8e3s4);
    if (1 <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var j = random.s(i + 1 | 0);
        _this__u8e3s4.t(j, _this__u8e3s4.t(i, _this__u8e3s4.m(j)));
      }
       while (1 <= inductionVariable);
  }
  function single_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, List))
      return single_1(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      var single = iterator.j();
      if (iterator.i())
        throw IllegalArgumentException_init_$Create$_0('Collection has more than one element.');
      return single;
    }
  }
  function single_1(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.k()) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('List is empty.');
      case 1:
        tmp = _this__u8e3s4.m(0);
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('List has more than one element.');
    }
    return tmp;
  }
  function union(_this__u8e3s4, other) {
    var set = toMutableSet(_this__u8e3s4);
    addAll(set, other);
    return set;
  }
  function sum(_this__u8e3s4) {
    var sum = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      sum = sum + element | 0;
    }
    return sum;
  }
  function _no_name_provided__qut3iv_0($this_asSequence) {
    this.u_1 = $this_asSequence;
  }
  protoOf(_no_name_provided__qut3iv_0).h = function () {
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    return this.u_1.h();
  };
  function elementAt$lambda($index) {
    return function (it) {
      throw IndexOutOfBoundsException_init_$Create$_0("Collection doesn't contain element at index " + $index + '.');
    };
  }
  function until(_this__u8e3s4, to) {
    if (to <= -2147483648)
      return Companion_getInstance_10().v_1;
    return numberRangeToNumber(_this__u8e3s4, to - 1 | 0);
  }
  function downTo(_this__u8e3s4, to) {
    return Companion_instance_12.w(_this__u8e3s4, to, -1);
  }
  function coerceAtLeast(_this__u8e3s4, minimumValue) {
    return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;
  }
  function coerceIn(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue.z(maximumValue) > 0)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue.toString() + ' is less than minimum ' + minimumValue.toString() + '.');
    if (_this__u8e3s4.z(minimumValue) < 0)
      return minimumValue;
    if (_this__u8e3s4.z(maximumValue) > 0)
      return maximumValue;
    return _this__u8e3s4;
  }
  function coerceAtMost(_this__u8e3s4, maximumValue) {
    return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;
  }
  function coerceIn_0(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function toSet_2(_this__u8e3s4) {
    var it = _this__u8e3s4.h();
    if (!it.i())
      return emptySet();
    var element = it.j();
    if (!it.i())
      return setOf(element);
    var dst = LinkedHashSet_init_$Create$();
    dst.e(element);
    while (it.i()) {
      dst.e(it.j());
    }
    return dst;
  }
  function map(_this__u8e3s4, transform) {
    return new TransformingSequence(_this__u8e3s4, transform);
  }
  function distinct_0(_this__u8e3s4) {
    return distinctBy(_this__u8e3s4, distinct$lambda);
  }
  function distinctBy(_this__u8e3s4, selector) {
    return new DistinctSequence(_this__u8e3s4, selector);
  }
  function filter(_this__u8e3s4, predicate) {
    return new FilteringSequence(_this__u8e3s4, true, predicate);
  }
  function plus_4(_this__u8e3s4, elements) {
    return flatten_0(sequenceOf([_this__u8e3s4, elements]));
  }
  function zip_0(_this__u8e3s4, other) {
    return new MergingSequence(_this__u8e3s4, other, zip$lambda);
  }
  function filterNot(_this__u8e3s4, predicate) {
    return new FilteringSequence(_this__u8e3s4, false, predicate);
  }
  function flatMap(_this__u8e3s4, transform) {
    return new FlatteningSequence(_this__u8e3s4, transform, Sequence$iterator$ref());
  }
  function toList_1(_this__u8e3s4) {
    var it = _this__u8e3s4.h();
    if (!it.i())
      return emptyList();
    var element = it.j();
    if (!it.i())
      return listOf(element);
    var dst = ArrayList_init_$Create$();
    dst.e(element);
    while (it.i()) {
      dst.e(it.j());
    }
    return dst;
  }
  function take_0(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.sequences.take.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var tmp;
    if (n === 0) {
      tmp = emptySequence();
    } else {
      if (isInterface(_this__u8e3s4, DropTakeSequence)) {
        tmp = _this__u8e3s4.b1(n);
      } else {
        tmp = new TakeSequence(_this__u8e3s4, n);
      }
    }
    return tmp;
  }
  function asIterable(_this__u8e3s4) {
    // Inline function 'kotlin.collections.Iterable' call
    return new _no_name_provided__qut3iv_1(_this__u8e3s4);
  }
  function any(_this__u8e3s4) {
    return _this__u8e3s4.h().i();
  }
  function takeWhile(_this__u8e3s4, predicate) {
    return new TakeWhileSequence(_this__u8e3s4, predicate);
  }
  function filterIndexed(_this__u8e3s4, predicate) {
    var tmp = new IndexingSequence(_this__u8e3s4);
    var tmp_0 = new FilteringSequence(tmp, true, filterIndexed$lambda(predicate));
    return new TransformingSequence(tmp_0, filterIndexed$lambda_0);
  }
  function toMutableList_2(_this__u8e3s4) {
    return toCollection_2(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function toCollection_2(_this__u8e3s4, destination) {
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      destination.e(item);
    }
    return destination;
  }
  function distinct$lambda(it) {
    return it;
  }
  function zip$lambda(t1, t2) {
    return to(t1, t2);
  }
  function Sequence$iterator$ref() {
    var l = function (p0) {
      return p0.h();
    };
    l.callableName = 'iterator';
    return l;
  }
  function _no_name_provided__qut3iv_1($this_asIterable) {
    this.c1_1 = $this_asIterable;
  }
  protoOf(_no_name_provided__qut3iv_1).h = function () {
    // Inline function 'kotlin.sequences.asIterable.<anonymous>' call
    return this.c1_1.h();
  };
  function filterIndexed$lambda($predicate) {
    return function (it) {
      return $predicate(it.d1_1, it.e1_1);
    };
  }
  function filterIndexed$lambda_0(it) {
    return it.e1_1;
  }
  function plus_5(_this__u8e3s4, elements) {
    var tmp0_safe_receiver = collectionSizeOrNull(elements);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.plus.<anonymous>' call
      tmp = _this__u8e3s4.k() + tmp0_safe_receiver | 0;
    }
    var tmp1_elvis_lhs = tmp;
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(tmp1_elvis_lhs == null ? imul(_this__u8e3s4.k(), 2) : tmp1_elvis_lhs));
    result.q(_this__u8e3s4);
    addAll(result, elements);
    return result;
  }
  function minus_0(_this__u8e3s4, elements) {
    var other = convertToListIfNotCollection(elements);
    if (other.l())
      return toSet_1(_this__u8e3s4);
    if (isInterface(other, Set)) {
      // Inline function 'kotlin.collections.filterNotTo' call
      var destination = LinkedHashSet_init_$Create$();
      var tmp0_iterator = _this__u8e3s4.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.minus.<anonymous>' call
        if (!other.f1(element)) {
          destination.e(element);
        }
      }
      return destination;
    }
    var result = LinkedHashSet_init_$Create$_0(_this__u8e3s4);
    result.g1(other);
    return result;
  }
  function minus_1(_this__u8e3s4, element) {
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.k()));
    var removed = false;
    // Inline function 'kotlin.collections.filterTo' call
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element_0 = tmp0_iterator.j();
      // Inline function 'kotlin.collections.minus.<anonymous>' call
      var tmp;
      if (!removed ? equals(element_0, element) : false) {
        removed = true;
        tmp = false;
      } else {
        tmp = true;
      }
      if (tmp) {
        result.e(element_0);
      }
    }
    return result;
  }
  function plus_6(_this__u8e3s4, element) {
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.k() + 1 | 0));
    result.q(_this__u8e3s4);
    result.e(element);
    return result;
  }
  function dropLast_0(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.dropLast.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return take_1(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.length - n | 0, 0));
  }
  function drop_0(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.drop.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.text.substring' call
    var startIndex = coerceAtMost(n, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(startIndex);
  }
  function first_1(_this__u8e3s4) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(_this__u8e3s4) === 0)
      throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');
    return charSequenceGet(_this__u8e3s4, 0);
  }
  function last_1(_this__u8e3s4) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(_this__u8e3s4) === 0)
      throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');
    return charSequenceGet(_this__u8e3s4, get_lastIndex_1(_this__u8e3s4));
  }
  function reversed(_this__u8e3s4) {
    return StringBuilder_init_$Create$_0(_this__u8e3s4).i1();
  }
  function take_1(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.take.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.text.substring' call
    var endIndex = coerceAtMost(n, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(0, endIndex);
  }
  function slice(_this__u8e3s4, indices) {
    if (indices.l()) {
      // Inline function 'kotlin.collections.listOf' call
      return emptyList();
    }
    // Inline function 'kotlin.collections.copyOfRange' call
    var fromIndex = indices.m1();
    var toIndex = indices.n1() + 1 | 0;
    var tmp$ret$1 = _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(_this__u8e3s4), fromIndex, toIndex));
    return asList_0(tmp$ret$1);
  }
  function toULongArray(_this__u8e3s4) {
    var result = _ULongArray___init__impl__twm1l3_0(_this__u8e3s4.k());
    var index = 0;
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j().o1_1;
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      ULongArray__set_impl_z19mvh(result, tmp1, element);
    }
    return result;
  }
  function _Char___init__impl__6a9atx(value) {
    return value;
  }
  function _get_value__a43j40($this) {
    return $this;
  }
  function _Char___init__impl__6a9atx_0(code) {
    // Inline function 'kotlin.UShort.toInt' call
    var tmp$ret$0 = _UShort___get_data__impl__g0245(code) & 65535;
    return _Char___init__impl__6a9atx(tmp$ret$0);
  }
  function Char__compareTo_impl_ypi4mb($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__compareTo_impl_ypi4mb_0($this, other) {
    return Char__compareTo_impl_ypi4mb($this.p1_1, other instanceof Char ? other.p1_1 : THROW_CCE());
  }
  function Char__minus_impl_a2frrh($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__minus_impl_a2frrh_0($this, other) {
    return numberToChar(_get_value__a43j40($this) - other | 0);
  }
  function Char__rangeTo_impl_tkncvp($this, other) {
    return new CharRange($this, other);
  }
  function Char__toInt_impl_vasixd($this) {
    return _get_value__a43j40($this);
  }
  function toString($this) {
    // Inline function 'kotlin.js.unsafeCast' call
    return String.fromCharCode(_get_value__a43j40($this));
  }
  function Char__equals_impl_x6719k($this, other) {
    if (!(other instanceof Char))
      return false;
    return _get_value__a43j40($this) === _get_value__a43j40(other.p1_1);
  }
  function Char__hashCode_impl_otmys($this) {
    return _get_value__a43j40($this);
  }
  function Companion() {
    Companion_instance = this;
    this.q1_1 = _Char___init__impl__6a9atx(0);
    this.r1_1 = _Char___init__impl__6a9atx(65535);
    this.s1_1 = _Char___init__impl__6a9atx(55296);
    this.t1_1 = _Char___init__impl__6a9atx(56319);
    this.u1_1 = _Char___init__impl__6a9atx(56320);
    this.v1_1 = _Char___init__impl__6a9atx(57343);
    this.w1_1 = _Char___init__impl__6a9atx(55296);
    this.x1_1 = _Char___init__impl__6a9atx(57343);
    this.y1_1 = 2;
    this.z1_1 = 16;
  }
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function Char(value) {
    Companion_getInstance();
    this.p1_1 = value;
  }
  protoOf(Char).a2 = function (other) {
    return Char__compareTo_impl_ypi4mb(this.p1_1, other);
  };
  protoOf(Char).d = function (other) {
    return Char__compareTo_impl_ypi4mb_0(this, other);
  };
  protoOf(Char).toString = function () {
    return toString(this.p1_1);
  };
  protoOf(Char).equals = function (other) {
    return Char__equals_impl_x6719k(this.p1_1, other);
  };
  protoOf(Char).hashCode = function () {
    return Char__hashCode_impl_otmys(this.p1_1);
  };
  function List() {
  }
  function Collection() {
  }
  function Entry() {
  }
  function Map_0() {
  }
  function Set() {
  }
  function MutableIterable() {
  }
  function Companion_0() {
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    return Companion_instance_0;
  }
  function Enum(name, ordinal) {
    this.k2_1 = name;
    this.l2_1 = ordinal;
  }
  protoOf(Enum).m2 = function (other) {
    return compareTo_0(this.l2_1, other.l2_1);
  };
  protoOf(Enum).d = function (other) {
    return this.m2(other instanceof Enum ? other : THROW_CCE());
  };
  protoOf(Enum).equals = function (other) {
    return this === other;
  };
  protoOf(Enum).hashCode = function () {
    return identityHashCode(this);
  };
  protoOf(Enum).toString = function () {
    return this.k2_1;
  };
  function toString_0(_this__u8e3s4) {
    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : toString_1(_this__u8e3s4);
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function Companion_1() {
    Companion_instance_1 = this;
    this.n2_1 = new Long(0, -2147483648);
    this.o2_1 = new Long(-1, 2147483647);
    this.p2_1 = 8;
    this.q2_1 = 64;
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function Long(low, high) {
    Companion_getInstance_1();
    Number_0.call(this);
    this.x_1 = low;
    this.y_1 = high;
  }
  protoOf(Long).z = function (other) {
    return compare(this, other);
  };
  protoOf(Long).d = function (other) {
    return this.z(other instanceof Long ? other : THROW_CCE());
  };
  protoOf(Long).r2 = function (other) {
    return add(this, other);
  };
  protoOf(Long).s2 = function (other) {
    return subtract(this, other);
  };
  protoOf(Long).t2 = function (other) {
    return multiply(this, other);
  };
  protoOf(Long).u2 = function (other) {
    return divide(this, other);
  };
  protoOf(Long).v2 = function (other) {
    return modulo(this, other);
  };
  protoOf(Long).w2 = function () {
    return this.r2(new Long(1, 0));
  };
  protoOf(Long).x2 = function () {
    return this.s2(new Long(1, 0));
  };
  protoOf(Long).y2 = function () {
    return this.z2().r2(new Long(1, 0));
  };
  protoOf(Long).a3 = function (bitCount) {
    return shiftLeft(this, bitCount);
  };
  protoOf(Long).b3 = function (bitCount) {
    return shiftRight(this, bitCount);
  };
  protoOf(Long).c3 = function (bitCount) {
    return shiftRightUnsigned(this, bitCount);
  };
  protoOf(Long).d3 = function (other) {
    return new Long(this.x_1 & other.x_1, this.y_1 & other.y_1);
  };
  protoOf(Long).e3 = function (other) {
    return new Long(this.x_1 | other.x_1, this.y_1 | other.y_1);
  };
  protoOf(Long).f3 = function (other) {
    return new Long(this.x_1 ^ other.x_1, this.y_1 ^ other.y_1);
  };
  protoOf(Long).z2 = function () {
    return new Long(~this.x_1, ~this.y_1);
  };
  protoOf(Long).g3 = function () {
    return this.x_1;
  };
  protoOf(Long).h3 = function () {
    return toNumber(this);
  };
  protoOf(Long).toString = function () {
    return toStringImpl(this, 10);
  };
  protoOf(Long).equals = function (other) {
    var tmp;
    if (other instanceof Long) {
      tmp = equalsLong(this, other);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Long).hashCode = function () {
    return hashCode_0(this);
  };
  protoOf(Long).valueOf = function () {
    return this.h3();
  };
  function implement(interfaces) {
    var maxSize = 1;
    var masks = [];
    var inductionVariable = 0;
    var last = interfaces.length;
    while (inductionVariable < last) {
      var i = interfaces[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var currentSize = maxSize;
      var tmp1_elvis_lhs = i.prototype.$imask$;
      var imask = tmp1_elvis_lhs == null ? i.$imask$ : tmp1_elvis_lhs;
      if (!(imask == null)) {
        masks.push(imask);
        currentSize = imask.length;
      }
      var iid = i.$metadata$.iid;
      var tmp;
      if (iid == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlin.js.implement.<anonymous>' call
        tmp = bitMaskWith(iid);
      }
      var iidImask = tmp;
      if (!(iidImask == null)) {
        masks.push(iidImask);
        currentSize = Math.max(currentSize, iidImask.length);
      }
      if (currentSize > maxSize) {
        maxSize = currentSize;
      }
    }
    return compositeBitMask(maxSize, masks);
  }
  function bitMaskWith(activeBit) {
    var numberIndex = activeBit >> 5;
    var intArray = new Int32Array(numberIndex + 1 | 0);
    var positionInNumber = activeBit & 31;
    var numberWithSettledBit = 1 << positionInNumber;
    intArray[numberIndex] = intArray[numberIndex] | numberWithSettledBit;
    return intArray;
  }
  function compositeBitMask(capacity, masks) {
    var tmp = 0;
    var tmp_0 = new Int32Array(capacity);
    while (tmp < capacity) {
      var tmp_1 = tmp;
      var result = 0;
      var inductionVariable = 0;
      var last = masks.length;
      while (inductionVariable < last) {
        var mask = masks[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        if (tmp_1 < mask.length) {
          result = result | mask[tmp_1];
        }
      }
      tmp_0[tmp_1] = result;
      tmp = tmp + 1 | 0;
    }
    return tmp_0;
  }
  function isBitSet(_this__u8e3s4, possibleActiveBit) {
    var numberIndex = possibleActiveBit >> 5;
    if (numberIndex > _this__u8e3s4.length)
      return false;
    var positionInNumber = possibleActiveBit & 31;
    var numberWithSettledBit = 1 << positionInNumber;
    return !((_this__u8e3s4[numberIndex] & numberWithSettledBit) === 0);
  }
  function fillArrayVal(array, initValue) {
    var inductionVariable = 0;
    var last = array.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        array[i] = initValue;
      }
       while (!(i === last));
    return array;
  }
  function arrayIterator(array) {
    return new arrayIterator$1(array);
  }
  function booleanArray(size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'BooleanArray';
    var array = fillArrayVal(Array(size), false);
    array.$type$ = type;
    return array;
  }
  function charArray(size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'CharArray';
    var array = new Uint16Array(size);
    array.$type$ = type;
    return array;
  }
  function longArray(size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'LongArray';
    var array = fillArrayVal(Array(size), new Long(0, 0));
    array.$type$ = type;
    return array;
  }
  function booleanArrayOf(arr) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'BooleanArray';
    // Inline function 'kotlin.js.asDynamic' call
    var array = arr.slice();
    array.$type$ = type;
    return array;
  }
  function charArrayOf(arr) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'CharArray';
    var array = new Uint16Array(arr);
    array.$type$ = type;
    return array;
  }
  function longArrayOf(arr) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'withType' call
    var type = 'LongArray';
    // Inline function 'kotlin.js.asDynamic' call
    var array = arr.slice();
    array.$type$ = type;
    return array;
  }
  function arrayIterator$1($array) {
    this.j3_1 = $array;
    this.i3_1 = 0;
  }
  protoOf(arrayIterator$1).i = function () {
    return !(this.i3_1 === this.j3_1.length);
  };
  protoOf(arrayIterator$1).j = function () {
    var tmp;
    if (!(this.i3_1 === this.j3_1.length)) {
      var tmp1 = this.i3_1;
      this.i3_1 = tmp1 + 1 | 0;
      tmp = this.j3_1[tmp1];
    } else {
      throw NoSuchElementException_init_$Create$_0('' + this.i3_1);
    }
    return tmp;
  };
  function get_buf() {
    _init_properties_bitUtils_kt__nfcg4k();
    return buf;
  }
  var buf;
  function get_bufFloat64() {
    _init_properties_bitUtils_kt__nfcg4k();
    return bufFloat64;
  }
  var bufFloat64;
  var bufFloat32;
  function get_bufInt32() {
    _init_properties_bitUtils_kt__nfcg4k();
    return bufInt32;
  }
  var bufInt32;
  function get_lowIndex() {
    _init_properties_bitUtils_kt__nfcg4k();
    return lowIndex;
  }
  var lowIndex;
  function get_highIndex() {
    _init_properties_bitUtils_kt__nfcg4k();
    return highIndex;
  }
  var highIndex;
  function getNumberHashCode(obj) {
    _init_properties_bitUtils_kt__nfcg4k();
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.jsBitwiseOr' call
    // Inline function 'kotlin.js.asDynamic' call
    if ((obj | 0) === obj) {
      return numberToInt(obj);
    }
    get_bufFloat64()[0] = obj;
    return imul(get_bufInt32()[get_highIndex()], 31) + get_bufInt32()[get_lowIndex()] | 0;
  }
  var properties_initialized_bitUtils_kt_i2bo3e;
  function _init_properties_bitUtils_kt__nfcg4k() {
    if (!properties_initialized_bitUtils_kt_i2bo3e) {
      properties_initialized_bitUtils_kt_i2bo3e = true;
      buf = new ArrayBuffer(8);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufFloat64 = new Float64Array(get_buf());
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufFloat32 = new Float32Array(get_buf());
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufInt32 = new Int32Array(get_buf());
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.js.lowIndex.<anonymous>' call
      get_bufFloat64()[0] = -1.0;
      lowIndex = !(get_bufInt32()[0] === 0) ? 1 : 0;
      highIndex = 1 - get_lowIndex() | 0;
    }
  }
  function charSequenceGet(a, index) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.Char' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var code = a.charCodeAt(index);
      var tmp_0;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(0);
      if (code < Char__toInt_impl_vasixd(this_0)) {
        tmp_0 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_1 = _Char___init__impl__6a9atx(65535);
        tmp_0 = code > Char__toInt_impl_vasixd(this_1);
      }
      if (tmp_0) {
        throw IllegalArgumentException_init_$Create$_0('Invalid Char code: ' + code);
      }
      tmp = numberToChar(code);
    } else {
      tmp = a.b(index);
    }
    return tmp;
  }
  function isString(a) {
    return typeof a === 'string';
  }
  function charSequenceLength(a) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = a.length;
    } else {
      tmp = a.a();
    }
    return tmp;
  }
  function charSequenceSubSequence(a, startIndex, endIndex) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = a.substring(startIndex, endIndex);
    } else {
      tmp = a.c(startIndex, endIndex);
    }
    return tmp;
  }
  function contentEqualsInternal(_this__u8e3s4, other) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    // Inline function 'kotlin.js.asDynamic' call
    var b = other;
    if (a === b)
      return true;
    if (((a == null ? true : b == null) ? true : !isArrayish(b)) ? true : a.length != b.length)
      return false;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals(a[i], b[i])) {
          return false;
        }
      }
       while (inductionVariable < last);
    return true;
  }
  function contentHashCodeInternal(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    if (a == null)
      return 0;
    var result = 1;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = imul(result, 31) + hashCode(a[i]) | 0;
      }
       while (inductionVariable < last);
    return result;
  }
  function arrayToString(array) {
    return joinToString(array, ', ', '[', ']', VOID, VOID, arrayToString$lambda);
  }
  function arrayToString$lambda(it) {
    return toString_1(it);
  }
  function compareTo_0(a, b) {
    var tmp;
    switch (typeof a) {
      case 'number':
        var tmp_0;
        if (typeof b === 'number') {
          tmp_0 = doubleCompareTo(a, b);
        } else {
          if (b instanceof Long) {
            tmp_0 = doubleCompareTo(a, b.h3());
          } else {
            tmp_0 = primitiveCompareTo(a, b);
          }
        }

        tmp = tmp_0;
        break;
      case 'string':
      case 'boolean':
        tmp = primitiveCompareTo(a, b);
        break;
      default:
        tmp = compareToDoNotIntrinsicify(a, b);
        break;
    }
    return tmp;
  }
  function doubleCompareTo(a, b) {
    var tmp;
    if (a < b) {
      tmp = -1;
    } else if (a > b) {
      tmp = 1;
    } else if (a === b) {
      var tmp_0;
      if (a !== 0) {
        tmp_0 = 0;
      } else {
        // Inline function 'kotlin.js.asDynamic' call
        var ia = 1 / a;
        var tmp_1;
        // Inline function 'kotlin.js.asDynamic' call
        if (ia === 1 / b) {
          tmp_1 = 0;
        } else {
          if (ia < 0) {
            tmp_1 = -1;
          } else {
            tmp_1 = 1;
          }
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else if (a !== a) {
      tmp = b !== b ? 0 : 1;
    } else {
      tmp = -1;
    }
    return tmp;
  }
  function primitiveCompareTo(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function compareToDoNotIntrinsicify(a, b) {
    return a.d(b);
  }
  function identityHashCode(obj) {
    return getObjectHashCode(obj);
  }
  function getObjectHashCode(obj) {
    // Inline function 'kotlin.js.jsIn' call
    if (!('kotlinHashCodeValue$' in obj)) {
      var hash = calculateRandomHash();
      var descriptor = new Object();
      descriptor.value = hash;
      descriptor.enumerable = false;
      Object.defineProperty(obj, 'kotlinHashCodeValue$', descriptor);
    }
    // Inline function 'kotlin.js.unsafeCast' call
    return obj['kotlinHashCodeValue$'];
  }
  function calculateRandomHash() {
    // Inline function 'kotlin.js.jsBitwiseOr' call
    return Math.random() * 4.294967296E9 | 0;
  }
  function equals(obj1, obj2) {
    if (obj1 == null) {
      return obj2 == null;
    }
    if (obj2 == null) {
      return false;
    }
    if (typeof obj1 === 'object' ? typeof obj1.equals === 'function' : false) {
      return obj1.equals(obj2);
    }
    if (obj1 !== obj1) {
      return obj2 !== obj2;
    }
    if (typeof obj1 === 'number' ? typeof obj2 === 'number' : false) {
      var tmp;
      if (obj1 === obj2) {
        var tmp_0;
        if (obj1 !== 0) {
          tmp_0 = true;
        } else {
          // Inline function 'kotlin.js.asDynamic' call
          var tmp_1 = 1 / obj1;
          // Inline function 'kotlin.js.asDynamic' call
          tmp_0 = tmp_1 === 1 / obj2;
        }
        tmp = tmp_0;
      } else {
        tmp = false;
      }
      return tmp;
    }
    return obj1 === obj2;
  }
  function hashCode(obj) {
    if (obj == null)
      return 0;
    var typeOf = typeof obj;
    var tmp;
    switch (typeOf) {
      case 'object':
        tmp = 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
        break;
      case 'function':
        tmp = getObjectHashCode(obj);
        break;
      case 'number':
        tmp = getNumberHashCode(obj);
        break;
      case 'boolean':
        // Inline function 'kotlin.js.unsafeCast' call

        tmp = getBooleanHashCode(obj);
        break;
      case 'string':
        tmp = getStringHashCode(String(obj));
        break;
      case 'bigint':
        tmp = getBigIntHashCode(obj);
        break;
      case 'symbol':
        tmp = getSymbolHashCode(obj);
        break;
      default:
        tmp = function () {
          throw new Error('Unexpected typeof `' + typeOf + '`');
        }();
        break;
    }
    return tmp;
  }
  function toString_1(o) {
    var tmp;
    if (o == null) {
      tmp = 'null';
    } else if (isArrayish(o)) {
      tmp = '[...]';
    } else if (!(typeof o.toString === 'function')) {
      tmp = anyToString(o);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = o.toString();
    }
    return tmp;
  }
  function getBooleanHashCode(value) {
    return value ? 1231 : 1237;
  }
  function getStringHashCode(str) {
    var hash = 0;
    var length = str.length;
    var inductionVariable = 0;
    var last = length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        var code = str.charCodeAt(i);
        hash = imul(hash, 31) + code | 0;
      }
       while (!(i === last));
    return hash;
  }
  function getBigIntHashCode(value) {
    var shiftNumber = BigInt(32);
    var MASK = BigInt(4.294967295E9);
    var bigNumber = value < 0 ? -value : value;
    var hashCode = 0;
    var signum = value < 0 ? -1 : 1;
    while (bigNumber != 0) {
      // Inline function 'kotlin.js.unsafeCast' call
      var chunk = Number(bigNumber & MASK);
      hashCode = imul(31, hashCode) + chunk | 0;
      bigNumber = bigNumber >> shiftNumber;
    }
    return imul(hashCode, signum);
  }
  function getSymbolHashCode(value) {
    var hashCodeMap = symbolIsSharable(value) ? getSymbolMap() : getSymbolWeakMap();
    var cachedHashCode = hashCodeMap.get(value);
    if (cachedHashCode !== VOID)
      return cachedHashCode;
    var hash = calculateRandomHash();
    hashCodeMap.set(value, hash);
    return hash;
  }
  function anyToString(o) {
    return Object.prototype.toString.call(o);
  }
  function symbolIsSharable(symbol) {
    return Symbol.keyFor(symbol) != VOID;
  }
  function getSymbolMap() {
    if (symbolMap === VOID) {
      symbolMap = new Map();
    }
    return symbolMap;
  }
  function getSymbolWeakMap() {
    if (symbolWeakMap === VOID) {
      symbolWeakMap = new WeakMap();
    }
    return symbolWeakMap;
  }
  var symbolMap;
  var symbolWeakMap;
  function boxIntrinsic(x) {
    var message = 'Should be lowered';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  }
  function unboxIntrinsic(x) {
    var message = 'Should be lowered';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  }
  function captureStack(instance, constructorFunction) {
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(instance, constructorFunction);
    } else {
      // Inline function 'kotlin.js.asDynamic' call
      instance.stack = (new Error()).stack;
    }
  }
  function protoOf(constructor) {
    return constructor.prototype;
  }
  function defineProp(obj, name, getter, setter) {
    return Object.defineProperty(obj, name, {configurable: true, get: getter, set: setter});
  }
  function objectCreate(proto) {
    return Object.create(proto);
  }
  function newThrowable(message, cause) {
    var throwable = new Error();
    var tmp;
    if (isUndefined(message)) {
      var tmp_0;
      if (isUndefined(cause)) {
        tmp_0 = message;
      } else {
        var tmp1_elvis_lhs = cause == null ? null : cause.toString();
        tmp_0 = tmp1_elvis_lhs == null ? VOID : tmp1_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      tmp = message == null ? VOID : message;
    }
    throwable.message = tmp;
    throwable.cause = cause;
    throwable.name = 'Throwable';
    // Inline function 'kotlin.js.unsafeCast' call
    return throwable;
  }
  function isUndefined(value) {
    return value === VOID;
  }
  function extendThrowable(this_, message, cause) {
    Error.call(this_);
    setPropertiesToThrowableInstance(this_, message, cause);
  }
  function setPropertiesToThrowableInstance(this_, message, cause) {
    var errorInfo = calculateErrorInfo(Object.getPrototypeOf(this_));
    if ((errorInfo & 1) === 0) {
      var tmp;
      if (message == null) {
        var tmp_0;
        if (!(message === null)) {
          var tmp1_elvis_lhs = cause == null ? null : cause.toString();
          tmp_0 = tmp1_elvis_lhs == null ? VOID : tmp1_elvis_lhs;
        } else {
          tmp_0 = VOID;
        }
        tmp = tmp_0;
      } else {
        tmp = message;
      }
      this_.message = tmp;
    }
    if ((errorInfo & 2) === 0) {
      this_.cause = cause;
    }
    this_.name = Object.getPrototypeOf(this_).constructor.name;
  }
  function ensureNotNull(v) {
    var tmp;
    if (v == null) {
      THROW_NPE();
    } else {
      tmp = v;
    }
    return tmp;
  }
  function THROW_NPE() {
    throw NullPointerException_init_$Create$();
  }
  function noWhenBranchMatchedException() {
    throw NoWhenBranchMatchedException_init_$Create$();
  }
  function THROW_CCE() {
    throw ClassCastException_init_$Create$();
  }
  function throwUninitializedPropertyAccessException(name) {
    throw UninitializedPropertyAccessException_init_$Create$_0('lateinit property ' + name + ' has not been initialized');
  }
  function lazy(initializer) {
    return new UnsafeLazyImpl(initializer);
  }
  function fillFrom(src, dst) {
    var srcLen = src.length;
    var dstLen = dst.length;
    var index = 0;
    // Inline function 'kotlin.js.unsafeCast' call
    var arr = dst;
    while (index < srcLen ? index < dstLen : false) {
      var tmp = index;
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      arr[tmp] = src[tmp0];
    }
    return dst;
  }
  function arrayCopyResize(source, newSize, defaultValue) {
    // Inline function 'kotlin.js.unsafeCast' call
    var result = source.slice(0, newSize);
    // Inline function 'kotlin.copyArrayType' call
    if (source.$type$ !== undefined) {
      result.$type$ = source.$type$;
    }
    var index = source.length;
    if (newSize > index) {
      // Inline function 'kotlin.js.asDynamic' call
      result.length = newSize;
      while (index < newSize) {
        var tmp0 = index;
        index = tmp0 + 1 | 0;
        result[tmp0] = defaultValue;
      }
    }
    return result;
  }
  function get_ZERO() {
    _init_properties_longJs_kt__elc2w5();
    return ZERO;
  }
  var ZERO;
  function get_ONE() {
    _init_properties_longJs_kt__elc2w5();
    return ONE;
  }
  var ONE;
  function get_NEG_ONE() {
    _init_properties_longJs_kt__elc2w5();
    return NEG_ONE;
  }
  var NEG_ONE;
  function get_MAX_VALUE() {
    _init_properties_longJs_kt__elc2w5();
    return MAX_VALUE;
  }
  var MAX_VALUE;
  function get_MIN_VALUE() {
    _init_properties_longJs_kt__elc2w5();
    return MIN_VALUE;
  }
  var MIN_VALUE;
  function get_TWO_PWR_24_() {
    _init_properties_longJs_kt__elc2w5();
    return TWO_PWR_24_;
  }
  var TWO_PWR_24_;
  function compare(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (equalsLong(_this__u8e3s4, other)) {
      return 0;
    }
    var thisNeg = isNegative(_this__u8e3s4);
    var otherNeg = isNegative(other);
    return (thisNeg ? !otherNeg : false) ? -1 : (!thisNeg ? otherNeg : false) ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;
  }
  function add(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    var a48 = _this__u8e3s4.y_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.y_1 & 65535;
    var a16 = _this__u8e3s4.x_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.x_1 & 65535;
    var b48 = other.y_1 >>> 16 | 0;
    var b32 = other.y_1 & 65535;
    var b16 = other.x_1 >>> 16 | 0;
    var b00 = other.x_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + (a00 + b00 | 0) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + (a16 + b16 | 0) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + (a32 + b32 | 0) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (a48 + b48 | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function subtract(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return add(_this__u8e3s4, other.y2());
  }
  function multiply(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    } else if (isZero(other)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      return isOdd(other) ? get_MIN_VALUE() : get_ZERO();
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = multiply(negate(_this__u8e3s4), negate(other));
      } else {
        tmp = negate(multiply(negate(_this__u8e3s4), other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(multiply(_this__u8e3s4, negate(other)));
    }
    if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) ? lessThan(other, get_TWO_PWR_24_()) : false) {
      return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));
    }
    var a48 = _this__u8e3s4.y_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.y_1 & 65535;
    var a16 = _this__u8e3s4.x_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.x_1 & 65535;
    var b48 = other.y_1 >>> 16 | 0;
    var b32 = other.y_1 & 65535;
    var b16 = other.x_1 >>> 16 | 0;
    var b00 = other.x_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + imul(a00, b00) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + imul(a16, b00) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c16 = c16 + imul(a00, b16) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + imul(a32, b00) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a16, b16) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a00, b32) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function divide(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (isZero(other)) {
      throw Exception_init_$Create$_0('division by zero');
    } else if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      if (equalsLong(other, get_ONE()) ? true : equalsLong(other, get_NEG_ONE())) {
        return get_MIN_VALUE();
      } else if (equalsLong(other, get_MIN_VALUE())) {
        return get_ONE();
      } else {
        var halfThis = shiftRight(_this__u8e3s4, 1);
        var approx = shiftLeft(halfThis.u2(other), 1);
        if (equalsLong(approx, get_ZERO())) {
          return isNegative(other) ? get_ONE() : get_NEG_ONE();
        } else {
          var rem = subtract(_this__u8e3s4, multiply(other, approx));
          return add(approx, rem.u2(other));
        }
      }
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = negate(_this__u8e3s4).u2(negate(other));
      } else {
        tmp = negate(negate(_this__u8e3s4).u2(other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(_this__u8e3s4.u2(negate(other)));
    }
    var res = get_ZERO();
    var rem_0 = _this__u8e3s4;
    while (greaterThanOrEqual(rem_0, other)) {
      var approxDouble = toNumber(rem_0) / toNumber(other);
      var approx2 = Math.max(1.0, Math.floor(approxDouble));
      var log2 = Math.ceil(Math.log(approx2) / Math.LN2);
      var delta = log2 <= 48.0 ? 1.0 : Math.pow(2.0, log2 - 48);
      var approxRes = fromNumber(approx2);
      var approxRem = multiply(approxRes, other);
      while (isNegative(approxRem) ? true : greaterThan(approxRem, rem_0)) {
        approx2 = approx2 - delta;
        approxRes = fromNumber(approx2);
        approxRem = multiply(approxRes, other);
      }
      if (isZero(approxRes)) {
        approxRes = get_ONE();
      }
      res = add(res, approxRes);
      rem_0 = subtract(rem_0, approxRem);
    }
    return res;
  }
  function modulo(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return subtract(_this__u8e3s4, multiply(_this__u8e3s4.u2(other), other));
  }
  function shiftLeft(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.x_1 << numBits_0, _this__u8e3s4.y_1 << numBits_0 | (_this__u8e3s4.x_1 >>> (32 - numBits_0 | 0) | 0));
      } else {
        return new Long(0, _this__u8e3s4.x_1 << (numBits_0 - 32 | 0));
      }
    }
  }
  function shiftRight(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.x_1 >>> numBits_0 | 0 | _this__u8e3s4.y_1 << (32 - numBits_0 | 0), _this__u8e3s4.y_1 >> numBits_0);
      } else {
        return new Long(_this__u8e3s4.y_1 >> (numBits_0 - 32 | 0), _this__u8e3s4.y_1 >= 0 ? 0 : -1);
      }
    }
  }
  function shiftRightUnsigned(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.x_1 >>> numBits_0 | 0 | _this__u8e3s4.y_1 << (32 - numBits_0 | 0), _this__u8e3s4.y_1 >>> numBits_0 | 0);
      } else {
        var tmp;
        if (numBits_0 === 32) {
          tmp = new Long(_this__u8e3s4.y_1, 0);
        } else {
          tmp = new Long(_this__u8e3s4.y_1 >>> (numBits_0 - 32 | 0) | 0, 0);
        }
        return tmp;
      }
    }
  }
  function toNumber(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 * 4.294967296E9 + getLowBitsUnsigned(_this__u8e3s4);
  }
  function toStringImpl(_this__u8e3s4, radix) {
    _init_properties_longJs_kt__elc2w5();
    if (radix < 2 ? true : 36 < radix) {
      throw Exception_init_$Create$_0('radix out of range: ' + radix);
    }
    if (isZero(_this__u8e3s4)) {
      return '0';
    }
    if (isNegative(_this__u8e3s4)) {
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
        var radixLong = fromInt(radix);
        var div = _this__u8e3s4.u2(radixLong);
        var rem = subtract(multiply(div, radixLong), _this__u8e3s4).g3();
        var tmp = toStringImpl(div, radix);
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        return tmp + rem.toString(radix);
      } else {
        return '-' + toStringImpl(negate(_this__u8e3s4), radix);
      }
    }
    var digitsPerTime = radix === 2 ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5;
    var radixToPower = fromNumber(Math.pow(radix, digitsPerTime));
    var rem_0 = _this__u8e3s4;
    var result = '';
    while (true) {
      var remDiv = rem_0.u2(radixToPower);
      var intval = subtract(rem_0, multiply(remDiv, radixToPower)).g3();
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var digits = intval.toString(radix);
      rem_0 = remDiv;
      if (isZero(rem_0)) {
        return digits + result;
      } else {
        while (digits.length < digitsPerTime) {
          digits = '0' + digits;
        }
        result = digits + result;
      }
    }
  }
  function equalsLong(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 === other.y_1 ? _this__u8e3s4.x_1 === other.x_1 : false;
  }
  function hashCode_0(l) {
    _init_properties_longJs_kt__elc2w5();
    return l.x_1 ^ l.y_1;
  }
  function fromInt(value) {
    _init_properties_longJs_kt__elc2w5();
    return new Long(value, value < 0 ? -1 : 0);
  }
  function isNegative(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 < 0;
  }
  function isZero(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y_1 === 0 ? _this__u8e3s4.x_1 === 0 : false;
  }
  function isOdd(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return (_this__u8e3s4.x_1 & 1) === 1;
  }
  function negate(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.y2();
  }
  function lessThan(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) < 0;
  }
  function fromNumber(value) {
    _init_properties_longJs_kt__elc2w5();
    if (isNaN_0(value)) {
      return get_ZERO();
    } else if (value <= -9.223372036854776E18) {
      return get_MIN_VALUE();
    } else if (value + 1 >= 9.223372036854776E18) {
      return get_MAX_VALUE();
    } else if (value < 0.0) {
      return negate(fromNumber(-value));
    } else {
      var twoPwr32 = 4.294967296E9;
      // Inline function 'kotlin.js.jsBitwiseOr' call
      var tmp = value % twoPwr32 | 0;
      // Inline function 'kotlin.js.jsBitwiseOr' call
      var tmp$ret$1 = value / twoPwr32 | 0;
      return new Long(tmp, tmp$ret$1);
    }
  }
  function greaterThan(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) > 0;
  }
  function greaterThanOrEqual(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) >= 0;
  }
  function getLowBitsUnsigned(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.x_1 >= 0 ? _this__u8e3s4.x_1 : 4.294967296E9 + _this__u8e3s4.x_1;
  }
  var properties_initialized_longJs_kt_4syf89;
  function _init_properties_longJs_kt__elc2w5() {
    if (!properties_initialized_longJs_kt_4syf89) {
      properties_initialized_longJs_kt_4syf89 = true;
      ZERO = fromInt(0);
      ONE = fromInt(1);
      NEG_ONE = fromInt(-1);
      MAX_VALUE = new Long(-1, 2147483647);
      MIN_VALUE = new Long(0, -2147483648);
      TWO_PWR_24_ = fromInt(16777216);
    }
  }
  function classMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    return createMetadata('class', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, null);
  }
  function createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, iid) {
    var undef = VOID;
    return {kind: kind, simpleName: name, associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, $kClass$: undef, defaultConstructor: defaultConstructor, iid: iid};
  }
  function setMetadataFor(ctor, name, metadataConstructor, parent, interfaces, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    if (!(parent == null)) {
      ctor.prototype = Object.create(parent.prototype);
      ctor.prototype.constructor = ctor;
    }
    var metadata = metadataConstructor(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity == null ? [] : suspendArity);
    ctor.$metadata$ = metadata;
    if (!(interfaces == null)) {
      var receiver = !(metadata.iid == null) ? ctor : ctor.prototype;
      receiver.$imask$ = implement(interfaces);
    }
  }
  function interfaceMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    return createMetadata('interface', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, generateInterfaceId());
  }
  function generateInterfaceId() {
    if (iid === VOID) {
      iid = 0;
    }
    // Inline function 'kotlin.js.unsafeCast' call
    iid = iid + 1 | 0;
    // Inline function 'kotlin.js.unsafeCast' call
    return iid;
  }
  var iid;
  function objectMeta(name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    return createMetadata('object', name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity, null);
  }
  function numberToInt(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a.g3();
    } else {
      tmp = doubleToInt(a);
    }
    return tmp;
  }
  function doubleToInt(a) {
    var tmp;
    if (a > 2.147483647E9) {
      tmp = 2147483647;
    } else if (a < -2.147483648E9) {
      tmp = -2147483648;
    } else {
      // Inline function 'kotlin.js.jsBitwiseOr' call
      tmp = a | 0;
    }
    return tmp;
  }
  function numberToDouble(a) {
    // Inline function 'kotlin.js.unsafeCast' call
    return +a;
  }
  function toShort(a) {
    // Inline function 'kotlin.js.unsafeCast' call
    return a << 16 >> 16;
  }
  function numberToLong(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a;
    } else {
      tmp = fromNumber(a);
    }
    return tmp;
  }
  function numberToChar(a) {
    // Inline function 'kotlin.toUShort' call
    var this_0 = numberToInt(a);
    var tmp$ret$0 = _UShort___init__impl__jigrne(toShort(this_0));
    return _Char___init__impl__6a9atx_0(tmp$ret$0);
  }
  function toLong(a) {
    return fromInt(a);
  }
  function numberRangeToNumber(start, endInclusive) {
    return new IntRange(start, endInclusive);
  }
  function get_propertyRefClassMetadataCache() {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return propertyRefClassMetadataCache;
  }
  var propertyRefClassMetadataCache;
  function metadataObject() {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return classMeta(VOID, VOID, VOID, VOID, VOID);
  }
  function getPropertyCallableRef(name, paramCount, superType, getter, setter) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    getter.get = getter;
    getter.set = setter;
    getter.callableName = name;
    // Inline function 'kotlin.js.unsafeCast' call
    return getPropertyRefClass(getter, getKPropMetadata(paramCount, setter), getInterfaceMaskFor(getter, superType));
  }
  function getPropertyRefClass(obj, metadata, imask) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    obj.$metadata$ = metadata;
    obj.constructor = obj;
    obj.$imask$ = imask;
    return obj;
  }
  function getKPropMetadata(paramCount, setter) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return get_propertyRefClassMetadataCache()[paramCount][setter == null ? 0 : 1];
  }
  function getInterfaceMaskFor(obj, superType) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    var tmp0_elvis_lhs = obj.$imask$;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = [superType];
      tmp = implement(tmp$ret$2);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  var properties_initialized_reflectRuntime_kt_inkhwd;
  function _init_properties_reflectRuntime_kt__5r4uu3() {
    if (!properties_initialized_reflectRuntime_kt_inkhwd) {
      properties_initialized_reflectRuntime_kt_inkhwd = true;
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp = [metadataObject(), metadataObject()];
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp_0 = [metadataObject(), metadataObject()];
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      propertyRefClassMetadataCache = [tmp, tmp_0, [metadataObject(), metadataObject()]];
    }
  }
  function isArrayish(o) {
    return isJsArray(o) ? true : isView(o);
  }
  function isJsArray(obj) {
    // Inline function 'kotlin.js.unsafeCast' call
    return Array.isArray(obj);
  }
  function isInterface(obj, iface) {
    return isInterfaceImpl(obj, iface.$metadata$.iid);
  }
  function isInterfaceImpl(obj, iface) {
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_elvis_lhs = obj.$imask$;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var mask = tmp;
    return isBitSet(mask, iface);
  }
  function isArray(obj) {
    var tmp;
    if (isJsArray(obj)) {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = !obj.$type$;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isNumber(a) {
    var tmp;
    if (typeof a === 'number') {
      tmp = true;
    } else {
      tmp = a instanceof Long;
    }
    return tmp;
  }
  function isComparable(value) {
    var type = typeof value;
    return ((type === 'string' ? true : type === 'boolean') ? true : isNumber(value)) ? true : isInterface(value, Comparable);
  }
  function isCharSequence(value) {
    return typeof value === 'string' ? true : isInterface(value, CharSequence);
  }
  function isBooleanArray(a) {
    return isJsArray(a) ? a.$type$ === 'BooleanArray' : false;
  }
  function isByteArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int8Array;
  }
  function isShortArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int16Array;
  }
  function isCharArray(a) {
    var tmp;
    // Inline function 'kotlin.js.jsInstanceOf' call
    if (a instanceof Uint16Array) {
      tmp = a.$type$ === 'CharArray';
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isIntArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int32Array;
  }
  function isFloatArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Float32Array;
  }
  function isLongArray(a) {
    return isJsArray(a) ? a.$type$ === 'LongArray' : false;
  }
  function isDoubleArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Float64Array;
  }
  function jsIsType(obj, jsClass) {
    if (jsClass === Object) {
      return obj != null;
    }
    var objType = typeof obj;
    var jsClassType = typeof jsClass;
    if ((obj == null ? true : jsClass == null) ? true : !(objType === 'object') ? !(objType === 'function') : false) {
      return false;
    }
    var constructor = jsClassType === 'object' ? jsGetPrototypeOf(jsClass) : jsClass;
    var klassMetadata = constructor.$metadata$;
    if ((klassMetadata == null ? null : klassMetadata.kind) === 'interface') {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp1_elvis_lhs = klassMetadata.iid;
      var tmp;
      if (tmp1_elvis_lhs == null) {
        return false;
      } else {
        tmp = tmp1_elvis_lhs;
      }
      var iid = tmp;
      return isInterfaceImpl(obj, iid);
    }
    // Inline function 'kotlin.js.jsInstanceOf' call
    return obj instanceof constructor;
  }
  function jsGetPrototypeOf(jsClass) {
    return Object.getPrototypeOf(jsClass);
  }
  function calculateErrorInfo(proto) {
    var tmp0_safe_receiver = proto.constructor;
    var metadata = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.$metadata$;
    var tmp2_safe_receiver = metadata == null ? null : metadata.errorInfo;
    if (tmp2_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp2_safe_receiver;
    }
    var result = 0;
    if (hasProp(proto, 'message'))
      result = result | 1;
    if (hasProp(proto, 'cause'))
      result = result | 2;
    if (!(result === 3)) {
      var parentProto = getPrototypeOf(proto);
      if (parentProto != Error.prototype) {
        result = result | calculateErrorInfo(parentProto);
      }
    }
    if (!(metadata == null)) {
      metadata.errorInfo = result;
    }
    return result;
  }
  function hasProp(proto, propName) {
    return proto.hasOwnProperty(propName);
  }
  function getPrototypeOf(obj) {
    return Object.getPrototypeOf(obj);
  }
  function get_VOID() {
    _init_properties_void_kt__3zg9as();
    return VOID;
  }
  var VOID;
  var properties_initialized_void_kt_e4ret2;
  function _init_properties_void_kt__3zg9as() {
    if (!properties_initialized_void_kt_e4ret2) {
      properties_initialized_void_kt_e4ret2 = true;
      VOID = void 0;
    }
  }
  function fill(_this__u8e3s4, element, fromIndex, toIndex) {
    fromIndex = fromIndex === VOID ? 0 : fromIndex;
    toIndex = toIndex === VOID ? _this__u8e3s4.length : toIndex;
    Companion_instance_5.l3(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.nativeFill' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fill(element, fromIndex, toIndex);
  }
  function contentEquals(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function copyOf(_this__u8e3s4) {
    // Inline function 'withType' call
    var type = 'LongArray';
    // Inline function 'kotlin.js.asDynamic' call
    var array = _this__u8e3s4.slice();
    array.$type$ = type;
    return array;
  }
  function asList(_this__u8e3s4) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return new ArrayList(_this__u8e3s4);
  }
  function copyOf_0(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Int32Array(newSize));
  }
  function contentEquals_0(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function contentHashCode(_this__u8e3s4) {
    return contentHashCodeInternal(_this__u8e3s4);
  }
  function sort(_this__u8e3s4) {
    if (_this__u8e3s4.length > 1) {
      sortArray(_this__u8e3s4);
    }
  }
  function copyOfRange(_this__u8e3s4, fromIndex, toIndex) {
    Companion_instance_5.l3(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.slice(fromIndex, toIndex);
  }
  function sortWith(_this__u8e3s4, comparator) {
    if (_this__u8e3s4.length > 1) {
      sortArrayWith(_this__u8e3s4, comparator);
    }
  }
  function copyOfRange_0(_this__u8e3s4, fromIndex, toIndex) {
    Companion_instance_5.l3(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'withType' call
    var type = 'LongArray';
    // Inline function 'kotlin.js.asDynamic' call
    var array = _this__u8e3s4.slice(fromIndex, toIndex);
    array.$type$ = type;
    return array;
  }
  function fill_0(_this__u8e3s4, element, fromIndex, toIndex) {
    fromIndex = fromIndex === VOID ? 0 : fromIndex;
    toIndex = toIndex === VOID ? _this__u8e3s4.length : toIndex;
    Companion_instance_5.l3(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.nativeFill' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fill(element, fromIndex, toIndex);
  }
  function copyOf_1(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return arrayCopyResize(_this__u8e3s4, newSize, null);
  }
  function contentToString(_this__u8e3s4) {
    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : joinToString(_this__u8e3s4, ', ', '[', ']');
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function digitToIntImpl(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    var index = binarySearchRange(Digit_getInstance().m3_1, ch);
    var diff = ch - Digit_getInstance().m3_1[index] | 0;
    return diff < 10 ? diff : -1;
  }
  function binarySearchRange(array, needle) {
    var bottom = 0;
    var top = array.length - 1 | 0;
    var middle = -1;
    var value = 0;
    while (bottom <= top) {
      middle = (bottom + top | 0) / 2 | 0;
      value = array[middle];
      if (needle > value)
        bottom = middle + 1 | 0;
      else if (needle === value)
        return middle;
      else
        top = middle - 1 | 0;
    }
    return middle - (needle < value ? 1 : 0) | 0;
  }
  function Digit() {
    Digit_instance = this;
    var tmp = this;
    // Inline function 'kotlin.intArrayOf' call
    tmp.m3_1 = new Int32Array([48, 1632, 1776, 1984, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3558, 3664, 3792, 3872, 4160, 4240, 6112, 6160, 6470, 6608, 6784, 6800, 6992, 7088, 7232, 7248, 42528, 43216, 43264, 43472, 43504, 43600, 44016, 65296]);
  }
  var Digit_instance;
  function Digit_getInstance() {
    if (Digit_instance == null)
      new Digit();
    return Digit_instance;
  }
  function asList_0(_this__u8e3s4) {
    return new asList$1(_this__u8e3s4);
  }
  function asList$1($this_asList) {
    this.n3_1 = $this_asList;
    AbstractList.call(this);
  }
  protoOf(asList$1).k = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.n3_1);
  };
  protoOf(asList$1).l = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.n3_1);
  };
  protoOf(asList$1).o3 = function (element) {
    return ULongArray__contains_impl_v9bgai(this.n3_1, element);
  };
  protoOf(asList$1).f1 = function (element) {
    if (!(element instanceof ULong))
      return false;
    return this.o3(element instanceof ULong ? element.o1_1 : THROW_CCE());
  };
  protoOf(asList$1).p3 = function (index) {
    Companion_instance_5.q3(index, this.k());
    return ULongArray__get_impl_pr71q9(this.n3_1, index);
  };
  protoOf(asList$1).m = function (index) {
    return new ULong(this.p3(index));
  };
  function isWhitespaceImpl(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    return (((9 <= ch ? ch <= 13 : false) ? true : 28 <= ch ? ch <= 32 : false) ? true : ch === 160) ? true : ch > 4096 ? (((((ch === 5760 ? true : 8192 <= ch ? ch <= 8202 : false) ? true : ch === 8232) ? true : ch === 8233) ? true : ch === 8239) ? true : ch === 8287) ? true : ch === 12288 : false;
  }
  function Comparator() {
  }
  function isNaN_0(_this__u8e3s4) {
    return !(_this__u8e3s4 === _this__u8e3s4);
  }
  function takeHighestOneBit(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 === 0) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.countLeadingZeroBits' call
      tmp = 1 << (31 - clz32(_this__u8e3s4) | 0);
    }
    return tmp;
  }
  function collectionToArray(collection) {
    return collectionToArrayCommonImpl(collection);
  }
  function terminateCollectionToArray(collectionSize, array) {
    return array;
  }
  function arrayOfNulls(reference, size) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.arrayOfNulls' call
    // Inline function 'kotlin.js.asDynamic' call
    return fillArrayVal(Array(size), null);
  }
  function listOf(element) {
    return arrayListOf([element]);
  }
  function setOf(element) {
    return hashSetOf([element]);
  }
  function shuffled(_this__u8e3s4) {
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableList_1(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.shuffled.<anonymous>' call
    shuffle_0(this_0);
    return this_0;
  }
  function mapCapacity(expectedSize) {
    return expectedSize;
  }
  function mapOf(pair) {
    return hashMapOf([pair]);
  }
  function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
    Companion_instance_5.l3(startIndex, endIndex, source.length);
    var rangeSize = endIndex - startIndex | 0;
    Companion_instance_5.l3(destinationOffset, destinationOffset + rangeSize | 0, destination.length);
    if (isView(destination) ? isView(source) : false) {
      // Inline function 'kotlin.js.asDynamic' call
      var subrange = source.subarray(startIndex, endIndex);
      // Inline function 'kotlin.js.asDynamic' call
      destination.set(subrange, destinationOffset);
    } else {
      if (!(source === destination) ? true : destinationOffset <= startIndex) {
        var inductionVariable = 0;
        if (inductionVariable < rangeSize)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            destination[destinationOffset + index | 0] = source[startIndex + index | 0];
          }
           while (inductionVariable < rangeSize);
      } else {
        var inductionVariable_0 = rangeSize - 1 | 0;
        if (0 <= inductionVariable_0)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + -1 | 0;
            destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
          }
           while (0 <= inductionVariable_0);
      }
    }
  }
  function checkIndexOverflow(index) {
    if (index < 0) {
      throwIndexOverflow();
    }
    return index;
  }
  function sort_0(_this__u8e3s4) {
    collectionsSort(_this__u8e3s4, naturalOrder());
  }
  function sortWith_0(_this__u8e3s4, comparator) {
    collectionsSort(_this__u8e3s4, comparator);
  }
  function copyToArray(collection) {
    var tmp;
    // Inline function 'kotlin.js.asDynamic' call
    if (collection.toArray !== undefined) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = collection.toArray();
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = collectionToArray(collection);
    }
    return tmp;
  }
  function shuffle_0(_this__u8e3s4) {
    return shuffle(_this__u8e3s4, Default_getInstance());
  }
  function collectionsSort(list, comparator) {
    if (list.k() <= 1)
      return Unit_instance;
    var array = copyToArray(list);
    sortArrayWith(array, comparator);
    var inductionVariable = 0;
    var last = array.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        list.t(i, array[i]);
      }
       while (inductionVariable < last);
  }
  function checkCountOverflow(count) {
    if (count < 0) {
      throwCountOverflow();
    }
    return count;
  }
  function AbstractMutableCollection$removeAll$lambda($elements) {
    return function (it) {
      return $elements.f1(it);
    };
  }
  function AbstractMutableCollection$retainAll$lambda($elements) {
    return function (it) {
      return !$elements.f1(it);
    };
  }
  function AbstractMutableCollection() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractMutableCollection).r3 = function (element) {
    this.s3();
    var iterator = this.h();
    while (iterator.i()) {
      if (equals(iterator.j(), element)) {
        iterator.t3();
        return true;
      }
    }
    return false;
  };
  protoOf(AbstractMutableCollection).q = function (elements) {
    this.s3();
    var modified = false;
    var tmp0_iterator = elements.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      if (this.e(element))
        modified = true;
    }
    return modified;
  };
  protoOf(AbstractMutableCollection).g1 = function (elements) {
    this.s3();
    var tmp = isInterface(this, MutableIterable) ? this : THROW_CCE();
    return removeAll(tmp, AbstractMutableCollection$removeAll$lambda(elements));
  };
  protoOf(AbstractMutableCollection).u3 = function (elements) {
    this.s3();
    var tmp = isInterface(this, MutableIterable) ? this : THROW_CCE();
    return removeAll(tmp, AbstractMutableCollection$retainAll$lambda(elements));
  };
  protoOf(AbstractMutableCollection).toJSON = function () {
    return this.toArray();
  };
  protoOf(AbstractMutableCollection).s3 = function () {
  };
  function IteratorImpl($outer) {
    this.x3_1 = $outer;
    this.v3_1 = 0;
    this.w3_1 = -1;
  }
  protoOf(IteratorImpl).i = function () {
    return this.v3_1 < this.x3_1.k();
  };
  protoOf(IteratorImpl).j = function () {
    if (!this.i())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.v3_1;
    this.v3_1 = tmp1 + 1 | 0;
    tmp.w3_1 = tmp1;
    return this.x3_1.m(this.w3_1);
  };
  protoOf(IteratorImpl).t3 = function () {
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!(this.w3_1 === -1)) {
      // Inline function 'kotlin.collections.IteratorImpl.remove.<anonymous>' call
      var message = 'Call next() or previous() before removing element from the iterator.';
      throw IllegalStateException_init_$Create$_0(toString_1(message));
    }
    this.x3_1.z3(this.w3_1);
    this.v3_1 = this.w3_1;
    this.w3_1 = -1;
  };
  function ListIteratorImpl($outer, index) {
    this.d4_1 = $outer;
    IteratorImpl.call(this, $outer);
    Companion_instance_5.e4(index, this.d4_1.k());
    this.v3_1 = index;
  }
  function SubList(list, fromIndex, toIndex) {
    AbstractMutableList.call(this);
    this.g4_1 = list;
    this.h4_1 = fromIndex;
    this.i4_1 = 0;
    Companion_instance_5.l3(this.h4_1, toIndex, this.g4_1.k());
    this.i4_1 = toIndex - this.h4_1 | 0;
  }
  protoOf(SubList).j4 = function (index, element) {
    Companion_instance_5.e4(index, this.i4_1);
    this.g4_1.j4(this.h4_1 + index | 0, element);
    this.i4_1 = this.i4_1 + 1 | 0;
  };
  protoOf(SubList).m = function (index) {
    Companion_instance_5.q3(index, this.i4_1);
    return this.g4_1.m(this.h4_1 + index | 0);
  };
  protoOf(SubList).z3 = function (index) {
    Companion_instance_5.q3(index, this.i4_1);
    var result = this.g4_1.z3(this.h4_1 + index | 0);
    this.i4_1 = this.i4_1 - 1 | 0;
    return result;
  };
  protoOf(SubList).t = function (index, element) {
    Companion_instance_5.q3(index, this.i4_1);
    return this.g4_1.t(this.h4_1 + index | 0, element);
  };
  protoOf(SubList).k = function () {
    return this.i4_1;
  };
  protoOf(SubList).s3 = function () {
    return this.g4_1.s3();
  };
  function AbstractMutableList$retainAll$lambda($elements) {
    return function (it) {
      return !$elements.f1(it);
    };
  }
  function AbstractMutableList() {
    AbstractMutableCollection.call(this);
    this.y3_1 = 0;
  }
  protoOf(AbstractMutableList).e = function (element) {
    this.s3();
    this.j4(this.k(), element);
    return true;
  };
  protoOf(AbstractMutableList).u3 = function (elements) {
    this.s3();
    return removeAll_0(this, AbstractMutableList$retainAll$lambda(elements));
  };
  protoOf(AbstractMutableList).h = function () {
    return new IteratorImpl(this);
  };
  protoOf(AbstractMutableList).f1 = function (element) {
    return this.k4(element) >= 0;
  };
  protoOf(AbstractMutableList).k4 = function (element) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var index = 0;
      var tmp0_iterator = this.h();
      while (tmp0_iterator.i()) {
        var item = tmp0_iterator.j();
        // Inline function 'kotlin.collections.AbstractMutableList.indexOf.<anonymous>' call
        if (equals(item, element)) {
          tmp$ret$1 = index;
          break $l$block;
        }
        index = index + 1 | 0;
      }
      tmp$ret$1 = -1;
    }
    return tmp$ret$1;
  };
  protoOf(AbstractMutableList).r = function (index) {
    return new ListIteratorImpl(this, index);
  };
  protoOf(AbstractMutableList).c2 = function (fromIndex, toIndex) {
    return new SubList(this, fromIndex, toIndex);
  };
  protoOf(AbstractMutableList).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, List) : false))
      return false;
    return Companion_instance_5.l4(this, other);
  };
  protoOf(AbstractMutableList).hashCode = function () {
    return Companion_instance_5.m4(this);
  };
  function AbstractMutableMap() {
    AbstractMap.call(this);
    this.p4_1 = null;
    this.q4_1 = null;
  }
  protoOf(AbstractMutableMap).r4 = function () {
    return new HashMapValuesDefault(this);
  };
  protoOf(AbstractMutableMap).i2 = function () {
    var tmp0_elvis_lhs = this.q4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = this.r4();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.AbstractMutableMap.<get-values>.<anonymous>' call
      this.q4_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(AbstractMutableMap).s3 = function () {
  };
  function AbstractMutableSet() {
    AbstractMutableCollection.call(this);
  }
  protoOf(AbstractMutableSet).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Set) : false))
      return false;
    return Companion_instance_7.w4(this, other);
  };
  protoOf(AbstractMutableSet).hashCode = function () {
    return Companion_instance_7.x4(this);
  };
  function arrayOfUninitializedElements(capacity) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(capacity >= 0)) {
      // Inline function 'kotlin.collections.arrayOfUninitializedElements.<anonymous>' call
      var message = 'capacity must be non-negative.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.arrayOfNulls' call
    // Inline function 'kotlin.js.asDynamic' call
    return fillArrayVal(Array(capacity), null);
  }
  function resetAt(_this__u8e3s4, index) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4[index] = null;
  }
  function resetRange(_this__u8e3s4, fromIndex, toIndex) {
    // Inline function 'kotlin.js.nativeFill' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fill(null, fromIndex, toIndex);
  }
  function copyOfUninitializedElements(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return copyOf_1(_this__u8e3s4, newSize);
  }
  function Companion_2() {
    Companion_instance_2 = this;
    var tmp = this;
    // Inline function 'kotlin.also' call
    var this_0 = ArrayList_init_$Create$_0(0);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.Companion.Empty.<anonymous>' call
    this_0.p_1 = true;
    tmp.y4_1 = this_0;
  }
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function ArrayList_init_$Init$($this) {
    // Inline function 'kotlin.emptyArray' call
    var tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$() {
    return ArrayList_init_$Init$(objectCreate(protoOf(ArrayList)));
  }
  function ArrayList_init_$Init$_0(initialCapacity, $this) {
    // Inline function 'kotlin.emptyArray' call
    var tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(initialCapacity >= 0)) {
      // Inline function 'kotlin.collections.ArrayList.<init>.<anonymous>' call
      var message = 'Negative initial capacity: ' + initialCapacity;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return $this;
  }
  function ArrayList_init_$Create$_0(initialCapacity) {
    return ArrayList_init_$Init$_0(initialCapacity, objectCreate(protoOf(ArrayList)));
  }
  function ArrayList_init_$Init$_1(elements, $this) {
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$0 = copyToArray(elements);
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_1(elements) {
    return ArrayList_init_$Init$_1(elements, objectCreate(protoOf(ArrayList)));
  }
  function increaseLength($this, amount) {
    var previous = $this.k();
    // Inline function 'kotlin.js.asDynamic' call
    $this.o_1.length = $this.k() + amount | 0;
    return previous;
  }
  function rangeCheck($this, index) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.rangeCheck.<anonymous>' call
    Companion_instance_5.q3(index, $this.k());
    return index;
  }
  function insertionRangeCheck($this, index) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.insertionRangeCheck.<anonymous>' call
    Companion_instance_5.e4(index, $this.k());
    return index;
  }
  function ArrayList(array) {
    Companion_getInstance_2();
    AbstractMutableList.call(this);
    this.o_1 = array;
    this.p_1 = false;
  }
  protoOf(ArrayList).k = function () {
    return this.o_1.length;
  };
  protoOf(ArrayList).m = function (index) {
    var tmp = this.o_1[rangeCheck(this, index)];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayList).t = function (index, element) {
    this.s3();
    rangeCheck(this, index);
    // Inline function 'kotlin.apply' call
    var this_0 = this.o_1[index];
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.ArrayList.set.<anonymous>' call
    this.o_1[index] = element;
    var tmp = this_0;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayList).e = function (element) {
    this.s3();
    // Inline function 'kotlin.js.asDynamic' call
    this.o_1.push(element);
    this.y3_1 = this.y3_1 + 1 | 0;
    return true;
  };
  protoOf(ArrayList).j4 = function (index, element) {
    this.s3();
    // Inline function 'kotlin.js.asDynamic' call
    this.o_1.splice(insertionRangeCheck(this, index), 0, element);
    this.y3_1 = this.y3_1 + 1 | 0;
  };
  protoOf(ArrayList).q = function (elements) {
    this.s3();
    if (elements.l())
      return false;
    var offset = increaseLength(this, elements.k());
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var tmp0_iterator = elements.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'kotlin.collections.ArrayList.addAll.<anonymous>' call
      var tmp1 = index;
      index = tmp1 + 1 | 0;
      var index_0 = checkIndexOverflow(tmp1);
      this.o_1[offset + index_0 | 0] = item;
    }
    this.y3_1 = this.y3_1 + 1 | 0;
    return true;
  };
  protoOf(ArrayList).z3 = function (index) {
    this.s3();
    rangeCheck(this, index);
    this.y3_1 = this.y3_1 + 1 | 0;
    var tmp;
    if (index === get_lastIndex_0(this)) {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = this.o_1.pop();
    } else {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = this.o_1.splice(index, 1)[0];
    }
    return tmp;
  };
  protoOf(ArrayList).z4 = function () {
    this.s3();
    var tmp = this;
    // Inline function 'kotlin.emptyArray' call
    tmp.o_1 = [];
    this.y3_1 = this.y3_1 + 1 | 0;
  };
  protoOf(ArrayList).k4 = function (element) {
    return indexOf(this.o_1, element);
  };
  protoOf(ArrayList).toString = function () {
    return arrayToString(this.o_1);
  };
  protoOf(ArrayList).a5 = function () {
    return [].slice.call(this.o_1);
  };
  protoOf(ArrayList).toArray = function () {
    return this.a5();
  };
  protoOf(ArrayList).s3 = function () {
    if (this.p_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  var _stableSortingIsSupported;
  function sortArray(array) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArray$lambda;
      // Inline function 'kotlin.js.asDynamic' call
      array.sort(comparison);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      mergeSort(array, 0, get_lastIndex(array), naturalOrder());
    }
  }
  function sortArrayWith(array, comparator) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArrayWith$lambda(comparator);
      // Inline function 'kotlin.js.asDynamic' call
      array.sort(comparison);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      mergeSort(array, 0, get_lastIndex(array), comparator);
    }
  }
  function getStableSortingIsSupported() {
    var tmp0_safe_receiver = _stableSortingIsSupported;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return tmp0_safe_receiver;
    }
    _stableSortingIsSupported = false;
    // Inline function 'kotlin.js.unsafeCast' call
    var array = [];
    var inductionVariable = 0;
    if (inductionVariable < 600)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        array.push(index);
      }
       while (inductionVariable < 600);
    var comparison = getStableSortingIsSupported$lambda;
    // Inline function 'kotlin.js.asDynamic' call
    array.sort(comparison);
    var inductionVariable_0 = 1;
    var last = array.length;
    if (inductionVariable_0 < last)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var a = array[index_0 - 1 | 0];
        var b = array[index_0];
        if ((a & 3) === (b & 3) ? a >= b : false)
          return false;
      }
       while (inductionVariable_0 < last);
    _stableSortingIsSupported = true;
    return true;
  }
  function mergeSort(array, start, endInclusive, comparator) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.arrayOfNulls' call
    var size = array.length;
    // Inline function 'kotlin.js.asDynamic' call
    var buffer = fillArrayVal(Array(size), null);
    var result = mergeSort_0(array, buffer, start, endInclusive, comparator);
    if (!(result === array)) {
      var inductionVariable = start;
      if (inductionVariable <= endInclusive)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          array[i] = result[i];
        }
         while (!(i === endInclusive));
    }
  }
  function mergeSort_0(array, buffer, start, end, comparator) {
    if (start === end) {
      return array;
    }
    var median = (start + end | 0) / 2 | 0;
    var left = mergeSort_0(array, buffer, start, median, comparator);
    var right = mergeSort_0(array, buffer, median + 1 | 0, end, comparator);
    var target = left === buffer ? array : buffer;
    var leftIndex = start;
    var rightIndex = median + 1 | 0;
    var inductionVariable = start;
    if (inductionVariable <= end)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (leftIndex <= median ? rightIndex <= end : false) {
          var leftValue = left[leftIndex];
          var rightValue = right[rightIndex];
          if (comparator.compare(leftValue, rightValue) <= 0) {
            target[i] = leftValue;
            leftIndex = leftIndex + 1 | 0;
          } else {
            target[i] = rightValue;
            rightIndex = rightIndex + 1 | 0;
          }
        } else if (leftIndex <= median) {
          target[i] = left[leftIndex];
          leftIndex = leftIndex + 1 | 0;
        } else {
          target[i] = right[rightIndex];
          rightIndex = rightIndex + 1 | 0;
        }
      }
       while (!(i === end));
    return target;
  }
  function sortArray$lambda(a, b) {
    return compareTo_0(a, b);
  }
  function sortArrayWith$lambda($comparator) {
    return function (a, b) {
      return $comparator.compare(a, b);
    };
  }
  function getStableSortingIsSupported$lambda(a, b) {
    return (a & 3) - (b & 3) | 0;
  }
  function HashMap_init_$Init$(internalMap, $this) {
    AbstractMutableMap.call($this);
    HashMap.call($this);
    $this.f5_1 = internalMap;
    return $this;
  }
  function HashMap_init_$Init$_0($this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$(), $this);
    return $this;
  }
  function HashMap_init_$Create$() {
    return HashMap_init_$Init$_0(objectCreate(protoOf(HashMap)));
  }
  function HashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$_2(initialCapacity, loadFactor), $this);
    return $this;
  }
  function HashMap_init_$Init$_2(initialCapacity, $this) {
    HashMap_init_$Init$_1(initialCapacity, 1.0, $this);
    return $this;
  }
  function HashMap_init_$Create$_0(initialCapacity) {
    return HashMap_init_$Init$_2(initialCapacity, objectCreate(protoOf(HashMap)));
  }
  function HashMap_init_$Init$_3(original, $this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$_1(original), $this);
    return $this;
  }
  protoOf(HashMap).f2 = function (key) {
    return this.f5_1.h5(key);
  };
  protoOf(HashMap).g2 = function (value) {
    return this.f5_1.g2(value);
  };
  protoOf(HashMap).r4 = function () {
    return new HashMapValues(this.f5_1);
  };
  protoOf(HashMap).j2 = function () {
    var tmp0_elvis_lhs = this.g5_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new HashMapEntrySet(this.f5_1);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.HashMap.<get-entries>.<anonymous>' call
      this.g5_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(HashMap).h2 = function (key) {
    return this.f5_1.h2(key);
  };
  protoOf(HashMap).s4 = function (key, value) {
    return this.f5_1.s4(key, value);
  };
  protoOf(HashMap).i5 = function (key) {
    return this.f5_1.i5(key);
  };
  protoOf(HashMap).k = function () {
    return this.f5_1.k();
  };
  protoOf(HashMap).j5 = function (from) {
    return this.f5_1.j5(from);
  };
  function HashMap() {
    this.g5_1 = null;
  }
  function HashMapValues(backing) {
    AbstractMutableCollection.call(this);
    this.k5_1 = backing;
  }
  protoOf(HashMapValues).k = function () {
    return this.k5_1.k();
  };
  protoOf(HashMapValues).l = function () {
    return this.k5_1.k() === 0;
  };
  protoOf(HashMapValues).l5 = function (element) {
    return this.k5_1.g2(element);
  };
  protoOf(HashMapValues).f1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.l5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValues).m5 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapValues).e = function (element) {
    return this.m5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValues).n5 = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapValues).q = function (elements) {
    return this.n5(elements);
  };
  protoOf(HashMapValues).h = function () {
    return this.k5_1.o5();
  };
  protoOf(HashMapValues).s3 = function () {
    return this.k5_1.p5();
  };
  function HashMapEntrySet(backing) {
    HashMapEntrySetBase.call(this, backing);
  }
  protoOf(HashMapEntrySet).h = function () {
    return this.r5_1.s5();
  };
  function HashMapEntrySetBase(backing) {
    AbstractMutableSet.call(this);
    this.r5_1 = backing;
  }
  protoOf(HashMapEntrySetBase).k = function () {
    return this.r5_1.k();
  };
  protoOf(HashMapEntrySetBase).l = function () {
    return this.r5_1.k() === 0;
  };
  protoOf(HashMapEntrySetBase).t5 = function (element) {
    return this.r5_1.w5(element);
  };
  protoOf(HashMapEntrySetBase).f1 = function (element) {
    if (!(!(element == null) ? isInterface(element, Entry) : false))
      return false;
    return this.t5((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).u5 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapEntrySetBase).e = function (element) {
    return this.u5((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).q = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapEntrySetBase).v5 = function (element) {
    return this.r5_1.x5(element);
  };
  protoOf(HashMapEntrySetBase).r3 = function (element) {
    if (!(!(element == null) ? isInterface(element, Entry) : false))
      return false;
    return this.v5((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).b2 = function (elements) {
    return this.r5_1.y5(elements);
  };
  protoOf(HashMapEntrySetBase).s3 = function () {
    return this.r5_1.p5();
  };
  function HashMapValuesDefault$iterator$1($entryIterator) {
    this.z5_1 = $entryIterator;
  }
  protoOf(HashMapValuesDefault$iterator$1).i = function () {
    return this.z5_1.i();
  };
  protoOf(HashMapValuesDefault$iterator$1).j = function () {
    return this.z5_1.j().e2();
  };
  protoOf(HashMapValuesDefault$iterator$1).t3 = function () {
    return this.z5_1.t3();
  };
  function HashMapValuesDefault(backingMap) {
    AbstractMutableCollection.call(this);
    this.a6_1 = backingMap;
  }
  protoOf(HashMapValuesDefault).m5 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on values');
  };
  protoOf(HashMapValuesDefault).e = function (element) {
    return this.m5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValuesDefault).l5 = function (element) {
    return this.a6_1.g2(element);
  };
  protoOf(HashMapValuesDefault).f1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.l5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValuesDefault).h = function () {
    var entryIterator = this.a6_1.j2().h();
    return new HashMapValuesDefault$iterator$1(entryIterator);
  };
  protoOf(HashMapValuesDefault).k = function () {
    return this.a6_1.k();
  };
  protoOf(HashMapValuesDefault).s3 = function () {
    return this.a6_1.s3();
  };
  function HashSet_init_$Init$(map, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.a1_1 = map;
    return $this;
  }
  function HashSet_init_$Init$_0($this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$(), $this);
    return $this;
  }
  function HashSet_init_$Create$() {
    return HashSet_init_$Init$_0(objectCreate(protoOf(HashSet)));
  }
  function HashSet_init_$Init$_1(elements, $this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$_0(elements.k()), $this);
    var tmp0_iterator = elements.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      $this.a1_1.s4(element, true);
    }
    return $this;
  }
  function HashSet_init_$Init$_2(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$_2(initialCapacity, loadFactor), $this);
    return $this;
  }
  function HashSet_init_$Init$_3(initialCapacity, $this) {
    HashSet_init_$Init$_2(initialCapacity, 1.0, $this);
    return $this;
  }
  function HashSet_init_$Create$_0(initialCapacity) {
    return HashSet_init_$Init$_3(initialCapacity, objectCreate(protoOf(HashSet)));
  }
  protoOf(HashSet).e = function (element) {
    return this.a1_1.s4(element, true) == null;
  };
  protoOf(HashSet).f1 = function (element) {
    return this.a1_1.h5(element);
  };
  protoOf(HashSet).l = function () {
    return this.a1_1.k() === 0;
  };
  protoOf(HashSet).h = function () {
    return this.a1_1.b6();
  };
  protoOf(HashSet).r3 = function (element) {
    return !(this.a1_1.i5(element) == null);
  };
  protoOf(HashSet).k = function () {
    return this.a1_1.k();
  };
  function HashSet() {
  }
  function computeHashSize($this, capacity) {
    return takeHighestOneBit(imul(coerceAtLeast(capacity, 1), 3));
  }
  function computeShift($this, hashSize) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    return clz32(hashSize) + 1 | 0;
  }
  function InternalHashMap_init_$Init$($this) {
    InternalHashMap_init_$Init$_0(8, $this);
    return $this;
  }
  function InternalHashMap_init_$Create$() {
    return InternalHashMap_init_$Init$(objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_0(initialCapacity, $this) {
    InternalHashMap.call($this, arrayOfUninitializedElements(initialCapacity), null, new Int32Array(initialCapacity), new Int32Array(computeHashSize(Companion_instance_3, initialCapacity)), 2, 0);
    return $this;
  }
  function InternalHashMap_init_$Create$_0(initialCapacity) {
    return InternalHashMap_init_$Init$_0(initialCapacity, objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_1(original, $this) {
    InternalHashMap_init_$Init$_0(original.k(), $this);
    $this.j5(original);
    return $this;
  }
  function InternalHashMap_init_$Create$_1(original) {
    return InternalHashMap_init_$Init$_1(original, objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_2(initialCapacity, loadFactor, $this) {
    InternalHashMap_init_$Init$_0(initialCapacity, $this);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(loadFactor > 0.0)) {
      // Inline function 'kotlin.collections.InternalHashMap.<init>.<anonymous>' call
      var message = 'Non-positive load factor: ' + loadFactor;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return $this;
  }
  function InternalHashMap_init_$Create$_2(initialCapacity, loadFactor) {
    return InternalHashMap_init_$Init$_2(initialCapacity, loadFactor, objectCreate(protoOf(InternalHashMap)));
  }
  function _get_capacity__a9k9f3($this) {
    return $this.c6_1.length;
  }
  function _get_hashSize__tftcho($this) {
    return $this.f6_1.length;
  }
  function registerModification($this) {
    $this.j6_1 = $this.j6_1 + 1 | 0;
  }
  function ensureExtraCapacity($this, n) {
    if (shouldCompact($this, n)) {
      rehash($this, _get_hashSize__tftcho($this));
    } else {
      ensureCapacity($this, $this.h6_1 + n | 0);
    }
  }
  function shouldCompact($this, extraCapacity) {
    var spareCapacity = _get_capacity__a9k9f3($this) - $this.h6_1 | 0;
    var gaps = $this.h6_1 - $this.k() | 0;
    return (spareCapacity < extraCapacity ? (gaps + spareCapacity | 0) >= extraCapacity : false) ? gaps >= (_get_capacity__a9k9f3($this) / 4 | 0) : false;
  }
  function ensureCapacity($this, minCapacity) {
    if (minCapacity < 0)
      throw RuntimeException_init_$Create$_0('too many elements');
    if (minCapacity > _get_capacity__a9k9f3($this)) {
      var newSize = Companion_instance_5.m6(_get_capacity__a9k9f3($this), minCapacity);
      $this.c6_1 = copyOfUninitializedElements($this.c6_1, newSize);
      var tmp = $this;
      var tmp0_safe_receiver = $this.d6_1;
      tmp.d6_1 = tmp0_safe_receiver == null ? null : copyOfUninitializedElements(tmp0_safe_receiver, newSize);
      $this.e6_1 = copyOf_0($this.e6_1, newSize);
      var newHashSize = computeHashSize(Companion_instance_3, newSize);
      if (newHashSize > _get_hashSize__tftcho($this)) {
        rehash($this, newHashSize);
      }
    }
  }
  function allocateValuesArray($this) {
    var curValuesArray = $this.d6_1;
    if (!(curValuesArray == null))
      return curValuesArray;
    var newValuesArray = arrayOfUninitializedElements(_get_capacity__a9k9f3($this));
    $this.d6_1 = newValuesArray;
    return newValuesArray;
  }
  function hash($this, key) {
    return key == null ? 0 : imul(hashCode(key), -1640531527) >>> $this.i6_1 | 0;
  }
  function compact($this) {
    var i = 0;
    var j = 0;
    var valuesArray = $this.d6_1;
    while (i < $this.h6_1) {
      if ($this.e6_1[i] >= 0) {
        $this.c6_1[j] = $this.c6_1[i];
        if (!(valuesArray == null)) {
          valuesArray[j] = valuesArray[i];
        }
        j = j + 1 | 0;
      }
      i = i + 1 | 0;
    }
    resetRange($this.c6_1, j, $this.h6_1);
    if (valuesArray == null)
      null;
    else {
      resetRange(valuesArray, j, $this.h6_1);
    }
    $this.h6_1 = j;
  }
  function rehash($this, newHashSize) {
    registerModification($this);
    if ($this.h6_1 > $this.k6_1) {
      compact($this);
    }
    if (!(newHashSize === _get_hashSize__tftcho($this))) {
      $this.f6_1 = new Int32Array(newHashSize);
      $this.i6_1 = computeShift(Companion_instance_3, newHashSize);
    } else {
      fill($this.f6_1, 0, 0, _get_hashSize__tftcho($this));
    }
    var i = 0;
    while (i < $this.h6_1) {
      var tmp0 = i;
      i = tmp0 + 1 | 0;
      if (!putRehash($this, tmp0)) {
        throw IllegalStateException_init_$Create$_0('This cannot happen with fixed magic multiplier and grow-only hash array. Have object hashCodes changed?');
      }
    }
  }
  function putRehash($this, i) {
    var hash_0 = hash($this, $this.c6_1[i]);
    var probesLeft = $this.g6_1;
    while (true) {
      var index = $this.f6_1[hash_0];
      if (index === 0) {
        $this.f6_1[hash_0] = i + 1 | 0;
        $this.e6_1[i] = hash_0;
        return true;
      }
      probesLeft = probesLeft - 1 | 0;
      if (probesLeft < 0)
        return false;
      var tmp0 = hash_0;
      hash_0 = tmp0 - 1 | 0;
      if (tmp0 === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
    }
  }
  function findKey($this, key) {
    var hash_0 = hash($this, key);
    var probesLeft = $this.g6_1;
    while (true) {
      var index = $this.f6_1[hash_0];
      if (index === 0)
        return -1;
      if (index > 0 ? equals($this.c6_1[index - 1 | 0], key) : false)
        return index - 1 | 0;
      probesLeft = probesLeft - 1 | 0;
      if (probesLeft < 0)
        return -1;
      var tmp0 = hash_0;
      hash_0 = tmp0 - 1 | 0;
      if (tmp0 === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
    }
  }
  function findValue($this, value) {
    var i = $this.h6_1;
    $l$loop: while (true) {
      i = i - 1 | 0;
      if (!(i >= 0)) {
        break $l$loop;
      }
      if ($this.e6_1[i] >= 0 ? equals(ensureNotNull($this.d6_1)[i], value) : false)
        return i;
    }
    return -1;
  }
  function addKey($this, key) {
    $this.p5();
    retry: while (true) {
      var hash_0 = hash($this, key);
      var tentativeMaxProbeDistance = coerceAtMost(imul($this.g6_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
      var probeDistance = 0;
      while (true) {
        var index = $this.f6_1[hash_0];
        if (index <= 0) {
          if ($this.h6_1 >= _get_capacity__a9k9f3($this)) {
            ensureExtraCapacity($this, 1);
            continue retry;
          }
          var tmp1 = $this.h6_1;
          $this.h6_1 = tmp1 + 1 | 0;
          var putIndex = tmp1;
          $this.c6_1[putIndex] = key;
          $this.e6_1[putIndex] = hash_0;
          $this.f6_1[hash_0] = putIndex + 1 | 0;
          $this.k6_1 = $this.k6_1 + 1 | 0;
          registerModification($this);
          if (probeDistance > $this.g6_1)
            $this.g6_1 = probeDistance;
          return putIndex;
        }
        if (equals($this.c6_1[index - 1 | 0], key)) {
          return -index | 0;
        }
        probeDistance = probeDistance + 1 | 0;
        if (probeDistance > tentativeMaxProbeDistance) {
          rehash($this, imul(_get_hashSize__tftcho($this), 2));
          continue retry;
        }
        var tmp4 = hash_0;
        hash_0 = tmp4 - 1 | 0;
        if (tmp4 === 0)
          hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
      }
    }
  }
  function removeKey($this, key) {
    $this.p5();
    var index = findKey($this, key);
    if (index < 0)
      return -1;
    removeKeyAt($this, index);
    return index;
  }
  function removeKeyAt($this, index) {
    resetAt($this.c6_1, index);
    removeHashAt($this, $this.e6_1[index]);
    $this.e6_1[index] = -1;
    $this.k6_1 = $this.k6_1 - 1 | 0;
    registerModification($this);
  }
  function removeHashAt($this, removedHash) {
    var hash_0 = removedHash;
    var hole = removedHash;
    var probeDistance = 0;
    var patchAttemptsLeft = coerceAtMost(imul($this.g6_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
    while (true) {
      var tmp0 = hash_0;
      hash_0 = tmp0 - 1 | 0;
      if (tmp0 === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
      probeDistance = probeDistance + 1 | 0;
      if (probeDistance > $this.g6_1) {
        $this.f6_1[hole] = 0;
        return Unit_instance;
      }
      var index = $this.f6_1[hash_0];
      if (index === 0) {
        $this.f6_1[hole] = 0;
        return Unit_instance;
      }
      if (index < 0) {
        $this.f6_1[hole] = -1;
        hole = hash_0;
        probeDistance = 0;
      } else {
        var otherHash = hash($this, $this.c6_1[index - 1 | 0]);
        if (((otherHash - hash_0 | 0) & (_get_hashSize__tftcho($this) - 1 | 0)) >= probeDistance) {
          $this.f6_1[hole] = index;
          $this.e6_1[index - 1 | 0] = hole;
          hole = hash_0;
          probeDistance = 0;
        }
      }
      patchAttemptsLeft = patchAttemptsLeft - 1 | 0;
      if (patchAttemptsLeft < 0) {
        $this.f6_1[hole] = -1;
        return Unit_instance;
      }
    }
  }
  function contentEquals_1($this, other) {
    return $this.k6_1 === other.k() ? $this.y5(other.j2()) : false;
  }
  function putEntry($this, entry) {
    var index = addKey($this, entry.d2());
    var valuesArray = allocateValuesArray($this);
    if (index >= 0) {
      valuesArray[index] = entry.e2();
      return true;
    }
    var oldValue = valuesArray[(-index | 0) - 1 | 0];
    if (!equals(entry.e2(), oldValue)) {
      valuesArray[(-index | 0) - 1 | 0] = entry.e2();
      return true;
    }
    return false;
  }
  function putAllEntries($this, from) {
    if (from.l())
      return false;
    ensureExtraCapacity($this, from.k());
    var it = from.h();
    var updated = false;
    while (it.i()) {
      if (putEntry($this, it.j()))
        updated = true;
    }
    return updated;
  }
  function Companion_3() {
    this.n6_1 = -1640531527;
    this.o6_1 = 8;
    this.p6_1 = 2;
    this.q6_1 = -1;
  }
  var Companion_instance_3;
  function Companion_getInstance_3() {
    return Companion_instance_3;
  }
  function Itr(map) {
    this.r6_1 = map;
    this.s6_1 = 0;
    this.t6_1 = -1;
    this.u6_1 = this.r6_1.j6_1;
    this.v6();
  }
  protoOf(Itr).v6 = function () {
    while (this.s6_1 < this.r6_1.h6_1 ? this.r6_1.e6_1[this.s6_1] < 0 : false) {
      this.s6_1 = this.s6_1 + 1 | 0;
    }
  };
  protoOf(Itr).i = function () {
    return this.s6_1 < this.r6_1.h6_1;
  };
  protoOf(Itr).t3 = function () {
    this.w6();
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!(this.t6_1 === -1)) {
      // Inline function 'kotlin.collections.Itr.remove.<anonymous>' call
      var message = 'Call next() before removing element from the iterator.';
      throw IllegalStateException_init_$Create$_0(toString_1(message));
    }
    this.r6_1.p5();
    removeKeyAt(this.r6_1, this.t6_1);
    this.t6_1 = -1;
    this.u6_1 = this.r6_1.j6_1;
  };
  protoOf(Itr).w6 = function () {
    if (!(this.r6_1.j6_1 === this.u6_1))
      throw ConcurrentModificationException_init_$Create$();
  };
  function KeysItr(map) {
    Itr.call(this, map);
  }
  protoOf(KeysItr).j = function () {
    this.w6();
    if (this.s6_1 >= this.r6_1.h6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.s6_1;
    this.s6_1 = tmp1 + 1 | 0;
    tmp.t6_1 = tmp1;
    var result = this.r6_1.c6_1[this.t6_1];
    this.v6();
    return result;
  };
  function ValuesItr(map) {
    Itr.call(this, map);
  }
  protoOf(ValuesItr).j = function () {
    this.w6();
    if (this.s6_1 >= this.r6_1.h6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.s6_1;
    this.s6_1 = tmp1 + 1 | 0;
    tmp.t6_1 = tmp1;
    var result = ensureNotNull(this.r6_1.d6_1)[this.t6_1];
    this.v6();
    return result;
  };
  function EntriesItr(map) {
    Itr.call(this, map);
  }
  protoOf(EntriesItr).j = function () {
    this.w6();
    if (this.s6_1 >= this.r6_1.h6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.s6_1;
    this.s6_1 = tmp1 + 1 | 0;
    tmp.t6_1 = tmp1;
    var result = new EntryRef(this.r6_1, this.t6_1);
    this.v6();
    return result;
  };
  protoOf(EntriesItr).j7 = function () {
    if (this.s6_1 >= this.r6_1.h6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.s6_1;
    this.s6_1 = tmp1 + 1 | 0;
    tmp.t6_1 = tmp1;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.r6_1.c6_1[this.t6_1];
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp_0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = ensureNotNull(this.r6_1.d6_1)[this.t6_1];
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    var result = tmp_0 ^ (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0);
    this.v6();
    return result;
  };
  protoOf(EntriesItr).k7 = function (sb) {
    if (this.s6_1 >= this.r6_1.h6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var tmp1 = this.s6_1;
    this.s6_1 = tmp1 + 1 | 0;
    tmp.t6_1 = tmp1;
    var key = this.r6_1.c6_1[this.t6_1];
    if (equals(key, this.r6_1)) {
      sb.m7('(this Map)');
    } else {
      sb.l7(key);
    }
    sb.n7(_Char___init__impl__6a9atx(61));
    var value = ensureNotNull(this.r6_1.d6_1)[this.t6_1];
    if (equals(value, this.r6_1)) {
      sb.m7('(this Map)');
    } else {
      sb.l7(value);
    }
    this.v6();
  };
  function EntryRef(map, index) {
    this.o7_1 = map;
    this.p7_1 = index;
  }
  protoOf(EntryRef).d2 = function () {
    return this.o7_1.c6_1[this.p7_1];
  };
  protoOf(EntryRef).e2 = function () {
    return ensureNotNull(this.o7_1.d6_1)[this.p7_1];
  };
  protoOf(EntryRef).equals = function (other) {
    var tmp;
    var tmp_0;
    if (!(other == null) ? isInterface(other, Entry) : false) {
      tmp_0 = equals(other.d2(), this.d2());
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals(other.e2(), this.e2());
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EntryRef).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.d2();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = this.e2();
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    return tmp ^ (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0);
  };
  protoOf(EntryRef).toString = function () {
    return '' + this.d2() + '=' + this.e2();
  };
  function InternalHashMap(keysArray, valuesArray, presenceArray, hashArray, maxProbeDistance, length) {
    this.c6_1 = keysArray;
    this.d6_1 = valuesArray;
    this.e6_1 = presenceArray;
    this.f6_1 = hashArray;
    this.g6_1 = maxProbeDistance;
    this.h6_1 = length;
    this.i6_1 = computeShift(Companion_instance_3, _get_hashSize__tftcho(this));
    this.j6_1 = 0;
    this.k6_1 = 0;
    this.l6_1 = false;
  }
  protoOf(InternalHashMap).k = function () {
    return this.k6_1;
  };
  protoOf(InternalHashMap).g2 = function (value) {
    return findValue(this, value) >= 0;
  };
  protoOf(InternalHashMap).h2 = function (key) {
    var index = findKey(this, key);
    if (index < 0)
      return null;
    return ensureNotNull(this.d6_1)[index];
  };
  protoOf(InternalHashMap).h5 = function (key) {
    return findKey(this, key) >= 0;
  };
  protoOf(InternalHashMap).s4 = function (key, value) {
    var index = addKey(this, key);
    var valuesArray = allocateValuesArray(this);
    if (index < 0) {
      var oldValue = valuesArray[(-index | 0) - 1 | 0];
      valuesArray[(-index | 0) - 1 | 0] = value;
      return oldValue;
    } else {
      valuesArray[index] = value;
      return null;
    }
  };
  protoOf(InternalHashMap).j5 = function (from) {
    this.p5();
    putAllEntries(this, from.j2());
  };
  protoOf(InternalHashMap).i5 = function (key) {
    var index = removeKey(this, key);
    if (index < 0)
      return null;
    var valuesArray = ensureNotNull(this.d6_1);
    var oldValue = valuesArray[index];
    resetAt(valuesArray, index);
    return oldValue;
  };
  protoOf(InternalHashMap).equals = function (other) {
    var tmp;
    if (other === this) {
      tmp = true;
    } else {
      var tmp_0;
      if (!(other == null) ? isInterface(other, Map_0) : false) {
        tmp_0 = contentEquals_1(this, other);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(InternalHashMap).hashCode = function () {
    var result = 0;
    var it = this.s5();
    while (it.i()) {
      result = result + it.j7() | 0;
    }
    return result;
  };
  protoOf(InternalHashMap).toString = function () {
    var sb = StringBuilder_init_$Create$(2 + imul(this.k6_1, 3) | 0);
    sb.m7('{');
    var i = 0;
    var it = this.s5();
    while (it.i()) {
      if (i > 0) {
        sb.m7(', ');
      }
      it.k7(sb);
      i = i + 1 | 0;
    }
    sb.m7('}');
    return sb.toString();
  };
  protoOf(InternalHashMap).p5 = function () {
    if (this.l6_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(InternalHashMap).w5 = function (entry) {
    var index = findKey(this, entry.d2());
    if (index < 0)
      return false;
    return equals(ensureNotNull(this.d6_1)[index], entry.e2());
  };
  protoOf(InternalHashMap).q7 = function (entry) {
    return this.w5(isInterface(entry, Entry) ? entry : THROW_CCE());
  };
  protoOf(InternalHashMap).x5 = function (entry) {
    this.p5();
    var index = findKey(this, entry.d2());
    if (index < 0)
      return false;
    if (!equals(ensureNotNull(this.d6_1)[index], entry.e2()))
      return false;
    removeKeyAt(this, index);
    return true;
  };
  protoOf(InternalHashMap).b6 = function () {
    return new KeysItr(this);
  };
  protoOf(InternalHashMap).o5 = function () {
    return new ValuesItr(this);
  };
  protoOf(InternalHashMap).s5 = function () {
    return new EntriesItr(this);
  };
  function InternalMap() {
  }
  function LinkedHashMap_init_$Init$($this) {
    HashMap_init_$Init$_0($this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$() {
    return LinkedHashMap_init_$Init$(objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_0(initialCapacity, $this) {
    HashMap_init_$Init$_2(initialCapacity, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_0(initialCapacity) {
    return LinkedHashMap_init_$Init$_0(initialCapacity, objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$_1(initialCapacity, loadFactor, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_1(initialCapacity, loadFactor) {
    return LinkedHashMap_init_$Init$_1(initialCapacity, loadFactor, objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_2(original, $this) {
    HashMap_init_$Init$_3(original, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_2(original) {
    return LinkedHashMap_init_$Init$_2(original, objectCreate(protoOf(LinkedHashMap)));
  }
  protoOf(LinkedHashMap).s3 = function () {
    return this.f5_1.p5();
  };
  function LinkedHashMap() {
  }
  function LinkedHashSet_init_$Init$($this) {
    HashSet_init_$Init$_0($this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$() {
    return LinkedHashSet_init_$Init$(objectCreate(protoOf(LinkedHashSet)));
  }
  function LinkedHashSet_init_$Init$_0(elements, $this) {
    HashSet_init_$Init$_1(elements, $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_0(elements) {
    return LinkedHashSet_init_$Init$_0(elements, objectCreate(protoOf(LinkedHashSet)));
  }
  function LinkedHashSet_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$_2(initialCapacity, loadFactor, $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Init$_2(initialCapacity, $this) {
    LinkedHashSet_init_$Init$_1(initialCapacity, 1.0, $this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_1(initialCapacity) {
    return LinkedHashSet_init_$Init$_2(initialCapacity, objectCreate(protoOf(LinkedHashSet)));
  }
  protoOf(LinkedHashSet).s3 = function () {
    return this.a1_1.p5();
  };
  function LinkedHashSet() {
  }
  function RandomAccess() {
  }
  function get_output() {
    _init_properties_console_kt__rfg7jv();
    return output;
  }
  var output;
  function BaseOutput() {
  }
  protoOf(BaseOutput).y7 = function () {
    this.z7('\n');
  };
  protoOf(BaseOutput).a8 = function (message) {
    this.z7(message);
    this.y7();
  };
  function NodeJsOutput(outputStream) {
    BaseOutput.call(this);
    this.b8_1 = outputStream;
  }
  protoOf(NodeJsOutput).z7 = function (message) {
    // Inline function 'kotlin.io.String' call
    var messageString = String(message);
    this.b8_1.write(messageString);
  };
  function BufferedOutputToConsoleLog() {
    BufferedOutput.call(this);
  }
  protoOf(BufferedOutputToConsoleLog).z7 = function (message) {
    // Inline function 'kotlin.io.String' call
    var s = String(message);
    // Inline function 'kotlin.text.nativeLastIndexOf' call
    // Inline function 'kotlin.js.asDynamic' call
    var i = s.lastIndexOf('\n', 0);
    if (i >= 0) {
      var tmp = this;
      var tmp_0 = this.d8_1;
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp.d8_1 = tmp_0 + s.substring(0, i);
      this.e8();
      // Inline function 'kotlin.text.substring' call
      var this_0 = s;
      var startIndex = i + 1 | 0;
      // Inline function 'kotlin.js.asDynamic' call
      s = this_0.substring(startIndex);
    }
    this.d8_1 = this.d8_1 + s;
  };
  protoOf(BufferedOutputToConsoleLog).e8 = function () {
    console.log(this.d8_1);
    this.d8_1 = '';
  };
  function BufferedOutput() {
    BaseOutput.call(this);
    this.d8_1 = '';
  }
  protoOf(BufferedOutput).z7 = function (message) {
    var tmp = this;
    var tmp_0 = this.d8_1;
    // Inline function 'kotlin.io.String' call
    tmp.d8_1 = tmp_0 + String(message);
  };
  function println(message) {
    _init_properties_console_kt__rfg7jv();
    get_output().a8(message);
  }
  var properties_initialized_console_kt_gll9dl;
  function _init_properties_console_kt__rfg7jv() {
    if (!properties_initialized_console_kt_gll9dl) {
      properties_initialized_console_kt_gll9dl = true;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.io.output.<anonymous>' call
      var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
      output = isNode ? new NodeJsOutput(process.stdout) : new BufferedOutputToConsoleLog();
    }
  }
  function releaseIntercepted($this) {
    var intercepted = $this.m8_1;
    if (!(intercepted == null) ? !(intercepted === $this) : false) {
      ensureNotNull($this.n8().o8(Key_instance)).p8(intercepted);
    }
    $this.m8_1 = CompletedContinuation_instance;
  }
  function CoroutineImpl(resultContinuation) {
    this.f8_1 = resultContinuation;
    this.g8_1 = 0;
    this.h8_1 = 0;
    this.i8_1 = null;
    this.j8_1 = null;
    this.k8_1 = null;
    var tmp = this;
    var tmp0_safe_receiver = this.f8_1;
    tmp.l8_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.n8();
    this.m8_1 = null;
  }
  protoOf(CoroutineImpl).n8 = function () {
    return ensureNotNull(this.l8_1);
  };
  protoOf(CoroutineImpl).q8 = function () {
    var tmp2_elvis_lhs = this.m8_1;
    var tmp;
    if (tmp2_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var tmp0_safe_receiver = this.n8().o8(Key_instance);
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.r8(this);
      var this_0 = tmp1_elvis_lhs == null ? this : tmp1_elvis_lhs;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.coroutines.CoroutineImpl.intercepted.<anonymous>' call
      this.m8_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp2_elvis_lhs;
    }
    return tmp;
  };
  protoOf(CoroutineImpl).s8 = function (result) {
    var current = this;
    // Inline function 'kotlin.Result.getOrNull' call
    var tmp;
    if (_Result___get_isFailure__impl__jpiriv(result)) {
      tmp = null;
    } else {
      var tmp_0 = _Result___get_value__impl__bjfvqg(result);
      tmp = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
    }
    var currentResult = tmp;
    var currentException = Result__exceptionOrNull_impl_p6xea9(result);
    while (true) {
      // Inline function 'kotlin.with' call
      // Inline function 'kotlin.contracts.contract' call
      var $this$with = current;
      if (currentException == null) {
        $this$with.i8_1 = currentResult;
      } else {
        $this$with.g8_1 = $this$with.h8_1;
        $this$with.j8_1 = currentException;
      }
      try {
        var outcome = $this$with.t8();
        if (outcome === get_COROUTINE_SUSPENDED())
          return Unit_instance;
        currentResult = outcome;
        currentException = null;
      } catch ($p) {
        var exception = $p;
        currentResult = null;
        // Inline function 'kotlin.js.unsafeCast' call
        currentException = exception;
      }
      releaseIntercepted($this$with);
      var completion = ensureNotNull($this$with.f8_1);
      var tmp_1;
      if (completion instanceof CoroutineImpl) {
        current = completion;
        tmp_1 = Unit_instance;
      } else {
        if (!(currentException == null)) {
          // Inline function 'kotlin.coroutines.resumeWithException' call
          // Inline function 'kotlin.Companion.failure' call
          var exception_0 = ensureNotNull(currentException);
          var tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure(exception_0));
          completion.u8(tmp$ret$2);
        } else {
          // Inline function 'kotlin.coroutines.resume' call
          // Inline function 'kotlin.Companion.success' call
          var value = currentResult;
          var tmp$ret$4 = _Result___init__impl__xyqfz8(value);
          completion.u8(tmp$ret$4);
        }
        return Unit_instance;
      }
    }
  };
  protoOf(CoroutineImpl).u8 = function (result) {
    return this.s8(result);
  };
  function CompletedContinuation() {
  }
  protoOf(CompletedContinuation).n8 = function () {
    var message = 'This continuation is already complete';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(CompletedContinuation).s8 = function (result) {
    // Inline function 'kotlin.error' call
    var message = 'This continuation is already complete';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(CompletedContinuation).u8 = function (result) {
    return this.s8(result);
  };
  protoOf(CompletedContinuation).toString = function () {
    return 'This continuation is already complete';
  };
  var CompletedContinuation_instance;
  function CompletedContinuation_getInstance() {
    return CompletedContinuation_instance;
  }
  function CancellationException_init_$Init$($this) {
    IllegalStateException_init_$Init$($this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException_init_$Create$() {
    var tmp = CancellationException_init_$Init$(objectCreate(protoOf(CancellationException)));
    captureStack(tmp, CancellationException_init_$Create$);
    return tmp;
  }
  function CancellationException_init_$Init$_0(message, cause, $this) {
    IllegalStateException_init_$Init$_1(message, cause, $this);
    CancellationException.call($this);
    return $this;
  }
  function CancellationException() {
    captureStack(this, CancellationException);
  }
  function intercepted(_this__u8e3s4) {
    var tmp0_safe_receiver = _this__u8e3s4 instanceof CoroutineImpl ? _this__u8e3s4 : null;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q8();
    return tmp1_elvis_lhs == null ? _this__u8e3s4 : tmp1_elvis_lhs;
  }
  function createCoroutineUnintercepted(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineFromSuspendFunction' call
    return new _no_name_provided__qut3iv_2(completion, _this__u8e3s4, receiver, completion);
  }
  function invokeSuspendSuperTypeWithReceiver(_this__u8e3s4, receiver, completion) {
    throw new NotImplementedError('It is intrinsic method');
  }
  function _no_name_provided__qut3iv_2($completion, $this_createCoroutineUnintercepted, $receiver, $completion$1) {
    this.f9_1 = $this_createCoroutineUnintercepted;
    this.g9_1 = $receiver;
    this.h9_1 = $completion$1;
    CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
  }
  protoOf(_no_name_provided__qut3iv_2).t8 = function () {
    if (this.j8_1 != null)
      throw this.j8_1;
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineUnintercepted.<anonymous>' call
    // Inline function 'kotlin.js.asDynamic' call
    var a = this.f9_1;
    return typeof a === 'function' ? a(this.g9_1, this.h9_1) : this.f9_1.i9(this.g9_1, this.h9_1);
  };
  function Exception_init_$Init$($this) {
    extendThrowable($this);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$() {
    var tmp = Exception_init_$Init$(objectCreate(protoOf(Exception)));
    captureStack(tmp, Exception_init_$Create$);
    return tmp;
  }
  function Exception_init_$Init$_0(message, $this) {
    extendThrowable($this, message);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$_0(message) {
    var tmp = Exception_init_$Init$_0(message, objectCreate(protoOf(Exception)));
    captureStack(tmp, Exception_init_$Create$_0);
    return tmp;
  }
  function Exception_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Exception.call($this);
    return $this;
  }
  function Exception() {
    captureStack(this, Exception);
  }
  function IllegalArgumentException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$() {
    var tmp = IllegalArgumentException_init_$Init$(objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$);
    return tmp;
  }
  function IllegalArgumentException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$_0(message) {
    var tmp = IllegalArgumentException_init_$Init$_0(message, objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$_0);
    return tmp;
  }
  function IllegalArgumentException() {
    captureStack(this, IllegalArgumentException);
  }
  function IndexOutOfBoundsException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$() {
    var tmp = IndexOutOfBoundsException_init_$Init$(objectCreate(protoOf(IndexOutOfBoundsException)));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$);
    return tmp;
  }
  function IndexOutOfBoundsException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$_0(message) {
    var tmp = IndexOutOfBoundsException_init_$Init$_0(message, objectCreate(protoOf(IndexOutOfBoundsException)));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$_0);
    return tmp;
  }
  function IndexOutOfBoundsException() {
    captureStack(this, IndexOutOfBoundsException);
  }
  function IllegalStateException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$() {
    var tmp = IllegalStateException_init_$Init$(objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$);
    return tmp;
  }
  function IllegalStateException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_0(message) {
    var tmp = IllegalStateException_init_$Init$_0(message, objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$_0);
    return tmp;
  }
  function IllegalStateException_init_$Init$_1(message, cause, $this) {
    RuntimeException_init_$Init$_1(message, cause, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_1(message, cause) {
    var tmp = IllegalStateException_init_$Init$_1(message, cause, objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$_1);
    return tmp;
  }
  function IllegalStateException() {
    captureStack(this, IllegalStateException);
  }
  function UnsupportedOperationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$() {
    var tmp = UnsupportedOperationException_init_$Init$(objectCreate(protoOf(UnsupportedOperationException)));
    captureStack(tmp, UnsupportedOperationException_init_$Create$);
    return tmp;
  }
  function UnsupportedOperationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$_0(message) {
    var tmp = UnsupportedOperationException_init_$Init$_0(message, objectCreate(protoOf(UnsupportedOperationException)));
    captureStack(tmp, UnsupportedOperationException_init_$Create$_0);
    return tmp;
  }
  function UnsupportedOperationException() {
    captureStack(this, UnsupportedOperationException);
  }
  function RuntimeException_init_$Init$($this) {
    Exception_init_$Init$($this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$() {
    var tmp = RuntimeException_init_$Init$(objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$);
    return tmp;
  }
  function RuntimeException_init_$Init$_0(message, $this) {
    Exception_init_$Init$_0(message, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$_0(message) {
    var tmp = RuntimeException_init_$Init$_0(message, objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$_0);
    return tmp;
  }
  function RuntimeException_init_$Init$_1(message, cause, $this) {
    Exception_init_$Init$_1(message, cause, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$_1(message, cause) {
    var tmp = RuntimeException_init_$Init$_1(message, cause, objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$_1);
    return tmp;
  }
  function RuntimeException() {
    captureStack(this, RuntimeException);
  }
  function NoSuchElementException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$() {
    var tmp = NoSuchElementException_init_$Init$(objectCreate(protoOf(NoSuchElementException)));
    captureStack(tmp, NoSuchElementException_init_$Create$);
    return tmp;
  }
  function NoSuchElementException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$_0(message) {
    var tmp = NoSuchElementException_init_$Init$_0(message, objectCreate(protoOf(NoSuchElementException)));
    captureStack(tmp, NoSuchElementException_init_$Create$_0);
    return tmp;
  }
  function NoSuchElementException() {
    captureStack(this, NoSuchElementException);
  }
  function Error_init_$Init$($this) {
    extendThrowable($this);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Create$() {
    var tmp = Error_init_$Init$(objectCreate(protoOf(Error_0)));
    captureStack(tmp, Error_init_$Create$);
    return tmp;
  }
  function Error_init_$Init$_0(message, $this) {
    extendThrowable($this, message);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Error_0.call($this);
    return $this;
  }
  function Error_0() {
    captureStack(this, Error_0);
  }
  function ClassCastException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ClassCastException.call($this);
    return $this;
  }
  function ClassCastException_init_$Create$() {
    var tmp = ClassCastException_init_$Init$(objectCreate(protoOf(ClassCastException)));
    captureStack(tmp, ClassCastException_init_$Create$);
    return tmp;
  }
  function ClassCastException() {
    captureStack(this, ClassCastException);
  }
  function ArithmeticException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$() {
    var tmp = ArithmeticException_init_$Init$(objectCreate(protoOf(ArithmeticException)));
    captureStack(tmp, ArithmeticException_init_$Create$);
    return tmp;
  }
  function ArithmeticException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$_0(message) {
    var tmp = ArithmeticException_init_$Init$_0(message, objectCreate(protoOf(ArithmeticException)));
    captureStack(tmp, ArithmeticException_init_$Create$_0);
    return tmp;
  }
  function ArithmeticException() {
    captureStack(this, ArithmeticException);
  }
  function NumberFormatException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$() {
    var tmp = NumberFormatException_init_$Init$(objectCreate(protoOf(NumberFormatException)));
    captureStack(tmp, NumberFormatException_init_$Create$);
    return tmp;
  }
  function NumberFormatException_init_$Init$_0(message, $this) {
    IllegalArgumentException_init_$Init$_0(message, $this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$_0(message) {
    var tmp = NumberFormatException_init_$Init$_0(message, objectCreate(protoOf(NumberFormatException)));
    captureStack(tmp, NumberFormatException_init_$Create$_0);
    return tmp;
  }
  function NumberFormatException() {
    captureStack(this, NumberFormatException);
  }
  function AssertionError_init_$Init$($this) {
    Error_init_$Init$($this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$() {
    var tmp = AssertionError_init_$Init$(objectCreate(protoOf(AssertionError)));
    captureStack(tmp, AssertionError_init_$Create$);
    return tmp;
  }
  function AssertionError_init_$Init$_0(message, $this) {
    Error_init_$Init$_0(message, $this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$_0(message) {
    var tmp = AssertionError_init_$Init$_0(message, objectCreate(protoOf(AssertionError)));
    captureStack(tmp, AssertionError_init_$Create$_0);
    return tmp;
  }
  function AssertionError() {
    captureStack(this, AssertionError);
  }
  function ConcurrentModificationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ConcurrentModificationException.call($this);
    return $this;
  }
  function ConcurrentModificationException_init_$Create$() {
    var tmp = ConcurrentModificationException_init_$Init$(objectCreate(protoOf(ConcurrentModificationException)));
    captureStack(tmp, ConcurrentModificationException_init_$Create$);
    return tmp;
  }
  function ConcurrentModificationException() {
    captureStack(this, ConcurrentModificationException);
  }
  function NullPointerException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NullPointerException.call($this);
    return $this;
  }
  function NullPointerException_init_$Create$() {
    var tmp = NullPointerException_init_$Init$(objectCreate(protoOf(NullPointerException)));
    captureStack(tmp, NullPointerException_init_$Create$);
    return tmp;
  }
  function NullPointerException() {
    captureStack(this, NullPointerException);
  }
  function NoWhenBranchMatchedException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoWhenBranchMatchedException.call($this);
    return $this;
  }
  function NoWhenBranchMatchedException_init_$Create$() {
    var tmp = NoWhenBranchMatchedException_init_$Init$(objectCreate(protoOf(NoWhenBranchMatchedException)));
    captureStack(tmp, NoWhenBranchMatchedException_init_$Create$);
    return tmp;
  }
  function NoWhenBranchMatchedException() {
    captureStack(this, NoWhenBranchMatchedException);
  }
  function UninitializedPropertyAccessException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UninitializedPropertyAccessException.call($this);
    return $this;
  }
  function UninitializedPropertyAccessException_init_$Create$() {
    var tmp = UninitializedPropertyAccessException_init_$Init$(objectCreate(protoOf(UninitializedPropertyAccessException)));
    captureStack(tmp, UninitializedPropertyAccessException_init_$Create$);
    return tmp;
  }
  function UninitializedPropertyAccessException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UninitializedPropertyAccessException.call($this);
    return $this;
  }
  function UninitializedPropertyAccessException_init_$Create$_0(message) {
    var tmp = UninitializedPropertyAccessException_init_$Init$_0(message, objectCreate(protoOf(UninitializedPropertyAccessException)));
    captureStack(tmp, UninitializedPropertyAccessException_init_$Create$_0);
    return tmp;
  }
  function UninitializedPropertyAccessException() {
    captureStack(this, UninitializedPropertyAccessException);
  }
  function abs(n) {
    return n < 0 ? -n | 0 | 0 : n;
  }
  function abs_0(n) {
    return n.z(new Long(0, 0)) < 0 ? n.y2() : n;
  }
  function roundToLong(_this__u8e3s4) {
    var tmp;
    if (isNaN_0(_this__u8e3s4)) {
      throw IllegalArgumentException_init_$Create$_0('Cannot round NaN value.');
    } else if (_this__u8e3s4 > 9.223372036854776E18) {
      tmp = new Long(-1, 2147483647);
    } else if (_this__u8e3s4 < -9.223372036854776E18) {
      tmp = new Long(0, -2147483648);
    } else {
      tmp = numberToLong(Math.round(_this__u8e3s4));
    }
    return tmp;
  }
  function get_INV_2_26() {
    _init_properties_PlatformRandom_kt__6kjv62();
    return INV_2_26;
  }
  var INV_2_26;
  function get_INV_2_53() {
    _init_properties_PlatformRandom_kt__6kjv62();
    return INV_2_53;
  }
  var INV_2_53;
  function doubleFromParts(hi26, low27) {
    _init_properties_PlatformRandom_kt__6kjv62();
    return hi26 * get_INV_2_26() + low27 * get_INV_2_53();
  }
  function defaultPlatformRandom() {
    _init_properties_PlatformRandom_kt__6kjv62();
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0 = Math.random() * Math.pow(2, 32) | 0;
    return Random_0(tmp$ret$0);
  }
  var properties_initialized_PlatformRandom_kt_uibhw8;
  function _init_properties_PlatformRandom_kt__6kjv62() {
    if (!properties_initialized_PlatformRandom_kt_uibhw8) {
      properties_initialized_PlatformRandom_kt_uibhw8 = true;
      // Inline function 'kotlin.math.pow' call
      INV_2_26 = Math.pow(2.0, -26);
      // Inline function 'kotlin.math.pow' call
      INV_2_53 = Math.pow(2.0, -53);
    }
  }
  function KClass() {
  }
  function KClassImpl(jClass) {
    this.l9_1 = jClass;
  }
  protoOf(KClassImpl).m9 = function () {
    return this.l9_1;
  };
  protoOf(KClassImpl).equals = function (other) {
    var tmp;
    if (other instanceof NothingKClassImpl) {
      tmp = false;
    } else {
      if (other instanceof ErrorKClass) {
        tmp = false;
      } else {
        if (other instanceof KClassImpl) {
          tmp = equals(this.m9(), other.m9());
        } else {
          tmp = false;
        }
      }
    }
    return tmp;
  };
  protoOf(KClassImpl).hashCode = function () {
    var tmp0_safe_receiver = this.j9();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  protoOf(KClassImpl).toString = function () {
    return 'class ' + this.j9();
  };
  function NothingKClassImpl() {
    NothingKClassImpl_instance = this;
    KClassImpl.call(this, Object);
    this.o9_1 = 'Nothing';
  }
  protoOf(NothingKClassImpl).j9 = function () {
    return this.o9_1;
  };
  protoOf(NothingKClassImpl).k9 = function (value) {
    return false;
  };
  protoOf(NothingKClassImpl).m9 = function () {
    throw UnsupportedOperationException_init_$Create$_0("There's no native JS class for Nothing type");
  };
  protoOf(NothingKClassImpl).equals = function (other) {
    return other === this;
  };
  protoOf(NothingKClassImpl).hashCode = function () {
    return 0;
  };
  var NothingKClassImpl_instance;
  function NothingKClassImpl_getInstance() {
    if (NothingKClassImpl_instance == null)
      new NothingKClassImpl();
    return NothingKClassImpl_instance;
  }
  function ErrorKClass() {
  }
  protoOf(ErrorKClass).j9 = function () {
    var message = 'Unknown simpleName for ErrorKClass';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(ErrorKClass).k9 = function (value) {
    var message = "Can's check isInstance on ErrorKClass";
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(ErrorKClass).equals = function (other) {
    return other === this;
  };
  protoOf(ErrorKClass).hashCode = function () {
    return 0;
  };
  function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
    KClassImpl.call(this, jClass);
    this.q9_1 = givenSimpleName;
    this.r9_1 = isInstanceFunction;
  }
  protoOf(PrimitiveKClassImpl).equals = function (other) {
    if (!(other instanceof PrimitiveKClassImpl))
      return false;
    return protoOf(KClassImpl).equals.call(this, other) ? this.q9_1 === other.q9_1 : false;
  };
  protoOf(PrimitiveKClassImpl).j9 = function () {
    return this.q9_1;
  };
  protoOf(PrimitiveKClassImpl).k9 = function (value) {
    return this.r9_1(value);
  };
  function SimpleKClassImpl(jClass) {
    KClassImpl.call(this, jClass);
    var tmp = this;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = jClass.$metadata$;
    tmp.t9_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.simpleName;
  }
  protoOf(SimpleKClassImpl).j9 = function () {
    return this.t9_1;
  };
  protoOf(SimpleKClassImpl).k9 = function (value) {
    return jsIsType(value, this.m9());
  };
  function KProperty1() {
  }
  function KProperty0() {
  }
  function get_functionClasses() {
    _init_properties_primitives_kt__3fums4();
    return functionClasses;
  }
  var functionClasses;
  function PrimitiveClasses$anyClass$lambda(it) {
    return !(it == null);
  }
  function PrimitiveClasses$numberClass$lambda(it) {
    return isNumber(it);
  }
  function PrimitiveClasses$booleanClass$lambda(it) {
    return !(it == null) ? typeof it === 'boolean' : false;
  }
  function PrimitiveClasses$byteClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$shortClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$intClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$floatClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$doubleClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$arrayClass$lambda(it) {
    return !(it == null) ? isArray(it) : false;
  }
  function PrimitiveClasses$stringClass$lambda(it) {
    return !(it == null) ? typeof it === 'string' : false;
  }
  function PrimitiveClasses$throwableClass$lambda(it) {
    return it instanceof Error;
  }
  function PrimitiveClasses$booleanArrayClass$lambda(it) {
    return !(it == null) ? isBooleanArray(it) : false;
  }
  function PrimitiveClasses$charArrayClass$lambda(it) {
    return !(it == null) ? isCharArray(it) : false;
  }
  function PrimitiveClasses$byteArrayClass$lambda(it) {
    return !(it == null) ? isByteArray(it) : false;
  }
  function PrimitiveClasses$shortArrayClass$lambda(it) {
    return !(it == null) ? isShortArray(it) : false;
  }
  function PrimitiveClasses$intArrayClass$lambda(it) {
    return !(it == null) ? isIntArray(it) : false;
  }
  function PrimitiveClasses$longArrayClass$lambda(it) {
    return !(it == null) ? isLongArray(it) : false;
  }
  function PrimitiveClasses$floatArrayClass$lambda(it) {
    return !(it == null) ? isFloatArray(it) : false;
  }
  function PrimitiveClasses$doubleArrayClass$lambda(it) {
    return !(it == null) ? isDoubleArray(it) : false;
  }
  function PrimitiveClasses$functionClass$lambda($arity) {
    return function (it) {
      var tmp;
      if (typeof it === 'function') {
        // Inline function 'kotlin.js.asDynamic' call
        tmp = it.length === $arity;
      } else {
        tmp = false;
      }
      return tmp;
    };
  }
  function PrimitiveClasses() {
    PrimitiveClasses_instance = this;
    var tmp = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_0 = Object;
    tmp.anyClass = new PrimitiveKClassImpl(tmp_0, 'Any', PrimitiveClasses$anyClass$lambda);
    var tmp_1 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_2 = Number;
    tmp_1.numberClass = new PrimitiveKClassImpl(tmp_2, 'Number', PrimitiveClasses$numberClass$lambda);
    this.nothingClass = NothingKClassImpl_getInstance();
    var tmp_3 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_4 = Boolean;
    tmp_3.booleanClass = new PrimitiveKClassImpl(tmp_4, 'Boolean', PrimitiveClasses$booleanClass$lambda);
    var tmp_5 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_6 = Number;
    tmp_5.byteClass = new PrimitiveKClassImpl(tmp_6, 'Byte', PrimitiveClasses$byteClass$lambda);
    var tmp_7 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_8 = Number;
    tmp_7.shortClass = new PrimitiveKClassImpl(tmp_8, 'Short', PrimitiveClasses$shortClass$lambda);
    var tmp_9 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_10 = Number;
    tmp_9.intClass = new PrimitiveKClassImpl(tmp_10, 'Int', PrimitiveClasses$intClass$lambda);
    var tmp_11 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_12 = Number;
    tmp_11.floatClass = new PrimitiveKClassImpl(tmp_12, 'Float', PrimitiveClasses$floatClass$lambda);
    var tmp_13 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_14 = Number;
    tmp_13.doubleClass = new PrimitiveKClassImpl(tmp_14, 'Double', PrimitiveClasses$doubleClass$lambda);
    var tmp_15 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_16 = Array;
    tmp_15.arrayClass = new PrimitiveKClassImpl(tmp_16, 'Array', PrimitiveClasses$arrayClass$lambda);
    var tmp_17 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_18 = String;
    tmp_17.stringClass = new PrimitiveKClassImpl(tmp_18, 'String', PrimitiveClasses$stringClass$lambda);
    var tmp_19 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_20 = Error;
    tmp_19.throwableClass = new PrimitiveKClassImpl(tmp_20, 'Throwable', PrimitiveClasses$throwableClass$lambda);
    var tmp_21 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_22 = Array;
    tmp_21.booleanArrayClass = new PrimitiveKClassImpl(tmp_22, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);
    var tmp_23 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_24 = Uint16Array;
    tmp_23.charArrayClass = new PrimitiveKClassImpl(tmp_24, 'CharArray', PrimitiveClasses$charArrayClass$lambda);
    var tmp_25 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_26 = Int8Array;
    tmp_25.byteArrayClass = new PrimitiveKClassImpl(tmp_26, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);
    var tmp_27 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_28 = Int16Array;
    tmp_27.shortArrayClass = new PrimitiveKClassImpl(tmp_28, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);
    var tmp_29 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_30 = Int32Array;
    tmp_29.intArrayClass = new PrimitiveKClassImpl(tmp_30, 'IntArray', PrimitiveClasses$intArrayClass$lambda);
    var tmp_31 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_32 = Array;
    tmp_31.longArrayClass = new PrimitiveKClassImpl(tmp_32, 'LongArray', PrimitiveClasses$longArrayClass$lambda);
    var tmp_33 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_34 = Float32Array;
    tmp_33.floatArrayClass = new PrimitiveKClassImpl(tmp_34, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);
    var tmp_35 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_36 = Float64Array;
    tmp_35.doubleArrayClass = new PrimitiveKClassImpl(tmp_36, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);
  }
  protoOf(PrimitiveClasses).u9 = function () {
    return this.anyClass;
  };
  protoOf(PrimitiveClasses).v9 = function () {
    return this.numberClass;
  };
  protoOf(PrimitiveClasses).w9 = function () {
    return this.nothingClass;
  };
  protoOf(PrimitiveClasses).x9 = function () {
    return this.booleanClass;
  };
  protoOf(PrimitiveClasses).y9 = function () {
    return this.byteClass;
  };
  protoOf(PrimitiveClasses).z9 = function () {
    return this.shortClass;
  };
  protoOf(PrimitiveClasses).aa = function () {
    return this.intClass;
  };
  protoOf(PrimitiveClasses).ba = function () {
    return this.floatClass;
  };
  protoOf(PrimitiveClasses).ca = function () {
    return this.doubleClass;
  };
  protoOf(PrimitiveClasses).da = function () {
    return this.arrayClass;
  };
  protoOf(PrimitiveClasses).ea = function () {
    return this.stringClass;
  };
  protoOf(PrimitiveClasses).fa = function () {
    return this.throwableClass;
  };
  protoOf(PrimitiveClasses).ga = function () {
    return this.booleanArrayClass;
  };
  protoOf(PrimitiveClasses).ha = function () {
    return this.charArrayClass;
  };
  protoOf(PrimitiveClasses).ia = function () {
    return this.byteArrayClass;
  };
  protoOf(PrimitiveClasses).ja = function () {
    return this.shortArrayClass;
  };
  protoOf(PrimitiveClasses).ka = function () {
    return this.intArrayClass;
  };
  protoOf(PrimitiveClasses).la = function () {
    return this.longArrayClass;
  };
  protoOf(PrimitiveClasses).ma = function () {
    return this.floatArrayClass;
  };
  protoOf(PrimitiveClasses).na = function () {
    return this.doubleArrayClass;
  };
  protoOf(PrimitiveClasses).functionClass = function (arity) {
    var tmp0_elvis_lhs = get_functionClasses()[arity];
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.reflect.js.internal.PrimitiveClasses.functionClass.<anonymous>' call
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp_0 = Function;
      var tmp_1 = 'Function' + arity;
      var result = new PrimitiveKClassImpl(tmp_0, tmp_1, PrimitiveClasses$functionClass$lambda(arity));
      // Inline function 'kotlin.js.asDynamic' call
      get_functionClasses()[arity] = result;
      tmp = result;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  var PrimitiveClasses_instance;
  function PrimitiveClasses_getInstance() {
    if (PrimitiveClasses_instance == null)
      new PrimitiveClasses();
    return PrimitiveClasses_instance;
  }
  var properties_initialized_primitives_kt_jle18u;
  function _init_properties_primitives_kt__3fums4() {
    if (!properties_initialized_primitives_kt_jle18u) {
      properties_initialized_primitives_kt_jle18u = true;
      // Inline function 'kotlin.arrayOfNulls' call
      functionClasses = fillArrayVal(Array(0), null);
    }
  }
  function getKClass(jClass) {
    var tmp;
    if (Array.isArray(jClass)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = getKClassM(jClass);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = getKClass1(jClass);
    }
    return tmp;
  }
  function getKClassM(jClasses) {
    var tmp;
    switch (jClasses.length) {
      case 1:
        tmp = getKClass1(jClasses[0]);
        break;
      case 0:
        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp = NothingKClassImpl_getInstance();
        break;
      default:
        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp = new ErrorKClass();
        break;
    }
    return tmp;
  }
  function getKClass1(jClass) {
    if (jClass === String) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      return PrimitiveClasses_getInstance().stringClass;
    }
    // Inline function 'kotlin.js.asDynamic' call
    var metadata = jClass.$metadata$;
    var tmp;
    if (metadata != null) {
      var tmp_0;
      if (metadata.$kClass$ == null) {
        var kClass = new SimpleKClassImpl(jClass);
        metadata.$kClass$ = kClass;
        tmp_0 = kClass;
      } else {
        tmp_0 = metadata.$kClass$;
      }
      tmp = tmp_0;
    } else {
      tmp = new SimpleKClassImpl(jClass);
    }
    return tmp;
  }
  function getKClassFromExpression(e) {
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp;
    switch (typeof e) {
      case 'string':
        tmp = PrimitiveClasses_getInstance().stringClass;
        break;
      case 'number':
        var tmp_0;
        // Inline function 'kotlin.js.asDynamic' call

        // Inline function 'kotlin.js.jsBitwiseOr' call

        if ((e | 0) === e) {
          tmp_0 = PrimitiveClasses_getInstance().intClass;
        } else {
          tmp_0 = PrimitiveClasses_getInstance().doubleClass;
        }

        tmp = tmp_0;
        break;
      case 'boolean':
        tmp = PrimitiveClasses_getInstance().booleanClass;
        break;
      case 'function':
        var tmp_1 = PrimitiveClasses_getInstance();
        // Inline function 'kotlin.js.asDynamic' call

        tmp = tmp_1.functionClass(e.length);
        break;
      default:
        var tmp_2;
        if (isBooleanArray(e)) {
          tmp_2 = PrimitiveClasses_getInstance().booleanArrayClass;
        } else {
          if (isCharArray(e)) {
            tmp_2 = PrimitiveClasses_getInstance().charArrayClass;
          } else {
            if (isByteArray(e)) {
              tmp_2 = PrimitiveClasses_getInstance().byteArrayClass;
            } else {
              if (isShortArray(e)) {
                tmp_2 = PrimitiveClasses_getInstance().shortArrayClass;
              } else {
                if (isIntArray(e)) {
                  tmp_2 = PrimitiveClasses_getInstance().intArrayClass;
                } else {
                  if (isLongArray(e)) {
                    tmp_2 = PrimitiveClasses_getInstance().longArrayClass;
                  } else {
                    if (isFloatArray(e)) {
                      tmp_2 = PrimitiveClasses_getInstance().floatArrayClass;
                    } else {
                      if (isDoubleArray(e)) {
                        tmp_2 = PrimitiveClasses_getInstance().doubleArrayClass;
                      } else {
                        if (isInterface(e, KClass)) {
                          tmp_2 = getKClass(KClass);
                        } else {
                          if (isArray(e)) {
                            tmp_2 = PrimitiveClasses_getInstance().arrayClass;
                          } else {
                            var constructor = Object.getPrototypeOf(e).constructor;
                            var tmp_3;
                            if (constructor === Object) {
                              tmp_3 = PrimitiveClasses_getInstance().anyClass;
                            } else if (constructor === Error) {
                              tmp_3 = PrimitiveClasses_getInstance().throwableClass;
                            } else {
                              var jsClass = constructor;
                              tmp_3 = getKClass1(jsClass);
                            }
                            tmp_2 = tmp_3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        tmp = tmp_2;
        break;
    }
    // Inline function 'kotlin.js.asDynamic' call
    return tmp;
  }
  function reset(_this__u8e3s4) {
    _this__u8e3s4.lastIndex = 0;
  }
  function ConstrainedOnceSequence(sequence) {
    this.oa_1 = sequence;
  }
  protoOf(ConstrainedOnceSequence).h = function () {
    var tmp0_elvis_lhs = this.oa_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$_0('This sequence can be consumed only once.');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var sequence = tmp;
    this.oa_1 = null;
    return sequence.h();
  };
  function StringBuilder_init_$Init$(capacity, $this) {
    StringBuilder_init_$Init$_1($this);
    return $this;
  }
  function StringBuilder_init_$Create$(capacity) {
    return StringBuilder_init_$Init$(capacity, objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder_init_$Init$_0(content, $this) {
    StringBuilder.call($this, toString_1(content));
    return $this;
  }
  function StringBuilder_init_$Create$_0(content) {
    return StringBuilder_init_$Init$_0(content, objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder_init_$Init$_1($this) {
    StringBuilder.call($this, '');
    return $this;
  }
  function StringBuilder_init_$Create$_1() {
    return StringBuilder_init_$Init$_1(objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder(content) {
    this.h1_1 = !(content === undefined) ? content : '';
  }
  protoOf(StringBuilder).a = function () {
    // Inline function 'kotlin.js.asDynamic' call
    return this.h1_1.length;
  };
  protoOf(StringBuilder).b = function (index) {
    // Inline function 'kotlin.text.getOrElse' call
    var this_0 = this.h1_1;
    var tmp;
    if (index >= 0 ? index <= get_lastIndex_1(this_0) : false) {
      tmp = charSequenceGet(this_0, index);
    } else {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', length: ' + this.a() + '}');
    }
    return tmp;
  };
  protoOf(StringBuilder).c = function (startIndex, endIndex) {
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    return this.h1_1.substring(startIndex, endIndex);
  };
  protoOf(StringBuilder).n7 = function (value) {
    this.h1_1 = this.h1_1 + toString(value);
    return this;
  };
  protoOf(StringBuilder).f = function (value) {
    this.h1_1 = this.h1_1 + toString_0(value);
    return this;
  };
  protoOf(StringBuilder).i1 = function () {
    var reversed = '';
    var index = this.h1_1.length - 1 | 0;
    while (index >= 0) {
      var tmp = this.h1_1;
      var tmp0 = index;
      index = tmp0 - 1 | 0;
      var low = charSequenceGet(tmp, tmp0);
      if (isLowSurrogate(low) ? index >= 0 : false) {
        var tmp_0 = this.h1_1;
        var tmp1 = index;
        index = tmp1 - 1 | 0;
        var high = charSequenceGet(tmp_0, tmp1);
        if (isHighSurrogate(high)) {
          reversed = reversed + new Char(high) + toString(low);
        } else {
          reversed = reversed + new Char(low) + toString(high);
        }
      } else {
        reversed = reversed + toString(low);
      }
    }
    this.h1_1 = reversed;
    return this;
  };
  protoOf(StringBuilder).l7 = function (value) {
    this.h1_1 = this.h1_1 + toString_0(value);
    return this;
  };
  protoOf(StringBuilder).pa = function (value) {
    return this.m7(value.toString());
  };
  protoOf(StringBuilder).qa = function (value) {
    return this.m7(value.toString());
  };
  protoOf(StringBuilder).m7 = function (value) {
    var tmp = this;
    var tmp_0 = this.h1_1;
    tmp.h1_1 = tmp_0 + (value == null ? 'null' : value);
    return this;
  };
  protoOf(StringBuilder).ra = function (index, value) {
    Companion_instance_5.e4(index, this.a());
    var tmp = this;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = this.h1_1.substring(0, index) + toString(value);
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.h1_1 = tmp_0 + this.h1_1.substring(index);
    return this;
  };
  protoOf(StringBuilder).toString = function () {
    return this.h1_1;
  };
  protoOf(StringBuilder).sa = function (value, startIndex, endIndex) {
    var stringCsq = toString_1(value);
    Companion_instance_5.ta(startIndex, endIndex, stringCsq.length);
    var tmp = this;
    var tmp_0 = this.h1_1;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.h1_1 = tmp_0 + stringCsq.substring(startIndex, endIndex);
    return this;
  };
  function uppercaseChar(_this__u8e3s4) {
    // Inline function 'kotlin.text.uppercase' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var uppercase = toString(_this__u8e3s4).toUpperCase();
    return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);
  }
  function isLowSurrogate(_this__u8e3s4) {
    return _Char___init__impl__6a9atx(56320) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57343) : false;
  }
  function isHighSurrogate(_this__u8e3s4) {
    return _Char___init__impl__6a9atx(55296) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(56319) : false;
  }
  function isWhitespace(_this__u8e3s4) {
    return isWhitespaceImpl(_this__u8e3s4);
  }
  function checkRadix(radix) {
    if (!(2 <= radix ? radix <= 36 : false)) {
      throw IllegalArgumentException_init_$Create$_0('radix ' + radix + ' was not in valid range 2..36');
    }
    return radix;
  }
  function toString_2(_this__u8e3s4, radix) {
    return toStringImpl(_this__u8e3s4, checkRadix(radix));
  }
  function toLong_0(_this__u8e3s4, radix) {
    var tmp0_elvis_lhs = toLongOrNull(_this__u8e3s4, radix);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function digitOf(char, radix) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.digitOf.<anonymous>' call
    var it = (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(48)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(57)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(48)) : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(90)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65)) + 10 | 0 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(97)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(122)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(97)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(128)) < 0 ? -1 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65313)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65338)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65313)) + 10 | 0 : (Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65345)) >= 0 ? Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65370)) <= 0 : false) ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65345)) + 10 | 0 : digitToIntImpl(char);
    return it >= radix ? -1 : it;
  }
  function Regex_init_$Init$(pattern, $this) {
    Regex.call($this, pattern, emptySet());
    return $this;
  }
  function Regex_init_$Create$(pattern) {
    return Regex_init_$Init$(pattern, objectCreate(protoOf(Regex)));
  }
  function Companion_4() {
    Companion_instance_4 = this;
    this.ua_1 = new RegExp('[\\\\^$*+?.()|[\\]{}]', 'g');
    this.va_1 = new RegExp('[\\\\$]', 'g');
    this.wa_1 = new RegExp('\\$', 'g');
  }
  protoOf(Companion_4).xa = function (literal) {
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = this.ua_1;
    // Inline function 'kotlin.js.asDynamic' call
    return literal.replace(pattern, '\\$&');
  };
  protoOf(Companion_4).ya = function (literal) {
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = this.wa_1;
    // Inline function 'kotlin.js.asDynamic' call
    return literal.replace(pattern, '$$$$');
  };
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function Regex$findAll$lambda(this$0, $input, $startIndex) {
    return function () {
      return this$0.eb($input, $startIndex);
    };
  }
  function Regex$findAll$lambda_0(match) {
    return match.j();
  }
  function Regex(pattern, options) {
    Companion_getInstance_4();
    this.za_1 = pattern;
    this.ab_1 = toSet_1(options);
    this.bb_1 = new RegExp(pattern, toFlags(options, 'gu'));
    this.cb_1 = null;
    this.db_1 = null;
  }
  protoOf(Regex).fb = function (input) {
    reset(this.bb_1);
    var match = this.bb_1.exec(toString_1(input));
    return (!(match == null) ? match.index === 0 : false) ? this.bb_1.lastIndex === charSequenceLength(input) : false;
  };
  protoOf(Regex).eb = function (input, startIndex) {
    if (startIndex < 0 ? true : startIndex > charSequenceLength(input)) {
      throw IndexOutOfBoundsException_init_$Create$_0('Start index out of bounds: ' + startIndex + ', input length: ' + charSequenceLength(input));
    }
    return findNext(this.bb_1, toString_1(input), startIndex, this.bb_1);
  };
  protoOf(Regex).gb = function (input, startIndex) {
    if (startIndex < 0 ? true : startIndex > charSequenceLength(input)) {
      throw IndexOutOfBoundsException_init_$Create$_0('Start index out of bounds: ' + startIndex + ', input length: ' + charSequenceLength(input));
    }
    var tmp = Regex$findAll$lambda(this, input, startIndex);
    return generateSequence_0(tmp, Regex$findAll$lambda_0);
  };
  protoOf(Regex).hb = function (input, startIndex, $super) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    return $super === VOID ? this.gb(input, startIndex) : $super.gb.call(this, input, startIndex);
  };
  protoOf(Regex).ib = function (input, limit) {
    requireNonNegativeLimit(limit);
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.text.Regex.split.<anonymous>' call
    var it = this.hb(input);
    var matches = limit === 0 ? it : take_0(it, limit - 1 | 0);
    // Inline function 'kotlin.collections.mutableListOf' call
    var result = ArrayList_init_$Create$();
    var lastStart = 0;
    var tmp0_iterator = matches.h();
    while (tmp0_iterator.i()) {
      var match = tmp0_iterator.j();
      result.e(toString_1(charSequenceSubSequence(input, lastStart, match.jb().m1())));
      lastStart = match.jb().n1() + 1 | 0;
    }
    result.e(toString_1(charSequenceSubSequence(input, lastStart, charSequenceLength(input))));
    return result;
  };
  protoOf(Regex).toString = function () {
    return this.bb_1.toString();
  };
  function toFlags(_this__u8e3s4, prepend) {
    return joinToString_0(_this__u8e3s4, '', prepend, VOID, VOID, VOID, toFlags$lambda);
  }
  function findNext(_this__u8e3s4, input, from, nextPattern) {
    _this__u8e3s4.lastIndex = from;
    var match = _this__u8e3s4.exec(input);
    if (match == null)
      return null;
    var range = numberRangeToNumber(match.index, _this__u8e3s4.lastIndex - 1 | 0);
    return new findNext$1(range, match, nextPattern, input);
  }
  function MatchGroup(value) {
    this.kb_1 = value;
  }
  protoOf(MatchGroup).toString = function () {
    return 'MatchGroup(value=' + this.kb_1 + ')';
  };
  protoOf(MatchGroup).hashCode = function () {
    return getStringHashCode(this.kb_1);
  };
  protoOf(MatchGroup).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MatchGroup))
      return false;
    var tmp0_other_with_cast = other instanceof MatchGroup ? other : THROW_CCE();
    if (!(this.kb_1 === tmp0_other_with_cast.kb_1))
      return false;
    return true;
  };
  function toFlags$lambda(it) {
    return it.nb_1;
  }
  function findNext$o$groups$o$iterator$lambda(this$0) {
    return function (it) {
      return this$0.m(it);
    };
  }
  function advanceToNextCharacter($this, index) {
    if (index < get_lastIndex_1($this.wb_1)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var code1 = $this.wb_1.charCodeAt(index);
      if (55296 <= code1 ? code1 <= 56319 : false) {
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var code2 = $this.wb_1.charCodeAt(index + 1 | 0);
        if (56320 <= code2 ? code2 <= 57343 : false) {
          return index + 2 | 0;
        }
      }
    }
    return index + 1 | 0;
  }
  function findNext$1$groups$1($match, this$0) {
    this.ob_1 = $match;
    this.pb_1 = this$0;
    AbstractCollection.call(this);
  }
  protoOf(findNext$1$groups$1).k = function () {
    return this.ob_1.length;
  };
  protoOf(findNext$1$groups$1).h = function () {
    var tmp = asSequence_0(get_indices(this));
    return map(tmp, findNext$o$groups$o$iterator$lambda(this)).h();
  };
  protoOf(findNext$1$groups$1).m = function (index) {
    // Inline function 'kotlin.js.get' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = this.ob_1[index];
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.text.<no name provided>.get.<anonymous>' call
      tmp = new MatchGroup(tmp0_safe_receiver);
    }
    return tmp;
  };
  function findNext$1($range, $match, $nextPattern, $input) {
    this.tb_1 = $range;
    this.ub_1 = $match;
    this.vb_1 = $nextPattern;
    this.wb_1 = $input;
    this.qb_1 = $range;
    var tmp = this;
    tmp.rb_1 = new findNext$1$groups$1($match, this);
    this.sb_1 = null;
  }
  protoOf(findNext$1).jb = function () {
    return this.qb_1;
  };
  protoOf(findNext$1).j = function () {
    return findNext(this.vb_1, this.wb_1, this.tb_1.l() ? advanceToNextCharacter(this, this.tb_1.m1()) : this.tb_1.n1() + 1 | 0, this.vb_1);
  };
  var STRING_CASE_INSENSITIVE_ORDER;
  function compareTo_1(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    _init_properties_stringJs_kt__bg7zye();
    if (ignoreCase) {
      var n1 = _this__u8e3s4.length;
      var n2 = other.length;
      // Inline function 'kotlin.comparisons.minOf' call
      var min = Math.min(n1, n2);
      if (min === 0)
        return n1 - n2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < min)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var thisChar = charSequenceGet(_this__u8e3s4, index);
          var otherChar = charSequenceGet(other, index);
          if (!(thisChar === otherChar)) {
            thisChar = uppercaseChar(thisChar);
            otherChar = uppercaseChar(otherChar);
            if (!(thisChar === otherChar)) {
              // Inline function 'kotlin.text.lowercaseChar' call
              // Inline function 'kotlin.text.lowercase' call
              var this_0 = thisChar;
              // Inline function 'kotlin.js.unsafeCast' call
              // Inline function 'kotlin.js.asDynamic' call
              var tmp$ret$3 = toString(this_0).toLowerCase();
              thisChar = charSequenceGet(tmp$ret$3, 0);
              // Inline function 'kotlin.text.lowercaseChar' call
              // Inline function 'kotlin.text.lowercase' call
              var this_1 = otherChar;
              // Inline function 'kotlin.js.unsafeCast' call
              // Inline function 'kotlin.js.asDynamic' call
              var tmp$ret$7 = toString(this_1).toLowerCase();
              otherChar = charSequenceGet(tmp$ret$7, 0);
              if (!(thisChar === otherChar)) {
                return Char__compareTo_impl_ypi4mb(thisChar, otherChar);
              }
            }
          }
        }
         while (inductionVariable < min);
      return n1 - n2 | 0;
    } else {
      return compareTo_0(_this__u8e3s4, other);
    }
  }
  function toCharArray(_this__u8e3s4) {
    _init_properties_stringJs_kt__bg7zye();
    var tmp = 0;
    var tmp_0 = _this__u8e3s4.length;
    var tmp_1 = charArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = charSequenceGet(_this__u8e3s4, tmp_2);
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.xb_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).yb = function (a, b) {
    return this.xb_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.yb(a, b);
  };
  function STRING_CASE_INSENSITIVE_ORDER$lambda(a, b) {
    _init_properties_stringJs_kt__bg7zye();
    return compareTo_1(a, b, true);
  }
  var properties_initialized_stringJs_kt_nta8o4;
  function _init_properties_stringJs_kt__bg7zye() {
    if (!properties_initialized_stringJs_kt_nta8o4) {
      properties_initialized_stringJs_kt_nta8o4 = true;
      var tmp = STRING_CASE_INSENSITIVE_ORDER$lambda;
      STRING_CASE_INSENSITIVE_ORDER = new sam$kotlin_Comparator$0(tmp);
    }
  }
  function replace(_this__u8e3s4, oldValue, newValue, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = new RegExp(Companion_getInstance_4().xa(oldValue), ignoreCase ? 'gui' : 'gu');
    var replacement = Companion_getInstance_4().ya(newValue);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(pattern, replacement);
  }
  function replace_0(_this__u8e3s4, oldChar, newChar, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = new RegExp(Companion_getInstance_4().xa(toString(oldChar)), ignoreCase ? 'gui' : 'gu');
    var replacement = toString(newChar);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(pattern, replacement);
  }
  function replaceFirst(_this__u8e3s4, oldValue, newValue, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = new RegExp(Companion_getInstance_4().xa(oldValue), ignoreCase ? 'ui' : 'u');
    var replacement = Companion_getInstance_4().ya(newValue);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(pattern, replacement);
  }
  function isBlank(_this__u8e3s4) {
    var tmp;
    if (charSequenceLength(_this__u8e3s4) === 0) {
      tmp = true;
    } else {
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var this_0 = get_indices_0(_this__u8e3s4);
        var tmp_0;
        if (isInterface(this_0, Collection)) {
          tmp_0 = this_0.l();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var tmp0_iterator = this_0.h();
        while (tmp0_iterator.i()) {
          var element = tmp0_iterator.j();
          // Inline function 'kotlin.text.isBlank.<anonymous>' call
          if (!isWhitespace(charSequenceGet(_this__u8e3s4, element))) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      tmp = tmp$ret$0;
    }
    return tmp;
  }
  function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase);
  }
  function stackTraceToString(_this__u8e3s4) {
    return (new ExceptionTraceBuilder()).dc(_this__u8e3s4);
  }
  function addSuppressed(_this__u8e3s4, exception) {
    if (!(_this__u8e3s4 === exception)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var suppressed = _this__u8e3s4._suppressed;
      if (suppressed == null) {
        // Inline function 'kotlin.js.asDynamic' call
        _this__u8e3s4._suppressed = mutableListOf([exception]);
      } else {
        suppressed.e(exception);
      }
    }
  }
  function hasSeen($this, exception) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.any' call
      var indexedObject = $this.ac_1;
      var inductionVariable = 0;
      var last = indexedObject.length;
      while (inductionVariable < last) {
        var element = indexedObject[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.ExceptionTraceBuilder.hasSeen.<anonymous>' call
        if (element === exception) {
          tmp$ret$1 = true;
          break $l$block;
        }
      }
      tmp$ret$1 = false;
    }
    return tmp$ret$1;
  }
  function dumpFullTrace(_this__u8e3s4, $this, indent, qualifier) {
    if (dumpSelfTrace(_this__u8e3s4, $this, indent, qualifier))
      true;
    else
      return Unit_instance;
    var cause = _this__u8e3s4.cause;
    while (!(cause == null)) {
      if (dumpSelfTrace(cause, $this, indent, 'Caused by: '))
        true;
      else
        return Unit_instance;
      cause = cause.cause;
    }
  }
  function dumpSelfTrace(_this__u8e3s4, $this, indent, qualifier) {
    $this.zb_1.m7(indent).m7(qualifier);
    var shortInfo = _this__u8e3s4.toString();
    if (hasSeen($this, _this__u8e3s4)) {
      $this.zb_1.m7('[CIRCULAR REFERENCE, SEE ABOVE: ').m7(shortInfo).m7(']\n');
      return false;
    }
    // Inline function 'kotlin.js.asDynamic' call
    $this.ac_1.push(_this__u8e3s4);
    // Inline function 'kotlin.js.asDynamic' call
    var tmp = _this__u8e3s4.stack;
    var stack = (tmp == null ? true : typeof tmp === 'string') ? tmp : THROW_CCE();
    if (!(stack == null)) {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call
      var it = indexOf_2(stack, shortInfo);
      var stackStart = it < 0 ? 0 : it + shortInfo.length | 0;
      if (stackStart === 0) {
        $this.zb_1.m7(shortInfo).m7('\n');
      }
      // Inline function 'kotlin.text.isEmpty' call
      var this_0 = $this.bc_1;
      if (charSequenceLength(this_0) === 0) {
        $this.bc_1 = stack;
        $this.cc_1 = stackStart;
      } else {
        stack = dropCommonFrames($this, stack, stackStart);
      }
      // Inline function 'kotlin.text.isNotEmpty' call
      if (charSequenceLength(indent) > 0) {
        var tmp_0;
        if (stackStart === 0) {
          tmp_0 = 0;
        } else {
          // Inline function 'kotlin.text.count' call
          var count = 0;
          var inductionVariable = 0;
          while (inductionVariable < charSequenceLength(shortInfo)) {
            var element = charSequenceGet(shortInfo, inductionVariable);
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call
            if (element === _Char___init__impl__6a9atx(10)) {
              count = count + 1 | 0;
            }
          }
          tmp_0 = 1 + count | 0;
        }
        var messageLines = tmp_0;
        // Inline function 'kotlin.sequences.forEachIndexed' call
        var index = 0;
        var tmp0_iterator = lineSequence(stack).h();
        while (tmp0_iterator.i()) {
          var item = tmp0_iterator.j();
          // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call
          var tmp1 = index;
          index = tmp1 + 1 | 0;
          if (checkIndexOverflow(tmp1) >= messageLines) {
            $this.zb_1.m7(indent);
          }
          $this.zb_1.m7(item).m7('\n');
        }
      } else {
        $this.zb_1.m7(stack).m7('\n');
      }
    } else {
      $this.zb_1.m7(shortInfo).m7('\n');
    }
    var suppressed = get_suppressedExceptions(_this__u8e3s4);
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!suppressed.l()) {
      var suppressedIndent = indent + '    ';
      var tmp0_iterator_0 = suppressed.h();
      while (tmp0_iterator_0.i()) {
        var s = tmp0_iterator_0.j();
        dumpFullTrace(s, $this, suppressedIndent, 'Suppressed: ');
      }
    }
    return true;
  }
  function dropCommonFrames($this, stack, stackStart) {
    var commonFrames = 0;
    var lastBreak = 0;
    var preLastBreak = 0;
    var inductionVariable = 0;
    // Inline function 'kotlin.comparisons.minOf' call
    var a = $this.bc_1.length - $this.cc_1 | 0;
    var b = stack.length - stackStart | 0;
    var last = Math.min(a, b);
    if (inductionVariable < last)
      $l$loop: do {
        var pos = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var c = charSequenceGet(stack, get_lastIndex_1(stack) - pos | 0);
        if (!(c === charSequenceGet($this.bc_1, get_lastIndex_1($this.bc_1) - pos | 0)))
          break $l$loop;
        if (c === _Char___init__impl__6a9atx(10)) {
          commonFrames = commonFrames + 1 | 0;
          preLastBreak = lastBreak;
          lastBreak = pos;
        }
      }
       while (inductionVariable < last);
    if (commonFrames <= 1)
      return stack;
    while (preLastBreak > 0 ? charSequenceGet(stack, get_lastIndex_1(stack) - (preLastBreak - 1 | 0) | 0) === _Char___init__impl__6a9atx(32) : false)
      preLastBreak = preLastBreak - 1 | 0;
    return dropLast_0(stack, preLastBreak) + ('... and ' + (commonFrames - 1 | 0) + ' more common stack frames skipped');
  }
  function ExceptionTraceBuilder() {
    this.zb_1 = StringBuilder_init_$Create$_1();
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.ac_1 = [];
    this.bc_1 = '';
    this.cc_1 = 0;
  }
  protoOf(ExceptionTraceBuilder).dc = function (exception) {
    dumpFullTrace(exception, this, '', '');
    return this.zb_1.toString();
  };
  function get_suppressedExceptions(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = _this__u8e3s4._suppressed;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = tmp0_safe_receiver;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? emptyList() : tmp1_elvis_lhs;
  }
  var DurationUnit_NANOSECONDS_instance;
  var DurationUnit_MICROSECONDS_instance;
  var DurationUnit_MILLISECONDS_instance;
  var DurationUnit_SECONDS_instance;
  var DurationUnit_MINUTES_instance;
  var DurationUnit_HOURS_instance;
  var DurationUnit_DAYS_instance;
  var DurationUnit_entriesInitialized;
  function DurationUnit_initEntries() {
    if (DurationUnit_entriesInitialized)
      return Unit_instance;
    DurationUnit_entriesInitialized = true;
    DurationUnit_NANOSECONDS_instance = new DurationUnit('NANOSECONDS', 0, 1.0);
    DurationUnit_MICROSECONDS_instance = new DurationUnit('MICROSECONDS', 1, 1000.0);
    DurationUnit_MILLISECONDS_instance = new DurationUnit('MILLISECONDS', 2, 1000000.0);
    DurationUnit_SECONDS_instance = new DurationUnit('SECONDS', 3, 1.0E9);
    DurationUnit_MINUTES_instance = new DurationUnit('MINUTES', 4, 6.0E10);
    DurationUnit_HOURS_instance = new DurationUnit('HOURS', 5, 3.6E12);
    DurationUnit_DAYS_instance = new DurationUnit('DAYS', 6, 8.64E13);
  }
  function DurationUnit(name, ordinal, scale) {
    Enum.call(this, name, ordinal);
    this.gc_1 = scale;
  }
  function convertDurationUnit(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo_0(sourceUnit.gc_1, targetUnit.gc_1);
    return sourceCompareTarget > 0 ? value * (sourceUnit.gc_1 / targetUnit.gc_1) : sourceCompareTarget < 0 ? value / (targetUnit.gc_1 / sourceUnit.gc_1) : value;
  }
  function convertDurationUnit_0(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo_0(sourceUnit.gc_1, targetUnit.gc_1);
    var tmp;
    if (sourceCompareTarget > 0) {
      var scale = numberToLong(sourceUnit.gc_1 / targetUnit.gc_1);
      var result = value.t2(scale);
      tmp = result.u2(scale).equals(value) ? result : value.z(new Long(0, 0)) > 0 ? new Long(-1, 2147483647) : new Long(0, -2147483648);
    } else if (sourceCompareTarget < 0) {
      tmp = value.u2(numberToLong(targetUnit.gc_1 / sourceUnit.gc_1));
    } else {
      tmp = value;
    }
    return tmp;
  }
  function DurationUnit_NANOSECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_NANOSECONDS_instance;
  }
  function DurationUnit_MILLISECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MILLISECONDS_instance;
  }
  function DurationUnit_SECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_SECONDS_instance;
  }
  function DurationUnit_MINUTES_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MINUTES_instance;
  }
  function DurationUnit_HOURS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_HOURS_instance;
  }
  function DurationUnit_DAYS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_DAYS_instance;
  }
  function MonotonicTimeSource() {
    MonotonicTimeSource_instance = this;
    var tmp = this;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.time.MonotonicTimeSource.actualSource.<anonymous>' call
    var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
    var tmp_0;
    if (isNode) {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0 = process;
      tmp_0 = new HrTimeSource(tmp$ret$0);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_safe_receiver = typeof self !== 'undefined' ? self : globalThis;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.performance;
      var tmp_1;
      if (tmp1_safe_receiver == null) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp_1 = new PerformanceTimeSource(tmp1_safe_receiver);
      }
      var tmp2_elvis_lhs = tmp_1;
      tmp_0 = tmp2_elvis_lhs == null ? DateNowTimeSource_instance : tmp2_elvis_lhs;
    }
    tmp.hc_1 = tmp_0;
  }
  protoOf(MonotonicTimeSource).ic = function () {
    return this.hc_1.ic();
  };
  protoOf(MonotonicTimeSource).jc = function () {
    return new ValueTimeMark(this.ic());
  };
  protoOf(MonotonicTimeSource).kc = function (timeMark) {
    return this.hc_1.kc(timeMark);
  };
  protoOf(MonotonicTimeSource).lc = function (one, another) {
    return this.hc_1.lc(one, another);
  };
  var MonotonicTimeSource_instance;
  function MonotonicTimeSource_getInstance() {
    if (MonotonicTimeSource_instance == null)
      new MonotonicTimeSource();
    return MonotonicTimeSource_instance;
  }
  function Reading(components) {
    this.mc_1 = components;
  }
  protoOf(Reading).equals = function (other) {
    var tmp;
    if (other instanceof Reading) {
      tmp = contentEquals_0(this.mc_1, other.mc_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Reading).hashCode = function () {
    return contentHashCode(this.mc_1);
  };
  protoOf(Reading).toString = function () {
    return contentToString(this.mc_1);
  };
  function HrTimeSource(process) {
    this.nc_1 = process;
  }
  protoOf(HrTimeSource).ic = function () {
    return _ValueTimeMark___init__impl__uyfl2m(new Reading(this.nc_1.hrtime()));
  };
  protoOf(HrTimeSource).jc = function () {
    return new ValueTimeMark(this.ic());
  };
  protoOf(HrTimeSource).kc = function (timeMark) {
    // Inline function 'kotlin.let' call
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(timeMark);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.time.HrTimeSource.elapsedFrom.<anonymous>' call
    var name_for_destructuring_parameter_0_fjsvno = this.nc_1.hrtime((tmp instanceof Reading ? tmp : THROW_CCE()).mc_1);
    // Inline function 'kotlin.collections.component1' call
    var seconds = name_for_destructuring_parameter_0_fjsvno[0];
    // Inline function 'kotlin.collections.component2' call
    var nanos = name_for_destructuring_parameter_0_fjsvno[1];
    return Duration__plus_impl_yu9v8f(toDuration(seconds, DurationUnit_SECONDS_getInstance()), toDuration(nanos, DurationUnit_NANOSECONDS_getInstance()));
  };
  protoOf(HrTimeSource).lc = function (one, another) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(one);
    var tmp0_container = tmp instanceof Reading ? tmp : THROW_CCE();
    // Inline function 'kotlin.time.Reading.component1' call
    // Inline function 'kotlin.collections.component1' call
    var s1 = tmp0_container.mc_1[0];
    // Inline function 'kotlin.time.Reading.component2' call
    // Inline function 'kotlin.collections.component2' call
    var n1 = tmp0_container.mc_1[1];
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(another);
    var tmp1_container = tmp_0 instanceof Reading ? tmp_0 : THROW_CCE();
    // Inline function 'kotlin.time.Reading.component1' call
    // Inline function 'kotlin.collections.component1' call
    var s2 = tmp1_container.mc_1[0];
    // Inline function 'kotlin.time.Reading.component2' call
    // Inline function 'kotlin.collections.component2' call
    var n2 = tmp1_container.mc_1[1];
    return Duration__plus_impl_yu9v8f((s1 === s2 ? n1 === n2 : false) ? Companion_getInstance_14().oc_1 : toDuration(s1 - s2, DurationUnit_SECONDS_getInstance()), toDuration(n1 - n2, DurationUnit_NANOSECONDS_getInstance()));
  };
  protoOf(HrTimeSource).toString = function () {
    return 'TimeSource(process.hrtime())';
  };
  function read($this) {
    return $this.rc_1.now();
  }
  function PerformanceTimeSource(performance) {
    this.rc_1 = performance;
  }
  protoOf(PerformanceTimeSource).ic = function () {
    return _ValueTimeMark___init__impl__uyfl2m(read(this));
  };
  protoOf(PerformanceTimeSource).jc = function () {
    return new ValueTimeMark(this.ic());
  };
  protoOf(PerformanceTimeSource).kc = function (timeMark) {
    // Inline function 'kotlin.time.Companion.milliseconds' call
    Companion_getInstance_14();
    var tmp = read(this);
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(timeMark);
    var this_0 = tmp - (typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE());
    return toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
  };
  protoOf(PerformanceTimeSource).lc = function (one, another) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(one);
    var ms1 = typeof tmp === 'number' ? tmp : THROW_CCE();
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(another);
    var ms2 = typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE();
    var tmp_1;
    if (ms1 === ms2) {
      tmp_1 = Companion_getInstance_14().oc_1;
    } else {
      // Inline function 'kotlin.time.Companion.milliseconds' call
      Companion_getInstance_14();
      var this_0 = ms1 - ms2;
      tmp_1 = toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
    }
    return tmp_1;
  };
  protoOf(PerformanceTimeSource).toString = function () {
    return 'TimeSource(self.performance.now())';
  };
  function read_0($this) {
    return Date.now();
  }
  function DateNowTimeSource() {
  }
  protoOf(DateNowTimeSource).ic = function () {
    return _ValueTimeMark___init__impl__uyfl2m(read_0(this));
  };
  protoOf(DateNowTimeSource).jc = function () {
    return new ValueTimeMark(this.ic());
  };
  protoOf(DateNowTimeSource).kc = function (timeMark) {
    // Inline function 'kotlin.time.Companion.milliseconds' call
    Companion_getInstance_14();
    var tmp = read_0(this);
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(timeMark);
    var this_0 = tmp - (typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE());
    return toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
  };
  protoOf(DateNowTimeSource).lc = function (one, another) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(one);
    var ms1 = typeof tmp === 'number' ? tmp : THROW_CCE();
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(another);
    var ms2 = typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE();
    var tmp_1;
    if (ms1 === ms2) {
      tmp_1 = Companion_getInstance_14().oc_1;
    } else {
      // Inline function 'kotlin.time.Companion.milliseconds' call
      Companion_getInstance_14();
      var this_0 = ms1 - ms2;
      tmp_1 = toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
    }
    return tmp_1;
  };
  protoOf(DateNowTimeSource).toString = function () {
    return 'TimeSource(Date.now())';
  };
  var DateNowTimeSource_instance;
  function DateNowTimeSource_getInstance() {
    return DateNowTimeSource_instance;
  }
  function AbstractCollection$toString$lambda(this$0) {
    return function (it) {
      return it === this$0 ? '(this Collection)' : toString_0(it);
    };
  }
  function AbstractCollection() {
  }
  protoOf(AbstractCollection).f1 = function (element) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(this, Collection)) {
        tmp = this.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = this.h();
      while (tmp0_iterator.i()) {
        var element_0 = tmp0_iterator.j();
        // Inline function 'kotlin.collections.AbstractCollection.contains.<anonymous>' call
        if (equals(element_0, element)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractCollection).b2 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.AbstractCollection.containsAll.<anonymous>' call
        if (!this.f1(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractCollection).l = function () {
    return this.k() === 0;
  };
  protoOf(AbstractCollection).toString = function () {
    return joinToString_0(this, ', ', '[', ']', VOID, VOID, AbstractCollection$toString$lambda(this));
  };
  protoOf(AbstractCollection).toArray = function () {
    return collectionToArray(this);
  };
  function tryToComputeNext($this) {
    $this.sc_1 = 3;
    $this.uc();
    return $this.sc_1 === 1;
  }
  function AbstractIterator() {
    this.sc_1 = 0;
    this.tc_1 = null;
  }
  protoOf(AbstractIterator).i = function () {
    var tmp;
    switch (this.sc_1) {
      case 2:
        tmp = false;
        break;
      case 1:
        tmp = true;
        break;
      case 0:
        tmp = tryToComputeNext(this);
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('hasNext called when the iterator is in the FAILED state.');
    }
    return tmp;
  };
  protoOf(AbstractIterator).j = function () {
    if (this.sc_1 === 1) {
      this.sc_1 = 0;
      var tmp = this.tc_1;
      return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    }
    if (this.sc_1 === 2 ? true : !tryToComputeNext(this)) {
      throw NoSuchElementException_init_$Create$();
    }
    this.sc_1 = 0;
    var tmp_0 = this.tc_1;
    return (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
  };
  protoOf(AbstractIterator).vc = function (value) {
    this.tc_1 = value;
    this.sc_1 = 1;
  };
  protoOf(AbstractIterator).wc = function () {
    this.sc_1 = 2;
  };
  function SubList_0(list, fromIndex, toIndex) {
    AbstractList.call(this);
    this.xc_1 = list;
    this.yc_1 = fromIndex;
    this.zc_1 = 0;
    Companion_instance_5.l3(this.yc_1, toIndex, this.xc_1.k());
    this.zc_1 = toIndex - this.yc_1 | 0;
  }
  protoOf(SubList_0).m = function (index) {
    Companion_instance_5.q3(index, this.zc_1);
    return this.xc_1.m(this.yc_1 + index | 0);
  };
  protoOf(SubList_0).k = function () {
    return this.zc_1;
  };
  function IteratorImpl_0($outer) {
    this.bd_1 = $outer;
    this.ad_1 = 0;
  }
  protoOf(IteratorImpl_0).i = function () {
    return this.ad_1 < this.bd_1.k();
  };
  protoOf(IteratorImpl_0).j = function () {
    if (!this.i())
      throw NoSuchElementException_init_$Create$();
    var tmp1 = this.ad_1;
    this.ad_1 = tmp1 + 1 | 0;
    return this.bd_1.m(tmp1);
  };
  function ListIteratorImpl_0($outer, index) {
    this.ed_1 = $outer;
    IteratorImpl_0.call(this, $outer);
    Companion_instance_5.e4(index, this.ed_1.k());
    this.ad_1 = index;
  }
  function Companion_5() {
    this.k3_1 = 2147483639;
  }
  protoOf(Companion_5).q3 = function (index, size) {
    if (index < 0 ? true : index >= size) {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);
    }
  };
  protoOf(Companion_5).e4 = function (index, size) {
    if (index < 0 ? true : index > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);
    }
  };
  protoOf(Companion_5).l3 = function (fromIndex, toIndex, size) {
    if (fromIndex < 0 ? true : toIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex + ', size: ' + size);
    }
    if (fromIndex > toIndex) {
      throw IllegalArgumentException_init_$Create$_0('fromIndex: ' + fromIndex + ' > toIndex: ' + toIndex);
    }
  };
  protoOf(Companion_5).ta = function (startIndex, endIndex, size) {
    if (startIndex < 0 ? true : endIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('startIndex: ' + startIndex + ', endIndex: ' + endIndex + ', size: ' + size);
    }
    if (startIndex > endIndex) {
      throw IllegalArgumentException_init_$Create$_0('startIndex: ' + startIndex + ' > endIndex: ' + endIndex);
    }
  };
  protoOf(Companion_5).m6 = function (oldCapacity, minCapacity) {
    var newCapacity = oldCapacity + (oldCapacity >> 1) | 0;
    if ((newCapacity - minCapacity | 0) < 0)
      newCapacity = minCapacity;
    if ((newCapacity - 2147483639 | 0) > 0)
      newCapacity = minCapacity > 2147483639 ? 2147483647 : 2147483639;
    return newCapacity;
  };
  protoOf(Companion_5).m4 = function (c) {
    var hashCode_0 = 1;
    var tmp0_iterator = c.h();
    while (tmp0_iterator.i()) {
      var e = tmp0_iterator.j();
      var tmp = imul(31, hashCode_0);
      var tmp2_elvis_lhs = e == null ? null : hashCode(e);
      hashCode_0 = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode_0;
  };
  protoOf(Companion_5).l4 = function (c, other) {
    if (!(c.k() === other.k()))
      return false;
    var otherIterator = other.h();
    var tmp0_iterator = c.h();
    while (tmp0_iterator.i()) {
      var elem = tmp0_iterator.j();
      var elemOther = otherIterator.j();
      if (!equals(elem, elemOther)) {
        return false;
      }
    }
    return true;
  };
  var Companion_instance_5;
  function Companion_getInstance_5() {
    return Companion_instance_5;
  }
  function AbstractList() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractList).h = function () {
    return new IteratorImpl_0(this);
  };
  protoOf(AbstractList).r = function (index) {
    return new ListIteratorImpl_0(this, index);
  };
  protoOf(AbstractList).c2 = function (fromIndex, toIndex) {
    return new SubList_0(this, fromIndex, toIndex);
  };
  protoOf(AbstractList).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, List) : false))
      return false;
    return Companion_instance_5.l4(this, other);
  };
  protoOf(AbstractList).hashCode = function () {
    return Companion_instance_5.m4(this);
  };
  function AbstractMap$values$1$iterator$1($entryIterator) {
    this.fd_1 = $entryIterator;
  }
  protoOf(AbstractMap$values$1$iterator$1).i = function () {
    return this.fd_1.i();
  };
  protoOf(AbstractMap$values$1$iterator$1).j = function () {
    return this.fd_1.j().e2();
  };
  function toString_3($this, o) {
    return o === $this ? '(this Map)' : toString_0(o);
  }
  function implFindEntry($this, key) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = $this.j2().h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.AbstractMap.implFindEntry.<anonymous>' call
        if (equals(element.d2(), key)) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function Companion_6() {
  }
  var Companion_instance_6;
  function Companion_getInstance_6() {
    return Companion_instance_6;
  }
  function AbstractMap$toString$lambda(this$0) {
    return function (it) {
      return this$0.gd(it);
    };
  }
  function AbstractMap$values$1(this$0) {
    this.hd_1 = this$0;
    AbstractCollection.call(this);
  }
  protoOf(AbstractMap$values$1).l5 = function (element) {
    return this.hd_1.g2(element);
  };
  protoOf(AbstractMap$values$1).f1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.l5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(AbstractMap$values$1).h = function () {
    var entryIterator = this.hd_1.j2().h();
    return new AbstractMap$values$1$iterator$1(entryIterator);
  };
  protoOf(AbstractMap$values$1).k = function () {
    return this.hd_1.k();
  };
  function AbstractMap() {
    this.t4_1 = null;
    this.u4_1 = null;
  }
  protoOf(AbstractMap).f2 = function (key) {
    return !(implFindEntry(this, key) == null);
  };
  protoOf(AbstractMap).g2 = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var this_0 = this.j2();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.AbstractMap.containsValue.<anonymous>' call
        if (equals(element.e2(), value)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractMap).v4 = function (entry) {
    if (!(!(entry == null) ? isInterface(entry, Entry) : false))
      return false;
    var key = entry.d2();
    var value = entry.e2();
    // Inline function 'kotlin.collections.get' call
    var ourValue = (isInterface(this, Map_0) ? this : THROW_CCE()).h2(key);
    if (!equals(value, ourValue)) {
      return false;
    }
    var tmp;
    if (ourValue == null) {
      // Inline function 'kotlin.collections.containsKey' call
      tmp = !(isInterface(this, Map_0) ? this : THROW_CCE()).f2(key);
    } else {
      tmp = false;
    }
    if (tmp) {
      return false;
    }
    return true;
  };
  protoOf(AbstractMap).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, Map_0) : false))
      return false;
    if (!(this.k() === other.k()))
      return false;
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = other.j2();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.AbstractMap.equals.<anonymous>' call
        if (!this.v4(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractMap).h2 = function (key) {
    var tmp0_safe_receiver = implFindEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.e2();
  };
  protoOf(AbstractMap).hashCode = function () {
    return hashCode(this.j2());
  };
  protoOf(AbstractMap).l = function () {
    return this.k() === 0;
  };
  protoOf(AbstractMap).k = function () {
    return this.j2().k();
  };
  protoOf(AbstractMap).toString = function () {
    var tmp = this.j2();
    return joinToString_0(tmp, ', ', '{', '}', VOID, VOID, AbstractMap$toString$lambda(this));
  };
  protoOf(AbstractMap).gd = function (entry) {
    return toString_3(this, entry.d2()) + '=' + toString_3(this, entry.e2());
  };
  protoOf(AbstractMap).i2 = function () {
    if (this.u4_1 == null) {
      var tmp = this;
      tmp.u4_1 = new AbstractMap$values$1(this);
    }
    return ensureNotNull(this.u4_1);
  };
  function Companion_7() {
  }
  protoOf(Companion_7).x4 = function (c) {
    var hashCode_0 = 0;
    var tmp0_iterator = c.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      var tmp = hashCode_0;
      var tmp2_elvis_lhs = element == null ? null : hashCode(element);
      hashCode_0 = tmp + (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) | 0;
    }
    return hashCode_0;
  };
  protoOf(Companion_7).w4 = function (c, other) {
    if (!(c.k() === other.k()))
      return false;
    // Inline function 'kotlin.collections.containsAll' call
    return c.b2(other);
  };
  var Companion_instance_7;
  function Companion_getInstance_7() {
    return Companion_instance_7;
  }
  function ArrayDeque_init_$Init$($this) {
    AbstractMutableList.call($this);
    ArrayDeque.call($this);
    $this.kd_1 = Companion_getInstance_8().md_1;
    return $this;
  }
  function ArrayDeque_init_$Create$() {
    return ArrayDeque_init_$Init$(objectCreate(protoOf(ArrayDeque)));
  }
  function ensureCapacity_0($this, minCapacity) {
    if (minCapacity < 0)
      throw IllegalStateException_init_$Create$_0('Deque is too big.');
    if (minCapacity <= $this.kd_1.length)
      return Unit_instance;
    if ($this.kd_1 === Companion_getInstance_8().md_1) {
      var tmp = $this;
      // Inline function 'kotlin.arrayOfNulls' call
      var size = coerceAtLeast(minCapacity, 10);
      tmp.kd_1 = fillArrayVal(Array(size), null);
      return Unit_instance;
    }
    var newCapacity = Companion_instance_5.m6($this.kd_1.length, minCapacity);
    copyElements($this, newCapacity);
  }
  function copyElements($this, newCapacity) {
    // Inline function 'kotlin.arrayOfNulls' call
    var newElements = fillArrayVal(Array(newCapacity), null);
    // Inline function 'kotlin.collections.copyInto' call
    var this_0 = $this.kd_1;
    var startIndex = $this.jd_1;
    var endIndex = $this.kd_1.length;
    arrayCopy(this_0, newElements, 0, startIndex, endIndex);
    // Inline function 'kotlin.collections.copyInto' call
    var this_1 = $this.kd_1;
    var destinationOffset = $this.kd_1.length - $this.jd_1 | 0;
    var endIndex_0 = $this.jd_1;
    arrayCopy(this_1, newElements, destinationOffset, 0, endIndex_0);
    $this.jd_1 = 0;
    $this.kd_1 = newElements;
  }
  function positiveMod($this, index) {
    return index >= $this.kd_1.length ? index - $this.kd_1.length | 0 : index;
  }
  function negativeMod($this, index) {
    return index < 0 ? index + $this.kd_1.length | 0 : index;
  }
  function incremented($this, index) {
    return index === get_lastIndex($this.kd_1) ? 0 : index + 1 | 0;
  }
  function decremented($this, index) {
    return index === 0 ? get_lastIndex($this.kd_1) : index - 1 | 0;
  }
  function copyCollectionElements($this, internalIndex, elements) {
    var iterator = elements.h();
    var inductionVariable = internalIndex;
    var last = $this.kd_1.length;
    if (inductionVariable < last)
      $l$loop: do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!iterator.i())
          break $l$loop;
        $this.kd_1[index] = iterator.j();
      }
       while (inductionVariable < last);
    var inductionVariable_0 = 0;
    var last_0 = $this.jd_1;
    if (inductionVariable_0 < last_0)
      $l$loop_0: do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (!iterator.i())
          break $l$loop_0;
        $this.kd_1[index_0] = iterator.j();
      }
       while (inductionVariable_0 < last_0);
    $this.ld_1 = $this.ld_1 + elements.k() | 0;
  }
  function Companion_8() {
    Companion_instance_8 = this;
    var tmp = this;
    // Inline function 'kotlin.emptyArray' call
    tmp.md_1 = [];
    this.nd_1 = 10;
  }
  var Companion_instance_8;
  function Companion_getInstance_8() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  protoOf(ArrayDeque).k = function () {
    return this.ld_1;
  };
  protoOf(ArrayDeque).l = function () {
    return this.ld_1 === 0;
  };
  protoOf(ArrayDeque).od = function (element) {
    ensureCapacity_0(this, this.ld_1 + 1 | 0);
    this.jd_1 = decremented(this, this.jd_1);
    this.kd_1[this.jd_1] = element;
    this.ld_1 = this.ld_1 + 1 | 0;
  };
  protoOf(ArrayDeque).pd = function (element) {
    ensureCapacity_0(this, this.ld_1 + 1 | 0);
    var tmp = this.kd_1;
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.ld_1;
    tmp[positiveMod(this, this.jd_1 + index | 0)] = element;
    this.ld_1 = this.ld_1 + 1 | 0;
  };
  protoOf(ArrayDeque).qd = function () {
    if (this.l())
      throw NoSuchElementException_init_$Create$_0('ArrayDeque is empty.');
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var internalIndex = this.jd_1;
    var tmp = this.kd_1[internalIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.kd_1[this.jd_1] = null;
    this.jd_1 = incremented(this, this.jd_1);
    this.ld_1 = this.ld_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).rd = function () {
    return this.l() ? null : this.qd();
  };
  protoOf(ArrayDeque).sd = function () {
    if (this.l())
      throw NoSuchElementException_init_$Create$_0('ArrayDeque is empty.');
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = get_lastIndex_0(this);
    var internalLastIndex = positiveMod(this, this.jd_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.kd_1[internalLastIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.kd_1[internalLastIndex] = null;
    this.ld_1 = this.ld_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).e = function (element) {
    this.pd(element);
    return true;
  };
  protoOf(ArrayDeque).j4 = function (index, element) {
    Companion_instance_5.e4(index, this.ld_1);
    if (index === this.ld_1) {
      this.pd(element);
      return Unit_instance;
    } else if (index === 0) {
      this.od(element);
      return Unit_instance;
    }
    ensureCapacity_0(this, this.ld_1 + 1 | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.jd_1 + index | 0);
    if (index < (this.ld_1 + 1 | 0) >> 1) {
      var decrementedInternalIndex = decremented(this, internalIndex);
      var decrementedHead = decremented(this, this.jd_1);
      if (decrementedInternalIndex >= this.jd_1) {
        this.kd_1[decrementedHead] = this.kd_1[this.jd_1];
        // Inline function 'kotlin.collections.copyInto' call
        var this_0 = this.kd_1;
        var destination = this.kd_1;
        var destinationOffset = this.jd_1;
        var startIndex = this.jd_1 + 1 | 0;
        var endIndex = decrementedInternalIndex + 1 | 0;
        arrayCopy(this_0, destination, destinationOffset, startIndex, endIndex);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_1 = this.kd_1;
        var destination_0 = this.kd_1;
        var destinationOffset_0 = this.jd_1 - 1 | 0;
        var startIndex_0 = this.jd_1;
        var endIndex_0 = this.kd_1.length;
        arrayCopy(this_1, destination_0, destinationOffset_0, startIndex_0, endIndex_0);
        this.kd_1[this.kd_1.length - 1 | 0] = this.kd_1[0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_2 = this.kd_1;
        var destination_1 = this.kd_1;
        var endIndex_1 = decrementedInternalIndex + 1 | 0;
        arrayCopy(this_2, destination_1, 0, 1, endIndex_1);
      }
      this.kd_1[decrementedInternalIndex] = element;
      this.jd_1 = decrementedHead;
    } else {
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index_0 = this.ld_1;
      var tail = positiveMod(this, this.jd_1 + index_0 | 0);
      if (internalIndex < tail) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_3 = this.kd_1;
        var destination_2 = this.kd_1;
        var destinationOffset_1 = internalIndex + 1 | 0;
        arrayCopy(this_3, destination_2, destinationOffset_1, internalIndex, tail);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_4 = this.kd_1;
        var destination_3 = this.kd_1;
        arrayCopy(this_4, destination_3, 1, 0, tail);
        this.kd_1[0] = this.kd_1[this.kd_1.length - 1 | 0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_5 = this.kd_1;
        var destination_4 = this.kd_1;
        var destinationOffset_2 = internalIndex + 1 | 0;
        var endIndex_2 = this.kd_1.length - 1 | 0;
        arrayCopy(this_5, destination_4, destinationOffset_2, internalIndex, endIndex_2);
      }
      this.kd_1[internalIndex] = element;
    }
    this.ld_1 = this.ld_1 + 1 | 0;
  };
  protoOf(ArrayDeque).q = function (elements) {
    if (elements.l())
      return false;
    ensureCapacity_0(this, this.ld_1 + elements.k() | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.ld_1;
    var tmp$ret$0 = positiveMod(this, this.jd_1 + index | 0);
    copyCollectionElements(this, tmp$ret$0, elements);
    return true;
  };
  protoOf(ArrayDeque).m = function (index) {
    Companion_instance_5.q3(index, this.ld_1);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.jd_1 + index | 0);
    var tmp = this.kd_1[internalIndex];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayDeque).t = function (index, element) {
    Companion_instance_5.q3(index, this.ld_1);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.jd_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.kd_1[internalIndex];
    var oldElement = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.kd_1[internalIndex] = element;
    return oldElement;
  };
  protoOf(ArrayDeque).f1 = function (element) {
    return !(this.k4(element) === -1);
  };
  protoOf(ArrayDeque).k4 = function (element) {
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.ld_1;
    var tail = positiveMod(this, this.jd_1 + index | 0);
    if (this.jd_1 < tail) {
      var inductionVariable = this.jd_1;
      if (inductionVariable < tail)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (equals(element, this.kd_1[index_0]))
            return index_0 - this.jd_1 | 0;
        }
         while (inductionVariable < tail);
    } else if (this.jd_1 >= tail) {
      var inductionVariable_0 = this.jd_1;
      var last = this.kd_1.length;
      if (inductionVariable_0 < last)
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals(element, this.kd_1[index_1]))
            return index_1 - this.jd_1 | 0;
        }
         while (inductionVariable_0 < last);
      var inductionVariable_1 = 0;
      if (inductionVariable_1 < tail)
        do {
          var index_2 = inductionVariable_1;
          inductionVariable_1 = inductionVariable_1 + 1 | 0;
          if (equals(element, this.kd_1[index_2]))
            return (index_2 + this.kd_1.length | 0) - this.jd_1 | 0;
        }
         while (inductionVariable_1 < tail);
    }
    return -1;
  };
  protoOf(ArrayDeque).z3 = function (index) {
    Companion_instance_5.q3(index, this.ld_1);
    if (index === get_lastIndex_0(this)) {
      return this.sd();
    } else if (index === 0) {
      return this.qd();
    }
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.jd_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.kd_1[internalIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    if (index < this.ld_1 >> 1) {
      if (internalIndex >= this.jd_1) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_0 = this.kd_1;
        var destination = this.kd_1;
        var destinationOffset = this.jd_1 + 1 | 0;
        var startIndex = this.jd_1;
        arrayCopy(this_0, destination, destinationOffset, startIndex, internalIndex);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_1 = this.kd_1;
        var destination_0 = this.kd_1;
        arrayCopy(this_1, destination_0, 1, 0, internalIndex);
        this.kd_1[0] = this.kd_1[this.kd_1.length - 1 | 0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_2 = this.kd_1;
        var destination_1 = this.kd_1;
        var destinationOffset_0 = this.jd_1 + 1 | 0;
        var startIndex_0 = this.jd_1;
        var endIndex = this.kd_1.length - 1 | 0;
        arrayCopy(this_2, destination_1, destinationOffset_0, startIndex_0, endIndex);
      }
      this.kd_1[this.jd_1] = null;
      this.jd_1 = incremented(this, this.jd_1);
    } else {
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index_0 = get_lastIndex_0(this);
      var internalLastIndex = positiveMod(this, this.jd_1 + index_0 | 0);
      if (internalIndex <= internalLastIndex) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_3 = this.kd_1;
        var destination_2 = this.kd_1;
        var startIndex_1 = internalIndex + 1 | 0;
        var endIndex_0 = internalLastIndex + 1 | 0;
        arrayCopy(this_3, destination_2, internalIndex, startIndex_1, endIndex_0);
      } else {
        // Inline function 'kotlin.collections.copyInto' call
        var this_4 = this.kd_1;
        var destination_3 = this.kd_1;
        var startIndex_2 = internalIndex + 1 | 0;
        var endIndex_1 = this.kd_1.length;
        arrayCopy(this_4, destination_3, internalIndex, startIndex_2, endIndex_1);
        this.kd_1[this.kd_1.length - 1 | 0] = this.kd_1[0];
        // Inline function 'kotlin.collections.copyInto' call
        var this_5 = this.kd_1;
        var destination_4 = this.kd_1;
        var endIndex_2 = internalLastIndex + 1 | 0;
        arrayCopy(this_5, destination_4, 0, 1, endIndex_2);
      }
      this.kd_1[internalLastIndex] = null;
    }
    this.ld_1 = this.ld_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).u3 = function (elements) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.ArrayDeque.filterInPlace' call
      var tmp;
      if (this.l()) {
        tmp = true;
      } else {
        // Inline function 'kotlin.collections.isEmpty' call
        tmp = this.kd_1.length === 0;
      }
      if (tmp) {
        tmp$ret$1 = false;
        break $l$block;
      }
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index = this.ld_1;
      var tail = positiveMod(this, this.jd_1 + index | 0);
      var newTail = this.jd_1;
      var modified = false;
      if (this.jd_1 < tail) {
        var inductionVariable = this.jd_1;
        if (inductionVariable < tail)
          do {
            var index_0 = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var element = this.kd_1[index_0];
            // Inline function 'kotlin.collections.ArrayDeque.retainAll.<anonymous>' call
            var it = (element == null ? true : !(element == null)) ? element : THROW_CCE();
            if (elements.f1(it)) {
              var tmp_0 = this.kd_1;
              var tmp1 = newTail;
              newTail = tmp1 + 1 | 0;
              tmp_0[tmp1] = element;
            } else {
              modified = true;
            }
          }
           while (inductionVariable < tail);
        fill_0(this.kd_1, null, newTail, tail);
      } else {
        var inductionVariable_0 = this.jd_1;
        var last = this.kd_1.length;
        if (inductionVariable_0 < last)
          do {
            var index_1 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var element_0 = this.kd_1[index_1];
            this.kd_1[index_1] = null;
            // Inline function 'kotlin.collections.ArrayDeque.retainAll.<anonymous>' call
            var it_0 = (element_0 == null ? true : !(element_0 == null)) ? element_0 : THROW_CCE();
            if (elements.f1(it_0)) {
              var tmp_1 = this.kd_1;
              var tmp3 = newTail;
              newTail = tmp3 + 1 | 0;
              tmp_1[tmp3] = element_0;
            } else {
              modified = true;
            }
          }
           while (inductionVariable_0 < last);
        newTail = positiveMod(this, newTail);
        var inductionVariable_1 = 0;
        if (inductionVariable_1 < tail)
          do {
            var index_2 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var element_1 = this.kd_1[index_2];
            this.kd_1[index_2] = null;
            // Inline function 'kotlin.collections.ArrayDeque.retainAll.<anonymous>' call
            var it_1 = (element_1 == null ? true : !(element_1 == null)) ? element_1 : THROW_CCE();
            if (elements.f1(it_1)) {
              this.kd_1[newTail] = element_1;
              newTail = incremented(this, newTail);
            } else {
              modified = true;
            }
          }
           while (inductionVariable_1 < tail);
      }
      if (modified)
        this.ld_1 = negativeMod(this, newTail - this.jd_1 | 0);
      tmp$ret$1 = modified;
    }
    return tmp$ret$1;
  };
  protoOf(ArrayDeque).td = function (array) {
    var tmp = array.length >= this.ld_1 ? array : arrayOfNulls(array, this.ld_1);
    var dest = isArray(tmp) ? tmp : THROW_CCE();
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.ld_1;
    var tail = positiveMod(this, this.jd_1 + index | 0);
    if (this.jd_1 < tail) {
      // Inline function 'kotlin.collections.copyInto' call
      var this_0 = this.kd_1;
      var startIndex = this.jd_1;
      arrayCopy(this_0, dest, 0, startIndex, tail);
    } else {
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!this.l()) {
        // Inline function 'kotlin.collections.copyInto' call
        var this_1 = this.kd_1;
        var startIndex_0 = this.jd_1;
        var endIndex = this.kd_1.length;
        arrayCopy(this_1, dest, 0, startIndex_0, endIndex);
        // Inline function 'kotlin.collections.copyInto' call
        var this_2 = this.kd_1;
        var destinationOffset = this.kd_1.length - this.jd_1 | 0;
        arrayCopy(this_2, dest, destinationOffset, 0, tail);
      }
    }
    var tmp_0 = terminateCollectionToArray(this.ld_1, dest);
    return isArray(tmp_0) ? tmp_0 : THROW_CCE();
  };
  protoOf(ArrayDeque).a5 = function () {
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.ld_1;
    var tmp$ret$0 = fillArrayVal(Array(size), null);
    return this.td(tmp$ret$0);
  };
  protoOf(ArrayDeque).toArray = function () {
    return this.a5();
  };
  function ArrayDeque() {
    Companion_getInstance_8();
    this.jd_1 = 0;
    this.ld_1 = 0;
  }
  function collectionToArrayCommonImpl(collection) {
    if (collection.l()) {
      // Inline function 'kotlin.emptyArray' call
      return [];
    }
    // Inline function 'kotlin.arrayOfNulls' call
    var size = collection.k();
    var destination = fillArrayVal(Array(size), null);
    var iterator = collection.h();
    var index = 0;
    while (iterator.i()) {
      var tmp0 = index;
      index = tmp0 + 1 | 0;
      destination[tmp0] = iterator.j();
    }
    return destination;
  }
  function emptyList() {
    return EmptyList_getInstance();
  }
  function listOf_0(elements) {
    return elements.length > 0 ? asList(elements) : emptyList();
  }
  function get_indices(_this__u8e3s4) {
    return numberRangeToNumber(0, _this__u8e3s4.k() - 1 | 0);
  }
  function mutableListOf(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function get_lastIndex_0(_this__u8e3s4) {
    return _this__u8e3s4.k() - 1 | 0;
  }
  function EmptyList() {
    EmptyList_instance = this;
    this.ud_1 = new Long(-1478467534, -1720727600);
  }
  protoOf(EmptyList).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, List) : false) {
      tmp = other.l();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptyList).hashCode = function () {
    return 1;
  };
  protoOf(EmptyList).toString = function () {
    return '[]';
  };
  protoOf(EmptyList).k = function () {
    return 0;
  };
  protoOf(EmptyList).l = function () {
    return true;
  };
  protoOf(EmptyList).vd = function (element) {
    return false;
  };
  protoOf(EmptyList).f1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.vd(tmp);
  };
  protoOf(EmptyList).wd = function (elements) {
    return elements.l();
  };
  protoOf(EmptyList).b2 = function (elements) {
    return this.wd(elements);
  };
  protoOf(EmptyList).m = function (index) {
    throw IndexOutOfBoundsException_init_$Create$_0("Empty list doesn't contain element at index " + index + '.');
  };
  protoOf(EmptyList).h = function () {
    return EmptyIterator_instance;
  };
  protoOf(EmptyList).r = function (index) {
    if (!(index === 0))
      throw IndexOutOfBoundsException_init_$Create$_0('Index: ' + index);
    return EmptyIterator_instance;
  };
  protoOf(EmptyList).c2 = function (fromIndex, toIndex) {
    if (fromIndex === 0 ? toIndex === 0 : false)
      return this;
    throw IndexOutOfBoundsException_init_$Create$_0('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex);
  };
  var EmptyList_instance;
  function EmptyList_getInstance() {
    if (EmptyList_instance == null)
      new EmptyList();
    return EmptyList_instance;
  }
  function asCollection(_this__u8e3s4) {
    return new ArrayAsCollection(_this__u8e3s4, false);
  }
  function optimizeReadOnlyList(_this__u8e3s4) {
    switch (_this__u8e3s4.k()) {
      case 0:
        return emptyList();
      case 1:
        return listOf(_this__u8e3s4.m(0));
      default:
        return _this__u8e3s4;
    }
  }
  function arrayListOf(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function throwIndexOverflow() {
    throw ArithmeticException_init_$Create$_0('Index overflow has happened.');
  }
  function ArrayAsCollection(values, isVarargs) {
    this.xd_1 = values;
    this.yd_1 = isVarargs;
  }
  protoOf(ArrayAsCollection).k = function () {
    return this.xd_1.length;
  };
  protoOf(ArrayAsCollection).l = function () {
    // Inline function 'kotlin.collections.isEmpty' call
    return this.xd_1.length === 0;
  };
  protoOf(ArrayAsCollection).zd = function (element) {
    return contains(this.xd_1, element);
  };
  protoOf(ArrayAsCollection).f1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.zd((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(ArrayAsCollection).ae = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = elements.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.collections.ArrayAsCollection.containsAll.<anonymous>' call
        if (!this.zd(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(ArrayAsCollection).b2 = function (elements) {
    return this.ae(elements);
  };
  protoOf(ArrayAsCollection).h = function () {
    return arrayIterator(this.xd_1);
  };
  function EmptyIterator() {
  }
  protoOf(EmptyIterator).i = function () {
    return false;
  };
  protoOf(EmptyIterator).j = function () {
    throw NoSuchElementException_init_$Create$();
  };
  var EmptyIterator_instance;
  function EmptyIterator_getInstance() {
    return EmptyIterator_instance;
  }
  function throwCountOverflow() {
    throw ArithmeticException_init_$Create$_0('Count overflow has happened.');
  }
  function IndexedValue(index, value) {
    this.d1_1 = index;
    this.e1_1 = value;
  }
  protoOf(IndexedValue).toString = function () {
    return 'IndexedValue(index=' + this.d1_1 + ', value=' + this.e1_1 + ')';
  };
  protoOf(IndexedValue).hashCode = function () {
    var result = this.d1_1;
    result = imul(result, 31) + (this.e1_1 == null ? 0 : hashCode(this.e1_1)) | 0;
    return result;
  };
  protoOf(IndexedValue).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof IndexedValue))
      return false;
    var tmp0_other_with_cast = other instanceof IndexedValue ? other : THROW_CCE();
    if (!(this.d1_1 === tmp0_other_with_cast.d1_1))
      return false;
    if (!equals(this.e1_1, tmp0_other_with_cast.e1_1))
      return false;
    return true;
  };
  function flatten(_this__u8e3s4) {
    var result = ArrayList_init_$Create$();
    var tmp0_iterator = _this__u8e3s4.h();
    while (tmp0_iterator.i()) {
      var element = tmp0_iterator.j();
      addAll(result, element);
    }
    return result;
  }
  function collectionSizeOrDefault(_this__u8e3s4, default_0) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.k();
    } else {
      tmp = default_0;
    }
    return tmp;
  }
  function collectionSizeOrNull(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.k();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function emptyMap() {
    var tmp = EmptyMap_getInstance();
    return isInterface(tmp, Map_0) ? tmp : THROW_CCE();
  }
  function mapOf_0(pairs) {
    return pairs.length > 0 ? toMap_2(pairs, LinkedHashMap_init_$Create$_0(mapCapacity(pairs.length))) : emptyMap();
  }
  function toMutableMap(_this__u8e3s4) {
    return LinkedHashMap_init_$Create$_2(_this__u8e3s4);
  }
  function toMap(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
        case 0:
          tmp = emptyMap();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, List)) {
            tmp_0 = _this__u8e3s4.m(0);
          } else {
            tmp_0 = _this__u8e3s4.h().j();
          }

          tmp = mapOf(tmp_0);
          break;
        default:
          tmp = toMap_3(_this__u8e3s4, LinkedHashMap_init_$Create$_0(mapCapacity(_this__u8e3s4.k())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyMap(toMap_3(_this__u8e3s4, LinkedHashMap_init_$Create$()));
  }
  function toMap_0(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.k()) {
      case 0:
        tmp = emptyMap();
        break;
      case 1:
        // Inline function 'kotlin.collections.toSingletonMap' call

        tmp = toMutableMap(_this__u8e3s4);
        break;
      default:
        tmp = toMutableMap(_this__u8e3s4);
        break;
    }
    return tmp;
  }
  function toMap_1(_this__u8e3s4) {
    return optimizeReadOnlyMap(toMap_4(_this__u8e3s4, LinkedHashMap_init_$Create$()));
  }
  function plus_7(_this__u8e3s4, map) {
    // Inline function 'kotlin.apply' call
    var this_0 = LinkedHashMap_init_$Create$_2(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.plus.<anonymous>' call
    this_0.j5(map);
    return this_0;
  }
  function EmptyMap() {
    EmptyMap_instance = this;
    this.be_1 = new Long(-888910638, 1920087921);
  }
  protoOf(EmptyMap).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Map_0) : false) {
      tmp = other.l();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptyMap).hashCode = function () {
    return 0;
  };
  protoOf(EmptyMap).toString = function () {
    return '{}';
  };
  protoOf(EmptyMap).k = function () {
    return 0;
  };
  protoOf(EmptyMap).l = function () {
    return true;
  };
  protoOf(EmptyMap).ce = function (key) {
    return false;
  };
  protoOf(EmptyMap).f2 = function (key) {
    if (!(key == null ? true : !(key == null)))
      return false;
    return this.ce((key == null ? true : !(key == null)) ? key : THROW_CCE());
  };
  protoOf(EmptyMap).de = function (key) {
    return null;
  };
  protoOf(EmptyMap).h2 = function (key) {
    if (!(key == null ? true : !(key == null)))
      return null;
    return this.de((key == null ? true : !(key == null)) ? key : THROW_CCE());
  };
  protoOf(EmptyMap).j2 = function () {
    return EmptySet_getInstance();
  };
  protoOf(EmptyMap).i2 = function () {
    return EmptyList_getInstance();
  };
  var EmptyMap_instance;
  function EmptyMap_getInstance() {
    if (EmptyMap_instance == null)
      new EmptyMap();
    return EmptyMap_instance;
  }
  function toMap_2(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll(destination, _this__u8e3s4);
    return destination;
  }
  function toMap_3(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll_0(destination, _this__u8e3s4);
    return destination;
  }
  function optimizeReadOnlyMap(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.k()) {
      case 0:
        tmp = emptyMap();
        break;
      case 1:
        // Inline function 'kotlin.collections.toSingletonMapOrSelf' call

        tmp = _this__u8e3s4;
        break;
      default:
        tmp = _this__u8e3s4;
        break;
    }
    return tmp;
  }
  function toMap_4(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll_1(destination, _this__u8e3s4);
    return destination;
  }
  function putAll(_this__u8e3s4, pairs) {
    var inductionVariable = 0;
    var last = pairs.length;
    while (inductionVariable < last) {
      var tmp1_loop_parameter = pairs[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var key = tmp1_loop_parameter.ge();
      var value = tmp1_loop_parameter.he();
      _this__u8e3s4.s4(key, value);
    }
  }
  function putAll_0(_this__u8e3s4, pairs) {
    var tmp0_iterator = pairs.h();
    while (tmp0_iterator.i()) {
      var tmp1_loop_parameter = tmp0_iterator.j();
      var key = tmp1_loop_parameter.ge();
      var value = tmp1_loop_parameter.he();
      _this__u8e3s4.s4(key, value);
    }
  }
  function putAll_1(_this__u8e3s4, pairs) {
    var tmp0_iterator = pairs.h();
    while (tmp0_iterator.i()) {
      var tmp1_loop_parameter = tmp0_iterator.j();
      var key = tmp1_loop_parameter.ge();
      var value = tmp1_loop_parameter.he();
      _this__u8e3s4.s4(key, value);
    }
  }
  function hashMapOf(pairs) {
    // Inline function 'kotlin.apply' call
    var this_0 = HashMap_init_$Create$_0(mapCapacity(pairs.length));
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.hashMapOf.<anonymous>' call
    putAll(this_0, pairs);
    return this_0;
  }
  function removeAll(_this__u8e3s4, predicate) {
    return filterInPlace(_this__u8e3s4, predicate, true);
  }
  function retainAll(_this__u8e3s4, predicate) {
    return filterInPlace(_this__u8e3s4, predicate, false);
  }
  function removeAll_0(_this__u8e3s4, predicate) {
    return filterInPlace_0(_this__u8e3s4, predicate, true);
  }
  function removeLast(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4.l()) {
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    } else {
      tmp = _this__u8e3s4.z3(get_lastIndex_0(_this__u8e3s4));
    }
    return tmp;
  }
  function removeFirstOrNull(_this__u8e3s4) {
    return _this__u8e3s4.l() ? null : _this__u8e3s4.z3(0);
  }
  function convertToListIfNotCollection(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4;
    } else {
      tmp = toList_0(_this__u8e3s4);
    }
    return tmp;
  }
  function addAll(_this__u8e3s4, elements) {
    if (isInterface(elements, Collection))
      return _this__u8e3s4.q(elements);
    else {
      var result = false;
      var tmp1_iterator = elements.h();
      while (tmp1_iterator.i()) {
        var item = tmp1_iterator.j();
        if (_this__u8e3s4.e(item))
          result = true;
      }
      return result;
    }
  }
  function addAll_0(_this__u8e3s4, elements) {
    return _this__u8e3s4.q(asList(elements));
  }
  function retainAll_0(_this__u8e3s4, elements) {
    return _this__u8e3s4.u3(convertToListIfNotCollection(elements));
  }
  function addAll_1(_this__u8e3s4, elements) {
    var result = false;
    var tmp0_iterator = elements.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      if (_this__u8e3s4.e(item))
        result = true;
    }
    return result;
  }
  function filterInPlace(_this__u8e3s4, predicate, predicateResultToRemove) {
    var result = false;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    var $this$with = _this__u8e3s4.h();
    while ($this$with.i())
      if (predicate($this$with.j()) === predicateResultToRemove) {
        $this$with.t3();
        result = true;
      }
    return result;
  }
  function filterInPlace_0(_this__u8e3s4, predicate, predicateResultToRemove) {
    if (!isInterface(_this__u8e3s4, RandomAccess)) {
      return filterInPlace(isInterface(_this__u8e3s4, MutableIterable) ? _this__u8e3s4 : THROW_CCE(), predicate, predicateResultToRemove);
    }
    var writeIndex = 0;
    var inductionVariable = 0;
    var last = get_lastIndex_0(_this__u8e3s4);
    if (inductionVariable <= last)
      $l$loop: do {
        var readIndex = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var element = _this__u8e3s4.m(readIndex);
        if (predicate(element) === predicateResultToRemove)
          continue $l$loop;
        if (!(writeIndex === readIndex)) {
          _this__u8e3s4.t(writeIndex, element);
        }
        writeIndex = writeIndex + 1 | 0;
      }
       while (!(readIndex === last));
    if (writeIndex < _this__u8e3s4.k()) {
      var inductionVariable_0 = get_lastIndex_0(_this__u8e3s4);
      var last_0 = writeIndex;
      if (last_0 <= inductionVariable_0)
        do {
          var removeIndex = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + -1 | 0;
          _this__u8e3s4.z3(removeIndex);
        }
         while (!(removeIndex === last_0));
      return true;
    } else {
      return false;
    }
  }
  function IntIterator() {
  }
  protoOf(IntIterator).j = function () {
    return this.ie();
  };
  function CharIterator() {
  }
  protoOf(CharIterator).je = function () {
    return this.ke();
  };
  protoOf(CharIterator).j = function () {
    return new Char(this.je());
  };
  function sequence(block) {
    // Inline function 'kotlin.sequences.Sequence' call
    return new _no_name_provided__qut3iv_3(block);
  }
  function SequenceScope() {
  }
  protoOf(SequenceScope).ne = function (sequence, $completion) {
    return this.me(sequence.h(), $completion);
  };
  function iterator(block) {
    var iterator = new SequenceBuilderIterator();
    iterator.re_1 = createCoroutineUnintercepted(block, iterator, iterator);
    return iterator;
  }
  function nextNotReady($this) {
    if (!$this.i())
      throw NoSuchElementException_init_$Create$();
    else
      return $this.j();
  }
  function exceptionalState($this) {
    switch ($this.oe_1) {
      case 4:
        return NoSuchElementException_init_$Create$();
      case 5:
        return IllegalStateException_init_$Create$_0('Iterator has failed.');
      default:
        return IllegalStateException_init_$Create$_0('Unexpected state of the iterator: ' + $this.oe_1);
    }
  }
  function SequenceBuilderIterator() {
    SequenceScope.call(this);
    this.oe_1 = 0;
    this.pe_1 = null;
    this.qe_1 = null;
    this.re_1 = null;
  }
  protoOf(SequenceBuilderIterator).i = function () {
    while (true) {
      switch (this.oe_1) {
        case 0:
          break;
        case 1:
          if (ensureNotNull(this.qe_1).i()) {
            this.oe_1 = 2;
            return true;
          } else {
            this.qe_1 = null;
          }

          break;
        case 4:
          return false;
        case 3:
        case 2:
          return true;
        default:
          throw exceptionalState(this);
      }
      this.oe_1 = 5;
      var step = ensureNotNull(this.re_1);
      this.re_1 = null;
      // Inline function 'kotlin.coroutines.resume' call
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      step.u8(tmp$ret$0);
    }
  };
  protoOf(SequenceBuilderIterator).j = function () {
    switch (this.oe_1) {
      case 0:
      case 1:
        return nextNotReady(this);
      case 2:
        this.oe_1 = 1;
        return ensureNotNull(this.qe_1).j();
      case 3:
        this.oe_1 = 0;
        var tmp = this.pe_1;
        var result = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
        this.pe_1 = null;
        return result;
      default:
        throw exceptionalState(this);
    }
  };
  protoOf(SequenceBuilderIterator).le = function (value, $completion) {
    this.pe_1 = value;
    this.oe_1 = 3;
    // Inline function 'kotlin.sequences.SequenceBuilderIterator.yield.<anonymous>' call
    this.re_1 = $completion;
    return get_COROUTINE_SUSPENDED();
  };
  protoOf(SequenceBuilderIterator).me = function (iterator, $completion) {
    if (!iterator.i())
      return Unit_instance;
    this.qe_1 = iterator;
    this.oe_1 = 2;
    // Inline function 'kotlin.sequences.SequenceBuilderIterator.yieldAll.<anonymous>' call
    this.re_1 = $completion;
    return get_COROUTINE_SUSPENDED();
  };
  protoOf(SequenceBuilderIterator).se = function (result) {
    // Inline function 'kotlin.getOrThrow' call
    throwOnFailure(result);
    var tmp = _Result___get_value__impl__bjfvqg(result);
    (tmp == null ? true : !(tmp == null)) || THROW_CCE();
    this.oe_1 = 4;
  };
  protoOf(SequenceBuilderIterator).u8 = function (result) {
    return this.se(result);
  };
  protoOf(SequenceBuilderIterator).n8 = function () {
    return EmptyCoroutineContext_getInstance();
  };
  function _no_name_provided__qut3iv_3($block) {
    this.te_1 = $block;
  }
  protoOf(_no_name_provided__qut3iv_3).h = function () {
    // Inline function 'kotlin.sequences.sequence.<anonymous>' call
    return iterator(this.te_1);
  };
  function generateSequence(nextFunction) {
    return constrainOnce(new GeneratorSequence(nextFunction, generateSequence$lambda(nextFunction)));
  }
  function sequenceOf(elements) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (elements.length === 0) {
      tmp = emptySequence();
    } else {
      tmp = asSequence(elements);
    }
    return tmp;
  }
  function generateSequence_0(seedFunction, nextFunction) {
    return new GeneratorSequence(seedFunction, nextFunction);
  }
  function TransformingSequence$iterator$1(this$0) {
    this.ve_1 = this$0;
    this.ue_1 = this$0.we_1.h();
  }
  protoOf(TransformingSequence$iterator$1).j = function () {
    return this.ve_1.xe_1(this.ue_1.j());
  };
  protoOf(TransformingSequence$iterator$1).i = function () {
    return this.ue_1.i();
  };
  function TransformingSequence(sequence, transformer) {
    this.we_1 = sequence;
    this.xe_1 = transformer;
  }
  protoOf(TransformingSequence).h = function () {
    return new TransformingSequence$iterator$1(this);
  };
  protoOf(TransformingSequence).ye = function (iterator) {
    return new FlatteningSequence(this.we_1, this.xe_1, iterator);
  };
  function DistinctSequence(source, keySelector) {
    this.ze_1 = source;
    this.af_1 = keySelector;
  }
  protoOf(DistinctSequence).h = function () {
    return new DistinctIterator(this.ze_1.h(), this.af_1);
  };
  function calcNext($this) {
    while ($this.bf_1.i()) {
      var item = $this.bf_1.j();
      if ($this.ef_1.hf_1(item) === $this.ef_1.gf_1) {
        $this.df_1 = item;
        $this.cf_1 = 1;
        return Unit_instance;
      }
    }
    $this.cf_1 = 0;
  }
  function FilteringSequence$iterator$1(this$0) {
    this.ef_1 = this$0;
    this.bf_1 = this$0.ff_1.h();
    this.cf_1 = -1;
    this.df_1 = null;
  }
  protoOf(FilteringSequence$iterator$1).j = function () {
    if (this.cf_1 === -1) {
      calcNext(this);
    }
    if (this.cf_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var result = this.df_1;
    this.df_1 = null;
    this.cf_1 = -1;
    return (result == null ? true : !(result == null)) ? result : THROW_CCE();
  };
  protoOf(FilteringSequence$iterator$1).i = function () {
    if (this.cf_1 === -1) {
      calcNext(this);
    }
    return this.cf_1 === 1;
  };
  function FilteringSequence(sequence, sendWhen, predicate) {
    sendWhen = sendWhen === VOID ? true : sendWhen;
    this.ff_1 = sequence;
    this.gf_1 = sendWhen;
    this.hf_1 = predicate;
  }
  protoOf(FilteringSequence).h = function () {
    return new FilteringSequence$iterator$1(this);
  };
  function flatten_0(_this__u8e3s4) {
    return flatten_1(_this__u8e3s4, flatten$lambda);
  }
  function MergingSequence$iterator$1(this$0) {
    this.kf_1 = this$0;
    this.if_1 = this$0.lf_1.h();
    this.jf_1 = this$0.mf_1.h();
  }
  protoOf(MergingSequence$iterator$1).j = function () {
    return this.kf_1.nf_1(this.if_1.j(), this.jf_1.j());
  };
  protoOf(MergingSequence$iterator$1).i = function () {
    return this.if_1.i() ? this.jf_1.i() : false;
  };
  function MergingSequence(sequence1, sequence2, transform) {
    this.lf_1 = sequence1;
    this.mf_1 = sequence2;
    this.nf_1 = transform;
  }
  protoOf(MergingSequence).h = function () {
    return new MergingSequence$iterator$1(this);
  };
  function ensureItemIterator($this) {
    var itemIterator = $this.pf_1;
    if (!(itemIterator == null) ? itemIterator.i() : false) {
      $this.qf_1 = 1;
      return true;
    }
    while ($this.of_1.i()) {
      var element = $this.of_1.j();
      var nextItemIterator = $this.rf_1.uf_1($this.rf_1.tf_1(element));
      if (nextItemIterator.i()) {
        $this.pf_1 = nextItemIterator;
        $this.qf_1 = 1;
        return true;
      }
    }
    $this.qf_1 = 2;
    $this.pf_1 = null;
    return false;
  }
  function FlatteningSequence$iterator$1(this$0) {
    this.rf_1 = this$0;
    this.of_1 = this$0.sf_1.h();
    this.pf_1 = null;
    this.qf_1 = 0;
  }
  protoOf(FlatteningSequence$iterator$1).j = function () {
    if (this.qf_1 === 2)
      throw NoSuchElementException_init_$Create$();
    if (this.qf_1 === 0 ? !ensureItemIterator(this) : false) {
      throw NoSuchElementException_init_$Create$();
    }
    this.qf_1 = 0;
    return ensureNotNull(this.pf_1).j();
  };
  protoOf(FlatteningSequence$iterator$1).i = function () {
    if (this.qf_1 === 1)
      return true;
    if (this.qf_1 === 2)
      return false;
    return ensureItemIterator(this);
  };
  function FlatteningSequence(sequence, transformer, iterator) {
    this.sf_1 = sequence;
    this.tf_1 = transformer;
    this.uf_1 = iterator;
  }
  protoOf(FlatteningSequence).h = function () {
    return new FlatteningSequence$iterator$1(this);
  };
  function emptySequence() {
    return EmptySequence_instance;
  }
  function DropTakeSequence() {
  }
  function TakeSequence$iterator$1(this$0) {
    this.vf_1 = this$0.yf_1;
    this.wf_1 = this$0.xf_1.h();
  }
  protoOf(TakeSequence$iterator$1).j = function () {
    if (this.vf_1 === 0)
      throw NoSuchElementException_init_$Create$();
    this.vf_1 = this.vf_1 - 1 | 0;
    return this.wf_1.j();
  };
  protoOf(TakeSequence$iterator$1).i = function () {
    return this.vf_1 > 0 ? this.wf_1.i() : false;
  };
  function TakeSequence(sequence, count) {
    this.xf_1 = sequence;
    this.yf_1 = count;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.yf_1 >= 0)) {
      // Inline function 'kotlin.sequences.TakeSequence.<anonymous>' call
      var message = 'count must be non-negative, but was ' + this.yf_1 + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
  }
  protoOf(TakeSequence).b1 = function (n) {
    return n >= this.yf_1 ? this : new TakeSequence(this.xf_1, n);
  };
  protoOf(TakeSequence).h = function () {
    return new TakeSequence$iterator$1(this);
  };
  function constrainOnce(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 instanceof ConstrainedOnceSequence) {
      tmp = _this__u8e3s4;
    } else {
      tmp = new ConstrainedOnceSequence(_this__u8e3s4);
    }
    return tmp;
  }
  function calcNext_0($this) {
    $this.zf_1 = $this.ag_1 === -2 ? $this.bg_1.cg_1() : $this.bg_1.dg_1(ensureNotNull($this.zf_1));
    $this.ag_1 = $this.zf_1 == null ? 0 : 1;
  }
  function GeneratorSequence$iterator$1(this$0) {
    this.bg_1 = this$0;
    this.zf_1 = null;
    this.ag_1 = -2;
  }
  protoOf(GeneratorSequence$iterator$1).j = function () {
    if (this.ag_1 < 0) {
      calcNext_0(this);
    }
    if (this.ag_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.zf_1;
    var result = !(tmp == null) ? tmp : THROW_CCE();
    this.ag_1 = -1;
    return result;
  };
  protoOf(GeneratorSequence$iterator$1).i = function () {
    if (this.ag_1 < 0) {
      calcNext_0(this);
    }
    return this.ag_1 === 1;
  };
  function GeneratorSequence(getInitialValue, getNextValue) {
    this.cg_1 = getInitialValue;
    this.dg_1 = getNextValue;
  }
  protoOf(GeneratorSequence).h = function () {
    return new GeneratorSequence$iterator$1(this);
  };
  function EmptySequence() {
  }
  protoOf(EmptySequence).h = function () {
    return EmptyIterator_instance;
  };
  protoOf(EmptySequence).b1 = function (n) {
    return EmptySequence_instance;
  };
  var EmptySequence_instance;
  function EmptySequence_getInstance() {
    return EmptySequence_instance;
  }
  function DistinctIterator(source, keySelector) {
    AbstractIterator.call(this);
    this.gg_1 = source;
    this.hg_1 = keySelector;
    this.ig_1 = HashSet_init_$Create$();
  }
  protoOf(DistinctIterator).uc = function () {
    while (this.gg_1.i()) {
      var next = this.gg_1.j();
      var key = this.hg_1(next);
      if (this.ig_1.e(key)) {
        this.vc(next);
        return Unit_instance;
      }
    }
    this.wc();
  };
  function flatten_1(_this__u8e3s4, iterator) {
    if (_this__u8e3s4 instanceof TransformingSequence) {
      return (_this__u8e3s4 instanceof TransformingSequence ? _this__u8e3s4 : THROW_CCE()).ye(iterator);
    }
    return new FlatteningSequence(_this__u8e3s4, flatten$lambda_0, iterator);
  }
  function shuffled_0(_this__u8e3s4) {
    return shuffled_1(_this__u8e3s4, Default_getInstance());
  }
  function calcNext_1($this) {
    if ($this.jg_1.i()) {
      var item = $this.jg_1.j();
      if ($this.mg_1.og_1(item)) {
        $this.kg_1 = 1;
        $this.lg_1 = item;
        return Unit_instance;
      }
    }
    $this.kg_1 = 0;
  }
  function TakeWhileSequence$iterator$1(this$0) {
    this.mg_1 = this$0;
    this.jg_1 = this$0.ng_1.h();
    this.kg_1 = -1;
    this.lg_1 = null;
  }
  protoOf(TakeWhileSequence$iterator$1).j = function () {
    if (this.kg_1 === -1) {
      calcNext_1(this);
    }
    if (this.kg_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.lg_1;
    var result = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.lg_1 = null;
    this.kg_1 = -1;
    return result;
  };
  protoOf(TakeWhileSequence$iterator$1).i = function () {
    if (this.kg_1 === -1) {
      calcNext_1(this);
    }
    return this.kg_1 === 1;
  };
  function TakeWhileSequence(sequence, predicate) {
    this.ng_1 = sequence;
    this.og_1 = predicate;
  }
  protoOf(TakeWhileSequence).h = function () {
    return new TakeWhileSequence$iterator$1(this);
  };
  function IndexingSequence$iterator$1(this$0) {
    this.pg_1 = this$0.rg_1.h();
    this.qg_1 = 0;
  }
  protoOf(IndexingSequence$iterator$1).j = function () {
    var tmp1 = this.qg_1;
    this.qg_1 = tmp1 + 1 | 0;
    return new IndexedValue(checkIndexOverflow(tmp1), this.pg_1.j());
  };
  protoOf(IndexingSequence$iterator$1).i = function () {
    return this.pg_1.i();
  };
  function IndexingSequence(sequence) {
    this.rg_1 = sequence;
  }
  protoOf(IndexingSequence).h = function () {
    return new IndexingSequence$iterator$1(this);
  };
  function shuffled_1(_this__u8e3s4, random) {
    return sequence(shuffled$slambda_0(_this__u8e3s4, random, null));
  }
  function generateSequence$lambda($nextFunction) {
    return function (it) {
      return $nextFunction();
    };
  }
  function flatten$lambda(it) {
    return it.h();
  }
  function flatten$lambda_0(it) {
    return it;
  }
  function shuffled$slambda($this_shuffled, $random, resultContinuation) {
    this.ah_1 = $this_shuffled;
    this.bh_1 = $random;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(shuffled$slambda).hh = function ($this$sequence, $completion) {
    var tmp = this.ih($this$sequence, $completion);
    tmp.i8_1 = Unit_instance;
    tmp.j8_1 = null;
    return tmp.t8();
  };
  protoOf(shuffled$slambda).i9 = function (p1, $completion) {
    return this.hh(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(shuffled$slambda).t8 = function () {
    var suspendResult = this.i8_1;
    $sm: do
      try {
        var tmp = this.g8_1;
        switch (tmp) {
          case 0:
            this.h8_1 = 3;
            this.dh_1 = toMutableList_2(this.ah_1);
            this.g8_1 = 1;
            continue $sm;
          case 1:
            if (!!this.dh_1.l()) {
              this.g8_1 = 4;
              continue $sm;
            }

            this.eh_1 = this.bh_1.s(this.dh_1.k());
            this.fh_1 = removeLast(this.dh_1);
            this.gh_1 = this.eh_1 < this.dh_1.k() ? this.dh_1.t(this.eh_1, this.fh_1) : this.fh_1;
            this.g8_1 = 2;
            suspendResult = this.ch_1.le(this.gh_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.g8_1 = 1;
            continue $sm;
          case 3:
            throw this.j8_1;
          case 4:
            return Unit_instance;
        }
      } catch ($p) {
        var e = $p;
        if (this.h8_1 === 3) {
          throw e;
        } else {
          this.g8_1 = this.h8_1;
          this.j8_1 = e;
        }
      }
     while (true);
  };
  protoOf(shuffled$slambda).ih = function ($this$sequence, completion) {
    var i = new shuffled$slambda(this.ah_1, this.bh_1, completion);
    i.ch_1 = $this$sequence;
    return i;
  };
  function shuffled$slambda_0($this_shuffled, $random, resultContinuation) {
    var i = new shuffled$slambda($this_shuffled, $random, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.hh($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function emptySet() {
    return EmptySet_getInstance();
  }
  function mutableSetOf(elements) {
    return toCollection_0(elements, LinkedHashSet_init_$Create$_1(mapCapacity(elements.length)));
  }
  function setOf_0(elements) {
    return elements.length > 0 ? toSet_0(elements) : emptySet();
  }
  function EmptySet() {
    EmptySet_instance = this;
    this.jh_1 = new Long(1993859828, 793161749);
  }
  protoOf(EmptySet).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Set) : false) {
      tmp = other.l();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptySet).hashCode = function () {
    return 0;
  };
  protoOf(EmptySet).toString = function () {
    return '[]';
  };
  protoOf(EmptySet).k = function () {
    return 0;
  };
  protoOf(EmptySet).l = function () {
    return true;
  };
  protoOf(EmptySet).vd = function (element) {
    return false;
  };
  protoOf(EmptySet).f1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.vd(tmp);
  };
  protoOf(EmptySet).wd = function (elements) {
    return elements.l();
  };
  protoOf(EmptySet).b2 = function (elements) {
    return this.wd(elements);
  };
  protoOf(EmptySet).h = function () {
    return EmptyIterator_instance;
  };
  var EmptySet_instance;
  function EmptySet_getInstance() {
    if (EmptySet_instance == null)
      new EmptySet();
    return EmptySet_instance;
  }
  function optimizeReadOnlySet(_this__u8e3s4) {
    switch (_this__u8e3s4.k()) {
      case 0:
        return emptySet();
      case 1:
        return setOf(_this__u8e3s4.h().j());
      default:
        return _this__u8e3s4;
    }
  }
  function hashSetOf(elements) {
    return toCollection_0(elements, HashSet_init_$Create$_0(mapCapacity(elements.length)));
  }
  function checkWindowSizeStep(size, step) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(size > 0 ? step > 0 : false)) {
      // Inline function 'kotlin.collections.checkWindowSizeStep.<anonymous>' call
      var message = !(size === step) ? 'Both size ' + size + ' and step ' + step + ' must be greater than zero.' : 'size ' + size + ' must be greater than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
  }
  function windowedIterator(iterator_0, size, step, partialWindows, reuseBuffer) {
    if (!iterator_0.i())
      return EmptyIterator_instance;
    return iterator(windowedIterator$slambda_0(size, step, iterator_0, reuseBuffer, partialWindows, null));
  }
  function RingBuffer_init_$Init$(capacity, $this) {
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp$ret$0 = fillArrayVal(Array(capacity), null);
    RingBuffer.call($this, tmp$ret$0, 0);
    return $this;
  }
  function RingBuffer_init_$Create$(capacity) {
    return RingBuffer_init_$Init$(capacity, objectCreate(protoOf(RingBuffer)));
  }
  function RingBuffer$iterator$1(this$0) {
    this.oh_1 = this$0;
    AbstractIterator.call(this);
    this.mh_1 = this$0.sh_1;
    this.nh_1 = this$0.rh_1;
  }
  protoOf(RingBuffer$iterator$1).uc = function () {
    if (this.mh_1 === 0) {
      this.wc();
    } else {
      var tmp = this.oh_1.ph_1[this.nh_1];
      this.vc((tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE());
      var tmp_0 = this;
      // Inline function 'kotlin.collections.RingBuffer.forward' call
      var this_0 = this.oh_1;
      tmp_0.nh_1 = (this.nh_1 + 1 | 0) % this_0.qh_1 | 0;
      this.mh_1 = this.mh_1 - 1 | 0;
    }
  };
  function RingBuffer(buffer, filledSize) {
    AbstractList.call(this);
    this.ph_1 = buffer;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(filledSize >= 0)) {
      // Inline function 'kotlin.collections.RingBuffer.<anonymous>' call
      var message = 'ring buffer filled size should not be negative but it is ' + filledSize;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(filledSize <= this.ph_1.length)) {
      // Inline function 'kotlin.collections.RingBuffer.<anonymous>' call
      var message_0 = 'ring buffer filled size: ' + filledSize + ' cannot be larger than the buffer size: ' + this.ph_1.length;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message_0));
    }
    this.qh_1 = this.ph_1.length;
    this.rh_1 = 0;
    this.sh_1 = filledSize;
  }
  protoOf(RingBuffer).k = function () {
    return this.sh_1;
  };
  protoOf(RingBuffer).m = function (index) {
    Companion_instance_5.q3(index, this.sh_1);
    // Inline function 'kotlin.collections.RingBuffer.forward' call
    var tmp$ret$0 = (this.rh_1 + index | 0) % this.qh_1 | 0;
    var tmp = this.ph_1[tmp$ret$0];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(RingBuffer).th = function () {
    return this.sh_1 === this.qh_1;
  };
  protoOf(RingBuffer).h = function () {
    return new RingBuffer$iterator$1(this);
  };
  protoOf(RingBuffer).td = function (array) {
    var tmp;
    if (array.length < this.sh_1) {
      tmp = copyOf_1(array, this.sh_1);
    } else {
      tmp = isArray(array) ? array : THROW_CCE();
    }
    var result = tmp;
    var size = this.sh_1;
    var widx = 0;
    var idx = this.rh_1;
    while (widx < size ? idx < this.qh_1 : false) {
      var tmp_0 = widx;
      var tmp_1 = this.ph_1[idx];
      result[tmp_0] = (tmp_1 == null ? true : !(tmp_1 == null)) ? tmp_1 : THROW_CCE();
      widx = widx + 1 | 0;
      idx = idx + 1 | 0;
    }
    idx = 0;
    while (widx < size) {
      var tmp_2 = widx;
      var tmp_3 = this.ph_1[idx];
      result[tmp_2] = (tmp_3 == null ? true : !(tmp_3 == null)) ? tmp_3 : THROW_CCE();
      widx = widx + 1 | 0;
      idx = idx + 1 | 0;
    }
    var tmp_4 = terminateCollectionToArray(size, result);
    return isArray(tmp_4) ? tmp_4 : THROW_CCE();
  };
  protoOf(RingBuffer).a5 = function () {
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.sh_1;
    var tmp$ret$0 = fillArrayVal(Array(size), null);
    return this.td(tmp$ret$0);
  };
  protoOf(RingBuffer).toArray = function () {
    return this.a5();
  };
  protoOf(RingBuffer).uh = function (maxCapacity) {
    var newCapacity = coerceAtMost((this.qh_1 + (this.qh_1 >> 1) | 0) + 1 | 0, maxCapacity);
    var tmp;
    if (this.rh_1 === 0) {
      tmp = copyOf_1(this.ph_1, newCapacity);
    } else {
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp$ret$0 = fillArrayVal(Array(newCapacity), null);
      tmp = this.td(tmp$ret$0);
    }
    var newBuffer = tmp;
    return new RingBuffer(newBuffer, this.sh_1);
  };
  protoOf(RingBuffer).vh = function (element) {
    if (this.th()) {
      throw IllegalStateException_init_$Create$_0('ring buffer is full');
    }
    // Inline function 'kotlin.collections.RingBuffer.forward' call
    var tmp$ret$0 = (this.rh_1 + this.sh_1 | 0) % this.qh_1 | 0;
    this.ph_1[tmp$ret$0] = element;
    this.sh_1 = this.sh_1 + 1 | 0;
  };
  protoOf(RingBuffer).wh = function (n) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.RingBuffer.removeFirst.<anonymous>' call
      var message = "n shouldn't be negative but it is " + n;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(n <= this.sh_1)) {
      // Inline function 'kotlin.collections.RingBuffer.removeFirst.<anonymous>' call
      var message_0 = "n shouldn't be greater than the buffer size: n = " + n + ', size = ' + this.sh_1;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message_0));
    }
    if (n > 0) {
      var start = this.rh_1;
      // Inline function 'kotlin.collections.RingBuffer.forward' call
      var end = (start + n | 0) % this.qh_1 | 0;
      if (start > end) {
        fill_0(this.ph_1, null, start, this.qh_1);
        fill_0(this.ph_1, null, 0, end);
      } else {
        fill_0(this.ph_1, null, start, end);
      }
      this.rh_1 = end;
      this.sh_1 = this.sh_1 - n | 0;
    }
  };
  function windowedIterator$slambda($size, $step, $iterator, $reuseBuffer, $partialWindows, resultContinuation) {
    this.fi_1 = $size;
    this.gi_1 = $step;
    this.hi_1 = $iterator;
    this.ii_1 = $reuseBuffer;
    this.ji_1 = $partialWindows;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(windowedIterator$slambda).ui = function ($this$iterator, $completion) {
    var tmp = this.vi($this$iterator, $completion);
    tmp.i8_1 = Unit_instance;
    tmp.j8_1 = null;
    return tmp.t8();
  };
  protoOf(windowedIterator$slambda).i9 = function (p1, $completion) {
    return this.ui(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(windowedIterator$slambda).t8 = function () {
    var suspendResult = this.i8_1;
    $sm: do
      try {
        var tmp = this.g8_1;
        switch (tmp) {
          case 0:
            this.h8_1 = 21;
            this.li_1 = coerceAtMost(this.fi_1, 1024);
            this.mi_1 = this.gi_1 - this.fi_1 | 0;
            if (this.mi_1 >= 0) {
              this.ni_1 = ArrayList_init_$Create$_0(this.li_1);
              this.oi_1 = 0;
              var tmp_0 = this;
              tmp_0.pi_1 = this.hi_1;
              this.g8_1 = 12;
              continue $sm;
            } else {
              this.qi_1 = RingBuffer_init_$Create$(this.li_1);
              var tmp_1 = this;
              tmp_1.ri_1 = this.hi_1;
              this.g8_1 = 1;
              continue $sm;
            }

          case 1:
            if (!this.ri_1.i()) {
              this.g8_1 = 5;
              continue $sm;
            }

            this.si_1 = this.ri_1.j();
            this.qi_1.vh(this.si_1);
            if (this.qi_1.th()) {
              if (this.qi_1.sh_1 < this.fi_1) {
                this.qi_1 = this.qi_1.uh(this.fi_1);
                this.g8_1 = 1;
                continue $sm;
              } else {
                this.g8_1 = 2;
                continue $sm;
              }
            } else {
              this.g8_1 = 4;
              continue $sm;
            }

          case 2:
            this.g8_1 = 3;
            suspendResult = this.ki_1.le(this.ii_1 ? this.qi_1 : ArrayList_init_$Create$_1(this.qi_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 3:
            this.qi_1.wh(this.gi_1);
            this.g8_1 = 4;
            continue $sm;
          case 4:
            this.g8_1 = 1;
            continue $sm;
          case 5:
            if (this.ji_1) {
              this.g8_1 = 6;
              continue $sm;
            } else {
              this.g8_1 = 11;
              continue $sm;
            }

          case 6:
            if (!(this.qi_1.sh_1 > this.gi_1)) {
              this.g8_1 = 8;
              continue $sm;
            }

            this.g8_1 = 7;
            suspendResult = this.ki_1.le(this.ii_1 ? this.qi_1 : ArrayList_init_$Create$_1(this.qi_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 7:
            this.qi_1.wh(this.gi_1);
            this.g8_1 = 6;
            continue $sm;
          case 8:
            if (!this.qi_1.l()) {
              this.g8_1 = 9;
              suspendResult = this.ki_1.le(this.qi_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.g8_1 = 10;
              continue $sm;
            }

          case 9:
            this.g8_1 = 10;
            continue $sm;
          case 10:
            this.g8_1 = 11;
            continue $sm;
          case 11:
            this.g8_1 = 20;
            continue $sm;
          case 12:
            if (!this.pi_1.i()) {
              this.g8_1 = 16;
              continue $sm;
            }

            this.ti_1 = this.pi_1.j();
            if (this.oi_1 > 0) {
              this.oi_1 = this.oi_1 - 1 | 0;
              this.g8_1 = 12;
              continue $sm;
            } else {
              this.g8_1 = 13;
              continue $sm;
            }

          case 13:
            this.ni_1.e(this.ti_1);
            if (this.ni_1.k() === this.fi_1) {
              this.g8_1 = 14;
              suspendResult = this.ki_1.le(this.ni_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.g8_1 = 15;
              continue $sm;
            }

          case 14:
            if (this.ii_1) {
              this.ni_1.z4();
            } else
              this.ni_1 = ArrayList_init_$Create$_0(this.fi_1);
            this.oi_1 = this.mi_1;
            this.g8_1 = 15;
            continue $sm;
          case 15:
            this.g8_1 = 12;
            continue $sm;
          case 16:
            if (!this.ni_1.l()) {
              if (this.ji_1 ? true : this.ni_1.k() === this.fi_1) {
                this.g8_1 = 17;
                suspendResult = this.ki_1.le(this.ni_1, this);
                if (suspendResult === get_COROUTINE_SUSPENDED()) {
                  return suspendResult;
                }
                continue $sm;
              } else {
                this.g8_1 = 18;
                continue $sm;
              }
            } else {
              this.g8_1 = 19;
              continue $sm;
            }

          case 17:
            this.g8_1 = 18;
            continue $sm;
          case 18:
            this.g8_1 = 19;
            continue $sm;
          case 19:
            this.g8_1 = 20;
            continue $sm;
          case 20:
            return Unit_instance;
          case 21:
            throw this.j8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.h8_1 === 21) {
          throw e;
        } else {
          this.g8_1 = this.h8_1;
          this.j8_1 = e;
        }
      }
     while (true);
  };
  protoOf(windowedIterator$slambda).vi = function ($this$iterator, completion) {
    var i = new windowedIterator$slambda(this.fi_1, this.gi_1, this.hi_1, this.ii_1, this.ji_1, completion);
    i.ki_1 = $this$iterator;
    return i;
  };
  function windowedIterator$slambda_0($size, $step, $iterator, $reuseBuffer, $partialWindows, resultContinuation) {
    var i = new windowedIterator$slambda($size, $step, $iterator, $reuseBuffer, $partialWindows, resultContinuation);
    var l = function ($this$iterator, $completion) {
      return i.ui($this$iterator, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function compareBy(selectors) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(selectors.length > 0)) {
      // Inline function 'kotlin.require.<anonymous>' call
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var tmp = compareBy$lambda(selectors);
    return new sam$kotlin_Comparator$0_0(tmp);
  }
  function naturalOrder() {
    var tmp = NaturalOrderComparator_instance;
    return isInterface(tmp, Comparator) ? tmp : THROW_CCE();
  }
  function compareValuesByImpl(a, b, selectors) {
    var inductionVariable = 0;
    var last = selectors.length;
    while (inductionVariable < last) {
      var fn = selectors[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var v1 = fn(a);
      var v2 = fn(b);
      var diff = compareValues(v1, v2);
      if (!(diff === 0))
        return diff;
    }
    return 0;
  }
  function NaturalOrderComparator() {
  }
  protoOf(NaturalOrderComparator).wi = function (a, b) {
    return compareTo_0(a, b);
  };
  protoOf(NaturalOrderComparator).compare = function (a, b) {
    var tmp = (!(a == null) ? isComparable(a) : false) ? a : THROW_CCE();
    return this.wi(tmp, (!(b == null) ? isComparable(b) : false) ? b : THROW_CCE());
  };
  var NaturalOrderComparator_instance;
  function NaturalOrderComparator_getInstance() {
    return NaturalOrderComparator_instance;
  }
  function compareValues(a, b) {
    if (a === b)
      return 0;
    if (a == null)
      return -1;
    if (b == null)
      return 1;
    return compareTo_0((!(a == null) ? isComparable(a) : false) ? a : THROW_CCE(), b);
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.xi_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).yb = function (a, b) {
    return this.xi_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.yb(a, b);
  };
  function compareBy$lambda($selectors) {
    return function (a, b) {
      return compareValuesByImpl(a, b, $selectors);
    };
  }
  function Continuation() {
  }
  function startCoroutine(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlin.coroutines.resume' call
    var this_0 = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion));
    // Inline function 'kotlin.Companion.success' call
    var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
    this_0.u8(tmp$ret$0);
  }
  function Key() {
  }
  var Key_instance;
  function Key_getInstance() {
    return Key_instance;
  }
  function ContinuationInterceptor() {
  }
  function Element() {
  }
  function CoroutineContext$plus$lambda(acc, element) {
    var removed = acc.cj(element.d2());
    var tmp;
    if (removed === EmptyCoroutineContext_getInstance()) {
      tmp = element;
    } else {
      var interceptor = removed.o8(Key_instance);
      var tmp_0;
      if (interceptor == null) {
        tmp_0 = new CombinedContext(removed, element);
      } else {
        var left = removed.cj(Key_instance);
        tmp_0 = left === EmptyCoroutineContext_getInstance() ? new CombinedContext(element, interceptor) : new CombinedContext(new CombinedContext(left, element), interceptor);
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function CoroutineContext() {
  }
  function EmptyCoroutineContext() {
    EmptyCoroutineContext_instance = this;
    this.fj_1 = new Long(0, 0);
  }
  protoOf(EmptyCoroutineContext).o8 = function (key) {
    return null;
  };
  protoOf(EmptyCoroutineContext).dj = function (initial, operation) {
    return initial;
  };
  protoOf(EmptyCoroutineContext).ej = function (context) {
    return context;
  };
  protoOf(EmptyCoroutineContext).cj = function (key) {
    return this;
  };
  protoOf(EmptyCoroutineContext).hashCode = function () {
    return 0;
  };
  protoOf(EmptyCoroutineContext).toString = function () {
    return 'EmptyCoroutineContext';
  };
  var EmptyCoroutineContext_instance;
  function EmptyCoroutineContext_getInstance() {
    if (EmptyCoroutineContext_instance == null)
      new EmptyCoroutineContext();
    return EmptyCoroutineContext_instance;
  }
  function size($this) {
    var cur = $this;
    var size = 2;
    while (true) {
      var tmp = cur.gj_1;
      var tmp0_elvis_lhs = tmp instanceof CombinedContext ? tmp : null;
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        return size;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      cur = tmp_0;
      size = size + 1 | 0;
    }
  }
  function contains_2($this, element) {
    return equals($this.o8(element.d2()), element);
  }
  function containsAll($this, context) {
    var cur = context;
    while (true) {
      if (!contains_2($this, cur.hj_1))
        return false;
      var next = cur.gj_1;
      if (next instanceof CombinedContext) {
        cur = next;
      } else {
        return contains_2($this, isInterface(next, Element) ? next : THROW_CCE());
      }
    }
  }
  function CombinedContext$toString$lambda(acc, element) {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(acc) === 0) {
      tmp = toString_1(element);
    } else {
      tmp = acc + ', ' + element;
    }
    return tmp;
  }
  function CombinedContext(left, element) {
    this.gj_1 = left;
    this.hj_1 = element;
  }
  protoOf(CombinedContext).o8 = function (key) {
    var cur = this;
    while (true) {
      var tmp0_safe_receiver = cur.hj_1.o8(key);
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        return tmp0_safe_receiver;
      }
      var next = cur.gj_1;
      if (next instanceof CombinedContext) {
        cur = next;
      } else {
        return next.o8(key);
      }
    }
  };
  protoOf(CombinedContext).dj = function (initial, operation) {
    return operation(this.gj_1.dj(initial, operation), this.hj_1);
  };
  protoOf(CombinedContext).cj = function (key) {
    if (this.hj_1.o8(key) == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      return this.gj_1;
    }
    var newLeft = this.gj_1.cj(key);
    return newLeft === this.gj_1 ? this : newLeft === EmptyCoroutineContext_getInstance() ? this.hj_1 : new CombinedContext(newLeft, this.hj_1);
  };
  protoOf(CombinedContext).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      if (other instanceof CombinedContext) {
        tmp_1 = size(other) === size(this);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = containsAll(other, this);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(CombinedContext).hashCode = function () {
    return hashCode(this.gj_1) + hashCode(this.hj_1) | 0;
  };
  protoOf(CombinedContext).toString = function () {
    return '[' + this.dj('', CombinedContext$toString$lambda) + ']';
  };
  function AbstractCoroutineContextKey(baseKey, safeCast) {
    this.yi_1 = safeCast;
    var tmp = this;
    var tmp_0;
    if (baseKey instanceof AbstractCoroutineContextKey) {
      tmp_0 = baseKey.zi_1;
    } else {
      tmp_0 = baseKey;
    }
    tmp.zi_1 = tmp_0;
  }
  protoOf(AbstractCoroutineContextKey).aj = function (element) {
    return this.yi_1(element);
  };
  protoOf(AbstractCoroutineContextKey).bj = function (key) {
    return key === this ? true : this.zi_1 === key;
  };
  function AbstractCoroutineContextElement(key) {
    this.ij_1 = key;
  }
  protoOf(AbstractCoroutineContextElement).d2 = function () {
    return this.ij_1;
  };
  function get_COROUTINE_SUSPENDED() {
    return CoroutineSingletons_COROUTINE_SUSPENDED_getInstance();
  }
  var CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  var CoroutineSingletons_UNDECIDED_instance;
  var CoroutineSingletons_RESUMED_instance;
  var CoroutineSingletons_entriesInitialized;
  function CoroutineSingletons_initEntries() {
    if (CoroutineSingletons_entriesInitialized)
      return Unit_instance;
    CoroutineSingletons_entriesInitialized = true;
    CoroutineSingletons_COROUTINE_SUSPENDED_instance = new CoroutineSingletons('COROUTINE_SUSPENDED', 0);
    CoroutineSingletons_UNDECIDED_instance = new CoroutineSingletons('UNDECIDED', 1);
    CoroutineSingletons_RESUMED_instance = new CoroutineSingletons('RESUMED', 2);
  }
  function CoroutineSingletons(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function CoroutineSingletons_COROUTINE_SUSPENDED_getInstance() {
    CoroutineSingletons_initEntries();
    return CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  }
  function getProgressionLastElement(start, end, step) {
    var tmp;
    if (step > 0) {
      tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0;
    } else if (step < 0) {
      tmp = start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;
    } else {
      throw IllegalArgumentException_init_$Create$_0('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo(a, b, c) {
    return mod(mod(a, c) - mod(b, c) | 0, c);
  }
  function mod(a, b) {
    var mod = a % b | 0;
    return mod >= 0 ? mod : mod + b | 0;
  }
  function Default() {
    Default_instance = this;
    Random.call(this);
    this.jj_1 = defaultPlatformRandom();
  }
  protoOf(Default).kj = function (bitCount) {
    return this.jj_1.kj(bitCount);
  };
  protoOf(Default).ie = function () {
    return this.jj_1.ie();
  };
  protoOf(Default).s = function (until) {
    return this.jj_1.s(until);
  };
  protoOf(Default).lj = function (from, until) {
    return this.jj_1.lj(from, until);
  };
  protoOf(Default).mj = function () {
    return this.jj_1.mj();
  };
  protoOf(Default).nj = function (from, until) {
    return this.jj_1.nj(from, until);
  };
  protoOf(Default).oj = function () {
    return this.jj_1.oj();
  };
  var Default_instance;
  function Default_getInstance() {
    if (Default_instance == null)
      new Default();
    return Default_instance;
  }
  function Random() {
    Default_getInstance();
  }
  protoOf(Random).ie = function () {
    return this.kj(32);
  };
  protoOf(Random).s = function (until) {
    return this.lj(0, until);
  };
  protoOf(Random).lj = function (from, until) {
    checkRangeBounds(from, until);
    var n = until - from | 0;
    if (n > 0 ? true : n === -2147483648) {
      var tmp;
      if ((n & (-n | 0)) === n) {
        var bitCount = fastLog2(n);
        tmp = this.kj(bitCount);
      } else {
        var v;
        do {
          var bits = this.ie() >>> 1 | 0;
          v = bits % n | 0;
        }
         while (((bits - v | 0) + (n - 1 | 0) | 0) < 0);
        tmp = v;
      }
      var rnd = tmp;
      return from + rnd | 0;
    } else {
      while (true) {
        var rnd_0 = this.ie();
        if (from <= rnd_0 ? rnd_0 < until : false)
          return rnd_0;
      }
    }
  };
  protoOf(Random).mj = function () {
    // Inline function 'kotlin.Long.plus' call
    var this_0 = toLong(this.ie()).a3(32);
    var other = this.ie();
    return this_0.r2(toLong(other));
  };
  protoOf(Random).nj = function (from, until) {
    checkRangeBounds_0(from, until);
    var n = until.s2(from);
    if (n.z(new Long(0, 0)) > 0) {
      var rnd;
      if (n.d3(n.y2()).equals(n)) {
        var nLow = n.g3();
        var nHigh = n.c3(32).g3();
        var tmp;
        if (!(nLow === 0)) {
          var bitCount = fastLog2(nLow);
          tmp = toLong(this.kj(bitCount)).d3(new Long(-1, 0));
        } else if (nHigh === 1) {
          tmp = toLong(this.ie()).d3(new Long(-1, 0));
        } else {
          var bitCount_0 = fastLog2(nHigh);
          tmp = toLong(this.kj(bitCount_0)).a3(32).r2(toLong(this.ie()).d3(new Long(-1, 0)));
        }
        rnd = tmp;
      } else {
        var v;
        $l$1: do {
          $l$0: do {
            var bits = this.mj().c3(1);
            v = bits.v2(n);
          }
           while (false);
          var tmp_0 = bits.s2(v);
          // Inline function 'kotlin.Long.minus' call
          var tmp$ret$0 = n.s2(toLong(1));
        }
         while (tmp_0.r2(tmp$ret$0).z(new Long(0, 0)) < 0);
        rnd = v;
      }
      return from.r2(rnd);
    } else {
      while (true) {
        var rnd_0 = this.mj();
        if (from.z(rnd_0) <= 0 ? rnd_0.z(until) < 0 : false)
          return rnd_0;
      }
    }
  };
  protoOf(Random).oj = function () {
    return doubleFromParts(this.kj(26), this.kj(27));
  };
  function Random_0(seed) {
    return XorWowRandom_init_$Create$(seed, seed >> 31);
  }
  function checkRangeBounds(from, until) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!(until > from)) {
      // Inline function 'kotlin.random.checkRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(from, until);
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function fastLog2(value) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    return 31 - clz32(value) | 0;
  }
  function checkRangeBounds_0(from, until) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!(until.z(from) > 0)) {
      // Inline function 'kotlin.random.checkRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(from, until);
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function boundsErrorMessage(from, until) {
    return 'Random range is empty: [' + toString_1(from) + ', ' + toString_1(until) + ').';
  }
  function takeUpperBits(_this__u8e3s4, bitCount) {
    return (_this__u8e3s4 >>> (32 - bitCount | 0) | 0) & (-bitCount | 0) >> 31;
  }
  function nextULong(_this__u8e3s4, range) {
    var tmp;
    if (range.l()) {
      throw IllegalArgumentException_init_$Create$_0('Cannot get random in empty range: ' + range);
    } else {
      // Inline function 'kotlin.ULong.compareTo' call
      var this_0 = range.qj_1;
      var other = _ULong___init__impl__c78o9k(new Long(-1, -1));
      if (ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) < 0) {
        // Inline function 'kotlin.ULong.plus' call
        var this_1 = range.qj_1;
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_2 = _UInt___init__impl__l7qpdl(1);
        var other_0 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_2)).d3(new Long(-1, 0)));
        var tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).r2(_ULong___get_data__impl__fggpzb(other_0)));
        tmp = nextULong_0(_this__u8e3s4, range.pj_1, tmp$ret$3);
      } else {
        // Inline function 'kotlin.ULong.compareTo' call
        var this_3 = range.pj_1;
        var other_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
        if (ulongCompare(_ULong___get_data__impl__fggpzb(this_3), _ULong___get_data__impl__fggpzb(other_1)) > 0) {
          // Inline function 'kotlin.ULong.plus' call
          // Inline function 'kotlin.ULong.minus' call
          var this_4 = range.pj_1;
          // Inline function 'kotlin.ULong.minus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_5 = _UInt___init__impl__l7qpdl(1);
          var other_2 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_5)).d3(new Long(-1, 0)));
          var tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).s2(_ULong___get_data__impl__fggpzb(other_2)));
          var this_6 = nextULong_0(_this__u8e3s4, tmp$ret$7, range.qj_1);
          // Inline function 'kotlin.ULong.plus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_7 = _UInt___init__impl__l7qpdl(1);
          var other_3 = _ULong___init__impl__c78o9k(toLong(_UInt___get_data__impl__f0vqqw(this_7)).d3(new Long(-1, 0)));
          tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_6).r2(_ULong___get_data__impl__fggpzb(other_3)));
        } else {
          tmp = nextULong_1(_this__u8e3s4);
        }
      }
    }
    return tmp;
  }
  function nextULong_0(_this__u8e3s4, from, until) {
    checkULongRangeBounds(from, until);
    // Inline function 'kotlin.ULong.toLong' call
    var signedFrom = _ULong___get_data__impl__fggpzb(from).f3(new Long(0, -2147483648));
    // Inline function 'kotlin.ULong.toLong' call
    var signedUntil = _ULong___get_data__impl__fggpzb(until).f3(new Long(0, -2147483648));
    var signedResult = _this__u8e3s4.nj(signedFrom, signedUntil).f3(new Long(0, -2147483648));
    // Inline function 'kotlin.toULong' call
    return _ULong___init__impl__c78o9k(signedResult);
  }
  function nextULong_1(_this__u8e3s4) {
    // Inline function 'kotlin.toULong' call
    var this_0 = _this__u8e3s4.mj();
    return _ULong___init__impl__c78o9k(this_0);
  }
  function checkULongRangeBounds(from, until) {
    // Inline function 'kotlin.ULong.compareTo' call
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!(ulongCompare(_ULong___get_data__impl__fggpzb(until), _ULong___get_data__impl__fggpzb(from)) > 0)) {
      // Inline function 'kotlin.random.checkULongRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(new ULong(from), new ULong(until));
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function XorWowRandom_init_$Init$(seed1, seed2, $this) {
    XorWowRandom.call($this, seed1, seed2, 0, 0, ~seed1, seed1 << 10 ^ (seed2 >>> 4 | 0));
    return $this;
  }
  function XorWowRandom_init_$Create$(seed1, seed2) {
    return XorWowRandom_init_$Init$(seed1, seed2, objectCreate(protoOf(XorWowRandom)));
  }
  function Companion_9() {
    Companion_instance_9 = this;
    this.vj_1 = new Long(0, 0);
  }
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function XorWowRandom(x, y, z, w, v, addend) {
    Companion_getInstance_9();
    Random.call(this);
    this.wj_1 = x;
    this.xj_1 = y;
    this.yj_1 = z;
    this.zj_1 = w;
    this.ak_1 = v;
    this.bk_1 = addend;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!((this.wj_1 | this.xj_1 | this.yj_1 | this.zj_1 | this.ak_1) === 0)) {
      // Inline function 'kotlin.random.XorWowRandom.<anonymous>' call
      var message = 'Initial state must have at least one non-zero element.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.repeat' call
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < 64)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.random.XorWowRandom.<anonymous>' call
        this.ie();
      }
       while (inductionVariable < 64);
  }
  protoOf(XorWowRandom).ie = function () {
    var t = this.wj_1;
    t = t ^ (t >>> 2 | 0);
    this.wj_1 = this.xj_1;
    this.xj_1 = this.yj_1;
    this.yj_1 = this.zj_1;
    var v0 = this.ak_1;
    this.zj_1 = v0;
    t = t ^ t << 1 ^ v0 ^ v0 << 4;
    this.ak_1 = t;
    this.bk_1 = this.bk_1 + 362437 | 0;
    return t + this.bk_1 | 0;
  };
  protoOf(XorWowRandom).kj = function (bitCount) {
    return takeUpperBits(this.ie(), bitCount);
  };
  function Companion_10() {
    Companion_instance_10 = this;
    this.v_1 = new IntRange(1, 0);
  }
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function IntRange(start, endInclusive) {
    Companion_getInstance_10();
    IntProgression.call(this, start, endInclusive, 1);
  }
  protoOf(IntRange).m1 = function () {
    return this.ck_1;
  };
  protoOf(IntRange).n1 = function () {
    return this.dk_1;
  };
  protoOf(IntRange).l = function () {
    return this.ck_1 > this.dk_1;
  };
  protoOf(IntRange).equals = function (other) {
    var tmp;
    if (other instanceof IntRange) {
      tmp = (this.l() ? other.l() : false) ? true : this.ck_1 === other.ck_1 ? this.dk_1 === other.dk_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IntRange).hashCode = function () {
    return this.l() ? -1 : imul(31, this.ck_1) + this.dk_1 | 0;
  };
  protoOf(IntRange).toString = function () {
    return '' + this.ck_1 + '..' + this.dk_1;
  };
  function Companion_11() {
    Companion_instance_11 = this;
    this.fk_1 = new CharRange(_Char___init__impl__6a9atx(1), _Char___init__impl__6a9atx(0));
  }
  var Companion_instance_11;
  function Companion_getInstance_11() {
    if (Companion_instance_11 == null)
      new Companion_11();
    return Companion_instance_11;
  }
  function CharRange(start, endInclusive) {
    Companion_getInstance_11();
    CharProgression.call(this, start, endInclusive, 1);
  }
  protoOf(CharRange).l = function () {
    return Char__compareTo_impl_ypi4mb(this.jk_1, this.kk_1) > 0;
  };
  protoOf(CharRange).equals = function (other) {
    var tmp;
    if (other instanceof CharRange) {
      tmp = (this.l() ? other.l() : false) ? true : this.jk_1 === other.jk_1 ? this.kk_1 === other.kk_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(CharRange).hashCode = function () {
    var tmp;
    if (this.l()) {
      tmp = -1;
    } else {
      // Inline function 'kotlin.code' call
      var this_0 = this.jk_1;
      var tmp$ret$0 = Char__toInt_impl_vasixd(this_0);
      var tmp_0 = imul(31, tmp$ret$0);
      // Inline function 'kotlin.code' call
      var this_1 = this.kk_1;
      tmp = tmp_0 + Char__toInt_impl_vasixd(this_1) | 0;
    }
    return tmp;
  };
  protoOf(CharRange).toString = function () {
    return toString(this.jk_1) + '..' + toString(this.kk_1);
  };
  function IntProgressionIterator(first, last, step) {
    IntIterator.call(this);
    this.mk_1 = step;
    this.nk_1 = last;
    this.ok_1 = this.mk_1 > 0 ? first <= last : first >= last;
    this.pk_1 = this.ok_1 ? first : this.nk_1;
  }
  protoOf(IntProgressionIterator).i = function () {
    return this.ok_1;
  };
  protoOf(IntProgressionIterator).ie = function () {
    var value = this.pk_1;
    if (value === this.nk_1) {
      if (!this.ok_1)
        throw NoSuchElementException_init_$Create$();
      this.ok_1 = false;
    } else {
      this.pk_1 = this.pk_1 + this.mk_1 | 0;
    }
    return value;
  };
  function CharProgressionIterator(first, last, step) {
    CharIterator.call(this);
    this.qk_1 = step;
    var tmp = this;
    // Inline function 'kotlin.code' call
    tmp.rk_1 = Char__toInt_impl_vasixd(last);
    this.sk_1 = this.qk_1 > 0 ? Char__compareTo_impl_ypi4mb(first, last) <= 0 : Char__compareTo_impl_ypi4mb(first, last) >= 0;
    var tmp_0 = this;
    var tmp_1;
    if (this.sk_1) {
      // Inline function 'kotlin.code' call
      tmp_1 = Char__toInt_impl_vasixd(first);
    } else {
      tmp_1 = this.rk_1;
    }
    tmp_0.tk_1 = tmp_1;
  }
  protoOf(CharProgressionIterator).i = function () {
    return this.sk_1;
  };
  protoOf(CharProgressionIterator).ke = function () {
    var value = this.tk_1;
    if (value === this.rk_1) {
      if (!this.sk_1)
        throw NoSuchElementException_init_$Create$();
      this.sk_1 = false;
    } else {
      this.tk_1 = this.tk_1 + this.qk_1 | 0;
    }
    return numberToChar(value);
  };
  function Companion_12() {
  }
  protoOf(Companion_12).w = function (rangeStart, rangeEnd, step) {
    return new IntProgression(rangeStart, rangeEnd, step);
  };
  var Companion_instance_12;
  function Companion_getInstance_12() {
    return Companion_instance_12;
  }
  function IntProgression(start, endInclusive, step) {
    if (step === 0)
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step === -2147483648)
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.ck_1 = start;
    this.dk_1 = getProgressionLastElement(start, endInclusive, step);
    this.ek_1 = step;
  }
  protoOf(IntProgression).h = function () {
    return new IntProgressionIterator(this.ck_1, this.dk_1, this.ek_1);
  };
  protoOf(IntProgression).l = function () {
    return this.ek_1 > 0 ? this.ck_1 > this.dk_1 : this.ck_1 < this.dk_1;
  };
  protoOf(IntProgression).equals = function (other) {
    var tmp;
    if (other instanceof IntProgression) {
      tmp = (this.l() ? other.l() : false) ? true : (this.ck_1 === other.ck_1 ? this.dk_1 === other.dk_1 : false) ? this.ek_1 === other.ek_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IntProgression).hashCode = function () {
    return this.l() ? -1 : imul(31, imul(31, this.ck_1) + this.dk_1 | 0) + this.ek_1 | 0;
  };
  protoOf(IntProgression).toString = function () {
    return this.ek_1 > 0 ? '' + this.ck_1 + '..' + this.dk_1 + ' step ' + this.ek_1 : '' + this.ck_1 + ' downTo ' + this.dk_1 + ' step ' + (-this.ek_1 | 0);
  };
  function Companion_13() {
  }
  var Companion_instance_13;
  function Companion_getInstance_13() {
    return Companion_instance_13;
  }
  function CharProgression(start, endInclusive, step) {
    if (step === 0)
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step === -2147483648)
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.jk_1 = start;
    var tmp = this;
    // Inline function 'kotlin.code' call
    var tmp_0 = Char__toInt_impl_vasixd(start);
    // Inline function 'kotlin.code' call
    var tmp$ret$1 = Char__toInt_impl_vasixd(endInclusive);
    tmp.kk_1 = numberToChar(getProgressionLastElement(tmp_0, tmp$ret$1, step));
    this.lk_1 = step;
  }
  protoOf(CharProgression).h = function () {
    return new CharProgressionIterator(this.jk_1, this.kk_1, this.lk_1);
  };
  protoOf(CharProgression).l = function () {
    return this.lk_1 > 0 ? Char__compareTo_impl_ypi4mb(this.jk_1, this.kk_1) > 0 : Char__compareTo_impl_ypi4mb(this.jk_1, this.kk_1) < 0;
  };
  protoOf(CharProgression).equals = function (other) {
    var tmp;
    if (other instanceof CharProgression) {
      tmp = (this.l() ? other.l() : false) ? true : (this.jk_1 === other.jk_1 ? this.kk_1 === other.kk_1 : false) ? this.lk_1 === other.lk_1 : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(CharProgression).hashCode = function () {
    var tmp;
    if (this.l()) {
      tmp = -1;
    } else {
      // Inline function 'kotlin.code' call
      var this_0 = this.jk_1;
      var tmp$ret$0 = Char__toInt_impl_vasixd(this_0);
      var tmp_0 = imul(31, tmp$ret$0);
      // Inline function 'kotlin.code' call
      var this_1 = this.kk_1;
      var tmp$ret$1 = Char__toInt_impl_vasixd(this_1);
      tmp = imul(31, tmp_0 + tmp$ret$1 | 0) + this.lk_1 | 0;
    }
    return tmp;
  };
  protoOf(CharProgression).toString = function () {
    return this.lk_1 > 0 ? toString(this.jk_1) + '..' + toString(this.kk_1) + ' step ' + this.lk_1 : toString(this.jk_1) + ' downTo ' + toString(this.kk_1) + ' step ' + (-this.lk_1 | 0);
  };
  function appendElement(_this__u8e3s4, element, transform) {
    if (!(transform == null)) {
      _this__u8e3s4.f(transform(element));
    } else {
      if (element == null ? true : isCharSequence(element)) {
        _this__u8e3s4.f(element);
      } else {
        if (element instanceof Char) {
          _this__u8e3s4.n7(element.p1_1);
        } else {
          _this__u8e3s4.f(toString_0(element));
        }
      }
    }
  }
  function equals_0(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (_this__u8e3s4 === other)
      return true;
    if (!ignoreCase)
      return false;
    var thisUpper = uppercaseChar(_this__u8e3s4);
    var otherUpper = uppercaseChar(other);
    var tmp;
    if (thisUpper === otherUpper) {
      tmp = true;
    } else {
      // Inline function 'kotlin.text.lowercaseChar' call
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = toString(thisUpper).toLowerCase();
      var tmp_0 = charSequenceGet(tmp$ret$2, 0);
      // Inline function 'kotlin.text.lowercaseChar' call
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$6 = toString(otherUpper).toLowerCase();
      tmp = tmp_0 === charSequenceGet(tmp$ret$6, 0);
    }
    return tmp;
  }
  function numberFormatError(input) {
    throw NumberFormatException_init_$Create$_0("Invalid number format: '" + input + "'");
  }
  function toLongOrNull(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (firstChar === _Char___init__impl__6a9atx(45)) {
        isNegative = true;
        limit = new Long(0, -2147483648);
      } else if (firstChar === _Char___init__impl__6a9atx(43)) {
        isNegative = false;
        limit = new Long(1, -2147483648);
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      limit = new Long(1, -2147483648);
    }
    // Inline function 'kotlin.Long.div' call
    var limitForMaxRadix = (new Long(1, -2147483648)).u2(toLong(36));
    var limitBeforeMul = limitForMaxRadix;
    var result = new Long(0, 0);
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result.z(limitBeforeMul) < 0) {
          if (limitBeforeMul.equals(limitForMaxRadix)) {
            // Inline function 'kotlin.Long.div' call
            limitBeforeMul = limit.u2(toLong(radix));
            if (result.z(limitBeforeMul) < 0) {
              return null;
            }
          } else {
            return null;
          }
        }
        // Inline function 'kotlin.Long.times' call
        result = result.t2(toLong(radix));
        var tmp = result;
        // Inline function 'kotlin.Long.plus' call
        var tmp$ret$3 = limit.r2(toLong(digit));
        if (tmp.z(tmp$ret$3) < 0)
          return null;
        // Inline function 'kotlin.Long.minus' call
        result = result.s2(toLong(digit));
      }
       while (inductionVariable < length);
    return isNegative ? result : result.y2();
  }
  function get_lastIndex_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) - 1 | 0;
  }
  function contains_3(_this__u8e3s4, char, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return indexOf_3(_this__u8e3s4, char, VOID, ignoreCase) >= 0;
  }
  function split(_this__u8e3s4, delimiters, ignoreCase, limit) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    if (delimiters.length === 1) {
      return split_1(_this__u8e3s4, toString(delimiters[0]), ignoreCase, limit);
    }
    // Inline function 'kotlin.collections.map' call
    var this_0 = asIterable(rangesDelimitedBy(_this__u8e3s4, delimiters, VOID, ignoreCase, limit));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'kotlin.text.split.<anonymous>' call
      var tmp$ret$0 = substring_0(_this__u8e3s4, item);
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function split_0(_this__u8e3s4, delimiters, ignoreCase, limit) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    if (delimiters.length === 1) {
      var delimiter = delimiters[0];
      // Inline function 'kotlin.text.isEmpty' call
      if (!(charSequenceLength(delimiter) === 0)) {
        return split_1(_this__u8e3s4, delimiter, ignoreCase, limit);
      }
    }
    // Inline function 'kotlin.collections.map' call
    var this_0 = asIterable(rangesDelimitedBy_0(_this__u8e3s4, delimiters, VOID, ignoreCase, limit));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.h();
    while (tmp0_iterator.i()) {
      var item = tmp0_iterator.j();
      // Inline function 'kotlin.text.split.<anonymous>' call
      var tmp$ret$1 = substring_0(_this__u8e3s4, item);
      destination.e(tmp$ret$1);
    }
    return destination;
  }
  function substring(_this__u8e3s4, range) {
    // Inline function 'kotlin.text.substring' call
    var startIndex = range.m1();
    var endIndex = range.n1() + 1 | 0;
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(startIndex, endIndex);
  }
  function contains_4(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    if (typeof other === 'string') {
      tmp = indexOf_2(_this__u8e3s4, other, VOID, ignoreCase) >= 0;
    } else {
      tmp = indexOf_4(_this__u8e3s4, other, 0, charSequenceLength(_this__u8e3s4), ignoreCase) >= 0;
    }
    return tmp;
  }
  function lines(_this__u8e3s4) {
    return toList_1(lineSequence(_this__u8e3s4));
  }
  function padEnd(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    return toString_1(padEnd_0(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE(), length, padChar));
  }
  function substringBefore(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_2(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(0, index);
    }
    return tmp;
  }
  function padStart(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    return toString_1(padStart_0(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE(), length, padChar));
  }
  function substringAfter(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_2(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      // Inline function 'kotlin.text.substring' call
      var startIndex = index + delimiter.length | 0;
      var endIndex = _this__u8e3s4.length;
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(startIndex, endIndex);
    }
    return tmp;
  }
  function indexOf_2(_this__u8e3s4, string, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_4(_this__u8e3s4, string, startIndex, charSequenceLength(_this__u8e3s4), ignoreCase);
    } else {
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.indexOf(string, startIndex);
    }
    return tmp;
  }
  function get_indices_0(_this__u8e3s4) {
    return numberRangeToNumber(0, charSequenceLength(_this__u8e3s4) - 1 | 0);
  }
  function indexOf_3(_this__u8e3s4, char, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      // Inline function 'kotlin.charArrayOf' call
      var tmp$ret$0 = charArrayOf([char]);
      tmp = indexOfAny(_this__u8e3s4, tmp$ret$0, startIndex, ignoreCase);
    } else {
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.text.nativeIndexOf' call
      var str = toString(char);
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.indexOf(str, startIndex);
    }
    return tmp;
  }
  function split_1(_this__u8e3s4, delimiter, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var currentOffset = 0;
    var nextIndex = indexOf_2(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    if (nextIndex === -1 ? true : limit === 1) {
      return listOf(toString_1(_this__u8e3s4));
    }
    var isLimited = limit > 0;
    var result = ArrayList_init_$Create$_0(isLimited ? coerceAtMost(limit, 10) : 10);
    $l$loop: do {
      // Inline function 'kotlin.text.substring' call
      var startIndex = currentOffset;
      var endIndex = nextIndex;
      var tmp$ret$0 = toString_1(charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex));
      result.e(tmp$ret$0);
      currentOffset = nextIndex + delimiter.length | 0;
      if (isLimited ? result.k() === (limit - 1 | 0) : false)
        break $l$loop;
      nextIndex = indexOf_2(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    }
     while (!(nextIndex === -1));
    // Inline function 'kotlin.text.substring' call
    var startIndex_0 = currentOffset;
    var endIndex_0 = charSequenceLength(_this__u8e3s4);
    var tmp$ret$1 = toString_1(charSequenceSubSequence(_this__u8e3s4, startIndex_0, endIndex_0));
    result.e(tmp$ret$1);
    return result;
  }
  function substring_0(_this__u8e3s4, range) {
    return toString_1(charSequenceSubSequence(_this__u8e3s4, range.m1(), range.n1() + 1 | 0));
  }
  function rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    requireNonNegativeLimit(limit);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda(delimiters, ignoreCase));
  }
  function rangesDelimitedBy_0(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    requireNonNegativeLimit(limit);
    var delimitersList = asList(delimiters);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda_0(delimitersList, ignoreCase));
  }
  function indexOf_4(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {
    last = last === VOID ? false : last;
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4))) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), coerceAtLeast(endIndex, 0));
    var tmp;
    if (typeof _this__u8e3s4 === 'string') {
      tmp = typeof other === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var inductionVariable = indices.ck_1;
      var last_0 = indices.dk_1;
      var step = indices.ek_1;
      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          if (regionMatches(other, 0, _this__u8e3s4, index, charSequenceLength(other), ignoreCase))
            return index;
        }
         while (!(index === last_0));
    } else {
      var inductionVariable_0 = indices.ck_1;
      var last_1 = indices.dk_1;
      var step_0 = indices.ek_1;
      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          if (regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase))
            return index_0;
        }
         while (!(index_0 === last_1));
    }
    return -1;
  }
  function lineSequence(_this__u8e3s4) {
    return splitToSequence(_this__u8e3s4, ['\r\n', '\n', '\r']);
  }
  function padEnd_0(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    if (length < 0)
      throw IllegalArgumentException_init_$Create$_0('Desired length ' + length + ' is less than zero.');
    if (length <= charSequenceLength(_this__u8e3s4))
      return charSequenceSubSequence(_this__u8e3s4, 0, charSequenceLength(_this__u8e3s4));
    var sb = StringBuilder_init_$Create$(length);
    sb.f(_this__u8e3s4);
    var inductionVariable = 1;
    var last = length - charSequenceLength(_this__u8e3s4) | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        sb.n7(padChar);
      }
       while (!(i === last));
    return sb;
  }
  function padStart_0(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    if (length < 0)
      throw IllegalArgumentException_init_$Create$_0('Desired length ' + length + ' is less than zero.');
    if (length <= charSequenceLength(_this__u8e3s4))
      return charSequenceSubSequence(_this__u8e3s4, 0, charSequenceLength(_this__u8e3s4));
    var sb = StringBuilder_init_$Create$(length);
    var inductionVariable = 1;
    var last = length - charSequenceLength(_this__u8e3s4) | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        sb.n7(padChar);
      }
       while (!(i === last));
    sb.f(_this__u8e3s4);
    return sb;
  }
  function trim(_this__u8e3s4) {
    // Inline function 'kotlin.text.trim' call
    var startIndex = 0;
    var endIndex = charSequenceLength(_this__u8e3s4) - 1 | 0;
    var startFound = false;
    $l$loop: while (startIndex <= endIndex) {
      var index = !startFound ? startIndex : endIndex;
      var match = isWhitespace(charSequenceGet(_this__u8e3s4, index));
      if (!startFound) {
        if (!match)
          startFound = true;
        else
          startIndex = startIndex + 1 | 0;
      } else {
        if (!match)
          break $l$loop;
        else
          endIndex = endIndex - 1 | 0;
      }
    }
    return charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex + 1 | 0);
  }
  function indexOfAny(_this__u8e3s4, chars, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    if (!ignoreCase ? chars.length === 1 : false) {
      tmp = typeof _this__u8e3s4 === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var char = single(chars);
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.text.nativeIndexOf' call
      var str = toString(char);
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.indexOf(str, startIndex);
    }
    var inductionVariable = coerceAtLeast(startIndex, 0);
    var last = get_lastIndex_1(_this__u8e3s4);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var charAtIndex = charSequenceGet(_this__u8e3s4, index);
        var tmp$ret$4;
        $l$block: {
          // Inline function 'kotlin.collections.any' call
          var inductionVariable_0 = 0;
          var last_0 = chars.length;
          while (inductionVariable_0 < last_0) {
            var element = chars[inductionVariable_0];
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.text.indexOfAny.<anonymous>' call
            if (equals_0(element, charAtIndex, ignoreCase)) {
              tmp$ret$4 = true;
              break $l$block;
            }
          }
          tmp$ret$4 = false;
        }
        if (tmp$ret$4)
          return index;
      }
       while (!(index === last));
    return -1;
  }
  function requireNonNegativeLimit(limit) {
    // Inline function 'kotlin.contracts.contract' call
    var tmp;
    if (!(limit >= 0)) {
      // Inline function 'kotlin.text.requireNonNegativeLimit.<anonymous>' call
      var message = 'Limit must be non-negative, but was ' + limit;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function calcNext_2($this) {
    if ($this.wk_1 < 0) {
      $this.uk_1 = 0;
      $this.xk_1 = null;
    } else {
      var tmp;
      var tmp_0;
      if ($this.zk_1.cl_1 > 0) {
        $this.yk_1 = $this.yk_1 + 1 | 0;
        tmp_0 = $this.yk_1 >= $this.zk_1.cl_1;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = true;
      } else {
        tmp = $this.wk_1 > charSequenceLength($this.zk_1.al_1);
      }
      if (tmp) {
        $this.xk_1 = numberRangeToNumber($this.vk_1, get_lastIndex_1($this.zk_1.al_1));
        $this.wk_1 = -1;
      } else {
        var match = $this.zk_1.dl_1($this.zk_1.al_1, $this.wk_1);
        if (match == null) {
          $this.xk_1 = numberRangeToNumber($this.vk_1, get_lastIndex_1($this.zk_1.al_1));
          $this.wk_1 = -1;
        } else {
          var index = match.ge();
          var length = match.he();
          $this.xk_1 = until($this.vk_1, index);
          $this.vk_1 = index + length | 0;
          $this.wk_1 = $this.vk_1 + (length === 0 ? 1 : 0) | 0;
        }
      }
      $this.uk_1 = 1;
    }
  }
  function DelimitedRangesSequence$iterator$1(this$0) {
    this.zk_1 = this$0;
    this.uk_1 = -1;
    this.vk_1 = coerceIn_0(this$0.bl_1, 0, charSequenceLength(this$0.al_1));
    this.wk_1 = this.vk_1;
    this.xk_1 = null;
    this.yk_1 = 0;
  }
  protoOf(DelimitedRangesSequence$iterator$1).j = function () {
    if (this.uk_1 === -1) {
      calcNext_2(this);
    }
    if (this.uk_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.xk_1;
    var result = tmp instanceof IntRange ? tmp : THROW_CCE();
    this.xk_1 = null;
    this.uk_1 = -1;
    return result;
  };
  protoOf(DelimitedRangesSequence$iterator$1).i = function () {
    if (this.uk_1 === -1) {
      calcNext_2(this);
    }
    return this.uk_1 === 1;
  };
  function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {
    this.al_1 = input;
    this.bl_1 = startIndex;
    this.cl_1 = limit;
    this.dl_1 = getNextMatch;
  }
  protoOf(DelimitedRangesSequence).h = function () {
    return new DelimitedRangesSequence$iterator$1(this);
  };
  function findAnyOf(_this__u8e3s4, strings, startIndex, ignoreCase, last) {
    if (!ignoreCase ? strings.k() === 1 : false) {
      var string = single_0(strings);
      var index = !last ? indexOf_2(_this__u8e3s4, string, startIndex) : lastIndexOf(_this__u8e3s4, string, startIndex);
      return index < 0 ? null : to(index, string);
    }
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), charSequenceLength(_this__u8e3s4)) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), 0);
    if (typeof _this__u8e3s4 === 'string') {
      var inductionVariable = indices.ck_1;
      var last_0 = indices.dk_1;
      var step = indices.ek_1;
      if ((step > 0 ? inductionVariable <= last_0 : false) ? true : step < 0 ? last_0 <= inductionVariable : false)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          var tmp$ret$1;
          $l$block: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator = strings.h();
            while (tmp0_iterator.i()) {
              var element = tmp0_iterator.j();
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              if (regionMatches(element, 0, _this__u8e3s4, index_0, element.length, ignoreCase)) {
                tmp$ret$1 = element;
                break $l$block;
              }
            }
            tmp$ret$1 = null;
          }
          var matchingString = tmp$ret$1;
          if (!(matchingString == null))
            return to(index_0, matchingString);
        }
         while (!(index_0 === last_0));
    } else {
      var inductionVariable_0 = indices.ck_1;
      var last_1 = indices.dk_1;
      var step_0 = indices.ek_1;
      if ((step_0 > 0 ? inductionVariable_0 <= last_1 : false) ? true : step_0 < 0 ? last_1 <= inductionVariable_0 : false)
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          var tmp$ret$3;
          $l$block_0: {
            // Inline function 'kotlin.collections.firstOrNull' call
            var tmp0_iterator_0 = strings.h();
            while (tmp0_iterator_0.i()) {
              var element_0 = tmp0_iterator_0.j();
              // Inline function 'kotlin.text.findAnyOf.<anonymous>' call
              if (regionMatchesImpl(element_0, 0, _this__u8e3s4, index_1, element_0.length, ignoreCase)) {
                tmp$ret$3 = element_0;
                break $l$block_0;
              }
            }
            tmp$ret$3 = null;
          }
          var matchingString_0 = tmp$ret$3;
          if (!(matchingString_0 == null))
            return to(index_1, matchingString_0);
        }
         while (!(index_1 === last_1));
    }
    return null;
  }
  function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    if (((otherOffset < 0 ? true : thisOffset < 0) ? true : thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0)) ? true : otherOffset > (charSequenceLength(other) - length | 0)) {
      return false;
    }
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals_0(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase))
          return false;
      }
       while (inductionVariable < length);
    return true;
  }
  function splitToSequence(_this__u8e3s4, delimiters, ignoreCase, limit) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    var tmp = rangesDelimitedBy_0(_this__u8e3s4, delimiters, VOID, ignoreCase, limit);
    return map(tmp, splitToSequence$lambda(_this__u8e3s4));
  }
  function lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? get_lastIndex_1(_this__u8e3s4) : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_4(_this__u8e3s4, string, startIndex, 0, ignoreCase, true);
    } else {
      // Inline function 'kotlin.text.nativeLastIndexOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.lastIndexOf(string, startIndex);
    }
    return tmp;
  }
  function rangesDelimitedBy$lambda($delimiters, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
      var it = indexOfAny($this$$receiver, $delimiters, currentIndex, $ignoreCase);
      return it < 0 ? null : to(it, 1);
    };
  }
  function rangesDelimitedBy$lambda_0($delimitersList, $ignoreCase) {
    return function ($this$$receiver, currentIndex) {
      var tmp0_safe_receiver = findAnyOf($this$$receiver, $delimitersList, currentIndex, $ignoreCase, false);
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
        tmp = to(tmp0_safe_receiver.ee_1, tmp0_safe_receiver.fe_1.length);
      }
      return tmp;
    };
  }
  function splitToSequence$lambda($this_splitToSequence) {
    return function (it) {
      return substring_0($this_splitToSequence, it);
    };
  }
  function _Duration___init__impl__kdtzql(rawValue) {
    // Inline function 'kotlin.time.durationAssertionsEnabled' call
    if (true) {
      if (isInNanos(rawValue)) {
        var containsArg = _get_value__a43j40_0(rawValue);
        if (!((new Long(387905, -1073741824)).z(containsArg) <= 0 ? containsArg.z(new Long(-387905, 1073741823)) <= 0 : false))
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ns is out of nanoseconds range');
      } else {
        var containsArg_0 = _get_value__a43j40_0(rawValue);
        if (!((new Long(1, -1073741824)).z(containsArg_0) <= 0 ? containsArg_0.z(new Long(-1, 1073741823)) <= 0 : false))
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ms is out of milliseconds range');
        var containsArg_1 = _get_value__a43j40_0(rawValue);
        if ((new Long(1108857478, -1074)).z(containsArg_1) <= 0 ? containsArg_1.z(new Long(-1108857478, 1073)) <= 0 : false)
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ms is denormalized');
      }
    }
    return rawValue;
  }
  function _get_rawValue__5zfu4e($this) {
    return $this;
  }
  function _get_value__a43j40_0($this) {
    return _get_rawValue__5zfu4e($this).b3(1);
  }
  function isInNanos($this) {
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    return (_get_rawValue__5zfu4e($this).g3() & 1) === 0;
  }
  function isInMillis($this) {
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    return (_get_rawValue__5zfu4e($this).g3() & 1) === 1;
  }
  function _get_storageUnit__szjgha($this) {
    return isInNanos($this) ? DurationUnit_NANOSECONDS_getInstance() : DurationUnit_MILLISECONDS_getInstance();
  }
  function Companion_14() {
    Companion_instance_14 = this;
    this.oc_1 = _Duration___init__impl__kdtzql(new Long(0, 0));
    this.pc_1 = durationOfMillis(new Long(-1, 1073741823));
    this.qc_1 = durationOfMillis(new Long(1, -1073741824));
  }
  var Companion_instance_14;
  function Companion_getInstance_14() {
    if (Companion_instance_14 == null)
      new Companion_14();
    return Companion_instance_14;
  }
  function Duration__unaryMinus_impl_x2k1y0($this) {
    var tmp = _get_value__a43j40_0($this).y2();
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp$ret$0 = _get_rawValue__5zfu4e($this).g3() & 1;
    return durationOf(tmp, tmp$ret$0);
  }
  function Duration__plus_impl_yu9v8f($this, other) {
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      if (Duration__isFinite_impl_rzjsps(other) ? true : _get_rawValue__5zfu4e($this).f3(_get_rawValue__5zfu4e(other)).z(new Long(0, 0)) >= 0)
        return $this;
      else
        throw IllegalArgumentException_init_$Create$_0('Summing infinite durations of different signs yields an undefined result.');
    } else if (Duration__isInfinite_impl_tsn9y3(other))
      return other;
    var tmp;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp_0 = _get_rawValue__5zfu4e($this).g3() & 1;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    if (tmp_0 === (_get_rawValue__5zfu4e(other).g3() & 1)) {
      var result = _get_value__a43j40_0($this).r2(_get_value__a43j40_0(other));
      tmp = isInNanos($this) ? durationOfNanosNormalized(result) : durationOfMillisNormalized(result);
    } else {
      if (isInMillis($this)) {
        tmp = addValuesMixedRanges($this, _get_value__a43j40_0($this), _get_value__a43j40_0(other));
      } else {
        tmp = addValuesMixedRanges($this, _get_value__a43j40_0(other), _get_value__a43j40_0($this));
      }
    }
    return tmp;
  }
  function addValuesMixedRanges($this, thisMillis, otherNanos) {
    var otherMillis = nanosToMillis(otherNanos);
    var resultMillis = thisMillis.r2(otherMillis);
    var tmp;
    if ((new Long(1108857478, -1074)).z(resultMillis) <= 0 ? resultMillis.z(new Long(-1108857478, 1073)) <= 0 : false) {
      var otherNanoRemainder = otherNanos.s2(millisToNanos(otherMillis));
      tmp = durationOfNanos(millisToNanos(resultMillis).r2(otherNanoRemainder));
    } else {
      tmp = durationOfMillis(coerceIn(resultMillis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function Duration__isNegative_impl_pbysfa($this) {
    return _get_rawValue__5zfu4e($this).z(new Long(0, 0)) < 0;
  }
  function Duration__isInfinite_impl_tsn9y3($this) {
    return _get_rawValue__5zfu4e($this).equals(_get_rawValue__5zfu4e(Companion_getInstance_14().pc_1)) ? true : _get_rawValue__5zfu4e($this).equals(_get_rawValue__5zfu4e(Companion_getInstance_14().qc_1));
  }
  function Duration__isFinite_impl_rzjsps($this) {
    return !Duration__isInfinite_impl_tsn9y3($this);
  }
  function _Duration___get_absoluteValue__impl__vr7i6w($this) {
    return Duration__isNegative_impl_pbysfa($this) ? Duration__unaryMinus_impl_x2k1y0($this) : $this;
  }
  function Duration__compareTo_impl_pchp0f($this, other) {
    var compareBits = _get_rawValue__5zfu4e($this).f3(_get_rawValue__5zfu4e(other));
    if (compareBits.z(new Long(0, 0)) < 0 ? true : (compareBits.g3() & 1) === 0)
      return _get_rawValue__5zfu4e($this).z(_get_rawValue__5zfu4e(other));
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp = _get_rawValue__5zfu4e($this).g3() & 1;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var r = tmp - (_get_rawValue__5zfu4e(other).g3() & 1) | 0;
    return Duration__isNegative_impl_pbysfa($this) ? -r | 0 : r;
  }
  function Duration__compareTo_impl_pchp0f_0($this, other) {
    return Duration__compareTo_impl_pchp0f($this.el_1, other instanceof Duration ? other.el_1 : THROW_CCE());
  }
  function _Duration___get_hoursComponent__impl__7hllxa($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeHours__impl__kb9f3j($this).v2(toLong(24)).g3();
    }
    return tmp;
  }
  function _Duration___get_minutesComponent__impl__ctvd8u($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeMinutes__impl__dognoh($this).v2(toLong(60)).g3();
    }
    return tmp;
  }
  function _Duration___get_secondsComponent__impl__if34a6($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeSeconds__impl__hpy7b3($this).v2(toLong(60)).g3();
    }
    return tmp;
  }
  function _Duration___get_nanosecondsComponent__impl__nh19kq($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else if (isInMillis($this)) {
      // Inline function 'kotlin.Long.rem' call
      var tmp$ret$0 = _get_value__a43j40_0($this).v2(toLong(1000));
      tmp = millisToNanos(tmp$ret$0).g3();
    } else {
      // Inline function 'kotlin.Long.rem' call
      var this_0 = _get_value__a43j40_0($this);
      var other = 1000000000;
      tmp = this_0.v2(toLong(other)).g3();
    }
    return tmp;
  }
  function Duration__toLong_impl_shr43i($this, unit) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    return tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().pc_1)) ? new Long(-1, 2147483647) : tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().qc_1)) ? new Long(0, -2147483648) : convertDurationUnit_0(_get_value__a43j40_0($this), _get_storageUnit__szjgha($this), unit);
  }
  function _Duration___get_inWholeDays__impl__7bvpxz($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_DAYS_getInstance());
  }
  function _Duration___get_inWholeHours__impl__kb9f3j($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_HOURS_getInstance());
  }
  function _Duration___get_inWholeMinutes__impl__dognoh($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_MINUTES_getInstance());
  }
  function _Duration___get_inWholeSeconds__impl__hpy7b3($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_SECONDS_getInstance());
  }
  function Duration__toString_impl_8d916b($this) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    var tmp;
    if (tmp0_subject.equals(new Long(0, 0))) {
      tmp = '0s';
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().pc_1))) {
      tmp = 'Infinity';
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().qc_1))) {
      tmp = '-Infinity';
    } else {
      var isNegative = Duration__isNegative_impl_pbysfa($this);
      // Inline function 'kotlin.text.buildString' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.apply' call
      var this_0 = StringBuilder_init_$Create$_1();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.time.Duration.toString.<anonymous>' call
      if (isNegative) {
        this_0.n7(_Char___init__impl__6a9atx(45));
      }
      // Inline function 'kotlin.time.Duration.toComponents' call
      var this_1 = _Duration___get_absoluteValue__impl__vr7i6w($this);
      // Inline function 'kotlin.contracts.contract' call
      var days = _Duration___get_inWholeDays__impl__7bvpxz(this_1);
      var hours = _Duration___get_hoursComponent__impl__7hllxa(this_1);
      var minutes = _Duration___get_minutesComponent__impl__ctvd8u(this_1);
      var seconds = _Duration___get_secondsComponent__impl__if34a6(this_1);
      var nanoseconds = _Duration___get_nanosecondsComponent__impl__nh19kq(this_1);
      var hasDays = !days.equals(new Long(0, 0));
      var hasHours = !(hours === 0);
      var hasMinutes = !(minutes === 0);
      var hasSeconds = !(seconds === 0) ? true : !(nanoseconds === 0);
      var components = 0;
      if (hasDays) {
        this_0.qa(days).n7(_Char___init__impl__6a9atx(100));
        components = components + 1 | 0;
      }
      if (hasHours ? true : hasDays ? hasMinutes ? true : hasSeconds : false) {
        var tmp1 = components;
        components = tmp1 + 1 | 0;
        if (tmp1 > 0) {
          this_0.n7(_Char___init__impl__6a9atx(32));
        }
        this_0.pa(hours).n7(_Char___init__impl__6a9atx(104));
      }
      if (hasMinutes ? true : hasSeconds ? hasHours ? true : hasDays : false) {
        var tmp2 = components;
        components = tmp2 + 1 | 0;
        if (tmp2 > 0) {
          this_0.n7(_Char___init__impl__6a9atx(32));
        }
        this_0.pa(minutes).n7(_Char___init__impl__6a9atx(109));
      }
      if (hasSeconds) {
        var tmp3 = components;
        components = tmp3 + 1 | 0;
        if (tmp3 > 0) {
          this_0.n7(_Char___init__impl__6a9atx(32));
        }
        if (((!(seconds === 0) ? true : hasDays) ? true : hasHours) ? true : hasMinutes) {
          appendFractional(this_0, $this, seconds, nanoseconds, 9, 's', false);
        } else if (nanoseconds >= 1000000) {
          appendFractional(this_0, $this, nanoseconds / 1000000 | 0, nanoseconds % 1000000 | 0, 6, 'ms', false);
        } else if (nanoseconds >= 1000) {
          appendFractional(this_0, $this, nanoseconds / 1000 | 0, nanoseconds % 1000 | 0, 3, 'us', false);
        } else {
          this_0.pa(nanoseconds).m7('ns');
        }
      }
      var tmp_0;
      if (isNegative ? components > 1 : false) {
        this_0.ra(1, _Char___init__impl__6a9atx(40)).n7(_Char___init__impl__6a9atx(41));
        tmp_0 = Unit_instance;
      }
      tmp = this_0.toString();
    }
    return tmp;
  }
  function appendFractional(_this__u8e3s4, $this, whole, fractional, fractionalSize, unit, isoZeroes) {
    _this__u8e3s4.pa(whole);
    if (!(fractional === 0)) {
      _this__u8e3s4.n7(_Char___init__impl__6a9atx(46));
      var fracString = padStart(fractional.toString(), fractionalSize, _Char___init__impl__6a9atx(48));
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.text.indexOfLast' call
        var inductionVariable = charSequenceLength(fracString) - 1 | 0;
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'kotlin.time.Duration.appendFractional.<anonymous>' call
            if (!(charSequenceGet(fracString, index) === _Char___init__impl__6a9atx(48))) {
              tmp$ret$1 = index;
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$1 = -1;
      }
      var nonZeroDigits = tmp$ret$1 + 1 | 0;
      if (!isoZeroes ? nonZeroDigits < 3 : false) {
        _this__u8e3s4.sa(fracString, 0, nonZeroDigits);
      } else {
        _this__u8e3s4.sa(fracString, 0, imul((nonZeroDigits + 2 | 0) / 3 | 0, 3));
      }
    }
    _this__u8e3s4.m7(unit);
  }
  function Duration__hashCode_impl_u4exz6($this) {
    return $this.hashCode();
  }
  function Duration__equals_impl_ygj6w6($this, other) {
    if (!(other instanceof Duration))
      return false;
    var tmp0_other_with_cast = other instanceof Duration ? other.el_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function Duration(rawValue) {
    Companion_getInstance_14();
    this.el_1 = rawValue;
  }
  protoOf(Duration).fl = function (other) {
    return Duration__compareTo_impl_pchp0f(this.el_1, other);
  };
  protoOf(Duration).d = function (other) {
    return Duration__compareTo_impl_pchp0f_0(this, other);
  };
  protoOf(Duration).toString = function () {
    return Duration__toString_impl_8d916b(this.el_1);
  };
  protoOf(Duration).hashCode = function () {
    return Duration__hashCode_impl_u4exz6(this.el_1);
  };
  protoOf(Duration).equals = function (other) {
    return Duration__equals_impl_ygj6w6(this.el_1, other);
  };
  function durationOfMillis(normalMillis) {
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = normalMillis.a3(1).r2(toLong(1));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function toDuration(_this__u8e3s4, unit) {
    var valueInNs = convertDurationUnit(_this__u8e3s4, unit, DurationUnit_NANOSECONDS_getInstance());
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isNaN_0(valueInNs)) {
      // Inline function 'kotlin.time.toDuration.<anonymous>' call
      var message = 'Duration value cannot be NaN.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var nanos = roundToLong(valueInNs);
    var tmp;
    if ((new Long(387905, -1073741824)).z(nanos) <= 0 ? nanos.z(new Long(-387905, 1073741823)) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      var millis = roundToLong(convertDurationUnit(_this__u8e3s4, unit, DurationUnit_MILLISECONDS_getInstance()));
      tmp = durationOfMillisNormalized(millis);
    }
    return tmp;
  }
  function durationOf(normalValue, unitDiscriminator) {
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = normalValue.a3(1).r2(toLong(unitDiscriminator));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function durationOfNanosNormalized(nanos) {
    var tmp;
    if ((new Long(387905, -1073741824)).z(nanos) <= 0 ? nanos.z(new Long(-387905, 1073741823)) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      tmp = durationOfMillis(nanosToMillis(nanos));
    }
    return tmp;
  }
  function durationOfMillisNormalized(millis) {
    var tmp;
    if ((new Long(1108857478, -1074)).z(millis) <= 0 ? millis.z(new Long(-1108857478, 1073)) <= 0 : false) {
      tmp = durationOfNanos(millisToNanos(millis));
    } else {
      tmp = durationOfMillis(coerceIn(millis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function nanosToMillis(nanos) {
    // Inline function 'kotlin.Long.div' call
    return nanos.u2(toLong(1000000));
  }
  function millisToNanos(millis) {
    // Inline function 'kotlin.Long.times' call
    return millis.t2(toLong(1000000));
  }
  function durationOfNanos(normalNanos) {
    return _Duration___init__impl__kdtzql(normalNanos.a3(1));
  }
  function _ValueTimeMark___init__impl__uyfl2m(reading) {
    return reading;
  }
  function _ValueTimeMark___get_reading__impl__5qz8rd($this) {
    return $this;
  }
  function ValueTimeMark__elapsedNow_impl_eonqvs($this) {
    return MonotonicTimeSource_getInstance().kc($this);
  }
  function ValueTimeMark__minus_impl_f87sko($this, other) {
    if (!(other instanceof ValueTimeMark))
      throw IllegalArgumentException_init_$Create$_0('Subtracting or comparing time marks from different time sources is not possible: ' + new ValueTimeMark($this) + ' and ' + other);
    return ValueTimeMark__minus_impl_f87sko_0($this, other.gl_1);
  }
  function ValueTimeMark__minus_impl_f87sko_0($this, other) {
    return MonotonicTimeSource_getInstance().lc($this, other);
  }
  function ValueTimeMark__toString_impl_ow3ax6($this) {
    return 'ValueTimeMark(reading=' + toString_1($this) + ')';
  }
  function ValueTimeMark__hashCode_impl_oduu93($this) {
    return hashCode($this);
  }
  function ValueTimeMark__equals_impl_uc54jh($this, other) {
    if (!(other instanceof ValueTimeMark))
      return false;
    var tmp0_other_with_cast = other instanceof ValueTimeMark ? other.gl_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function ValueTimeMark__compareTo_impl_uoccns($this, other) {
    return $this.hl((!(other == null) ? isInterface(other, ComparableTimeMark) : false) ? other : THROW_CCE());
  }
  function ValueTimeMark(reading) {
    this.gl_1 = reading;
  }
  protoOf(ValueTimeMark).il = function (other) {
    return ValueTimeMark__minus_impl_f87sko(this.gl_1, other);
  };
  protoOf(ValueTimeMark).toString = function () {
    return ValueTimeMark__toString_impl_ow3ax6(this.gl_1);
  };
  protoOf(ValueTimeMark).hashCode = function () {
    return ValueTimeMark__hashCode_impl_oduu93(this.gl_1);
  };
  protoOf(ValueTimeMark).equals = function (other) {
    return ValueTimeMark__equals_impl_uc54jh(this.gl_1, other);
  };
  protoOf(ValueTimeMark).d = function (other) {
    return ValueTimeMark__compareTo_impl_uoccns(this, other);
  };
  function Monotonic() {
  }
  protoOf(Monotonic).ic = function () {
    return MonotonicTimeSource_getInstance().ic();
  };
  protoOf(Monotonic).toString = function () {
    return toString_1(MonotonicTimeSource_getInstance());
  };
  var Monotonic_instance;
  function Monotonic_getInstance() {
    return Monotonic_instance;
  }
  function ComparableTimeMark() {
  }
  function TimedValue(value, duration) {
    this.jl_1 = value;
    this.kl_1 = duration;
  }
  protoOf(TimedValue).toString = function () {
    return 'TimedValue(value=' + this.jl_1 + ', duration=' + new Duration(this.kl_1) + ')';
  };
  protoOf(TimedValue).hashCode = function () {
    var result = this.jl_1 == null ? 0 : hashCode(this.jl_1);
    result = imul(result, 31) + Duration__hashCode_impl_u4exz6(this.kl_1) | 0;
    return result;
  };
  protoOf(TimedValue).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof TimedValue))
      return false;
    var tmp0_other_with_cast = other instanceof TimedValue ? other : THROW_CCE();
    if (!equals(this.jl_1, tmp0_other_with_cast.jl_1))
      return false;
    if (!equals(this.kl_1, tmp0_other_with_cast.kl_1))
      return false;
    return true;
  };
  function UnsafeLazyImpl(initializer) {
    this.ll_1 = initializer;
    this.ml_1 = UNINITIALIZED_VALUE_instance;
  }
  protoOf(UnsafeLazyImpl).e2 = function () {
    if (this.ml_1 === UNINITIALIZED_VALUE_instance) {
      this.ml_1 = ensureNotNull(this.ll_1)();
      this.ll_1 = null;
    }
    var tmp = this.ml_1;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(UnsafeLazyImpl).nl = function () {
    return !(this.ml_1 === UNINITIALIZED_VALUE_instance);
  };
  protoOf(UnsafeLazyImpl).toString = function () {
    return this.nl() ? toString_0(this.e2()) : 'Lazy value not initialized yet.';
  };
  function UNINITIALIZED_VALUE() {
  }
  var UNINITIALIZED_VALUE_instance;
  function UNINITIALIZED_VALUE_getInstance() {
    return UNINITIALIZED_VALUE_instance;
  }
  function _Result___init__impl__xyqfz8(value) {
    return value;
  }
  function _Result___get_value__impl__bjfvqg($this) {
    return $this;
  }
  function _Result___get_isFailure__impl__jpiriv($this) {
    var tmp = _Result___get_value__impl__bjfvqg($this);
    return tmp instanceof Failure;
  }
  function Result__exceptionOrNull_impl_p6xea9($this) {
    var tmp;
    if (_Result___get_value__impl__bjfvqg($this) instanceof Failure) {
      tmp = _Result___get_value__impl__bjfvqg($this).ol_1;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function Companion_15() {
  }
  var Companion_instance_15;
  function Companion_getInstance_15() {
    return Companion_instance_15;
  }
  function Failure(exception) {
    this.ol_1 = exception;
  }
  protoOf(Failure).equals = function (other) {
    var tmp;
    if (other instanceof Failure) {
      tmp = equals(this.ol_1, other.ol_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Failure).hashCode = function () {
    return hashCode(this.ol_1);
  };
  protoOf(Failure).toString = function () {
    return 'Failure(' + this.ol_1 + ')';
  };
  function createFailure(exception) {
    return new Failure(exception);
  }
  function throwOnFailure(_this__u8e3s4) {
    var tmp = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
    if (tmp instanceof Failure)
      throw _Result___get_value__impl__bjfvqg(_this__u8e3s4).ol_1;
  }
  function NotImplementedError(message) {
    message = message === VOID ? 'An operation is not implemented.' : message;
    Error_init_$Init$_0(message, this);
    captureStack(this, NotImplementedError);
  }
  function Pair(first, second) {
    this.ee_1 = first;
    this.fe_1 = second;
  }
  protoOf(Pair).toString = function () {
    return '(' + this.ee_1 + ', ' + this.fe_1 + ')';
  };
  protoOf(Pair).ge = function () {
    return this.ee_1;
  };
  protoOf(Pair).he = function () {
    return this.fe_1;
  };
  protoOf(Pair).hashCode = function () {
    var result = this.ee_1 == null ? 0 : hashCode(this.ee_1);
    result = imul(result, 31) + (this.fe_1 == null ? 0 : hashCode(this.fe_1)) | 0;
    return result;
  };
  protoOf(Pair).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Pair))
      return false;
    var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();
    if (!equals(this.ee_1, tmp0_other_with_cast.ee_1))
      return false;
    if (!equals(this.fe_1, tmp0_other_with_cast.fe_1))
      return false;
    return true;
  };
  function Triple(first, second, third) {
    this.pl_1 = first;
    this.ql_1 = second;
    this.rl_1 = third;
  }
  protoOf(Triple).toString = function () {
    return '(' + this.pl_1 + ', ' + this.ql_1 + ', ' + this.rl_1 + ')';
  };
  protoOf(Triple).ge = function () {
    return this.pl_1;
  };
  protoOf(Triple).he = function () {
    return this.ql_1;
  };
  protoOf(Triple).sl = function () {
    return this.rl_1;
  };
  protoOf(Triple).hashCode = function () {
    var result = this.pl_1 == null ? 0 : hashCode(this.pl_1);
    result = imul(result, 31) + (this.ql_1 == null ? 0 : hashCode(this.ql_1)) | 0;
    result = imul(result, 31) + (this.rl_1 == null ? 0 : hashCode(this.rl_1)) | 0;
    return result;
  };
  protoOf(Triple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Triple))
      return false;
    var tmp0_other_with_cast = other instanceof Triple ? other : THROW_CCE();
    if (!equals(this.pl_1, tmp0_other_with_cast.pl_1))
      return false;
    if (!equals(this.ql_1, tmp0_other_with_cast.ql_1))
      return false;
    if (!equals(this.rl_1, tmp0_other_with_cast.rl_1))
      return false;
    return true;
  };
  function to(_this__u8e3s4, that) {
    return new Pair(_this__u8e3s4, that);
  }
  function _UByte___get_data__impl__jof9qr($this) {
    return $this;
  }
  function UByte() {
  }
  function _UInt___init__impl__l7qpdl(data) {
    return data;
  }
  function _UInt___get_data__impl__f0vqqw($this) {
    return $this;
  }
  function Companion_16() {
    Companion_instance_16 = this;
    this.tl_1 = _UInt___init__impl__l7qpdl(0);
    this.ul_1 = _UInt___init__impl__l7qpdl(-1);
    this.vl_1 = 4;
    this.wl_1 = 32;
  }
  var Companion_instance_16;
  function Companion_getInstance_16() {
    if (Companion_instance_16 == null)
      new Companion_16();
    return Companion_instance_16;
  }
  function UInt__compareTo_impl_yacclj($this, other) {
    return uintCompare(_UInt___get_data__impl__f0vqqw($this), _UInt___get_data__impl__f0vqqw(other));
  }
  function UInt__compareTo_impl_yacclj_0($this, other) {
    return UInt__compareTo_impl_yacclj($this.xl_1, other instanceof UInt ? other.xl_1 : THROW_CCE());
  }
  function UInt__toString_impl_dbgl21($this) {
    // Inline function 'kotlin.UInt.toLong' call
    return toLong(_UInt___get_data__impl__f0vqqw($this)).d3(new Long(-1, 0)).toString();
  }
  function UInt__hashCode_impl_z2mhuw($this) {
    return $this;
  }
  function UInt__equals_impl_ffdoxg($this, other) {
    if (!(other instanceof UInt))
      return false;
    if (!($this === (other instanceof UInt ? other.xl_1 : THROW_CCE())))
      return false;
    return true;
  }
  function UInt(data) {
    Companion_getInstance_16();
    this.xl_1 = data;
  }
  protoOf(UInt).yl = function (other) {
    return UInt__compareTo_impl_yacclj(this.xl_1, other);
  };
  protoOf(UInt).d = function (other) {
    return UInt__compareTo_impl_yacclj_0(this, other);
  };
  protoOf(UInt).toString = function () {
    return UInt__toString_impl_dbgl21(this.xl_1);
  };
  protoOf(UInt).hashCode = function () {
    return UInt__hashCode_impl_z2mhuw(this.xl_1);
  };
  protoOf(UInt).equals = function (other) {
    return UInt__equals_impl_ffdoxg(this.xl_1, other);
  };
  function _UIntArray___init__impl__ghjpc6(storage) {
    return storage;
  }
  function _UIntArray___get_storage__impl__92a0v0($this) {
    return $this;
  }
  function _UIntArray___init__impl__ghjpc6_0(size) {
    return _UIntArray___init__impl__ghjpc6(new Int32Array(size));
  }
  function UIntArray__get_impl_gp5kza($this, index) {
    // Inline function 'kotlin.toUInt' call
    var this_0 = _UIntArray___get_storage__impl__92a0v0($this)[index];
    return _UInt___init__impl__l7qpdl(this_0);
  }
  function UIntArray__set_impl_7f2zu2($this, index, value) {
    var tmp = _UIntArray___get_storage__impl__92a0v0($this);
    // Inline function 'kotlin.UInt.toInt' call
    tmp[index] = _UInt___get_data__impl__f0vqqw(value);
  }
  function _UIntArray___get_size__impl__r6l8ci($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length;
  }
  function UIntArray__iterator_impl_tkdv7k($this) {
    return new Iterator(_UIntArray___get_storage__impl__92a0v0($this));
  }
  function Iterator(array) {
    this.zl_1 = array;
    this.am_1 = 0;
  }
  protoOf(Iterator).i = function () {
    return this.am_1 < this.zl_1.length;
  };
  protoOf(Iterator).bm = function () {
    var tmp;
    if (this.am_1 < this.zl_1.length) {
      // Inline function 'kotlin.toUInt' call
      var tmp1 = this.am_1;
      this.am_1 = tmp1 + 1 | 0;
      var this_0 = this.zl_1[tmp1];
      tmp = _UInt___init__impl__l7qpdl(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.am_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator).j = function () {
    return new UInt(this.bm());
  };
  function UIntArray__contains_impl_b16rzj($this, element) {
    var tmp = !(new UInt(element) == null) ? new UInt(element) : THROW_CCE();
    if (!(tmp instanceof UInt))
      return false;
    var tmp_0 = _UIntArray___get_storage__impl__92a0v0($this);
    // Inline function 'kotlin.UInt.toInt' call
    var tmp$ret$0 = _UInt___get_data__impl__f0vqqw(element);
    return contains_1(tmp_0, tmp$ret$0);
  }
  function UIntArray__contains_impl_b16rzj_0($this, element) {
    if (!(element instanceof UInt))
      return false;
    return UIntArray__contains_impl_b16rzj($this.cm_1, element instanceof UInt ? element.xl_1 : THROW_CCE());
  }
  function UIntArray__containsAll_impl_414g22($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.UIntArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof UInt) {
          var tmp_1 = _UIntArray___get_storage__impl__92a0v0($this);
          // Inline function 'kotlin.UInt.toInt' call
          var this_1 = element.xl_1;
          var tmp$ret$1 = _UInt___get_data__impl__f0vqqw(this_1);
          tmp_0 = contains_1(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function UIntArray__containsAll_impl_414g22_0($this, elements) {
    return UIntArray__containsAll_impl_414g22($this.cm_1, elements);
  }
  function UIntArray__isEmpty_impl_vd8j4n($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length === 0;
  }
  function UIntArray__toString_impl_3zy802($this) {
    return 'UIntArray(storage=' + toString_1($this) + ')';
  }
  function UIntArray__hashCode_impl_hr7ost($this) {
    return hashCode($this);
  }
  function UIntArray__equals_impl_flcmof($this, other) {
    if (!(other instanceof UIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof UIntArray ? other.cm_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function UIntArray(storage) {
    this.cm_1 = storage;
  }
  protoOf(UIntArray).k = function () {
    return _UIntArray___get_size__impl__r6l8ci(this.cm_1);
  };
  protoOf(UIntArray).h = function () {
    return UIntArray__iterator_impl_tkdv7k(this.cm_1);
  };
  protoOf(UIntArray).dm = function (element) {
    return UIntArray__contains_impl_b16rzj(this.cm_1, element);
  };
  protoOf(UIntArray).f1 = function (element) {
    return UIntArray__contains_impl_b16rzj_0(this, element);
  };
  protoOf(UIntArray).em = function (elements) {
    return UIntArray__containsAll_impl_414g22(this.cm_1, elements);
  };
  protoOf(UIntArray).b2 = function (elements) {
    return UIntArray__containsAll_impl_414g22_0(this, elements);
  };
  protoOf(UIntArray).l = function () {
    return UIntArray__isEmpty_impl_vd8j4n(this.cm_1);
  };
  protoOf(UIntArray).toString = function () {
    return UIntArray__toString_impl_3zy802(this.cm_1);
  };
  protoOf(UIntArray).hashCode = function () {
    return UIntArray__hashCode_impl_hr7ost(this.cm_1);
  };
  protoOf(UIntArray).equals = function (other) {
    return UIntArray__equals_impl_flcmof(this.cm_1, other);
  };
  function _ULong___init__impl__c78o9k(data) {
    return data;
  }
  function _ULong___get_data__impl__fggpzb($this) {
    return $this;
  }
  function Companion_17() {
    Companion_instance_17 = this;
    this.fm_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
    this.gm_1 = _ULong___init__impl__c78o9k(new Long(-1, -1));
    this.hm_1 = 8;
    this.im_1 = 64;
  }
  var Companion_instance_17;
  function Companion_getInstance_17() {
    if (Companion_instance_17 == null)
      new Companion_17();
    return Companion_instance_17;
  }
  function ULong__compareTo_impl_38i7tu($this, other) {
    return ulongCompare(_ULong___get_data__impl__fggpzb($this), _ULong___get_data__impl__fggpzb(other));
  }
  function ULong__compareTo_impl_38i7tu_0($this, other) {
    return ULong__compareTo_impl_38i7tu($this.o1_1, other instanceof ULong ? other.o1_1 : THROW_CCE());
  }
  function ULong__toString_impl_f9au7k($this) {
    return ulongToString(_ULong___get_data__impl__fggpzb($this));
  }
  function ULong__hashCode_impl_6hv2lb($this) {
    return $this.hashCode();
  }
  function ULong__equals_impl_o0gnyb($this, other) {
    if (!(other instanceof ULong))
      return false;
    var tmp0_other_with_cast = other instanceof ULong ? other.o1_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULong(data) {
    Companion_getInstance_17();
    this.o1_1 = data;
  }
  protoOf(ULong).jm = function (other) {
    return ULong__compareTo_impl_38i7tu(this.o1_1, other);
  };
  protoOf(ULong).d = function (other) {
    return ULong__compareTo_impl_38i7tu_0(this, other);
  };
  protoOf(ULong).toString = function () {
    return ULong__toString_impl_f9au7k(this.o1_1);
  };
  protoOf(ULong).hashCode = function () {
    return ULong__hashCode_impl_6hv2lb(this.o1_1);
  };
  protoOf(ULong).equals = function (other) {
    return ULong__equals_impl_o0gnyb(this.o1_1, other);
  };
  function _ULongArray___init__impl__twm1l3(storage) {
    return storage;
  }
  function _ULongArray___get_storage__impl__28e64j($this) {
    return $this;
  }
  function _ULongArray___init__impl__twm1l3_0(size) {
    return _ULongArray___init__impl__twm1l3(longArray(size));
  }
  function ULongArray__get_impl_pr71q9($this, index) {
    // Inline function 'kotlin.toULong' call
    var this_0 = _ULongArray___get_storage__impl__28e64j($this)[index];
    return _ULong___init__impl__c78o9k(this_0);
  }
  function ULongArray__set_impl_z19mvh($this, index, value) {
    var tmp = _ULongArray___get_storage__impl__28e64j($this);
    // Inline function 'kotlin.ULong.toLong' call
    tmp[index] = _ULong___get_data__impl__fggpzb(value);
  }
  function _ULongArray___get_size__impl__ju6dtr($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length;
  }
  function ULongArray__iterator_impl_cq4d2h($this) {
    return new Iterator_0(_ULongArray___get_storage__impl__28e64j($this));
  }
  function Iterator_0(array) {
    this.km_1 = array;
    this.lm_1 = 0;
  }
  protoOf(Iterator_0).i = function () {
    return this.lm_1 < this.km_1.length;
  };
  protoOf(Iterator_0).mm = function () {
    var tmp;
    if (this.lm_1 < this.km_1.length) {
      // Inline function 'kotlin.toULong' call
      var tmp1 = this.lm_1;
      this.lm_1 = tmp1 + 1 | 0;
      var this_0 = this.km_1[tmp1];
      tmp = _ULong___init__impl__c78o9k(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.lm_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator_0).j = function () {
    return new ULong(this.mm());
  };
  function ULongArray__contains_impl_v9bgai($this, element) {
    var tmp = !(new ULong(element) == null) ? new ULong(element) : THROW_CCE();
    if (!(tmp instanceof ULong))
      return false;
    var tmp_0 = _ULongArray___get_storage__impl__28e64j($this);
    // Inline function 'kotlin.ULong.toLong' call
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(element);
    return contains_0(tmp_0, tmp$ret$0);
  }
  function ULongArray__contains_impl_v9bgai_0($this, element) {
    if (!(element instanceof ULong))
      return false;
    return ULongArray__contains_impl_v9bgai($this.nm_1, element instanceof ULong ? element.o1_1 : THROW_CCE());
  }
  function ULongArray__containsAll_impl_xx8ztf($this, elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = isInterface(elements, Collection) ? elements : THROW_CCE();
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.l();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlin.ULongArray.containsAll.<anonymous>' call
        var tmp_0;
        if (element instanceof ULong) {
          var tmp_1 = _ULongArray___get_storage__impl__28e64j($this);
          // Inline function 'kotlin.ULong.toLong' call
          var this_1 = element.o1_1;
          var tmp$ret$1 = _ULong___get_data__impl__fggpzb(this_1);
          tmp_0 = contains_0(tmp_1, tmp$ret$1);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function ULongArray__containsAll_impl_xx8ztf_0($this, elements) {
    return ULongArray__containsAll_impl_xx8ztf($this.nm_1, elements);
  }
  function ULongArray__isEmpty_impl_c3yngu($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length === 0;
  }
  function ULongArray__toString_impl_wqk1p5($this) {
    return 'ULongArray(storage=' + toString_1($this) + ')';
  }
  function ULongArray__hashCode_impl_aze4wa($this) {
    return hashCode($this);
  }
  function ULongArray__equals_impl_vwitwa($this, other) {
    if (!(other instanceof ULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof ULongArray ? other.nm_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULongArray(storage) {
    this.nm_1 = storage;
  }
  protoOf(ULongArray).k = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.nm_1);
  };
  protoOf(ULongArray).h = function () {
    return ULongArray__iterator_impl_cq4d2h(this.nm_1);
  };
  protoOf(ULongArray).o3 = function (element) {
    return ULongArray__contains_impl_v9bgai(this.nm_1, element);
  };
  protoOf(ULongArray).f1 = function (element) {
    return ULongArray__contains_impl_v9bgai_0(this, element);
  };
  protoOf(ULongArray).om = function (elements) {
    return ULongArray__containsAll_impl_xx8ztf(this.nm_1, elements);
  };
  protoOf(ULongArray).b2 = function (elements) {
    return ULongArray__containsAll_impl_xx8ztf_0(this, elements);
  };
  protoOf(ULongArray).l = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.nm_1);
  };
  protoOf(ULongArray).toString = function () {
    return ULongArray__toString_impl_wqk1p5(this.nm_1);
  };
  protoOf(ULongArray).hashCode = function () {
    return ULongArray__hashCode_impl_aze4wa(this.nm_1);
  };
  protoOf(ULongArray).equals = function (other) {
    return ULongArray__equals_impl_vwitwa(this.nm_1, other);
  };
  function Companion_18() {
    Companion_instance_18 = this;
    this.pm_1 = new ULongRange(_ULong___init__impl__c78o9k(new Long(-1, -1)), _ULong___init__impl__c78o9k(new Long(0, 0)));
  }
  var Companion_instance_18;
  function Companion_getInstance_18() {
    if (Companion_instance_18 == null)
      new Companion_18();
    return Companion_instance_18;
  }
  function ULongRange(start, endInclusive) {
    Companion_getInstance_18();
    ULongProgression.call(this, start, endInclusive, new Long(1, 0));
  }
  protoOf(ULongRange).l = function () {
    // Inline function 'kotlin.ULong.compareTo' call
    var this_0 = this.pj_1;
    var other = this.qj_1;
    return ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) > 0;
  };
  protoOf(ULongRange).equals = function (other) {
    var tmp;
    if (other instanceof ULongRange) {
      tmp = (this.l() ? other.l() : false) ? true : equals(this.pj_1, other.pj_1) ? equals(this.qj_1, other.qj_1) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(ULongRange).hashCode = function () {
    var tmp;
    if (this.l()) {
      tmp = -1;
    } else {
      // Inline function 'kotlin.ULong.toInt' call
      // Inline function 'kotlin.ULong.xor' call
      var this_0 = this.pj_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_1 = this.pj_1;
      var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).c3(32));
      var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).f3(_ULong___get_data__impl__fggpzb(other)));
      var tmp$ret$2 = _ULong___get_data__impl__fggpzb(this_2).g3();
      var tmp_0 = imul(31, tmp$ret$2);
      // Inline function 'kotlin.ULong.toInt' call
      // Inline function 'kotlin.ULong.xor' call
      var this_3 = this.qj_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_4 = this.qj_1;
      var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(32));
      var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).f3(_ULong___get_data__impl__fggpzb(other_0)));
      tmp = tmp_0 + _ULong___get_data__impl__fggpzb(this_5).g3() | 0;
    }
    return tmp;
  };
  protoOf(ULongRange).toString = function () {
    return '' + new ULong(this.pj_1) + '..' + new ULong(this.qj_1);
  };
  function Companion_19() {
  }
  var Companion_instance_19;
  function Companion_getInstance_19() {
    return Companion_instance_19;
  }
  function ULongProgression(start, endInclusive, step) {
    if (step.equals(new Long(0, 0)))
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step.equals(new Long(0, -2147483648)))
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Long.MIN_VALUE to avoid overflow on negation.');
    this.pj_1 = start;
    this.qj_1 = getProgressionLastElement_0(start, endInclusive, step);
    this.rj_1 = step;
  }
  protoOf(ULongProgression).h = function () {
    return new ULongProgressionIterator(this.pj_1, this.qj_1, this.rj_1);
  };
  protoOf(ULongProgression).l = function () {
    var tmp;
    if (this.rj_1.z(new Long(0, 0)) > 0) {
      // Inline function 'kotlin.ULong.compareTo' call
      var this_0 = this.pj_1;
      var other = this.qj_1;
      tmp = ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) > 0;
    } else {
      // Inline function 'kotlin.ULong.compareTo' call
      var this_1 = this.pj_1;
      var other_0 = this.qj_1;
      tmp = ulongCompare(_ULong___get_data__impl__fggpzb(this_1), _ULong___get_data__impl__fggpzb(other_0)) < 0;
    }
    return tmp;
  };
  protoOf(ULongProgression).equals = function (other) {
    var tmp;
    if (other instanceof ULongProgression) {
      tmp = (this.l() ? other.l() : false) ? true : (equals(this.pj_1, other.pj_1) ? equals(this.qj_1, other.qj_1) : false) ? this.rj_1.equals(other.rj_1) : false;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(ULongProgression).hashCode = function () {
    var tmp;
    if (this.l()) {
      tmp = -1;
    } else {
      // Inline function 'kotlin.ULong.toInt' call
      // Inline function 'kotlin.ULong.xor' call
      var this_0 = this.pj_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_1 = this.pj_1;
      var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).c3(32));
      var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).f3(_ULong___get_data__impl__fggpzb(other)));
      var tmp$ret$2 = _ULong___get_data__impl__fggpzb(this_2).g3();
      var tmp_0 = imul(31, tmp$ret$2);
      // Inline function 'kotlin.ULong.toInt' call
      // Inline function 'kotlin.ULong.xor' call
      var this_3 = this.qj_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_4 = this.qj_1;
      var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).c3(32));
      var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).f3(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp$ret$5 = _ULong___get_data__impl__fggpzb(this_5).g3();
      tmp = imul(31, tmp_0 + tmp$ret$5 | 0) + this.rj_1.f3(this.rj_1.c3(32)).g3() | 0;
    }
    return tmp;
  };
  protoOf(ULongProgression).toString = function () {
    return this.rj_1.z(new Long(0, 0)) > 0 ? '' + new ULong(this.pj_1) + '..' + new ULong(this.qj_1) + ' step ' + this.rj_1.toString() : '' + new ULong(this.pj_1) + ' downTo ' + new ULong(this.qj_1) + ' step ' + this.rj_1.y2().toString();
  };
  function ULongProgressionIterator(first, last, step) {
    this.qm_1 = last;
    var tmp = this;
    var tmp_0;
    if (step.z(new Long(0, 0)) > 0) {
      // Inline function 'kotlin.ULong.compareTo' call
      tmp_0 = ulongCompare(_ULong___get_data__impl__fggpzb(first), _ULong___get_data__impl__fggpzb(last)) <= 0;
    } else {
      // Inline function 'kotlin.ULong.compareTo' call
      tmp_0 = ulongCompare(_ULong___get_data__impl__fggpzb(first), _ULong___get_data__impl__fggpzb(last)) >= 0;
    }
    tmp.rm_1 = tmp_0;
    var tmp_1 = this;
    // Inline function 'kotlin.toULong' call
    tmp_1.sm_1 = _ULong___init__impl__c78o9k(step);
    this.tm_1 = this.rm_1 ? first : this.qm_1;
  }
  protoOf(ULongProgressionIterator).i = function () {
    return this.rm_1;
  };
  protoOf(ULongProgressionIterator).mm = function () {
    var value = this.tm_1;
    if (equals(value, this.qm_1)) {
      if (!this.rm_1)
        throw NoSuchElementException_init_$Create$();
      this.rm_1 = false;
    } else {
      var tmp = this;
      // Inline function 'kotlin.ULong.plus' call
      var this_0 = this.tm_1;
      var other = this.sm_1;
      tmp.tm_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).r2(_ULong___get_data__impl__fggpzb(other)));
    }
    return value;
  };
  protoOf(ULongProgressionIterator).j = function () {
    return new ULong(this.mm());
  };
  function getProgressionLastElement_0(start, end, step) {
    var tmp;
    if (step.z(new Long(0, 0)) > 0) {
      var tmp_0;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(start), _ULong___get_data__impl__fggpzb(end)) >= 0) {
        tmp_0 = end;
      } else {
        // Inline function 'kotlin.ULong.minus' call
        // Inline function 'kotlin.toULong' call
        var tmp$ret$1 = _ULong___init__impl__c78o9k(step);
        var other = differenceModulo_0(end, start, tmp$ret$1);
        tmp_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(end).s2(_ULong___get_data__impl__fggpzb(other)));
      }
      tmp = tmp_0;
    } else if (step.z(new Long(0, 0)) < 0) {
      var tmp_1;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(start), _ULong___get_data__impl__fggpzb(end)) <= 0) {
        tmp_1 = end;
      } else {
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.toULong' call
        var this_0 = step.y2();
        var tmp$ret$4 = _ULong___init__impl__c78o9k(this_0);
        var other_0 = differenceModulo_0(start, end, tmp$ret$4);
        tmp_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(end).r2(_ULong___get_data__impl__fggpzb(other_0)));
      }
      tmp = tmp_1;
    } else {
      throw IllegalArgumentException_init_$Create$_0('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo_0(a, b, c) {
    // Inline function 'kotlin.ULong.rem' call
    var ac = ulongRemainder(a, c);
    // Inline function 'kotlin.ULong.rem' call
    var bc = ulongRemainder(b, c);
    var tmp;
    // Inline function 'kotlin.ULong.compareTo' call
    if (ulongCompare(_ULong___get_data__impl__fggpzb(ac), _ULong___get_data__impl__fggpzb(bc)) >= 0) {
      // Inline function 'kotlin.ULong.minus' call
      tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(ac).s2(_ULong___get_data__impl__fggpzb(bc)));
    } else {
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.ULong.minus' call
      var this_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(ac).s2(_ULong___get_data__impl__fggpzb(bc)));
      tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).r2(_ULong___get_data__impl__fggpzb(c)));
    }
    return tmp;
  }
  function _UShort___init__impl__jigrne(data) {
    return data;
  }
  function _UShort___get_data__impl__g0245($this) {
    return $this;
  }
  function UShort() {
  }
  function toString_4(_this__u8e3s4, radix) {
    // Inline function 'kotlin.ULong.toLong' call
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(_this__u8e3s4);
    return ulongToString_0(tmp$ret$0, checkRadix(radix));
  }
  function uintCompare(v1, v2) {
    return compareTo_0(v1 ^ -2147483648, v2 ^ -2147483648);
  }
  function uintDivide(v1, v2) {
    // Inline function 'kotlin.toUInt' call
    // Inline function 'kotlin.UInt.toLong' call
    var tmp = toLong(_UInt___get_data__impl__f0vqqw(v1)).d3(new Long(-1, 0));
    // Inline function 'kotlin.UInt.toLong' call
    var tmp$ret$1 = toLong(_UInt___get_data__impl__f0vqqw(v2)).d3(new Long(-1, 0));
    var this_0 = tmp.u2(tmp$ret$1);
    return _UInt___init__impl__l7qpdl(this_0.g3());
  }
  function uintRemainder(v1, v2) {
    // Inline function 'kotlin.toUInt' call
    // Inline function 'kotlin.UInt.toLong' call
    var tmp = toLong(_UInt___get_data__impl__f0vqqw(v1)).d3(new Long(-1, 0));
    // Inline function 'kotlin.UInt.toLong' call
    var tmp$ret$1 = toLong(_UInt___get_data__impl__f0vqqw(v2)).d3(new Long(-1, 0));
    var this_0 = tmp.v2(tmp$ret$1);
    return _UInt___init__impl__l7qpdl(this_0.g3());
  }
  function ulongCompare(v1, v2) {
    return v1.f3(new Long(0, -2147483648)).z(v2.f3(new Long(0, -2147483648)));
  }
  function ulongDivide(v1, v2) {
    // Inline function 'kotlin.ULong.toLong' call
    var dividend = _ULong___get_data__impl__fggpzb(v1);
    // Inline function 'kotlin.ULong.toLong' call
    var divisor = _ULong___get_data__impl__fggpzb(v2);
    if (divisor.z(new Long(0, 0)) < 0) {
      var tmp;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2)) < 0) {
        tmp = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        tmp = _ULong___init__impl__c78o9k(new Long(1, 0));
      }
      return tmp;
    }
    if (dividend.z(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.u2(divisor));
    }
    var quotient = dividend.c3(1).u2(divisor).a3(1);
    var rem = dividend.s2(quotient.t2(divisor));
    // Inline function 'kotlin.Long.plus' call
    var tmp_0;
    // Inline function 'kotlin.ULong.compareTo' call
    var this_0 = _ULong___init__impl__c78o9k(rem);
    var other = _ULong___init__impl__c78o9k(divisor);
    if (ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) >= 0) {
      tmp_0 = 1;
    } else {
      tmp_0 = 0;
    }
    var other_0 = tmp_0;
    var tmp$ret$4 = quotient.r2(toLong(other_0));
    return _ULong___init__impl__c78o9k(tmp$ret$4);
  }
  function ulongRemainder(v1, v2) {
    // Inline function 'kotlin.ULong.toLong' call
    var dividend = _ULong___get_data__impl__fggpzb(v1);
    // Inline function 'kotlin.ULong.toLong' call
    var divisor = _ULong___get_data__impl__fggpzb(v2);
    if (divisor.z(new Long(0, 0)) < 0) {
      var tmp;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2)) < 0) {
        tmp = v1;
      } else {
        // Inline function 'kotlin.ULong.minus' call
        tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(v1).s2(_ULong___get_data__impl__fggpzb(v2)));
      }
      return tmp;
    }
    if (dividend.z(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.v2(divisor));
    }
    var quotient = dividend.c3(1).u2(divisor).a3(1);
    var rem = dividend.s2(quotient.t2(divisor));
    var tmp_0;
    // Inline function 'kotlin.ULong.compareTo' call
    var this_0 = _ULong___init__impl__c78o9k(rem);
    var other = _ULong___init__impl__c78o9k(divisor);
    if (ulongCompare(_ULong___get_data__impl__fggpzb(this_0), _ULong___get_data__impl__fggpzb(other)) >= 0) {
      tmp_0 = divisor;
    } else {
      tmp_0 = new Long(0, 0);
    }
    return _ULong___init__impl__c78o9k(rem.s2(tmp_0));
  }
  function ulongToString(v) {
    return ulongToString_0(v, 10);
  }
  function ulongToString_0(v, base) {
    if (v.z(new Long(0, 0)) >= 0)
      return toString_2(v, base);
    // Inline function 'kotlin.Long.div' call
    var quotient = v.c3(1).u2(toLong(base)).a3(1);
    // Inline function 'kotlin.Long.times' call
    var tmp$ret$1 = quotient.t2(toLong(base));
    var rem = v.s2(tmp$ret$1);
    if (rem.z(toLong(base)) >= 0) {
      // Inline function 'kotlin.Long.minus' call
      rem = rem.s2(toLong(base));
      // Inline function 'kotlin.Long.plus' call
      quotient = quotient.r2(toLong(1));
    }
    return toString_2(quotient, base) + toString_2(rem, base);
  }
  //region block: post-declaration
  protoOf(InternalHashMap).y5 = containsAllEntries;
  protoOf(CombinedContext).ej = plus;
  protoOf(AbstractCoroutineContextElement).o8 = get;
  protoOf(AbstractCoroutineContextElement).dj = fold;
  protoOf(AbstractCoroutineContextElement).cj = minusKey;
  protoOf(AbstractCoroutineContextElement).ej = plus;
  protoOf(ValueTimeMark).hl = compareTo;
  //endregion
  //region block: init
  Unit_instance = new Unit();
  Companion_instance_0 = new Companion_0();
  _stableSortingIsSupported = null;
  Companion_instance_3 = new Companion_3();
  CompletedContinuation_instance = new CompletedContinuation();
  DateNowTimeSource_instance = new DateNowTimeSource();
  Companion_instance_5 = new Companion_5();
  Companion_instance_6 = new Companion_6();
  Companion_instance_7 = new Companion_7();
  EmptyIterator_instance = new EmptyIterator();
  EmptySequence_instance = new EmptySequence();
  NaturalOrderComparator_instance = new NaturalOrderComparator();
  Key_instance = new Key();
  Companion_instance_12 = new Companion_12();
  Companion_instance_13 = new Companion_13();
  Monotonic_instance = new Monotonic();
  UNINITIALIZED_VALUE_instance = new UNINITIALIZED_VALUE();
  Companion_instance_15 = new Companion_15();
  Companion_instance_19 = new Companion_19();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = getKClassFromExpression;
  _.$_$.b = getKClass;
  _.$_$.c = VOID;
  _.$_$.d = ArrayDeque_init_$Create$;
  _.$_$.e = ArrayList_init_$Create$_0;
  _.$_$.f = ArrayList_init_$Create$;
  _.$_$.g = HashSet_init_$Create$_0;
  _.$_$.h = LinkedHashMap_init_$Create$_0;
  _.$_$.i = LinkedHashMap_init_$Create$;
  _.$_$.j = LinkedHashMap_init_$Create$_1;
  _.$_$.k = LinkedHashSet_init_$Create$;
  _.$_$.l = CancellationException_init_$Init$_0;
  _.$_$.m = Regex_init_$Create$;
  _.$_$.n = StringBuilder_init_$Create$_1;
  _.$_$.o = ArithmeticException_init_$Create$_0;
  _.$_$.p = Error_init_$Init$_1;
  _.$_$.q = Exception_init_$Create$_0;
  _.$_$.r = IllegalArgumentException_init_$Create$_0;
  _.$_$.s = IllegalStateException_init_$Create$_0;
  _.$_$.t = IllegalStateException_init_$Create$_1;
  _.$_$.u = IndexOutOfBoundsException_init_$Create$_0;
  _.$_$.v = NoSuchElementException_init_$Create$;
  _.$_$.w = NoSuchElementException_init_$Create$_0;
  _.$_$.x = NumberFormatException_init_$Create$_0;
  _.$_$.y = RuntimeException_init_$Init$_0;
  _.$_$.z = RuntimeException_init_$Create$_0;
  _.$_$.a1 = RuntimeException_init_$Init$_1;
  _.$_$.b1 = RuntimeException_init_$Create$_1;
  _.$_$.c1 = UnsupportedOperationException_init_$Create$;
  _.$_$.d1 = UnsupportedOperationException_init_$Create$_0;
  _.$_$.e1 = ValueTimeMark__elapsedNow_impl_eonqvs;
  _.$_$.f1 = _Char___init__impl__6a9atx;
  _.$_$.g1 = Char__minus_impl_a2frrh;
  _.$_$.h1 = Char__minus_impl_a2frrh_0;
  _.$_$.i1 = Char__rangeTo_impl_tkncvp;
  _.$_$.j1 = Char__toInt_impl_vasixd;
  _.$_$.k1 = toString;
  _.$_$.l1 = _Result___init__impl__xyqfz8;
  _.$_$.m1 = Result__exceptionOrNull_impl_p6xea9;
  _.$_$.n1 = _Result___get_value__impl__bjfvqg;
  _.$_$.o1 = _UByte___get_data__impl__jof9qr;
  _.$_$.p1 = _UInt___init__impl__l7qpdl;
  _.$_$.q1 = _UInt___get_data__impl__f0vqqw;
  _.$_$.r1 = _UIntArray___init__impl__ghjpc6_0;
  _.$_$.s1 = _UIntArray___init__impl__ghjpc6;
  _.$_$.t1 = UIntArray__get_impl_gp5kza;
  _.$_$.u1 = UIntArray__hashCode_impl_hr7ost;
  _.$_$.v1 = UIntArray__isEmpty_impl_vd8j4n;
  _.$_$.w1 = UIntArray__iterator_impl_tkdv7k;
  _.$_$.x1 = UIntArray__set_impl_7f2zu2;
  _.$_$.y1 = _UIntArray___get_size__impl__r6l8ci;
  _.$_$.z1 = _UIntArray___get_storage__impl__92a0v0;
  _.$_$.a2 = _ULong___init__impl__c78o9k;
  _.$_$.b2 = _ULong___get_data__impl__fggpzb;
  _.$_$.c2 = ULong__hashCode_impl_6hv2lb;
  _.$_$.d2 = _ULongArray___init__impl__twm1l3_0;
  _.$_$.e2 = _ULongArray___init__impl__twm1l3;
  _.$_$.f2 = ULongArray__get_impl_pr71q9;
  _.$_$.g2 = ULongArray__hashCode_impl_aze4wa;
  _.$_$.h2 = ULongArray__isEmpty_impl_c3yngu;
  _.$_$.i2 = ULongArray__iterator_impl_cq4d2h;
  _.$_$.j2 = ULongArray__set_impl_z19mvh;
  _.$_$.k2 = _ULongArray___get_size__impl__ju6dtr;
  _.$_$.l2 = _ULongArray___get_storage__impl__28e64j;
  _.$_$.m2 = _UShort___get_data__impl__g0245;
  _.$_$.n2 = Key_instance;
  _.$_$.o2 = EmptyCoroutineContext_getInstance;
  _.$_$.p2 = Default_getInstance;
  _.$_$.q2 = PrimitiveClasses_getInstance;
  _.$_$.r2 = Monotonic_instance;
  _.$_$.s2 = Companion_instance_15;
  _.$_$.t2 = Unit_instance;
  _.$_$.u2 = ArrayList;
  _.$_$.v2 = Collection;
  _.$_$.w2 = List;
  _.$_$.x2 = Map_0;
  _.$_$.y2 = MutableIterable;
  _.$_$.z2 = Set;
  _.$_$.a3 = addAll;
  _.$_$.b3 = addAll_1;
  _.$_$.c3 = arrayCopy;
  _.$_$.d3 = asSequence_0;
  _.$_$.e3 = checkCountOverflow;
  _.$_$.f3 = checkIndexOverflow;
  _.$_$.g3 = chunked;
  _.$_$.h3 = collectionSizeOrDefault;
  _.$_$.i3 = contentEquals;
  _.$_$.j3 = copyOfRange;
  _.$_$.k3 = copyOfRange_0;
  _.$_$.l3 = copyOf;
  _.$_$.m3 = copyToArray;
  _.$_$.n3 = distinct;
  _.$_$.o3 = dropLast;
  _.$_$.p3 = drop;
  _.$_$.q3 = emptyList;
  _.$_$.r3 = emptyMap;
  _.$_$.s3 = emptySet;
  _.$_$.t3 = firstOrNull_0;
  _.$_$.u3 = firstOrNull;
  _.$_$.v3 = first;
  _.$_$.w3 = first_0;
  _.$_$.x3 = flatten;
  _.$_$.y3 = getOrNull;
  _.$_$.z3 = get_indices;
  _.$_$.a4 = intersect;
  _.$_$.b4 = joinToString_0;
  _.$_$.c4 = last;
  _.$_$.d4 = listOf;
  _.$_$.e4 = listOf_0;
  _.$_$.f4 = mapCapacity;
  _.$_$.g4 = mapOf_0;
  _.$_$.h4 = minus;
  _.$_$.i4 = minus_0;
  _.$_$.j4 = minus_1;
  _.$_$.k4 = mutableSetOf;
  _.$_$.l4 = plus_7;
  _.$_$.m4 = plus_1;
  _.$_$.n4 = plus_5;
  _.$_$.o4 = plus_6;
  _.$_$.p4 = plus_3;
  _.$_$.q4 = plus_0;
  _.$_$.r4 = plus_2;
  _.$_$.s4 = random;
  _.$_$.t4 = removeAll;
  _.$_$.u4 = removeFirstOrNull;
  _.$_$.v4 = retainAll;
  _.$_$.w4 = setOf;
  _.$_$.x4 = setOf_0;
  _.$_$.y4 = shuffled;
  _.$_$.z4 = slice;
  _.$_$.a5 = sortedWith;
  _.$_$.b5 = sorted;
  _.$_$.c5 = sum;
  _.$_$.d5 = takeLast;
  _.$_$.e5 = toBooleanArray;
  _.$_$.f5 = toDoubleArray_0;
  _.$_$.g5 = toDoubleArray;
  _.$_$.h5 = toIntArray;
  _.$_$.i5 = toList_0;
  _.$_$.j5 = toList;
  _.$_$.k5 = toMap_0;
  _.$_$.l5 = toMap_1;
  _.$_$.m5 = toMap;
  _.$_$.n5 = toMutableList_0;
  _.$_$.o5 = toMutableMap;
  _.$_$.p5 = toMutableSet;
  _.$_$.q5 = toSet_1;
  _.$_$.r5 = toSet_0;
  _.$_$.s5 = toSet;
  _.$_$.t5 = toULongArray;
  _.$_$.u5 = union;
  _.$_$.v5 = windowed;
  _.$_$.w5 = zip;
  _.$_$.x5 = compareBy;
  _.$_$.y5 = compareValues;
  _.$_$.z5 = CancellationException;
  _.$_$.a6 = get_COROUTINE_SUSPENDED;
  _.$_$.b6 = createCoroutineUnintercepted;
  _.$_$.c6 = intercepted;
  _.$_$.d6 = AbstractCoroutineContextElement;
  _.$_$.e6 = AbstractCoroutineContextKey;
  _.$_$.f6 = get_0;
  _.$_$.g6 = minusKey_0;
  _.$_$.h6 = ContinuationInterceptor;
  _.$_$.i6 = Continuation;
  _.$_$.j6 = fold;
  _.$_$.k6 = get;
  _.$_$.l6 = minusKey;
  _.$_$.m6 = Element;
  _.$_$.n6 = plus;
  _.$_$.o6 = CoroutineImpl;
  _.$_$.p6 = startCoroutine;
  _.$_$.q6 = println;
  _.$_$.r6 = anyToString;
  _.$_$.s6 = booleanArrayOf;
  _.$_$.t6 = booleanArray;
  _.$_$.u6 = captureStack;
  _.$_$.v6 = charArrayOf;
  _.$_$.w6 = charSequenceGet;
  _.$_$.x6 = charSequenceLength;
  _.$_$.y6 = classMeta;
  _.$_$.z6 = compareTo_0;
  _.$_$.a7 = defineProp;
  _.$_$.b7 = equals;
  _.$_$.c7 = fillArrayVal;
  _.$_$.d7 = getBooleanHashCode;
  _.$_$.e7 = getObjectHashCode;
  _.$_$.f7 = getPropertyCallableRef;
  _.$_$.g7 = getStringHashCode;
  _.$_$.h7 = hashCode;
  _.$_$.i7 = interfaceMeta;
  _.$_$.j7 = isCharSequence;
  _.$_$.k7 = isInterface;
  _.$_$.l7 = isNumber;
  _.$_$.m7 = longArrayOf;
  _.$_$.n7 = longArray;
  _.$_$.o7 = newThrowable;
  _.$_$.p7 = numberRangeToNumber;
  _.$_$.q7 = numberToDouble;
  _.$_$.r7 = numberToInt;
  _.$_$.s7 = numberToLong;
  _.$_$.t7 = objectCreate;
  _.$_$.u7 = objectMeta;
  _.$_$.v7 = protoOf;
  _.$_$.w7 = setMetadataFor;
  _.$_$.x7 = toLong;
  _.$_$.y7 = toString_1;
  _.$_$.z7 = abs;
  _.$_$.a8 = abs_0;
  _.$_$.b8 = Random_0;
  _.$_$.c8 = nextULong;
  _.$_$.d8 = ULongRange;
  _.$_$.e8 = coerceAtLeast;
  _.$_$.f8 = downTo;
  _.$_$.g8 = until;
  _.$_$.h8 = KClass;
  _.$_$.i8 = KProperty0;
  _.$_$.j8 = KProperty1;
  _.$_$.k8 = SequenceScope;
  _.$_$.l8 = any;
  _.$_$.m8 = distinct_0;
  _.$_$.n8 = filterIndexed;
  _.$_$.o8 = filterNot;
  _.$_$.p8 = filter;
  _.$_$.q8 = flatMap;
  _.$_$.r8 = generateSequence;
  _.$_$.s8 = map;
  _.$_$.t8 = plus_4;
  _.$_$.u8 = sequenceOf;
  _.$_$.v8 = sequence;
  _.$_$.w8 = shuffled_0;
  _.$_$.x8 = takeWhile;
  _.$_$.y8 = take_0;
  _.$_$.z8 = toSet_2;
  _.$_$.a9 = zip_0;
  _.$_$.b9 = contains_4;
  _.$_$.c9 = contains_3;
  _.$_$.d9 = dropLast_0;
  _.$_$.e9 = drop_0;
  _.$_$.f9 = first_1;
  _.$_$.g9 = indexOf_2;
  _.$_$.h9 = isBlank;
  _.$_$.i9 = get_lastIndex_1;
  _.$_$.j9 = last_1;
  _.$_$.k9 = lines;
  _.$_$.l9 = padEnd;
  _.$_$.m9 = padStart;
  _.$_$.n9 = replaceFirst;
  _.$_$.o9 = replace;
  _.$_$.p9 = replace_0;
  _.$_$.q9 = reversed;
  _.$_$.r9 = split;
  _.$_$.s9 = split_0;
  _.$_$.t9 = substringAfter;
  _.$_$.u9 = substringBefore;
  _.$_$.v9 = substring;
  _.$_$.w9 = toCharArray;
  _.$_$.x9 = toLong_0;
  _.$_$.y9 = toString_2;
  _.$_$.z9 = toString_4;
  _.$_$.aa = trim;
  _.$_$.ba = Duration;
  _.$_$.ca = TimedValue;
  _.$_$.da = Char;
  _.$_$.ea = Comparable;
  _.$_$.fa = Comparator;
  _.$_$.ga = Enum;
  _.$_$.ha = Error_0;
  _.$_$.ia = Exception;
  _.$_$.ja = Long;
  _.$_$.ka = NotImplementedError;
  _.$_$.la = Pair;
  _.$_$.ma = RuntimeException;
  _.$_$.na = THROW_CCE;
  _.$_$.oa = Triple;
  _.$_$.pa = UByte;
  _.$_$.qa = UIntArray;
  _.$_$.ra = UInt;
  _.$_$.sa = ULongArray;
  _.$_$.ta = ULong;
  _.$_$.ua = UShort;
  _.$_$.va = UnsupportedOperationException;
  _.$_$.wa = addSuppressed;
  _.$_$.xa = createFailure;
  _.$_$.ya = ensureNotNull;
  _.$_$.za = lazy;
  _.$_$.ab = noWhenBranchMatchedException;
  _.$_$.bb = stackTraceToString;
  _.$_$.cb = throwUninitializedPropertyAccessException;
  _.$_$.db = toString_0;
  _.$_$.eb = to;
  _.$_$.fb = uintCompare;
  _.$_$.gb = uintDivide;
  _.$_$.hb = uintRemainder;
  _.$_$.ib = ulongCompare;
  _.$_$.jb = ulongDivide;
  _.$_$.kb = ulongRemainder;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlinx-atomicfu.js":
/*!************************************!*\
  !*** ./kotlin/kotlinx-atomicfu.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var protoOf = kotlin_kotlin.$_$.v7;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var classMeta = kotlin_kotlin.$_$.y6;
  var toString = kotlin_kotlin.$_$.db;
  var VOID = kotlin_kotlin.$_$.c;
  //endregion
  //region block: pre-declaration
  setMetadataFor(atomicfu$TraceBase, 'TraceBase', classMeta);
  setMetadataFor(None, 'None', objectMeta, atomicfu$TraceBase);
  setMetadataFor(AtomicRef, 'AtomicRef', classMeta);
  setMetadataFor(AtomicBoolean, 'AtomicBoolean', classMeta);
  setMetadataFor(AtomicInt, 'AtomicInt', classMeta);
  //endregion
  function None() {
    None_instance = this;
    atomicfu$TraceBase.call(this);
  }
  var None_instance;
  function None_getInstance() {
    if (None_instance == null)
      new None();
    return None_instance;
  }
  function atomicfu$TraceBase() {
  }
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$1 = function (event) {
  };
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$2 = function (event1, event2) {
  };
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$3 = function (event1, event2, event3) {
  };
  protoOf(atomicfu$TraceBase).atomicfu$Trace$append$4 = function (event1, event2, event3, event4) {
  };
  function AtomicRef(value) {
    this.kotlinx$atomicfu$value = value;
  }
  protoOf(AtomicRef).f19 = function (_set____db54di) {
    this.kotlinx$atomicfu$value = _set____db54di;
  };
  protoOf(AtomicRef).g19 = function () {
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicRef).atomicfu$compareAndSet = function (expect, update) {
    if (!(this.kotlinx$atomicfu$value === expect))
      return false;
    this.kotlinx$atomicfu$value = update;
    return true;
  };
  protoOf(AtomicRef).atomicfu$getAndSet = function (value) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = value;
    return oldValue;
  };
  protoOf(AtomicRef).toString = function () {
    return toString(this.kotlinx$atomicfu$value);
  };
  function atomic$ref$1(initial) {
    return atomic$ref$(initial, None_getInstance());
  }
  function AtomicBoolean(value) {
    this.kotlinx$atomicfu$value = value;
  }
  protoOf(AtomicBoolean).h19 = function (_set____db54di) {
    this.kotlinx$atomicfu$value = _set____db54di;
  };
  protoOf(AtomicBoolean).g19 = function () {
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicBoolean).atomicfu$compareAndSet = function (expect, update) {
    if (!(this.kotlinx$atomicfu$value === expect))
      return false;
    this.kotlinx$atomicfu$value = update;
    return true;
  };
  protoOf(AtomicBoolean).atomicfu$getAndSet = function (value) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = value;
    return oldValue;
  };
  protoOf(AtomicBoolean).toString = function () {
    return this.kotlinx$atomicfu$value.toString();
  };
  function atomic$boolean$1(initial) {
    return atomic$boolean$(initial, None_getInstance());
  }
  function AtomicInt(value) {
    this.kotlinx$atomicfu$value = value;
  }
  protoOf(AtomicInt).i19 = function (_set____db54di) {
    this.kotlinx$atomicfu$value = _set____db54di;
  };
  protoOf(AtomicInt).g19 = function () {
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).atomicfu$compareAndSet = function (expect, update) {
    if (!(this.kotlinx$atomicfu$value === expect))
      return false;
    this.kotlinx$atomicfu$value = update;
    return true;
  };
  protoOf(AtomicInt).atomicfu$getAndSet = function (value) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = value;
    return oldValue;
  };
  protoOf(AtomicInt).atomicfu$getAndIncrement = function () {
    var tmp1 = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = tmp1 + 1 | 0;
    return tmp1;
  };
  protoOf(AtomicInt).atomicfu$getAndDecrement = function () {
    var tmp1 = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = tmp1 - 1 | 0;
    return tmp1;
  };
  protoOf(AtomicInt).atomicfu$getAndAdd = function (delta) {
    var oldValue = this.kotlinx$atomicfu$value;
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + delta | 0;
    return oldValue;
  };
  protoOf(AtomicInt).atomicfu$addAndGet = function (delta) {
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + delta | 0;
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).atomicfu$incrementAndGet = function () {
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value + 1 | 0;
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).atomicfu$decrementAndGet = function () {
    this.kotlinx$atomicfu$value = this.kotlinx$atomicfu$value - 1 | 0;
    return this.kotlinx$atomicfu$value;
  };
  protoOf(AtomicInt).toString = function () {
    return this.kotlinx$atomicfu$value.toString();
  };
  function atomic$int$1(initial) {
    return atomic$int$(initial, None_getInstance());
  }
  function atomic$ref$(initial, trace) {
    trace = trace === VOID ? None_getInstance() : trace;
    return new AtomicRef(initial);
  }
  function atomic$boolean$(initial, trace) {
    trace = trace === VOID ? None_getInstance() : trace;
    return new AtomicBoolean(initial);
  }
  function atomic$int$(initial, trace) {
    trace = trace === VOID ? None_getInstance() : trace;
    return new AtomicInt(initial);
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = atomic$boolean$1;
  _.$_$.b = atomic$ref$1;
  _.$_$.c = atomic$int$1;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlinx-coroutines-core.js":
/*!*******************************************!*\
  !*** ./kotlin/kotlinx-coroutines-core.js ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./kotlinx-atomicfu.js */ "./kotlin/kotlinx-atomicfu.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_atomicfu) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var Unit_instance = kotlin_kotlin.$_$.t2;
  var protoOf = kotlin_kotlin.$_$.v7;
  var THROW_CCE = kotlin_kotlin.$_$.na;
  var Continuation = kotlin_kotlin.$_$.i6;
  var classMeta = kotlin_kotlin.$_$.y6;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var VOID = kotlin_kotlin.$_$.c;
  var EmptyCoroutineContext_getInstance = kotlin_kotlin.$_$.o2;
  var createCoroutineUnintercepted = kotlin_kotlin.$_$.b6;
  var atomic$boolean$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.a;
  var Result__exceptionOrNull_impl_p6xea9 = kotlin_kotlin.$_$.m1;
  var _Result___get_value__impl__bjfvqg = kotlin_kotlin.$_$.n1;
  var toString = kotlin_kotlin.$_$.db;
  var hashCode = kotlin_kotlin.$_$.h7;
  var equals = kotlin_kotlin.$_$.b7;
  var AbstractCoroutineContextKey = kotlin_kotlin.$_$.e6;
  var Key_instance = kotlin_kotlin.$_$.n2;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var AbstractCoroutineContextElement = kotlin_kotlin.$_$.d6;
  var get = kotlin_kotlin.$_$.f6;
  var minusKey = kotlin_kotlin.$_$.g6;
  var ContinuationInterceptor = kotlin_kotlin.$_$.h6;
  var RuntimeException_init_$Create$ = kotlin_kotlin.$_$.b1;
  var interfaceMeta = kotlin_kotlin.$_$.i7;
  var Enum = kotlin_kotlin.$_$.ga;
  var startCoroutine = kotlin_kotlin.$_$.p6;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.ab;
  var Long = kotlin_kotlin.$_$.ja;
  var ArrayDeque_init_$Create$ = kotlin_kotlin.$_$.d;
  var RuntimeException = kotlin_kotlin.$_$.ma;
  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.a1;
  var captureStack = kotlin_kotlin.$_$.u6;
  var Error_0 = kotlin_kotlin.$_$.ha;
  var Error_init_$Init$ = kotlin_kotlin.$_$.p;
  var Element = kotlin_kotlin.$_$.m6;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.n;
  var throwUninitializedPropertyAccessException = kotlin_kotlin.$_$.cb;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.e;
  var CancellationException = kotlin_kotlin.$_$.z5;
  var isInterface = kotlin_kotlin.$_$.k7;
  var toString_0 = kotlin_kotlin.$_$.y7;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.s;
  var atomic$ref$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.b;
  var ArrayList = kotlin_kotlin.$_$.u2;
  var IllegalStateException_init_$Create$_0 = kotlin_kotlin.$_$.t;
  var plus = kotlin_kotlin.$_$.n6;
  var get_0 = kotlin_kotlin.$_$.k6;
  var fold = kotlin_kotlin.$_$.j6;
  var minusKey_0 = kotlin_kotlin.$_$.l6;
  var anyToString = kotlin_kotlin.$_$.r6;
  var atomic$int$1 = kotlin_org_jetbrains_kotlinx_atomicfu.$_$.c;
  var UnsupportedOperationException = kotlin_kotlin.$_$.va;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.d1;
  var addSuppressed = kotlin_kotlin.$_$.wa;
  var Exception = kotlin_kotlin.$_$.ia;
  var Companion_instance = kotlin_kotlin.$_$.s2;
  var createFailure = kotlin_kotlin.$_$.xa;
  var _Result___init__impl__xyqfz8 = kotlin_kotlin.$_$.l1;
  var ensureNotNull = kotlin_kotlin.$_$.ya;
  var intercepted = kotlin_kotlin.$_$.c6;
  var get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.a6;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var CancellationException_init_$Init$ = kotlin_kotlin.$_$.l;
  var getStringHashCode = kotlin_kotlin.$_$.g7;
  var HashSet_init_$Create$ = kotlin_kotlin.$_$.g;
  var RuntimeException_init_$Init$_0 = kotlin_kotlin.$_$.y;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.k;
  var removeFirstOrNull = kotlin_kotlin.$_$.u4;
  var Collection = kotlin_kotlin.$_$.v2;
  var List = kotlin_kotlin.$_$.w2;
  var MutableIterable = kotlin_kotlin.$_$.y2;
  var UnsupportedOperationException_init_$Create$_0 = kotlin_kotlin.$_$.c1;
  //endregion
  //region block: pre-declaration
  function cancel$default(cause, $super) {
    cause = cause === VOID ? null : cause;
    var tmp;
    if ($super === VOID) {
      this.u1a(cause);
      tmp = Unit_instance;
    } else {
      tmp = $super.u1a.call(this, cause);
    }
    return tmp;
  }
  function invokeOnCompletion$default(onCancelling, invokeImmediately, handler, $super) {
    onCancelling = onCancelling === VOID ? false : onCancelling;
    invokeImmediately = invokeImmediately === VOID ? true : invokeImmediately;
    return $super === VOID ? this.q1a(onCancelling, invokeImmediately, handler) : $super.q1a.call(this, onCancelling, invokeImmediately, handler);
  }
  setMetadataFor(Job, 'Job', interfaceMeta, VOID, [Element], VOID, VOID, VOID, [0]);
  setMetadataFor(ParentJob, 'ParentJob', interfaceMeta, VOID, [Job], VOID, VOID, VOID, [0]);
  setMetadataFor(JobSupport, 'JobSupport', classMeta, VOID, [Job, ParentJob], VOID, VOID, VOID, [0]);
  setMetadataFor(CoroutineScope, 'CoroutineScope', interfaceMeta);
  setMetadataFor(AbstractCoroutine, 'AbstractCoroutine', classMeta, JobSupport, [JobSupport, Job, Continuation, CoroutineScope], VOID, VOID, VOID, [0]);
  setMetadataFor(DeferredCoroutine, 'DeferredCoroutine', classMeta, AbstractCoroutine, [AbstractCoroutine, Job], VOID, VOID, VOID, [0]);
  setMetadataFor(LazyDeferredCoroutine, 'LazyDeferredCoroutine', classMeta, DeferredCoroutine, VOID, VOID, VOID, VOID, [0]);
  setMetadataFor(Runnable, 'Runnable', interfaceMeta);
  setMetadataFor(SchedulerTask, 'SchedulerTask', classMeta, VOID, [Runnable]);
  setMetadataFor(DispatchedTask, 'DispatchedTask', classMeta, SchedulerTask);
  setMetadataFor(CancellableContinuationImpl, 'CancellableContinuationImpl', classMeta, DispatchedTask, [DispatchedTask, Continuation]);
  setMetadataFor(CompletedExceptionally, 'CompletedExceptionally', classMeta);
  setMetadataFor(CompletedWithCancellation, 'CompletedWithCancellation', classMeta);
  setMetadataFor(Key, 'Key', objectMeta, AbstractCoroutineContextKey);
  setMetadataFor(CoroutineDispatcher, 'CoroutineDispatcher', classMeta, AbstractCoroutineContextElement, [AbstractCoroutineContextElement, ContinuationInterceptor]);
  setMetadataFor(Key_0, 'Key', objectMeta);
  setMetadataFor(GlobalScope, 'GlobalScope', objectMeta, VOID, [CoroutineScope]);
  setMetadataFor(CoroutineStart, 'CoroutineStart', classMeta, Enum);
  setMetadataFor(EventLoop, 'EventLoop', classMeta, CoroutineDispatcher);
  setMetadataFor(ThreadLocalEventLoop, 'ThreadLocalEventLoop', objectMeta);
  setMetadataFor(CompletionHandlerException, 'CompletionHandlerException', classMeta, RuntimeException);
  setMetadataFor(CoroutinesInternalError, 'CoroutinesInternalError', classMeta, Error_0);
  setMetadataFor(Key_1, 'Key', objectMeta);
  setMetadataFor(ChildHandle, 'ChildHandle', interfaceMeta);
  setMetadataFor(NonDisposableHandle, 'NonDisposableHandle', objectMeta, VOID, [ChildHandle]);
  setMetadataFor(Incomplete, 'Incomplete', interfaceMeta);
  setMetadataFor(Empty, 'Empty', classMeta, VOID, [Incomplete]);
  setMetadataFor(LinkedListNode, 'LinkedListNode', classMeta, VOID, VOID, LinkedListNode);
  setMetadataFor(LinkedListHead, 'LinkedListHead', classMeta, LinkedListNode, VOID, LinkedListHead);
  setMetadataFor(NodeList, 'NodeList', classMeta, LinkedListHead, [LinkedListHead, Incomplete], NodeList);
  setMetadataFor(CompletionHandlerBase, 'CompletionHandlerBase', classMeta, LinkedListNode);
  setMetadataFor(JobNode, 'JobNode', classMeta, CompletionHandlerBase, [CompletionHandlerBase, Incomplete]);
  setMetadataFor(SynchronizedObject, 'SynchronizedObject', classMeta, VOID, VOID, SynchronizedObject);
  setMetadataFor(Finishing, 'Finishing', classMeta, SynchronizedObject, [SynchronizedObject, Incomplete]);
  setMetadataFor(ChildCompletion, 'ChildCompletion', classMeta, JobNode);
  setMetadataFor(JobCancellingNode, 'JobCancellingNode', classMeta, JobNode);
  setMetadataFor(InactiveNodeList, 'InactiveNodeList', classMeta, VOID, [Incomplete]);
  setMetadataFor(ChildHandleNode, 'ChildHandleNode', classMeta, JobCancellingNode, [JobCancellingNode, ChildHandle]);
  setMetadataFor(InvokeOnCancelling, 'InvokeOnCancelling', classMeta, JobCancellingNode);
  setMetadataFor(InvokeOnCompletion, 'InvokeOnCompletion', classMeta, JobNode);
  setMetadataFor(IncompleteStateBox, 'IncompleteStateBox', classMeta);
  setMetadataFor(MainCoroutineDispatcher, 'MainCoroutineDispatcher', classMeta, CoroutineDispatcher);
  setMetadataFor(TimeoutCancellationException, 'TimeoutCancellationException', classMeta, CancellationException);
  setMetadataFor(Unconfined, 'Unconfined', objectMeta, CoroutineDispatcher);
  setMetadataFor(Key_2, 'Key', objectMeta);
  setMetadataFor(OpDescriptor, 'OpDescriptor', classMeta);
  setMetadataFor(ExceptionSuccessfullyProcessed, 'ExceptionSuccessfullyProcessed', objectMeta, Exception);
  setMetadataFor(DispatchedContinuation, 'DispatchedContinuation', classMeta, DispatchedTask, [DispatchedTask, Continuation]);
  setMetadataFor(Symbol, 'Symbol', classMeta);
  setMetadataFor(SetTimeoutBasedDispatcher, 'SetTimeoutBasedDispatcher', classMeta, CoroutineDispatcher, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(NodeDispatcher, 'NodeDispatcher', objectMeta, SetTimeoutBasedDispatcher, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(MessageQueue, 'MessageQueue', classMeta, VOID, [Collection, List, MutableIterable]);
  setMetadataFor(ScheduledMessageQueue, 'ScheduledMessageQueue', classMeta, MessageQueue);
  setMetadataFor(WindowMessageQueue, 'WindowMessageQueue', classMeta, MessageQueue);
  setMetadataFor(Dispatchers, 'Dispatchers', objectMeta);
  setMetadataFor(JsMainDispatcher, 'JsMainDispatcher', classMeta, MainCoroutineDispatcher);
  setMetadataFor(UnconfinedEventLoop, 'UnconfinedEventLoop', classMeta, EventLoop, VOID, UnconfinedEventLoop);
  setMetadataFor(JobCancellationException, 'JobCancellationException', classMeta, CancellationException);
  setMetadataFor(TaskContext, 'TaskContext', objectMeta);
  setMetadataFor(DiagnosticCoroutineContextException, 'DiagnosticCoroutineContextException', classMeta, RuntimeException);
  setMetadataFor(SetTimeoutDispatcher, 'SetTimeoutDispatcher', objectMeta, SetTimeoutBasedDispatcher, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(WindowDispatcher, 'WindowDispatcher', classMeta, CoroutineDispatcher, VOID, VOID, VOID, VOID, [1]);
  setMetadataFor(CommonThreadLocal, 'CommonThreadLocal', classMeta, VOID, VOID, CommonThreadLocal);
  //endregion
  function AbstractCoroutine(parentContext, initParentJob, active) {
    JobSupport.call(this, active);
    if (initParentJob) {
      this.l19(parentContext.o8(Key_instance_2));
    }
    this.o19_1 = parentContext.ej(this);
  }
  protoOf(AbstractCoroutine).n8 = function () {
    return this.o19_1;
  };
  protoOf(AbstractCoroutine).p19 = function () {
    return this.o19_1;
  };
  protoOf(AbstractCoroutine).q19 = function () {
    return protoOf(JobSupport).q19.call(this);
  };
  protoOf(AbstractCoroutine).r19 = function (value) {
  };
  protoOf(AbstractCoroutine).s19 = function (cause, handled) {
  };
  protoOf(AbstractCoroutine).t19 = function () {
    return get_classSimpleName(this) + ' was cancelled';
  };
  protoOf(AbstractCoroutine).u19 = function (state) {
    if (state instanceof CompletedExceptionally) {
      this.s19(state.v19_1, state.x19());
    } else {
      this.r19((state == null ? true : !(state == null)) ? state : THROW_CCE());
    }
  };
  protoOf(AbstractCoroutine).u8 = function (result) {
    var state = this.y19(toState(result));
    if (state === get_COMPLETING_WAITING_CHILDREN())
      return Unit_instance;
    this.z19(state);
  };
  protoOf(AbstractCoroutine).z19 = function (state) {
    return this.a1a(state);
  };
  protoOf(AbstractCoroutine).b1a = function (exception) {
    handleCoroutineException(this.o19_1, exception);
  };
  protoOf(AbstractCoroutine).c1a = function () {
    var tmp0_elvis_lhs = get_coroutineName(this.o19_1);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return protoOf(JobSupport).c1a.call(this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var coroutineName = tmp;
    return '"' + coroutineName + '":' + protoOf(JobSupport).c1a.call(this);
  };
  protoOf(AbstractCoroutine).d1a = function (start, receiver, block) {
    start.g1a(block, receiver, this);
  };
  function async(_this__u8e3s4, context, start, block) {
    context = context === VOID ? EmptyCoroutineContext_getInstance() : context;
    start = start === VOID ? CoroutineStart_DEFAULT_getInstance() : start;
    var newContext = newCoroutineContext(_this__u8e3s4, context);
    var coroutine = start.h1b() ? new LazyDeferredCoroutine(newContext, block) : new DeferredCoroutine(newContext, true);
    coroutine.d1a(start, coroutine, block);
    return coroutine;
  }
  function DeferredCoroutine(parentContext, active) {
    AbstractCoroutine.call(this, parentContext, true, active);
  }
  function LazyDeferredCoroutine(parentContext, block) {
    DeferredCoroutine.call(this, parentContext, false);
    this.l1b_1 = createCoroutineUnintercepted(block, this, this);
  }
  protoOf(LazyDeferredCoroutine).m1a = function () {
    startCoroutineCancellable(this.l1b_1, this);
  };
  function _get_parentHandle__f8dcex($this) {
    return $this.n1b_1.kotlinx$atomicfu$value;
  }
  function CancellableContinuationImpl() {
  }
  protoOf(CancellableContinuationImpl).o1b = function () {
    var tmp0_elvis_lhs = _get_parentHandle__f8dcex(this);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return Unit_instance;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var handle = tmp;
    handle.p1b();
    this.n1b_1.kotlinx$atomicfu$value = NonDisposableHandle_instance;
  };
  function CompletedExceptionally(cause, handled) {
    handled = handled === VOID ? false : handled;
    this.v19_1 = cause;
    this.w19_1 = atomic$boolean$1(handled);
  }
  protoOf(CompletedExceptionally).x19 = function () {
    return this.w19_1.kotlinx$atomicfu$value;
  };
  protoOf(CompletedExceptionally).q1b = function () {
    return this.w19_1.atomicfu$compareAndSet(false, true);
  };
  protoOf(CompletedExceptionally).toString = function () {
    return get_classSimpleName(this) + '[' + this.v19_1 + ']';
  };
  function toState(_this__u8e3s4, onCancellation) {
    onCancellation = onCancellation === VOID ? null : onCancellation;
    // Inline function 'kotlin.fold' call
    // Inline function 'kotlin.contracts.contract' call
    var exception = Result__exceptionOrNull_impl_p6xea9(_this__u8e3s4);
    var tmp;
    if (exception == null) {
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      var tmp_0 = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
      var it = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
      tmp = !(onCancellation == null) ? new CompletedWithCancellation(it, onCancellation) : it;
    } else {
      // Inline function 'kotlinx.coroutines.toState.<anonymous>' call
      tmp = new CompletedExceptionally(exception);
    }
    return tmp;
  }
  function CompletedWithCancellation(result, onCancellation) {
    this.r1b_1 = result;
    this.s1b_1 = onCancellation;
  }
  protoOf(CompletedWithCancellation).toString = function () {
    return 'CompletedWithCancellation(result=' + toString(this.r1b_1) + ', onCancellation=' + this.s1b_1 + ')';
  };
  protoOf(CompletedWithCancellation).hashCode = function () {
    var result = this.r1b_1 == null ? 0 : hashCode(this.r1b_1);
    result = imul(result, 31) + hashCode(this.s1b_1) | 0;
    return result;
  };
  protoOf(CompletedWithCancellation).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CompletedWithCancellation))
      return false;
    var tmp0_other_with_cast = other instanceof CompletedWithCancellation ? other : THROW_CCE();
    if (!equals(this.r1b_1, tmp0_other_with_cast.r1b_1))
      return false;
    if (!equals(this.s1b_1, tmp0_other_with_cast.s1b_1))
      return false;
    return true;
  };
  function CoroutineDispatcher$Key$_init_$lambda_akl8b5(it) {
    return it instanceof CoroutineDispatcher ? it : null;
  }
  function Key() {
    Key_instance_0 = this;
    var tmp = Key_instance;
    AbstractCoroutineContextKey.call(this, tmp, CoroutineDispatcher$Key$_init_$lambda_akl8b5);
  }
  var Key_instance_0;
  function Key_getInstance() {
    if (Key_instance_0 == null)
      new Key();
    return Key_instance_0;
  }
  function CoroutineDispatcher() {
    Key_getInstance();
    AbstractCoroutineContextElement.call(this, Key_instance);
  }
  protoOf(CoroutineDispatcher).u1b = function (context) {
    return true;
  };
  protoOf(CoroutineDispatcher).r8 = function (continuation) {
    return new DispatchedContinuation(this, continuation);
  };
  protoOf(CoroutineDispatcher).p8 = function (continuation) {
    var dispatched = continuation instanceof DispatchedContinuation ? continuation : THROW_CCE();
    dispatched.c1c();
  };
  protoOf(CoroutineDispatcher).toString = function () {
    return get_classSimpleName(this) + '@' + get_hexAddress(this);
  };
  function handleCoroutineException(context, exception) {
    try {
      var tmp0_safe_receiver = context.o8(Key_instance_1);
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        tmp0_safe_receiver.d1c(context, exception);
        return Unit_instance;
      }
    } catch ($p) {
      if ($p instanceof Error) {
        var t = $p;
        handleUncaughtCoroutineException(context, handlerException(exception, t));
        return Unit_instance;
      } else {
        throw $p;
      }
    }
    handleUncaughtCoroutineException(context, exception);
  }
  function Key_0() {
  }
  var Key_instance_1;
  function Key_getInstance_0() {
    return Key_instance_1;
  }
  function handlerException(originalException, thrownException) {
    if (originalException === thrownException)
      return originalException;
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.handlerException.<anonymous>' call
    // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
    return RuntimeException_init_$Create$('Exception while trying to handle coroutine exception', thrownException);
  }
  function CoroutineScope() {
  }
  function GlobalScope() {
  }
  protoOf(GlobalScope).p19 = function () {
    return EmptyCoroutineContext_getInstance();
  };
  var GlobalScope_instance;
  function GlobalScope_getInstance() {
    return GlobalScope_instance;
  }
  var CoroutineStart_DEFAULT_instance;
  var CoroutineStart_LAZY_instance;
  var CoroutineStart_ATOMIC_instance;
  var CoroutineStart_UNDISPATCHED_instance;
  var CoroutineStart_entriesInitialized;
  function CoroutineStart_initEntries() {
    if (CoroutineStart_entriesInitialized)
      return Unit_instance;
    CoroutineStart_entriesInitialized = true;
    CoroutineStart_DEFAULT_instance = new CoroutineStart('DEFAULT', 0);
    CoroutineStart_LAZY_instance = new CoroutineStart('LAZY', 1);
    CoroutineStart_ATOMIC_instance = new CoroutineStart('ATOMIC', 2);
    CoroutineStart_UNDISPATCHED_instance = new CoroutineStart('UNDISPATCHED', 3);
  }
  function CoroutineStart(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  protoOf(CoroutineStart).g1a = function (block, receiver, completion) {
    var tmp;
    switch (this.l2_1) {
      case 0:
        startCoroutineCancellable_0(block, receiver, completion);
        tmp = Unit_instance;
        break;
      case 2:
        startCoroutine(block, receiver, completion);
        tmp = Unit_instance;
        break;
      case 3:
        startCoroutineUndispatched(block, receiver, completion);
        tmp = Unit_instance;
        break;
      case 1:
        tmp = Unit_instance;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(CoroutineStart).h1b = function () {
    return this === CoroutineStart_LAZY_getInstance();
  };
  function CoroutineStart_DEFAULT_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_DEFAULT_instance;
  }
  function CoroutineStart_LAZY_getInstance() {
    CoroutineStart_initEntries();
    return CoroutineStart_LAZY_instance;
  }
  function delta($this, unconfined) {
    return unconfined ? new Long(0, 1) : new Long(1, 0);
  }
  function EventLoop() {
    CoroutineDispatcher.call(this);
    this.f1c_1 = new Long(0, 0);
    this.g1c_1 = false;
    this.h1c_1 = null;
  }
  protoOf(EventLoop).i1c = function () {
    var tmp0_elvis_lhs = this.h1c_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    var tmp1_elvis_lhs = queue.rd();
    var tmp_0;
    if (tmp1_elvis_lhs == null) {
      return false;
    } else {
      tmp_0 = tmp1_elvis_lhs;
    }
    var task = tmp_0;
    task.k1c();
    return true;
  };
  protoOf(EventLoop).l1c = function (task) {
    var tmp0_elvis_lhs = this.h1c_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = ArrayDeque_init_$Create$();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.EventLoop.dispatchUnconfined.<anonymous>' call
      this.h1c_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var queue = tmp;
    queue.pd(task);
  };
  protoOf(EventLoop).m1c = function () {
    return this.f1c_1.z(delta(this, true)) >= 0;
  };
  protoOf(EventLoop).n1c = function () {
    var tmp0_safe_receiver = this.h1c_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.l();
    return tmp1_elvis_lhs == null ? true : tmp1_elvis_lhs;
  };
  protoOf(EventLoop).o1c = function (unconfined) {
    this.f1c_1 = this.f1c_1.r2(delta(this, unconfined));
    if (!unconfined)
      this.g1c_1 = true;
  };
  protoOf(EventLoop).p1c = function (unconfined) {
    this.f1c_1 = this.f1c_1.s2(delta(this, unconfined));
    if (this.f1c_1.z(new Long(0, 0)) > 0)
      return Unit_instance;
    // Inline function 'kotlinx.coroutines.assert' call
    if (this.g1c_1) {
      this.q1c();
    }
  };
  protoOf(EventLoop).q1c = function () {
  };
  function ThreadLocalEventLoop() {
    ThreadLocalEventLoop_instance = this;
    this.r1c_1 = commonThreadLocal(new Symbol('ThreadLocalEventLoop'));
  }
  protoOf(ThreadLocalEventLoop).s1c = function () {
    var tmp0_elvis_lhs = this.r1c_1.u1c();
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = createEventLoop();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.ThreadLocalEventLoop.<get-eventLoop>.<anonymous>' call
      ThreadLocalEventLoop_getInstance().r1c_1.v1c(this_0);
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  var ThreadLocalEventLoop_instance;
  function ThreadLocalEventLoop_getInstance() {
    if (ThreadLocalEventLoop_instance == null)
      new ThreadLocalEventLoop();
    return ThreadLocalEventLoop_instance;
  }
  function CompletionHandlerException(message, cause) {
    RuntimeException_init_$Init$(message, cause, this);
    captureStack(this, CompletionHandlerException);
  }
  function CoroutinesInternalError(message, cause) {
    Error_init_$Init$(message, cause, this);
    captureStack(this, CoroutinesInternalError);
  }
  function Key_1() {
  }
  var Key_instance_2;
  function Key_getInstance_1() {
    return Key_instance_2;
  }
  function Job() {
  }
  function ParentJob() {
  }
  function ChildHandle() {
  }
  function NonDisposableHandle() {
  }
  protoOf(NonDisposableHandle).p1b = function () {
  };
  protoOf(NonDisposableHandle).y1a = function (cause) {
    return false;
  };
  protoOf(NonDisposableHandle).toString = function () {
    return 'NonDisposableHandle';
  };
  var NonDisposableHandle_instance;
  function NonDisposableHandle_getInstance() {
    return NonDisposableHandle_instance;
  }
  function get_COMPLETING_ALREADY() {
    _init_properties_JobSupport_kt__68f172();
    return COMPLETING_ALREADY;
  }
  var COMPLETING_ALREADY;
  function get_COMPLETING_WAITING_CHILDREN() {
    _init_properties_JobSupport_kt__68f172();
    return COMPLETING_WAITING_CHILDREN;
  }
  var COMPLETING_WAITING_CHILDREN;
  function get_COMPLETING_RETRY() {
    _init_properties_JobSupport_kt__68f172();
    return COMPLETING_RETRY;
  }
  var COMPLETING_RETRY;
  function get_TOO_LATE_TO_CANCEL() {
    _init_properties_JobSupport_kt__68f172();
    return TOO_LATE_TO_CANCEL;
  }
  var TOO_LATE_TO_CANCEL;
  function get_SEALED() {
    _init_properties_JobSupport_kt__68f172();
    return SEALED;
  }
  var SEALED;
  function get_EMPTY_NEW() {
    _init_properties_JobSupport_kt__68f172();
    return EMPTY_NEW;
  }
  var EMPTY_NEW;
  function get_EMPTY_ACTIVE() {
    _init_properties_JobSupport_kt__68f172();
    return EMPTY_ACTIVE;
  }
  var EMPTY_ACTIVE;
  function Empty(isActive) {
    this.w1c_1 = isActive;
  }
  protoOf(Empty).q19 = function () {
    return this.w1c_1;
  };
  protoOf(Empty).x1c = function () {
    return null;
  };
  protoOf(Empty).toString = function () {
    return 'Empty{' + (this.w1c_1 ? 'Active' : 'New') + '}';
  };
  function Incomplete() {
  }
  function NodeList() {
    LinkedListHead.call(this);
  }
  protoOf(NodeList).q19 = function () {
    return true;
  };
  protoOf(NodeList).x1c = function () {
    return this;
  };
  protoOf(NodeList).b1d = function (state) {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.NodeList.getString.<anonymous>' call
    this_0.m7('List{');
    this_0.m7(state);
    this_0.m7('}[');
    var first = true;
    // Inline function 'kotlinx.coroutines.internal.LinkedListHead.forEach' call
    var cur = this.c1d_1;
    while (!equals(cur, this)) {
      if (cur instanceof JobNode) {
        // Inline function 'kotlinx.coroutines.NodeList.getString.<anonymous>.<anonymous>' call
        var node = cur;
        if (first)
          first = false;
        else {
          this_0.m7(', ');
        }
        this_0.l7(node);
      }
      cur = cur.c1d_1;
    }
    this_0.m7(']');
    return this_0.toString();
  };
  protoOf(NodeList).toString = function () {
    return get_DEBUG() ? this.b1d('Active') : protoOf(LinkedListHead).toString.call(this);
  };
  function JobNode() {
    CompletionHandlerBase.call(this);
  }
  protoOf(JobNode).p1d = function () {
    var tmp = this.o1d_1;
    if (!(tmp == null))
      return tmp;
    else {
      throwUninitializedPropertyAccessException('job');
    }
  };
  protoOf(JobNode).q19 = function () {
    return true;
  };
  protoOf(JobNode).x1c = function () {
    return null;
  };
  protoOf(JobNode).p1b = function () {
    return this.p1d().s1a(this);
  };
  protoOf(JobNode).toString = function () {
    return get_classSimpleName(this) + '@' + get_hexAddress(this) + '[job@' + get_hexAddress(this.p1d()) + ']';
  };
  function _set_exceptionsHolder__tqm22h($this, value) {
    $this.u1d_1.kotlinx$atomicfu$value = value;
  }
  function _get_exceptionsHolder__nhszp($this) {
    return $this.u1d_1.kotlinx$atomicfu$value;
  }
  function allocateList($this) {
    return ArrayList_init_$Create$(4);
  }
  function finalizeFinishingState($this, state, proposedUpdate) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    var tmp0_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
    var proposedException = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.v19_1;
    var wasCancelling;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
    // Inline function 'kotlinx.coroutines.JobSupport.finalizeFinishingState.<anonymous>' call
    wasCancelling = state.v1d();
    var exceptions = state.w1d(proposedException);
    var finalCause = getFinalRootCause($this, state, exceptions);
    if (!(finalCause == null)) {
      addSuppressedExceptions($this, finalCause, exceptions);
    }
    var finalException = finalCause;
    var finalState = finalException == null ? proposedUpdate : finalException === proposedException ? proposedUpdate : new CompletedExceptionally(finalException);
    if (!(finalException == null)) {
      var handled = cancelParent($this, finalException) ? true : $this.f1b(finalException);
      if (handled) {
        (finalState instanceof CompletedExceptionally ? finalState : THROW_CCE()).q1b();
      }
    }
    if (!wasCancelling) {
      $this.c1b(finalException);
    }
    $this.u19(finalState);
    var casSuccess = $this.j19_1.atomicfu$compareAndSet(state, boxIncomplete(finalState));
    // Inline function 'kotlinx.coroutines.assert' call
    completeStateFinalization($this, state, finalState);
    return finalState;
  }
  function getFinalRootCause($this, state, exceptions) {
    if (exceptions.l()) {
      if (state.v1d()) {
        // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
        return new JobCancellationException( true ? $this.t19() : 0, null, $this);
      }
      return null;
    }
    var tmp$ret$2;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var tmp0_iterator = exceptions.h();
      while (tmp0_iterator.i()) {
        var element = tmp0_iterator.j();
        // Inline function 'kotlinx.coroutines.JobSupport.getFinalRootCause.<anonymous>' call
        if (!(element instanceof CancellationException)) {
          tmp$ret$2 = element;
          break $l$block;
        }
      }
      tmp$ret$2 = null;
    }
    var firstNonCancellation = tmp$ret$2;
    if (!(firstNonCancellation == null))
      return firstNonCancellation;
    var first = exceptions.m(0);
    if (first instanceof TimeoutCancellationException) {
      var tmp$ret$4;
      $l$block_0: {
        // Inline function 'kotlin.collections.firstOrNull' call
        var tmp0_iterator_0 = exceptions.h();
        while (tmp0_iterator_0.i()) {
          var element_0 = tmp0_iterator_0.j();
          // Inline function 'kotlinx.coroutines.JobSupport.getFinalRootCause.<anonymous>' call
          var tmp;
          if (!(element_0 === first)) {
            tmp = element_0 instanceof TimeoutCancellationException;
          } else {
            tmp = false;
          }
          if (tmp) {
            tmp$ret$4 = element_0;
            break $l$block_0;
          }
        }
        tmp$ret$4 = null;
      }
      var detailedTimeoutException = tmp$ret$4;
      if (!(detailedTimeoutException == null))
        return detailedTimeoutException;
    }
    return first;
  }
  function addSuppressedExceptions($this, rootCause, exceptions) {
    if (exceptions.k() <= 1)
      return Unit_instance;
    var seenExceptions = identitySet(exceptions.k());
    var unwrappedCause = unwrap(rootCause);
    var tmp0_iterator = exceptions.h();
    while (tmp0_iterator.i()) {
      var exception = tmp0_iterator.j();
      var unwrapped = unwrap(exception);
      var tmp;
      var tmp_0;
      if (!(unwrapped === rootCause) ? !(unwrapped === unwrappedCause) : false) {
        tmp_0 = !(unwrapped instanceof CancellationException);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = seenExceptions.e(unwrapped);
      } else {
        tmp = false;
      }
      if (tmp) {
        // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
      }
    }
  }
  function tryFinalizeSimpleState($this, state, update) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    if (!$this.j19_1.atomicfu$compareAndSet(state, boxIncomplete(update)))
      return false;
    $this.c1b(null);
    $this.u19(update);
    completeStateFinalization($this, state, update);
    return true;
  }
  function completeStateFinalization($this, state, update) {
    var tmp0_safe_receiver = $this.i1a();
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      tmp0_safe_receiver.p1b();
      $this.h1a(NonDisposableHandle_instance);
    }
    var tmp1_safe_receiver = update instanceof CompletedExceptionally ? update : null;
    var cause = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.v19_1;
    if (state instanceof JobNode) {
      try {
        state.invoke(cause);
      } catch ($p) {
        if ($p instanceof Error) {
          var ex = $p;
          $this.b1a(new CompletionHandlerException('Exception in completion handler ' + state + ' for ' + $this, ex));
        } else {
          throw $p;
        }
      }
    } else {
      var tmp2_safe_receiver = state.x1c();
      if (tmp2_safe_receiver == null)
        null;
      else {
        notifyCompletion(tmp2_safe_receiver, $this, cause);
      }
    }
  }
  function notifyCancelling($this, list, cause) {
    $this.c1b(cause);
    // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers' call
    var exception = null;
    // Inline function 'kotlinx.coroutines.internal.LinkedListHead.forEach' call
    var cur = list.c1d_1;
    while (!equals(cur, list)) {
      if (cur instanceof JobCancellingNode) {
        // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>' call
        var node = cur;
        try {
          node.invoke(cause);
        } catch ($p) {
          if ($p instanceof Error) {
            var ex = $p;
            var tmp0_safe_receiver = exception;
            var tmp;
            if (tmp0_safe_receiver == null) {
              tmp = null;
            } else {
              // Inline function 'kotlin.apply' call
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>.<anonymous>' call
              // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
              tmp = tmp0_safe_receiver;
            }
            if (tmp == null) {
              // Inline function 'kotlin.run' call
              // Inline function 'kotlin.contracts.contract' call
              exception = new CompletionHandlerException('Exception in completion handler ' + node + ' for ' + $this, ex);
            }
          } else {
            throw $p;
          }
        }
      }
      cur = cur.c1d_1;
    }
    var tmp0_safe_receiver_0 = exception;
    if (tmp0_safe_receiver_0 == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      $this.b1a(tmp0_safe_receiver_0);
    }
    cancelParent($this, cause);
  }
  function cancelParent($this, cause) {
    if ($this.d1b())
      return true;
    var isCancellation = cause instanceof CancellationException;
    var parent = $this.i1a();
    if (parent === null ? true : parent === NonDisposableHandle_instance) {
      return isCancellation;
    }
    return parent.y1a(cause) ? true : isCancellation;
  }
  function notifyCompletion(_this__u8e3s4, $this, cause) {
    var exception = null;
    // Inline function 'kotlinx.coroutines.internal.LinkedListHead.forEach' call
    var cur = _this__u8e3s4.c1d_1;
    while (!equals(cur, _this__u8e3s4)) {
      if (cur instanceof JobNode) {
        // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>' call
        var node = cur;
        try {
          node.invoke(cause);
        } catch ($p) {
          if ($p instanceof Error) {
            var ex = $p;
            var tmp0_safe_receiver = exception;
            var tmp;
            if (tmp0_safe_receiver == null) {
              tmp = null;
            } else {
              // Inline function 'kotlin.apply' call
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.notifyHandlers.<anonymous>.<anonymous>' call
              // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
              tmp = tmp0_safe_receiver;
            }
            if (tmp == null) {
              // Inline function 'kotlin.run' call
              // Inline function 'kotlin.contracts.contract' call
              exception = new CompletionHandlerException('Exception in completion handler ' + node + ' for ' + $this, ex);
            }
          } else {
            throw $p;
          }
        }
      }
      cur = cur.c1d_1;
    }
    var tmp0_safe_receiver_0 = exception;
    if (tmp0_safe_receiver_0 == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      $this.b1a(tmp0_safe_receiver_0);
    }
    return Unit_instance;
  }
  function startInternal($this, state) {
    if (state instanceof Empty) {
      if (state.w1c_1)
        return 0;
      if (!$this.j19_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE()))
        return -1;
      $this.m1a();
      return 1;
    } else {
      if (state instanceof InactiveNodeList) {
        if (!$this.j19_1.atomicfu$compareAndSet(state, state.x1d_1))
          return -1;
        $this.m1a();
        return 1;
      } else {
        return 0;
      }
    }
  }
  function makeNode($this, handler, onCancelling) {
    var tmp;
    if (onCancelling) {
      var tmp0_elvis_lhs = handler instanceof JobCancellingNode ? handler : null;
      tmp = tmp0_elvis_lhs == null ? new InvokeOnCancelling(handler) : tmp0_elvis_lhs;
    } else {
      var tmp1_safe_receiver = handler instanceof JobNode ? handler : null;
      var tmp_0;
      if (tmp1_safe_receiver == null) {
        tmp_0 = null;
      } else {
        // Inline function 'kotlin.also' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.JobSupport.makeNode.<anonymous>' call
        // Inline function 'kotlinx.coroutines.assert' call
        tmp_0 = tmp1_safe_receiver;
      }
      var tmp2_elvis_lhs = tmp_0;
      tmp = tmp2_elvis_lhs == null ? new InvokeOnCompletion(handler) : tmp2_elvis_lhs;
    }
    var node = tmp;
    node.o1d_1 = $this;
    return node;
  }
  function addLastAtomic($this, expect, list, node) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.addLastIf' call
      // Inline function 'kotlinx.coroutines.JobSupport.addLastAtomic.<anonymous>' call
      if (!($this.j1a() === expect)) {
        tmp$ret$1 = false;
        break $l$block;
      }
      list.j1d(node);
      tmp$ret$1 = true;
    }
    return tmp$ret$1;
  }
  function promoteEmptyToNodeList($this, state) {
    var list = new NodeList();
    var update = state.w1c_1 ? list : new InactiveNodeList(list);
    $this.j19_1.atomicfu$compareAndSet(state, update);
  }
  function promoteSingleToNodeList($this, state) {
    state.q1d(new NodeList());
    // Inline function 'kotlinx.coroutines.internal.LinkedListNode.nextNode' call
    var list = state.c1d_1;
    $this.j19_1.atomicfu$compareAndSet(state, list);
  }
  function cancelMakeCompleting($this, cause) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.cancelMakeCompleting.<anonymous>' call
      var state = $this.j1a();
      var tmp;
      if (!(!(state == null) ? isInterface(state, Incomplete) : false)) {
        tmp = true;
      } else {
        var tmp_0;
        if (state instanceof Finishing) {
          tmp_0 = state.y1d();
        } else {
          tmp_0 = false;
        }
        tmp = tmp_0;
      }
      if (tmp) {
        return get_COMPLETING_ALREADY();
      }
      var proposedUpdate = new CompletedExceptionally(createCauseException($this, cause));
      var finalState = tryMakeCompleting($this, state, proposedUpdate);
      if (!(finalState === get_COMPLETING_RETRY()))
        return finalState;
    }
  }
  function createCauseException($this, cause) {
    var tmp;
    if (cause == null ? true : cause instanceof Error) {
      var tmp_0;
      if (cause == null) {
        // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
        tmp_0 = new JobCancellationException( true ? $this.t19() : 0, null, $this);
      } else {
        tmp_0 = cause;
      }
      tmp = tmp_0;
    } else {
      tmp = ((!(cause == null) ? isInterface(cause, ParentJob) : false) ? cause : THROW_CCE()).a1b();
    }
    return tmp;
  }
  function makeCancelling($this, cause) {
    var causeExceptionCache = null;
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>' call
        var state = $this.j1a();
        if (state instanceof Finishing) {
          // Inline function 'kotlinx.coroutines.internal.synchronized' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
          // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>' call
          if (state.z1d())
            return get_TOO_LATE_TO_CANCEL();
          var wasCancelling = state.v1d();
          if (!(cause == null) ? true : !wasCancelling) {
            var tmp0_elvis_lhs = causeExceptionCache;
            var tmp;
            if (tmp0_elvis_lhs == null) {
              // Inline function 'kotlin.also' call
              var this_0 = createCauseException($this, cause);
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>.<anonymous>' call
              causeExceptionCache = this_0;
              tmp = this_0;
            } else {
              tmp = tmp0_elvis_lhs;
            }
            var causeException = tmp;
            state.a1e(causeException);
          }
          // Inline function 'kotlin.takeIf' call
          var this_1 = state.b1e();
          // Inline function 'kotlin.contracts.contract' call
          var tmp_0;
          // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>.<anonymous>' call
          if (!wasCancelling) {
            tmp_0 = this_1;
          } else {
            tmp_0 = null;
          }
          var notifyRootCause = tmp_0;
          if (notifyRootCause == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            notifyCancelling($this, state.r1d_1, notifyRootCause);
          }
          return get_COMPLETING_ALREADY();
        } else {
          if (!(state == null) ? isInterface(state, Incomplete) : false) {
            var tmp2_elvis_lhs = causeExceptionCache;
            var tmp_1;
            if (tmp2_elvis_lhs == null) {
              // Inline function 'kotlin.also' call
              var this_2 = createCauseException($this, cause);
              // Inline function 'kotlin.contracts.contract' call
              // Inline function 'kotlinx.coroutines.JobSupport.makeCancelling.<anonymous>.<anonymous>' call
              causeExceptionCache = this_2;
              tmp_1 = this_2;
            } else {
              tmp_1 = tmp2_elvis_lhs;
            }
            var causeException_0 = tmp_1;
            if (state.q19()) {
              if (tryMakeCancelling($this, state, causeException_0))
                return get_COMPLETING_ALREADY();
            } else {
              var finalState = tryMakeCompleting($this, state, new CompletedExceptionally(causeException_0));
              if (finalState === get_COMPLETING_ALREADY()) {
                // Inline function 'kotlin.error' call
                var message = 'Cannot happen in ' + toString(state);
                throw IllegalStateException_init_$Create$(toString_0(message));
              } else if (finalState === get_COMPLETING_RETRY()) {
                break $l$block;
              } else
                return finalState;
            }
          } else {
            return get_TOO_LATE_TO_CANCEL();
          }
        }
      }
    }
  }
  function getOrPromoteCancellingList($this, state) {
    var tmp1_elvis_lhs = state.x1c();
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp_0;
      if (state instanceof Empty) {
        tmp_0 = new NodeList();
      } else {
        if (state instanceof JobNode) {
          promoteSingleToNodeList($this, state);
          tmp_0 = null;
        } else {
          var message = 'State should have list: ' + state;
          throw IllegalStateException_init_$Create$(toString_0(message));
        }
      }
      tmp = tmp_0;
    } else {
      tmp = tmp1_elvis_lhs;
    }
    return tmp;
  }
  function tryMakeCancelling($this, state, rootCause) {
    // Inline function 'kotlinx.coroutines.assert' call
    // Inline function 'kotlinx.coroutines.assert' call
    var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var list = tmp;
    var cancelling = new Finishing(list, false, rootCause);
    if (!$this.j19_1.atomicfu$compareAndSet(state, cancelling))
      return false;
    notifyCancelling($this, list, rootCause);
    return true;
  }
  function tryMakeCompleting($this, state, proposedUpdate) {
    if (!(!(state == null) ? isInterface(state, Incomplete) : false))
      return get_COMPLETING_ALREADY();
    var tmp;
    var tmp_0;
    var tmp_1;
    if (state instanceof Empty) {
      tmp_1 = true;
    } else {
      tmp_1 = state instanceof JobNode;
    }
    if (tmp_1) {
      tmp_0 = !(state instanceof ChildHandleNode);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = !(proposedUpdate instanceof CompletedExceptionally);
    } else {
      tmp = false;
    }
    if (tmp) {
      if (tryFinalizeSimpleState($this, state, proposedUpdate)) {
        return proposedUpdate;
      }
      return get_COMPLETING_RETRY();
    }
    return tryMakeCompletingSlowPath($this, state, proposedUpdate);
  }
  function tryMakeCompletingSlowPath($this, state, proposedUpdate) {
    var tmp0_elvis_lhs = getOrPromoteCancellingList($this, state);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return get_COMPLETING_RETRY();
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var list = tmp;
    var tmp1_elvis_lhs = state instanceof Finishing ? state : null;
    var finishing = tmp1_elvis_lhs == null ? new Finishing(list, false, null) : tmp1_elvis_lhs;
    var notifyRootCause = null;
    // Inline function 'kotlinx.coroutines.internal.synchronized' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
    if (finishing.y1d())
      return get_COMPLETING_ALREADY();
    finishing.c1e(true);
    if (!(finishing === state)) {
      if (!$this.j19_1.atomicfu$compareAndSet(state, finishing))
        return get_COMPLETING_RETRY();
    }
    // Inline function 'kotlinx.coroutines.assert' call
    var wasCancelling = finishing.v1d();
    var tmp0_safe_receiver = proposedUpdate instanceof CompletedExceptionally ? proposedUpdate : null;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      finishing.a1e(tmp0_safe_receiver.v19_1);
    }
    // Inline function 'kotlin.takeIf' call
    var this_0 = finishing.b1e();
    // Inline function 'kotlin.contracts.contract' call
    var tmp_0;
    // Inline function 'kotlinx.coroutines.JobSupport.tryMakeCompletingSlowPath.<anonymous>.<anonymous>' call
    if (!wasCancelling) {
      tmp_0 = this_0;
    } else {
      tmp_0 = null;
    }
    notifyRootCause = tmp_0;
    var tmp2_safe_receiver = notifyRootCause;
    if (tmp2_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      notifyCancelling($this, list, tmp2_safe_receiver);
    }
    var child = firstChild($this, state);
    if (!(child == null) ? tryWaitForChild($this, finishing, child, proposedUpdate) : false)
      return get_COMPLETING_WAITING_CHILDREN();
    return finalizeFinishingState($this, finishing, proposedUpdate);
  }
  function _get_exceptionOrNull__b3j7js(_this__u8e3s4, $this) {
    var tmp0_safe_receiver = _this__u8e3s4 instanceof CompletedExceptionally ? _this__u8e3s4 : null;
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.v19_1;
  }
  function firstChild($this, state) {
    var tmp1_elvis_lhs = state instanceof ChildHandleNode ? state : null;
    var tmp;
    if (tmp1_elvis_lhs == null) {
      var tmp0_safe_receiver = state.x1c();
      tmp = tmp0_safe_receiver == null ? null : nextChild(tmp0_safe_receiver, $this);
    } else {
      tmp = tmp1_elvis_lhs;
    }
    return tmp;
  }
  function tryWaitForChild($this, state, child, proposedUpdate) {
    var $this_0 = $this;
    var state_0 = state;
    var child_0 = child;
    var proposedUpdate_0 = proposedUpdate;
    $l$1: do {
      $l$0: do {
        var tmp = child_0.h1e_1;
        // Inline function 'kotlinx.coroutines.asHandler' call
        // Inline function 'kotlin.js.asDynamic' call
        var tmp$ret$1 = new ChildCompletion($this_0, state_0, child_0, proposedUpdate_0);
        var handle = tmp.r1a(VOID, false, tmp$ret$1);
        if (!(handle === NonDisposableHandle_instance))
          return true;
        var tmp0_elvis_lhs = nextChild(child_0, $this_0);
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          return false;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        var nextChild_0 = tmp_0;
        $this_0 = $this_0;
        state_0 = state_0;
        child_0 = nextChild_0;
        proposedUpdate_0 = proposedUpdate_0;
        continue $l$0;
      }
       while (false);
    }
     while (true);
  }
  function continueCompleting($this, state, lastChild, proposedUpdate) {
    // Inline function 'kotlinx.coroutines.assert' call
    var waitChild = nextChild(lastChild, $this);
    if (!(waitChild == null) ? tryWaitForChild($this, state, waitChild, proposedUpdate) : false)
      return Unit_instance;
    var finalState = finalizeFinishingState($this, state, proposedUpdate);
    $this.a1a(finalState);
  }
  function nextChild(_this__u8e3s4, $this) {
    var cur = _this__u8e3s4;
    $l$loop: while (true) {
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.isRemoved' call
      if (!cur.e1d_1) {
        break $l$loop;
      }
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.prevNode' call
      cur = cur.d1d_1;
    }
    $l$loop_0: while (true) {
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.nextNode' call
      cur = cur.c1d_1;
      // Inline function 'kotlinx.coroutines.internal.LinkedListNode.isRemoved' call
      if (cur.e1d_1)
        continue $l$loop_0;
      if (cur instanceof ChildHandleNode)
        return cur;
      if (cur instanceof NodeList)
        return null;
    }
  }
  function stateString($this, state) {
    var tmp;
    if (state instanceof Finishing) {
      tmp = state.v1d() ? 'Cancelling' : state.y1d() ? 'Completing' : 'Active';
    } else {
      if (!(state == null) ? isInterface(state, Incomplete) : false) {
        tmp = state.q19() ? 'Active' : 'New';
      } else {
        if (state instanceof CompletedExceptionally) {
          tmp = 'Cancelled';
        } else {
          tmp = 'Completed';
        }
      }
    }
    return tmp;
  }
  function Finishing(list, isCompleting, rootCause) {
    SynchronizedObject.call(this);
    this.r1d_1 = list;
    this.s1d_1 = atomic$boolean$1(isCompleting);
    this.t1d_1 = atomic$ref$1(rootCause);
    this.u1d_1 = atomic$ref$1(null);
  }
  protoOf(Finishing).x1c = function () {
    return this.r1d_1;
  };
  protoOf(Finishing).c1e = function (value) {
    this.s1d_1.kotlinx$atomicfu$value = value;
  };
  protoOf(Finishing).y1d = function () {
    return this.s1d_1.kotlinx$atomicfu$value;
  };
  protoOf(Finishing).i1e = function (value) {
    this.t1d_1.kotlinx$atomicfu$value = value;
  };
  protoOf(Finishing).b1e = function () {
    return this.t1d_1.kotlinx$atomicfu$value;
  };
  protoOf(Finishing).z1d = function () {
    return _get_exceptionsHolder__nhszp(this) === get_SEALED();
  };
  protoOf(Finishing).v1d = function () {
    return !(this.b1e() == null);
  };
  protoOf(Finishing).q19 = function () {
    return this.b1e() == null;
  };
  protoOf(Finishing).w1d = function (proposedException) {
    var eh = _get_exceptionsHolder__nhszp(this);
    var tmp;
    if (eh == null) {
      tmp = allocateList(this);
    } else {
      if (eh instanceof Error) {
        // Inline function 'kotlin.also' call
        var this_0 = allocateList(this);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.Finishing.sealLocked.<anonymous>' call
        this_0.e(eh);
        tmp = this_0;
      } else {
        if (eh instanceof ArrayList) {
          tmp = eh instanceof ArrayList ? eh : THROW_CCE();
        } else {
          var message = 'State is ' + toString(eh);
          throw IllegalStateException_init_$Create$(toString_0(message));
        }
      }
    }
    var list = tmp;
    var rootCause = this.b1e();
    if (rootCause == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      list.j4(0, rootCause);
    }
    if (!(proposedException == null) ? !equals(proposedException, rootCause) : false) {
      list.e(proposedException);
    }
    _set_exceptionsHolder__tqm22h(this, get_SEALED());
    return list;
  };
  protoOf(Finishing).a1e = function (exception) {
    var rootCause = this.b1e();
    if (rootCause == null) {
      this.i1e(exception);
      return Unit_instance;
    }
    if (exception === rootCause)
      return Unit_instance;
    var eh = _get_exceptionsHolder__nhszp(this);
    if (eh == null) {
      _set_exceptionsHolder__tqm22h(this, exception);
    } else {
      if (eh instanceof Error) {
        if (exception === eh)
          return Unit_instance;
        // Inline function 'kotlin.apply' call
        var this_0 = allocateList(this);
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.coroutines.Finishing.addExceptionLocked.<anonymous>' call
        this_0.e(eh);
        this_0.e(exception);
        _set_exceptionsHolder__tqm22h(this, this_0);
      } else {
        if (eh instanceof ArrayList) {
          (eh instanceof ArrayList ? eh : THROW_CCE()).e(exception);
        } else {
          var message = 'State is ' + toString(eh);
          throw IllegalStateException_init_$Create$(toString_0(message));
        }
      }
    }
  };
  protoOf(Finishing).toString = function () {
    return 'Finishing[cancelling=' + this.v1d() + ', completing=' + this.y1d() + ', rootCause=' + this.b1e() + ', exceptions=' + toString(_get_exceptionsHolder__nhszp(this)) + ', list=' + this.r1d_1 + ']';
  };
  function ChildCompletion(parent, state, child, proposedUpdate) {
    JobNode.call(this);
    this.n1e_1 = parent;
    this.o1e_1 = state;
    this.p1e_1 = child;
    this.q1e_1 = proposedUpdate;
  }
  protoOf(ChildCompletion).r1e = function (cause) {
    continueCompleting(this.n1e_1, this.o1e_1, this.p1e_1, this.q1e_1);
  };
  protoOf(ChildCompletion).invoke = function (cause) {
    return this.r1e(cause);
  };
  function JobSupport(active) {
    this.j19_1 = atomic$ref$1(active ? get_EMPTY_ACTIVE() : get_EMPTY_NEW());
    this.k19_1 = atomic$ref$1(null);
  }
  protoOf(JobSupport).d2 = function () {
    return Key_instance_2;
  };
  protoOf(JobSupport).h1a = function (value) {
    this.k19_1.kotlinx$atomicfu$value = value;
  };
  protoOf(JobSupport).i1a = function () {
    return this.k19_1.kotlinx$atomicfu$value;
  };
  protoOf(JobSupport).l19 = function (parent) {
    // Inline function 'kotlinx.coroutines.assert' call
    if (parent == null) {
      this.h1a(NonDisposableHandle_instance);
      return Unit_instance;
    }
    parent.l1a();
    var handle = parent.b1b(this);
    this.h1a(handle);
    if (this.k1a()) {
      handle.p1b();
      this.h1a(NonDisposableHandle_instance);
    }
  };
  protoOf(JobSupport).j1a = function () {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.j19_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.<get-state>.<anonymous>' call
      var state = this_0.kotlinx$atomicfu$value;
      if (!(state instanceof OpDescriptor))
        return state;
      state.s1e(this);
    }
  };
  protoOf(JobSupport).q19 = function () {
    var state = this.j1a();
    var tmp;
    if (!(state == null) ? isInterface(state, Incomplete) : false) {
      tmp = state.q19();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(JobSupport).k1a = function () {
    var tmp = this.j1a();
    return !(!(tmp == null) ? isInterface(tmp, Incomplete) : false);
  };
  protoOf(JobSupport).l1a = function () {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.start.<anonymous>' call
      var state = this.j1a();
      var tmp0_subject = startInternal(this, state);
      if (tmp0_subject === 0)
        return false;
      else if (tmp0_subject === 1)
        return true;
    }
  };
  protoOf(JobSupport).m1a = function () {
  };
  protoOf(JobSupport).n1a = function () {
    var state = this.j1a();
    var tmp;
    if (state instanceof Finishing) {
      var tmp0_safe_receiver = state.b1e();
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : this.o1a(tmp0_safe_receiver, get_classSimpleName(this) + ' is cancelling');
      var tmp_0;
      if (tmp1_elvis_lhs == null) {
        var message = 'Job is still new or active: ' + this;
        throw IllegalStateException_init_$Create$(toString_0(message));
      } else {
        tmp_0 = tmp1_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      if (!(state == null) ? isInterface(state, Incomplete) : false) {
        var message_0 = 'Job is still new or active: ' + this;
        throw IllegalStateException_init_$Create$(toString_0(message_0));
      } else {
        if (state instanceof CompletedExceptionally) {
          tmp = this.p1a(state.v19_1);
        } else {
          tmp = new JobCancellationException(get_classSimpleName(this) + ' has completed normally', null, this);
        }
      }
    }
    return tmp;
  };
  protoOf(JobSupport).o1a = function (_this__u8e3s4, message) {
    var tmp0_elvis_lhs = _this__u8e3s4 instanceof CancellationException ? _this__u8e3s4 : null;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
      tmp = new JobCancellationException(message == null ? this.t19() : message, _this__u8e3s4, this);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(JobSupport).p1a = function (_this__u8e3s4, message, $super) {
    message = message === VOID ? null : message;
    return $super === VOID ? this.o1a(_this__u8e3s4, message) : $super.o1a.call(this, _this__u8e3s4, message);
  };
  protoOf(JobSupport).q1a = function (onCancelling, invokeImmediately, handler) {
    var node = makeNode(this, handler, onCancelling);
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.invokeOnCompletion.<anonymous>' call
        var state = this.j1a();
        if (state instanceof Empty) {
          if (state.w1c_1) {
            if (this.j19_1.atomicfu$compareAndSet(state, node))
              return node;
          } else {
            promoteEmptyToNodeList(this, state);
          }
        } else {
          if (!(state == null) ? isInterface(state, Incomplete) : false) {
            var list = state.x1c();
            if (list == null) {
              promoteSingleToNodeList(this, state instanceof JobNode ? state : THROW_CCE());
            } else {
              var rootCause = null;
              var handle = NonDisposableHandle_instance;
              var tmp;
              if (onCancelling) {
                tmp = state instanceof Finishing;
              } else {
                tmp = false;
              }
              if (tmp) {
                // Inline function 'kotlinx.coroutines.internal.synchronized' call
                // Inline function 'kotlin.contracts.contract' call
                // Inline function 'kotlinx.coroutines.internal.synchronizedImpl' call
                rootCause = state.b1e();
                var tmp_0;
                var tmp_1;
                if (rootCause == null) {
                  tmp_1 = true;
                } else {
                  var tmp_2;
                  // Inline function 'kotlinx.coroutines.isHandlerOf' call
                  if (handler instanceof ChildHandleNode) {
                    tmp_2 = !state.y1d();
                  } else {
                    tmp_2 = false;
                  }
                  tmp_1 = tmp_2;
                }
                if (tmp_1) {
                  if (!addLastAtomic(this, state, list, node)) {
                    break $l$block;
                  }
                  if (rootCause == null)
                    return node;
                  handle = node;
                  tmp_0 = Unit_instance;
                }
              }
              if (!(rootCause == null)) {
                if (invokeImmediately) {
                  invokeIt(handler, rootCause);
                }
                return handle;
              } else {
                if (addLastAtomic(this, state, list, node))
                  return node;
              }
            }
          } else {
            if (invokeImmediately) {
              var tmp1_safe_receiver = state instanceof CompletedExceptionally ? state : null;
              invokeIt(handler, tmp1_safe_receiver == null ? null : tmp1_safe_receiver.v19_1);
            }
            return NonDisposableHandle_instance;
          }
        }
      }
    }
  };
  protoOf(JobSupport).s1a = function (node) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      // Inline function 'kotlinx.coroutines.JobSupport.removeNode.<anonymous>' call
      var state = this.j1a();
      if (state instanceof JobNode) {
        if (!(state === node))
          return Unit_instance;
        if (this.j19_1.atomicfu$compareAndSet(state, get_EMPTY_ACTIVE()))
          return Unit_instance;
      } else {
        if (!(state == null) ? isInterface(state, Incomplete) : false) {
          if (!(state.x1c() == null)) {
            node.i1d();
          }
          return Unit_instance;
        } else {
          return Unit_instance;
        }
      }
    }
  };
  protoOf(JobSupport).t1a = function () {
    return false;
  };
  protoOf(JobSupport).u1a = function (cause) {
    var tmp;
    if (cause == null) {
      // Inline function 'kotlinx.coroutines.JobSupport.defaultCancellationException' call
      tmp = new JobCancellationException( true ? this.t19() : 0, null, this);
    } else {
      tmp = cause;
    }
    this.w1a(tmp);
  };
  protoOf(JobSupport).t19 = function () {
    return 'Job was cancelled';
  };
  protoOf(JobSupport).w1a = function (cause) {
    this.z1a(cause);
  };
  protoOf(JobSupport).x1a = function (parentJob) {
    this.z1a(parentJob);
  };
  protoOf(JobSupport).y1a = function (cause) {
    if (cause instanceof CancellationException)
      return true;
    return this.z1a(cause) ? this.e1b() : false;
  };
  protoOf(JobSupport).z1a = function (cause) {
    var finalState = get_COMPLETING_ALREADY();
    if (this.t1a()) {
      finalState = cancelMakeCompleting(this, cause);
      if (finalState === get_COMPLETING_WAITING_CHILDREN())
        return true;
    }
    if (finalState === get_COMPLETING_ALREADY()) {
      finalState = makeCancelling(this, cause);
    }
    var tmp;
    if (finalState === get_COMPLETING_ALREADY()) {
      tmp = true;
    } else if (finalState === get_COMPLETING_WAITING_CHILDREN()) {
      tmp = true;
    } else if (finalState === get_TOO_LATE_TO_CANCEL()) {
      tmp = false;
    } else {
      this.a1a(finalState);
      tmp = true;
    }
    return tmp;
  };
  protoOf(JobSupport).a1b = function () {
    var state = this.j1a();
    var tmp;
    if (state instanceof Finishing) {
      tmp = state.b1e();
    } else {
      if (state instanceof CompletedExceptionally) {
        tmp = state.v19_1;
      } else {
        if (!(state == null) ? isInterface(state, Incomplete) : false) {
          var message = 'Cannot be cancelling child in this state: ' + toString(state);
          throw IllegalStateException_init_$Create$(toString_0(message));
        } else {
          tmp = null;
        }
      }
    }
    var rootCause = tmp;
    var tmp1_elvis_lhs = rootCause instanceof CancellationException ? rootCause : null;
    return tmp1_elvis_lhs == null ? new JobCancellationException('Parent job is ' + stateString(this, state), rootCause, this) : tmp1_elvis_lhs;
  };
  protoOf(JobSupport).y19 = function (proposedUpdate) {
    // Inline function 'kotlinx.coroutines.JobSupport.loopOnState' call
    while (true) {
      $l$block: {
        // Inline function 'kotlinx.coroutines.JobSupport.makeCompletingOnce.<anonymous>' call
        var state = this.j1a();
        var finalState = tryMakeCompleting(this, state, proposedUpdate);
        if (finalState === get_COMPLETING_ALREADY())
          throw IllegalStateException_init_$Create$_0('Job ' + this + ' is already complete or completing, ' + ('but is being completed with ' + toString(proposedUpdate)), _get_exceptionOrNull__b3j7js(proposedUpdate, this));
        else if (finalState === get_COMPLETING_RETRY()) {
          break $l$block;
        } else
          return finalState;
      }
    }
  };
  protoOf(JobSupport).b1b = function (child) {
    // Inline function 'kotlinx.coroutines.asHandler' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = new ChildHandleNode(child);
    var tmp = this.r1a(true, VOID, tmp$ret$1);
    return isInterface(tmp, ChildHandle) ? tmp : THROW_CCE();
  };
  protoOf(JobSupport).b1a = function (exception) {
    throw exception;
  };
  protoOf(JobSupport).c1b = function (cause) {
  };
  protoOf(JobSupport).d1b = function () {
    return false;
  };
  protoOf(JobSupport).e1b = function () {
    return true;
  };
  protoOf(JobSupport).f1b = function (exception) {
    return false;
  };
  protoOf(JobSupport).u19 = function (state) {
  };
  protoOf(JobSupport).a1a = function (state) {
  };
  protoOf(JobSupport).toString = function () {
    return this.g1b() + '@' + get_hexAddress(this);
  };
  protoOf(JobSupport).g1b = function () {
    return this.c1a() + '{' + stateString(this, this.j1a()) + '}';
  };
  protoOf(JobSupport).c1a = function () {
    return get_classSimpleName(this);
  };
  function boxIncomplete(_this__u8e3s4) {
    _init_properties_JobSupport_kt__68f172();
    var tmp;
    if (!(_this__u8e3s4 == null) ? isInterface(_this__u8e3s4, Incomplete) : false) {
      tmp = new IncompleteStateBox(_this__u8e3s4);
    } else {
      tmp = _this__u8e3s4;
    }
    return tmp;
  }
  function JobCancellingNode() {
    JobNode.call(this);
  }
  function InactiveNodeList(list) {
    this.x1d_1 = list;
  }
  protoOf(InactiveNodeList).x1c = function () {
    return this.x1d_1;
  };
  protoOf(InactiveNodeList).q19 = function () {
    return false;
  };
  protoOf(InactiveNodeList).toString = function () {
    return get_DEBUG() ? this.x1d_1.b1d('New') : anyToString(this);
  };
  function ChildHandleNode(childJob) {
    JobCancellingNode.call(this);
    this.h1e_1 = childJob;
  }
  protoOf(ChildHandleNode).r1e = function (cause) {
    return this.h1e_1.x1a(this.p1d());
  };
  protoOf(ChildHandleNode).invoke = function (cause) {
    return this.r1e(cause);
  };
  protoOf(ChildHandleNode).y1a = function (cause) {
    return this.p1d().y1a(cause);
  };
  function InvokeOnCancelling(handler) {
    JobCancellingNode.call(this);
    this.x1e_1 = handler;
    this.y1e_1 = atomic$int$1(0);
  }
  protoOf(InvokeOnCancelling).r1e = function (cause) {
    if (this.y1e_1.atomicfu$compareAndSet(0, 1))
      this.x1e_1(cause);
  };
  protoOf(InvokeOnCancelling).invoke = function (cause) {
    return this.r1e(cause);
  };
  function InvokeOnCompletion(handler) {
    JobNode.call(this);
    this.d1f_1 = handler;
  }
  protoOf(InvokeOnCompletion).r1e = function (cause) {
    return this.d1f_1(cause);
  };
  protoOf(InvokeOnCompletion).invoke = function (cause) {
    return this.r1e(cause);
  };
  function IncompleteStateBox(state) {
    this.e1f_1 = state;
  }
  var properties_initialized_JobSupport_kt_5iq8a4;
  function _init_properties_JobSupport_kt__68f172() {
    if (!properties_initialized_JobSupport_kt_5iq8a4) {
      properties_initialized_JobSupport_kt_5iq8a4 = true;
      COMPLETING_ALREADY = new Symbol('COMPLETING_ALREADY');
      COMPLETING_WAITING_CHILDREN = new Symbol('COMPLETING_WAITING_CHILDREN');
      COMPLETING_RETRY = new Symbol('COMPLETING_RETRY');
      TOO_LATE_TO_CANCEL = new Symbol('TOO_LATE_TO_CANCEL');
      SEALED = new Symbol('SEALED');
      EMPTY_NEW = new Empty(false);
      EMPTY_ACTIVE = new Empty(true);
    }
  }
  function MainCoroutineDispatcher() {
    CoroutineDispatcher.call(this);
  }
  protoOf(MainCoroutineDispatcher).toString = function () {
    var tmp0_elvis_lhs = this.h1f();
    return tmp0_elvis_lhs == null ? get_classSimpleName(this) + '@' + get_hexAddress(this) : tmp0_elvis_lhs;
  };
  protoOf(MainCoroutineDispatcher).h1f = function () {
    var main = Dispatchers_getInstance().m1f();
    if (this === main)
      return 'Dispatchers.Main';
    var tmp;
    try {
      tmp = main.g1f();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof UnsupportedOperationException) {
        var e = $p;
        tmp_0 = null;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    var immediate = tmp;
    if (this === immediate)
      return 'Dispatchers.Main.immediate';
    return null;
  };
  function TimeoutCancellationException() {
  }
  function Unconfined() {
    Unconfined_instance = this;
    CoroutineDispatcher.call(this);
  }
  protoOf(Unconfined).u1b = function (context) {
    return false;
  };
  protoOf(Unconfined).v1b = function (context, block) {
    var yieldContext = context.o8(Key_instance_3);
    if (!(yieldContext == null)) {
      yieldContext.p1f_1 = true;
      return Unit_instance;
    }
    throw UnsupportedOperationException_init_$Create$('Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls.');
  };
  protoOf(Unconfined).toString = function () {
    return 'Dispatchers.Unconfined';
  };
  var Unconfined_instance;
  function Unconfined_getInstance() {
    if (Unconfined_instance == null)
      new Unconfined();
    return Unconfined_instance;
  }
  function Key_2() {
  }
  var Key_instance_3;
  function Key_getInstance_2() {
    return Key_instance_3;
  }
  function OpDescriptor() {
  }
  function handleUncaughtCoroutineException(context, exception) {
    var tmp0_iterator = get_platformExceptionHandlers().h();
    while (tmp0_iterator.i()) {
      var handler = tmp0_iterator.j();
      try {
        handler.d1c(context, exception);
      } catch ($p) {
        if ($p instanceof ExceptionSuccessfullyProcessed) {
          var _ = $p;
          return Unit_instance;
        } else {
          if ($p instanceof Error) {
            var t = $p;
            propagateExceptionFinalResort(handlerException(exception, t));
          } else {
            throw $p;
          }
        }
      }
    }
    try {
      addSuppressed(exception, new DiagnosticCoroutineContextException(context));
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
      } else {
        throw $p;
      }
    }
    propagateExceptionFinalResort(exception);
  }
  function ExceptionSuccessfullyProcessed() {
  }
  function get_UNDEFINED() {
    _init_properties_DispatchedContinuation_kt__tnmqc0();
    return UNDEFINED;
  }
  var UNDEFINED;
  function get_REUSABLE_CLAIMED() {
    _init_properties_DispatchedContinuation_kt__tnmqc0();
    return REUSABLE_CLAIMED;
  }
  var REUSABLE_CLAIMED;
  function _get_reusableCancellableContinuation__9qex09($this) {
    var tmp = $this.b1c_1.kotlinx$atomicfu$value;
    return tmp instanceof CancellableContinuationImpl ? tmp : null;
  }
  function DispatchedContinuation(dispatcher, continuation) {
    DispatchedTask.call(this, -1);
    this.x1b_1 = dispatcher;
    this.y1b_1 = continuation;
    this.z1b_1 = get_UNDEFINED();
    this.a1c_1 = threadContextElements(this.n8());
    this.b1c_1 = atomic$ref$1(null);
  }
  protoOf(DispatchedContinuation).n8 = function () {
    return this.y1b_1.n8();
  };
  protoOf(DispatchedContinuation).q1f = function () {
    // Inline function 'kotlinx.atomicfu.loop' call
    var this_0 = this.b1c_1;
    while (true) {
      // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.awaitReusability.<anonymous>' call
      if (!(this_0.kotlinx$atomicfu$value === get_REUSABLE_CLAIMED()))
        return Unit_instance;
    }
  };
  protoOf(DispatchedContinuation).c1c = function () {
    this.q1f();
    var tmp0_safe_receiver = _get_reusableCancellableContinuation__9qex09(this);
    if (tmp0_safe_receiver == null)
      null;
    else {
      tmp0_safe_receiver.o1b();
    }
  };
  protoOf(DispatchedContinuation).r1f = function () {
    var state = this.z1b_1;
    // Inline function 'kotlinx.coroutines.assert' call
    this.z1b_1 = get_UNDEFINED();
    return state;
  };
  protoOf(DispatchedContinuation).s1f = function () {
    return this;
  };
  protoOf(DispatchedContinuation).u8 = function (result) {
    var context = this.y1b_1.n8();
    var state = toState(result);
    if (this.x1b_1.u1b(context)) {
      this.z1b_1 = state;
      this.j1c_1 = 0;
      this.x1b_1.v1b(context, this);
    } else {
      $l$block: {
        // Inline function 'kotlinx.coroutines.internal.executeUnconfined' call
        // Inline function 'kotlinx.coroutines.assert' call
        var eventLoop = ThreadLocalEventLoop_getInstance().s1c();
        if (false) {}
        var tmp;
        if (eventLoop.m1c()) {
          this.z1b_1 = state;
          this.j1c_1 = 0;
          eventLoop.l1c(this);
          tmp = true;
        } else {
          // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
          eventLoop.o1c(true);
          try {
            // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeWith.<anonymous>' call
            // Inline function 'kotlinx.coroutines.withCoroutineContext' call
            this.n8();
            this.a1c_1;
            this.y1b_1.u8(result);
            $l$loop: while (eventLoop.i1c()) {
            }
          } catch ($p) {
            if ($p instanceof Error) {
              var e = $p;
              this.t1f(e, null);
            } else {
              throw $p;
            }
          }
          finally {
            eventLoop.p1c(true);
          }
          tmp = false;
        }
      }
    }
  };
  protoOf(DispatchedContinuation).u1f = function (takenState, cause) {
    if (takenState instanceof CompletedWithCancellation) {
      takenState.s1b_1(cause);
    }
  };
  protoOf(DispatchedContinuation).toString = function () {
    return 'DispatchedContinuation[' + this.x1b_1 + ', ' + toDebugString(this.y1b_1) + ']';
  };
  function resumeCancellableWith(_this__u8e3s4, result, onCancellation) {
    onCancellation = onCancellation === VOID ? null : onCancellation;
    _init_properties_DispatchedContinuation_kt__tnmqc0();
    var tmp;
    if (_this__u8e3s4 instanceof DispatchedContinuation) {
      var state = toState(result, onCancellation);
      var tmp_0;
      if (_this__u8e3s4.x1b_1.u1b(_this__u8e3s4.n8())) {
        _this__u8e3s4.z1b_1 = state;
        _this__u8e3s4.j1c_1 = 1;
        _this__u8e3s4.x1b_1.v1b(_this__u8e3s4.n8(), _this__u8e3s4);
        tmp_0 = Unit_instance;
      } else {
        $l$block: {
          // Inline function 'kotlinx.coroutines.internal.executeUnconfined' call
          // Inline function 'kotlinx.coroutines.assert' call
          var eventLoop = ThreadLocalEventLoop_getInstance().s1c();
          if (false) {}
          var tmp_1;
          if (eventLoop.m1c()) {
            _this__u8e3s4.z1b_1 = state;
            _this__u8e3s4.j1c_1 = 1;
            eventLoop.l1c(_this__u8e3s4);
            tmp_1 = true;
          } else {
            // Inline function 'kotlinx.coroutines.runUnconfinedEventLoop' call
            eventLoop.o1c(true);
            try {
              // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeCancellableWith.<anonymous>' call
              var tmp$ret$3;
              $l$block_0: {
                // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeCancelled' call
                var job = _this__u8e3s4.n8().o8(Key_instance_2);
                if (!(job == null) ? !job.q19() : false) {
                  var cause = job.n1a();
                  _this__u8e3s4.u1f(state, cause);
                  // Inline function 'kotlin.coroutines.resumeWithException' call
                  // Inline function 'kotlin.Companion.failure' call
                  var tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(cause));
                  _this__u8e3s4.u8(tmp$ret$1);
                  tmp$ret$3 = true;
                  break $l$block_0;
                }
                tmp$ret$3 = false;
              }
              if (!tmp$ret$3) {
                // Inline function 'kotlinx.coroutines.internal.DispatchedContinuation.resumeUndispatchedWith' call
                // Inline function 'kotlinx.coroutines.withContinuationContext' call
                _this__u8e3s4.y1b_1;
                _this__u8e3s4.a1c_1;
                _this__u8e3s4.y1b_1.u8(result);
              }
              $l$loop: while (eventLoop.i1c()) {
              }
            } catch ($p) {
              if ($p instanceof Error) {
                var e = $p;
                _this__u8e3s4.t1f(e, null);
              } else {
                throw $p;
              }
            }
            finally {
              eventLoop.p1c(true);
            }
            tmp_1 = false;
          }
        }
        tmp_0 = Unit_instance;
      }
      tmp = tmp_0;
    } else {
      _this__u8e3s4.u8(result);
      tmp = Unit_instance;
    }
    return tmp;
  }
  var properties_initialized_DispatchedContinuation_kt_2siadq;
  function _init_properties_DispatchedContinuation_kt__tnmqc0() {
    if (!properties_initialized_DispatchedContinuation_kt_2siadq) {
      properties_initialized_DispatchedContinuation_kt_2siadq = true;
      UNDEFINED = new Symbol('UNDEFINED');
      REUSABLE_CLAIMED = new Symbol('REUSABLE_CLAIMED');
    }
  }
  function DispatchedTask(resumeMode) {
    SchedulerTask.call(this);
    this.j1c_1 = resumeMode;
  }
  protoOf(DispatchedTask).u1f = function (takenState, cause) {
  };
  protoOf(DispatchedTask).v1f = function (state) {
    return (state == null ? true : !(state == null)) ? state : THROW_CCE();
  };
  protoOf(DispatchedTask).w1f = function (state) {
    var tmp0_safe_receiver = state instanceof CompletedExceptionally ? state : null;
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.v19_1;
  };
  protoOf(DispatchedTask).k1c = function () {
    // Inline function 'kotlinx.coroutines.assert' call
    var taskContext = get_taskContext(this);
    var fatalException = null;
    try {
      var tmp = this.s1f();
      var delegate = tmp instanceof DispatchedContinuation ? tmp : THROW_CCE();
      var continuation = delegate.y1b_1;
      // Inline function 'kotlinx.coroutines.withContinuationContext' call
      delegate.a1c_1;
      var context = continuation.n8();
      var state = this.r1f();
      var exception = this.w1f(state);
      var job = (exception == null ? get_isCancellableMode(this.j1c_1) : false) ? context.o8(Key_instance_2) : null;
      var tmp_0;
      if (!(job == null) ? !job.q19() : false) {
        var cause = job.n1a();
        this.u1f(state, cause);
        // Inline function 'kotlin.Companion.failure' call
        var exception_0 = recoverStackTrace(cause, continuation);
        var tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(exception_0));
        continuation.u8(tmp$ret$0);
        tmp_0 = Unit_instance;
      } else {
        var tmp_1;
        if (!(exception == null)) {
          // Inline function 'kotlin.coroutines.resumeWithException' call
          // Inline function 'kotlin.Companion.failure' call
          var tmp$ret$1 = _Result___init__impl__xyqfz8(createFailure(exception));
          continuation.u8(tmp$ret$1);
          tmp_1 = Unit_instance;
        } else {
          // Inline function 'kotlin.coroutines.resume' call
          // Inline function 'kotlin.Companion.success' call
          var value = this.v1f(state);
          var tmp$ret$3 = _Result___init__impl__xyqfz8(value);
          continuation.u8(tmp$ret$3);
          tmp_1 = Unit_instance;
        }
        tmp_0 = tmp_1;
      }
    } catch ($p) {
      if ($p instanceof Error) {
        var e = $p;
        fatalException = e;
      } else {
        throw $p;
      }
    }
    finally {
      // Inline function 'kotlin.runCatching' call
      var tmp_2;
      try {
        // Inline function 'kotlin.Companion.success' call
        // Inline function 'kotlinx.coroutines.DispatchedTask.run.<anonymous>' call
        // Inline function 'kotlinx.coroutines.afterTask' call
        tmp_2 = _Result___init__impl__xyqfz8(Unit_instance);
      } catch ($p) {
        var tmp_3;
        if ($p instanceof Error) {
          var e_0 = $p;
          // Inline function 'kotlin.Companion.failure' call
          tmp_3 = _Result___init__impl__xyqfz8(createFailure(e_0));
        } else {
          throw $p;
        }
        tmp_2 = tmp_3;
      }
      var result = tmp_2;
      this.t1f(fatalException, Result__exceptionOrNull_impl_p6xea9(result));
    }
  };
  protoOf(DispatchedTask).t1f = function (exception, finallyException) {
    if (exception === null ? finallyException === null : false)
      return Unit_instance;
    if (!(exception === null) ? !(finallyException === null) : false) {
      // Inline function 'kotlinx.coroutines.addSuppressedThrowable' call
    }
    var cause = exception == null ? finallyException : exception;
    var reason = new CoroutinesInternalError('Fatal exception in coroutines machinery for ' + this + '. ' + "Please read KDoc to 'handleFatalException' method and report this incident to maintainers", ensureNotNull(cause));
    handleCoroutineException(this.s1f().n8(), reason);
  };
  function get_isCancellableMode(_this__u8e3s4) {
    return _this__u8e3s4 === 1 ? true : _this__u8e3s4 === 2;
  }
  function Symbol(symbol) {
    this.x1f_1 = symbol;
  }
  protoOf(Symbol).toString = function () {
    return '<' + this.x1f_1 + '>';
  };
  function startCoroutineCancellable(_this__u8e3s4, fatalCompletion) {
    var tmp;
    try {
      var tmp_0 = intercepted(_this__u8e3s4);
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      resumeCancellableWith(tmp_0, tmp$ret$0);
      tmp = Unit_instance;
    } catch ($p) {
      var tmp_1;
      if ($p instanceof Error) {
        var e = $p;
        dispatcherFailure$accessor$glj1hg(fatalCompletion, e);
        tmp_1 = Unit_instance;
      } else {
        throw $p;
      }
      tmp = tmp_1;
    }
    return tmp;
  }
  function startCoroutineCancellable_0(_this__u8e3s4, receiver, completion, onCancellation) {
    onCancellation = onCancellation === VOID ? null : onCancellation;
    var tmp;
    try {
      var tmp_0 = intercepted(createCoroutineUnintercepted(_this__u8e3s4, receiver, completion));
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      resumeCancellableWith(tmp_0, tmp$ret$0, onCancellation);
      tmp = Unit_instance;
    } catch ($p) {
      var tmp_1;
      if ($p instanceof Error) {
        var e = $p;
        dispatcherFailure$accessor$glj1hg(completion, e);
        tmp_1 = Unit_instance;
      } else {
        throw $p;
      }
      tmp = tmp_1;
    }
    return tmp;
  }
  function dispatcherFailure(completion, e) {
    // Inline function 'kotlin.Companion.failure' call
    var tmp$ret$0 = _Result___init__impl__xyqfz8(createFailure(e));
    completion.u8(tmp$ret$0);
    throw e;
  }
  function dispatcherFailure$accessor$glj1hg(completion, e) {
    return dispatcherFailure(completion, e);
  }
  function startCoroutineUndispatched(_this__u8e3s4, receiver, completion) {
    $l$block: {
      // Inline function 'kotlinx.coroutines.intrinsics.startDirect' call
      // Inline function 'kotlinx.coroutines.internal.probeCoroutineCreated' call
      var actualCompletion = completion;
      var tmp;
      try {
        // Inline function 'kotlinx.coroutines.intrinsics.startCoroutineUndispatched.<anonymous>' call
        // Inline function 'kotlinx.coroutines.withCoroutineContext' call
        completion.n8();
        // Inline function 'kotlinx.coroutines.intrinsics.startCoroutineUndispatched.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.coroutines.intrinsics.startCoroutineUninterceptedOrReturn' call
        // Inline function 'kotlin.js.asDynamic' call
        var a = _this__u8e3s4;
        tmp = typeof a === 'function' ? a(receiver, actualCompletion) : _this__u8e3s4.i9(receiver, actualCompletion);
      } catch ($p) {
        var tmp_0;
        if ($p instanceof Error) {
          var e = $p;
          // Inline function 'kotlin.coroutines.resumeWithException' call
          // Inline function 'kotlin.Companion.failure' call
          var tmp$ret$6 = _Result___init__impl__xyqfz8(createFailure(e));
          actualCompletion.u8(tmp$ret$6);
          break $l$block;
        } else {
          throw $p;
        }
      }
      var value = tmp;
      if (!(value === get_COROUTINE_SUSPENDED())) {
        // Inline function 'kotlin.coroutines.resume' call
        // Inline function 'kotlin.Companion.success' call
        var value_0 = (value == null ? true : !(value == null)) ? value : THROW_CCE();
        var tmp$ret$9 = _Result___init__impl__xyqfz8(value_0);
        actualCompletion.u8(tmp$ret$9);
      }
    }
  }
  function CompletionHandlerBase() {
    LinkedListNode.call(this);
  }
  function invokeIt(_this__u8e3s4, cause) {
    if (typeof _this__u8e3s4 === 'function')
      _this__u8e3s4(cause);
    else {
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.invoke(cause);
    }
  }
  function toDebugString(_this__u8e3s4) {
    return toString_0(_this__u8e3s4);
  }
  function createDefaultDispatcher() {
    var tmp;
    if (isJsdom()) {
      tmp = NodeDispatcher_getInstance();
    } else {
      var tmp_0;
      var tmp_1;
      if (!(typeof window === 'undefined')) {
        // Inline function 'kotlin.js.asDynamic' call
        tmp_1 = window != null;
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        // Inline function 'kotlin.js.asDynamic' call
        tmp_0 = !(typeof window.addEventListener === 'undefined');
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = asCoroutineDispatcher(window);
      } else {
        if (typeof process === 'undefined' ? true : typeof process.nextTick === 'undefined') {
          tmp = SetTimeoutDispatcher_getInstance();
        } else {
          tmp = NodeDispatcher_getInstance();
        }
      }
    }
    return tmp;
  }
  function isJsdom() {
    return ((((!(typeof navigator === 'undefined') ? navigator != null : false) ? navigator.userAgent != null : false) ? !(typeof navigator.userAgent === 'undefined') : false) ? !(typeof navigator.userAgent.match === 'undefined') : false) ? navigator.userAgent.match('\\bjsdom\\b') : false;
  }
  function newCoroutineContext(_this__u8e3s4, context) {
    var combined = _this__u8e3s4.p19().ej(context);
    return (!(combined === Dispatchers_getInstance().i1f_1) ? combined.o8(Key_instance) == null : false) ? combined.ej(Dispatchers_getInstance().i1f_1) : combined;
  }
  function get_coroutineName(_this__u8e3s4) {
    return null;
  }
  var counter;
  function get_DEBUG() {
    return DEBUG;
  }
  var DEBUG;
  function get_classSimpleName(_this__u8e3s4) {
    var tmp0_elvis_lhs = getKClassFromExpression(_this__u8e3s4).j9();
    return tmp0_elvis_lhs == null ? 'Unknown' : tmp0_elvis_lhs;
  }
  function get_hexAddress(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var result = _this__u8e3s4.__debug_counter;
    if (!(typeof result === 'number')) {
      counter = counter + 1 | 0;
      result = counter;
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.__debug_counter = result;
    }
    return ((!(result == null) ? typeof result === 'number' : false) ? result : THROW_CCE()).toString();
  }
  function NodeDispatcher() {
    NodeDispatcher_instance = this;
    SetTimeoutBasedDispatcher.call(this);
  }
  protoOf(NodeDispatcher).a1g = function () {
    process.nextTick(this.h1g_1.f1g_1);
  };
  var NodeDispatcher_instance;
  function NodeDispatcher_getInstance() {
    if (NodeDispatcher_instance == null)
      new NodeDispatcher();
    return NodeDispatcher_instance;
  }
  function ScheduledMessageQueue$processQueue$lambda(this$0) {
    return function () {
      this$0.l1g();
      return Unit_instance;
    };
  }
  function ScheduledMessageQueue(dispatcher) {
    MessageQueue.call(this);
    this.e1g_1 = dispatcher;
    var tmp = this;
    tmp.f1g_1 = ScheduledMessageQueue$processQueue$lambda(this);
  }
  protoOf(ScheduledMessageQueue).m1g = function () {
    this.e1g_1.a1g();
  };
  protoOf(ScheduledMessageQueue).n1g = function () {
    setTimeout(this.f1g_1, 0);
  };
  protoOf(ScheduledMessageQueue).o1g = function (timeout) {
    setTimeout(this.f1g_1, timeout);
  };
  function WindowMessageQueue$lambda(this$0) {
    return function (event) {
      var tmp;
      if (event.source == this$0.z1g_1 ? event.data == this$0.a1h_1 : false) {
        event.stopPropagation();
        this$0.l1g();
        tmp = Unit_instance;
      }
      return Unit_instance;
    };
  }
  function WindowMessageQueue$schedule$lambda(this$0) {
    return function (it) {
      this$0.l1g();
      return Unit_instance;
    };
  }
  function WindowMessageQueue(window_0) {
    MessageQueue.call(this);
    this.z1g_1 = window_0;
    this.a1h_1 = 'dispatchCoroutine';
    this.z1g_1.addEventListener('message', WindowMessageQueue$lambda(this), true);
  }
  protoOf(WindowMessageQueue).m1g = function () {
    var tmp = Promise.resolve(Unit_instance);
    tmp.then(WindowMessageQueue$schedule$lambda(this));
  };
  protoOf(WindowMessageQueue).n1g = function () {
    this.z1g_1.postMessage(this.a1h_1, '*');
  };
  function asCoroutineDispatcher(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_elvis_lhs = _this__u8e3s4.coroutineDispatcher;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new WindowDispatcher(_this__u8e3s4);
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.coroutines.asCoroutineDispatcher.<anonymous>' call
      // Inline function 'kotlin.js.asDynamic' call
      _this__u8e3s4.coroutineDispatcher = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function propagateExceptionFinalResort(exception) {
    console.error(exception.toString());
  }
  function Dispatchers() {
    Dispatchers_instance = this;
    this.i1f_1 = createDefaultDispatcher();
    this.j1f_1 = Unconfined_getInstance();
    this.k1f_1 = new JsMainDispatcher(this.i1f_1, false);
    this.l1f_1 = null;
  }
  protoOf(Dispatchers).m1f = function () {
    var tmp0_elvis_lhs = this.l1f_1;
    return tmp0_elvis_lhs == null ? this.k1f_1 : tmp0_elvis_lhs;
  };
  var Dispatchers_instance;
  function Dispatchers_getInstance() {
    if (Dispatchers_instance == null)
      new Dispatchers();
    return Dispatchers_instance;
  }
  function JsMainDispatcher(delegate, invokeImmediately) {
    MainCoroutineDispatcher.call(this);
    this.c1h_1 = delegate;
    this.d1h_1 = invokeImmediately;
    this.e1h_1 = this.d1h_1 ? this : new JsMainDispatcher(this.c1h_1, true);
  }
  protoOf(JsMainDispatcher).g1f = function () {
    return this.e1h_1;
  };
  protoOf(JsMainDispatcher).u1b = function (context) {
    return !this.d1h_1;
  };
  protoOf(JsMainDispatcher).v1b = function (context, block) {
    return this.c1h_1.v1b(context, block);
  };
  protoOf(JsMainDispatcher).toString = function () {
    var tmp0_elvis_lhs = this.h1f();
    return tmp0_elvis_lhs == null ? this.c1h_1.toString() : tmp0_elvis_lhs;
  };
  function createEventLoop() {
    return new UnconfinedEventLoop();
  }
  function UnconfinedEventLoop() {
    EventLoop.call(this);
  }
  protoOf(UnconfinedEventLoop).v1b = function (context, block) {
    unsupported();
  };
  function unsupported() {
    throw UnsupportedOperationException_init_$Create$('runBlocking event loop is not supported');
  }
  function JobCancellationException(message, cause, job) {
    CancellationException_init_$Init$(message, cause, this);
    captureStack(this, JobCancellationException);
    this.j1h_1 = job;
  }
  protoOf(JobCancellationException).toString = function () {
    return protoOf(CancellationException).toString.call(this) + '; job=' + this.j1h_1;
  };
  protoOf(JobCancellationException).equals = function (other) {
    var tmp;
    if (other === this) {
      tmp = true;
    } else {
      var tmp_0;
      var tmp_1;
      var tmp_2;
      if (other instanceof JobCancellationException) {
        tmp_2 = other.message == this.message;
      } else {
        tmp_2 = false;
      }
      if (tmp_2) {
        tmp_1 = equals(other.j1h_1, this.j1h_1);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp_0 = equals(other.cause, this.cause);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(JobCancellationException).hashCode = function () {
    var tmp = imul(imul(getStringHashCode(ensureNotNull(this.message)), 31) + hashCode(this.j1h_1) | 0, 31);
    var tmp0_safe_receiver = this.cause;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    return tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
  };
  function Runnable() {
  }
  function SchedulerTask() {
  }
  function get_taskContext(_this__u8e3s4) {
    return TaskContext_instance;
  }
  function TaskContext() {
  }
  var TaskContext_instance;
  function TaskContext_getInstance() {
    return TaskContext_instance;
  }
  function identitySet(expectedSize) {
    return HashSet_init_$Create$(expectedSize);
  }
  function get_platformExceptionHandlers_() {
    _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf();
    return platformExceptionHandlers_;
  }
  var platformExceptionHandlers_;
  function get_platformExceptionHandlers() {
    _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf();
    return get_platformExceptionHandlers_();
  }
  function DiagnosticCoroutineContextException(context) {
    RuntimeException_init_$Init$_0(toString_0(context), this);
    captureStack(this, DiagnosticCoroutineContextException);
  }
  var properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx;
  function _init_properties_CoroutineExceptionHandlerImpl_kt__37d7wf() {
    if (!properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx) {
      properties_initialized_CoroutineExceptionHandlerImpl_kt_qhrgvx = true;
      // Inline function 'kotlin.collections.mutableSetOf' call
      platformExceptionHandlers_ = LinkedHashSet_init_$Create$();
    }
  }
  function SetTimeoutDispatcher() {
    SetTimeoutDispatcher_instance = this;
    SetTimeoutBasedDispatcher.call(this);
  }
  protoOf(SetTimeoutDispatcher).a1g = function () {
    this.h1g_1.o1g(0);
  };
  var SetTimeoutDispatcher_instance;
  function SetTimeoutDispatcher_getInstance() {
    if (SetTimeoutDispatcher_instance == null)
      new SetTimeoutDispatcher();
    return SetTimeoutDispatcher_instance;
  }
  function SetTimeoutBasedDispatcher() {
    CoroutineDispatcher.call(this);
    this.h1g_1 = new ScheduledMessageQueue(this);
  }
  protoOf(SetTimeoutBasedDispatcher).v1b = function (context, block) {
    this.h1g_1.v1g(block);
  };
  function MessageQueue() {
    this.i1g_1 = ArrayDeque_init_$Create$();
    this.j1g_1 = 16;
    this.k1g_1 = false;
  }
  protoOf(MessageQueue).k = function () {
    return this.i1g_1.ld_1;
  };
  protoOf(MessageQueue).p1g = function (element) {
    return this.i1g_1.e(element);
  };
  protoOf(MessageQueue).e = function (element) {
    return this.p1g((!(element == null) ? isInterface(element, Runnable) : false) ? element : THROW_CCE());
  };
  protoOf(MessageQueue).q1g = function (elements) {
    return this.i1g_1.q(elements);
  };
  protoOf(MessageQueue).q = function (elements) {
    return this.q1g(elements);
  };
  protoOf(MessageQueue).r1g = function (element) {
    return this.i1g_1.f1(element);
  };
  protoOf(MessageQueue).f1 = function (element) {
    if (!(!(element == null) ? isInterface(element, Runnable) : false))
      return false;
    return this.r1g((!(element == null) ? isInterface(element, Runnable) : false) ? element : THROW_CCE());
  };
  protoOf(MessageQueue).s1g = function (elements) {
    return this.i1g_1.b2(elements);
  };
  protoOf(MessageQueue).b2 = function (elements) {
    return this.s1g(elements);
  };
  protoOf(MessageQueue).m = function (index) {
    return this.i1g_1.m(index);
  };
  protoOf(MessageQueue).l = function () {
    return this.i1g_1.l();
  };
  protoOf(MessageQueue).h = function () {
    return this.i1g_1.h();
  };
  protoOf(MessageQueue).r = function (index) {
    return this.i1g_1.r(index);
  };
  protoOf(MessageQueue).z3 = function (index) {
    return this.i1g_1.z3(index);
  };
  protoOf(MessageQueue).t1g = function (elements) {
    return this.i1g_1.u3(elements);
  };
  protoOf(MessageQueue).u3 = function (elements) {
    return this.t1g(elements);
  };
  protoOf(MessageQueue).u1g = function (index, element) {
    return this.i1g_1.t(index, element);
  };
  protoOf(MessageQueue).t = function (index, element) {
    return this.u1g(index, (!(element == null) ? isInterface(element, Runnable) : false) ? element : THROW_CCE());
  };
  protoOf(MessageQueue).c2 = function (fromIndex, toIndex) {
    return this.i1g_1.c2(fromIndex, toIndex);
  };
  protoOf(MessageQueue).v1g = function (element) {
    this.p1g(element);
    if (!this.k1g_1) {
      this.k1g_1 = true;
      this.m1g();
    }
  };
  protoOf(MessageQueue).l1g = function () {
    try {
      // Inline function 'kotlin.repeat' call
      var times = this.j1g_1;
      // Inline function 'kotlin.contracts.contract' call
      var inductionVariable = 0;
      if (inductionVariable < times)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlinx.coroutines.MessageQueue.process.<anonymous>' call
          var tmp0_elvis_lhs = removeFirstOrNull(this);
          var tmp;
          if (tmp0_elvis_lhs == null) {
            return Unit_instance;
          } else {
            tmp = tmp0_elvis_lhs;
          }
          var element = tmp;
          element.k1c();
        }
         while (inductionVariable < times);
    }finally {
      if (this.l()) {
        this.k1g_1 = false;
      } else {
        this.n1g();
      }
    }
  };
  function WindowDispatcher(window_0) {
    CoroutineDispatcher.call(this);
    this.n1h_1 = window_0;
    this.o1h_1 = new WindowMessageQueue(this.n1h_1);
  }
  protoOf(WindowDispatcher).v1b = function (context, block) {
    return this.o1h_1.v1g(block);
  };
  function LinkedListHead() {
    LinkedListNode.call(this);
  }
  protoOf(LinkedListHead).i1d = function () {
    throw UnsupportedOperationException_init_$Create$_0();
  };
  function LinkedListNode() {
    this.c1d_1 = this;
    this.d1d_1 = this;
    this.e1d_1 = false;
  }
  protoOf(LinkedListNode).j1d = function (node) {
    var prev = this.d1d_1;
    node.c1d_1 = this;
    node.d1d_1 = prev;
    prev.c1d_1 = node;
    this.d1d_1 = node;
  };
  protoOf(LinkedListNode).i1d = function () {
    return this.k1d();
  };
  protoOf(LinkedListNode).p1b = function () {
    this.i1d();
  };
  protoOf(LinkedListNode).k1d = function () {
    if (this.e1d_1)
      return false;
    var prev = this.d1d_1;
    var next = this.c1d_1;
    prev.c1d_1 = next;
    next.d1d_1 = prev;
    this.e1d_1 = true;
    return true;
  };
  protoOf(LinkedListNode).q1d = function (node) {
    if (!(this.c1d_1 === this))
      return false;
    this.j1d(node);
    return true;
  };
  function unwrap(exception) {
    return exception;
  }
  function recoverStackTrace(exception, continuation) {
    return exception;
  }
  function SynchronizedObject() {
  }
  function threadContextElements(context) {
    return 0;
  }
  function CommonThreadLocal() {
    this.t1c_1 = null;
  }
  protoOf(CommonThreadLocal).u1c = function () {
    var tmp = this.t1c_1;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(CommonThreadLocal).v1c = function (value) {
    this.t1c_1 = value;
  };
  function commonThreadLocal(name) {
    return new CommonThreadLocal();
  }
  //region block: post-declaration
  protoOf(JobSupport).r1a = invokeOnCompletion$default;
  protoOf(JobSupport).v1a = cancel$default;
  protoOf(JobSupport).ej = plus;
  protoOf(JobSupport).o8 = get_0;
  protoOf(JobSupport).dj = fold;
  protoOf(JobSupport).cj = minusKey_0;
  protoOf(CoroutineDispatcher).o8 = get;
  protoOf(CoroutineDispatcher).cj = minusKey;
  //endregion
  //region block: init
  Key_instance_1 = new Key_0();
  GlobalScope_instance = new GlobalScope();
  Key_instance_2 = new Key_1();
  NonDisposableHandle_instance = new NonDisposableHandle();
  Key_instance_3 = new Key_2();
  counter = 0;
  DEBUG = false;
  TaskContext_instance = new TaskContext();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = GlobalScope_instance;
  _.$_$.b = CoroutineScope;
  _.$_$.c = async;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/multik-multik-core.js":
/*!**************************************!*\
  !*** ./kotlin/multik-multik-core.js ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var protoOf = kotlin_kotlin.$_$.v7;
  var classMeta = kotlin_kotlin.$_$.y6;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.i;
  //endregion
  //region block: pre-declaration
  setMetadataFor(EngineType, 'EngineType', classMeta);
  setMetadataFor(Engine, 'Engine', classMeta);
  setMetadataFor(Companion, 'Companion', objectMeta, Engine);
  setMetadataFor(DefaultEngineType, 'DefaultEngineType', objectMeta, EngineType);
  setMetadataFor(KEEngineType, 'KEEngineType', objectMeta, EngineType);
  //endregion
  function EngineType(name) {
    this.um_1 = name;
  }
  function Companion() {
    Companion_instance = this;
    Engine.call(this);
    this.vm_1 = enginesProvider();
    this.wm_1 = null;
  }
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function Engine() {
    Companion_getInstance();
  }
  function DefaultEngineType() {
    DefaultEngineType_instance = this;
    EngineType.call(this, 'DEFAULT');
  }
  var DefaultEngineType_instance;
  function DefaultEngineType_getInstance() {
    if (DefaultEngineType_instance == null)
      new DefaultEngineType();
    return DefaultEngineType_instance;
  }
  function KEEngineType() {
    KEEngineType_instance = this;
    EngineType.call(this, 'KOTLIN');
  }
  var KEEngineType_instance;
  function KEEngineType_getInstance() {
    if (KEEngineType_instance == null)
      new KEEngineType();
    return KEEngineType_instance;
  }
  function get_enginesStore() {
    _init_properties_Engine_kt__fnrbfm();
    return enginesStore;
  }
  var enginesStore;
  function enginesProvider() {
    _init_properties_Engine_kt__fnrbfm();
    return get_enginesStore();
  }
  var properties_initialized_Engine_kt_oy53wk;
  function _init_properties_Engine_kt__fnrbfm() {
    if (!properties_initialized_Engine_kt_oy53wk) {
      properties_initialized_Engine_kt_oy53wk = true;
      // Inline function 'kotlin.collections.mutableMapOf' call
      enginesStore = LinkedHashMap_init_$Create$();
    }
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = DefaultEngineType_getInstance;
  _.$_$.b = KEEngineType_getInstance;
  _.$_$.c = Engine;
  _.$_$.d = get_enginesStore;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/multik-multik-default.js":
/*!*****************************************!*\
  !*** ./kotlin/multik-multik-default.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./multik-multik-core.js */ "./kotlin/multik-multik-core.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_org_jetbrains_kotlinx_multik_core, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var Engine = kotlin_org_jetbrains_kotlinx_multik_core.$_$.c;
  var protoOf = kotlin_kotlin.$_$.v7;
  var classMeta = kotlin_kotlin.$_$.y6;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var VOID = kotlin_kotlin.$_$.c;
  var get_enginesStore = kotlin_org_jetbrains_kotlinx_multik_core.$_$.d;
  var DefaultEngineType_getInstance = kotlin_org_jetbrains_kotlinx_multik_core.$_$.a;
  var Unit_instance = kotlin_kotlin.$_$.t2;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var defineProp = kotlin_kotlin.$_$.a7;
  //endregion
  //region block: pre-declaration
  setMetadataFor(DefaultEngine, 'DefaultEngine', classMeta, Engine, VOID, DefaultEngine);
  setMetadataFor(EngineInitializer, 'EngineInitializer', objectMeta);
  //endregion
  function DefaultEngine() {
    Engine.call(this);
  }
  function get_initializer() {
    return initializer;
  }
  var initializer;
  function EngineInitializer() {
    EngineInitializer_instance = this;
    // Inline function 'kotlin.collections.set' call
    var this_0 = get_enginesStore();
    var key = DefaultEngineType_getInstance();
    var value = new DefaultEngine();
    this_0.s4(key, value);
  }
  var EngineInitializer_instance;
  function EngineInitializer_getInstance() {
    if (EngineInitializer_instance == null)
      new EngineInitializer();
    return EngineInitializer_instance;
  }
  //region block: init
  initializer = EngineInitializer_getInstance();
  //endregion
  //region block: exports
  function $jsExportAll$(_) {
    var $org = _.org || (_.org = {});
    var $org$jetbrains = $org.jetbrains || ($org.jetbrains = {});
    var $org$jetbrains$kotlinx = $org$jetbrains.kotlinx || ($org$jetbrains.kotlinx = {});
    var $org$jetbrains$kotlinx$multik = $org$jetbrains$kotlinx.multik || ($org$jetbrains$kotlinx.multik = {});
    var $org$jetbrains$kotlinx$multik$default = $org$jetbrains$kotlinx$multik.default || ($org$jetbrains$kotlinx$multik.default = {});
    defineProp($org$jetbrains$kotlinx$multik$default, 'initializer', get_initializer);
  }
  $jsExportAll$(_);
  _.$jsExportAll$ = $jsExportAll$;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/multik-multik-kotlin.js":
/*!****************************************!*\
  !*** ./kotlin/multik-multik-kotlin.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./multik-multik-core.js */ "./kotlin/multik-multik-core.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(this, function (_, kotlin_org_jetbrains_kotlinx_multik_core, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var Engine = kotlin_org_jetbrains_kotlinx_multik_core.$_$.c;
  var protoOf = kotlin_kotlin.$_$.v7;
  var classMeta = kotlin_kotlin.$_$.y6;
  var setMetadataFor = kotlin_kotlin.$_$.w7;
  var VOID = kotlin_kotlin.$_$.c;
  var get_enginesStore = kotlin_org_jetbrains_kotlinx_multik_core.$_$.d;
  var KEEngineType_getInstance = kotlin_org_jetbrains_kotlinx_multik_core.$_$.b;
  var Unit_instance = kotlin_kotlin.$_$.t2;
  var objectMeta = kotlin_kotlin.$_$.u7;
  var defineProp = kotlin_kotlin.$_$.a7;
  //endregion
  //region block: pre-declaration
  setMetadataFor(KEEngine, 'KEEngine', classMeta, Engine, VOID, KEEngine);
  setMetadataFor(EngineInitializer, 'EngineInitializer', objectMeta);
  //endregion
  function KEEngine() {
    Engine.call(this);
  }
  function get_initializer() {
    return initializer;
  }
  var initializer;
  function EngineInitializer() {
    EngineInitializer_instance = this;
    // Inline function 'kotlin.collections.set' call
    var this_0 = get_enginesStore();
    var key = KEEngineType_getInstance();
    var value = new KEEngine();
    this_0.s4(key, value);
  }
  var EngineInitializer_instance;
  function EngineInitializer_getInstance() {
    if (EngineInitializer_instance == null)
      new EngineInitializer();
    return EngineInitializer_instance;
  }
  //region block: init
  initializer = EngineInitializer_getInstance();
  //endregion
  //region block: exports
  function $jsExportAll$(_) {
    var $org = _.org || (_.org = {});
    var $org$jetbrains = $org.jetbrains || ($org.jetbrains = {});
    var $org$jetbrains$kotlinx = $org$jetbrains.kotlinx || ($org$jetbrains.kotlinx = {});
    var $org$jetbrains$kotlinx$multik = $org$jetbrains$kotlinx.multik || ($org$jetbrains$kotlinx.multik = {});
    var $org$jetbrains$kotlinx$multik$kotlin = $org$jetbrains$kotlinx$multik.kotlin || ($org$jetbrains$kotlinx$multik.kotlin = {});
    defineProp($org$jetbrains$kotlinx$multik$kotlin, 'initializer', get_initializer);
  }
  $jsExportAll$(_);
  _.$jsExportAll$ = $jsExportAll$;
  //endregion
  return _;
}));



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./kotlin/Tidyparse-tidyparse-web-frontend.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=tidyparse-web-frontend.js.map