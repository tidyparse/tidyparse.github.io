{"version":3,"file":"tidyparse-web-frontend.js","mappings":"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","sources":["webpack://tidyparse-web-frontend/webpack/universalModuleDefinition","webpack://tidyparse-web-frontend/../../../../tidyparse-core/src/commonMain/kotlin/ai/hypergraph/tidyparse/TidyEditor.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sets.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Maps.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Collections.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Standard.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Collections.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Strings.kt","webpack://tidyparse-web-frontend/../../../../tidyparse-web-frontend/src/main/kotlin/Client.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Lazy.kt","webpack://tidyparse-web-frontend/../../../../tidyparse-web-frontend/src/main/kotlin/JSTidyEditor.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/stringJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/dynamic.kt","webpack://tidyparse-web-frontend/../../../../tidyparse-web-frontend/src/main/kotlin/LDT.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Arrays.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/regex/RegexExtensions.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/StringBuilder.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/types/Graph.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/comparisons/Comparisons.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Maps.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/graphs/LabeledGraph.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/tensor/Tensor.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Preconditions.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/CommonUtils.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/math.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/StringUtils.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/cache/LRUCache.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/image/Utils.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Strings.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/CFG.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/types/Arrays.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Sequences.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Library.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collectionJs.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/Debugging.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/FLTheory.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/Normalization.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/MutableCollections.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/Segmentation.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/SetValiant.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/SyntaxRepair.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/Tree.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/HashCode.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ComparisonsJs.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/sampling/Samplers.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/theory/Theory.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/types/Church.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/types/Types.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/SeqValiant.kt","webpack://tidyparse-web-frontend/../../../../galoisenne/src/commonMain/kotlin/ai/hypergraph/kaliningraph/parsing/SortValiant.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/math.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/ArrayBuffer.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js.arrays/fill.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/js/math.polyfills.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalMap.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/core/builtins/native/kotlin/Number.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/js-builtin-sources/core/builtins/src/kotlin/Unit.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Sequences.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterators.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Ranges.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/Iterables.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/common/src/generated/_Sets.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Char.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/unsigned/src/kotlin/UShort.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Enum.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/builtins/Primitives.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/BitMask.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/arrays.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/noPackageHacks.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/bitUtils.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/runtimeForStdLib.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/charSequenceJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/CharCode.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/collectionsHacks.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/compareTo.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/coreRuntime.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/hacks.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/longJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtils.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/metadataUtilsOld.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/numberConversion.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/rangeTo.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/reflectRuntime.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/typeCheckUtils.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/runtime/void.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_ArraysJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/generated/_WhitespaceChars.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/NumbersJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableList.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayFunctions.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArrayList.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/kotlin.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/ArraySorting.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMap.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMapEntry.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashMapEntryDefault.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/HashSet.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/InternalHashMap.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashMap.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/collections/LinkedHashSet.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/console.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/CoroutineImpl.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Result.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/Continuation.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/exceptions.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/random/PlatformRandom.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/KClassImpl.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/primitives.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/reflect/reflection.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/regexp.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/StringBuilderJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/charJs.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/regex.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/text/stringsCode.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/js/src/kotlin/throwableExtensions.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractCollection.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractIterator.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractList.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractMap.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/AbstractSet.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/PrimitiveIterators.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/ReversedViews.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/SequenceBuilder.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/collections/SlidingWindow.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/internal/progressionUtil.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/Random.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/random/XorWowRandom.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/PrimitiveRanges.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/ProgressionIterators.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/ranges/Progressions.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Appendable.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/text/Char.kt","webpack://tidyparse-web-frontend/../../../../../tidyparse-web-frontend/build/compileSync/js/main/productionExecutable/kotlin/src/kotlin/util/Tuples.kt","webpack://tidyparse-web-frontend/../../../../../../../../opt/buildAgent/work/40296c97b9f61601/multik-core/src/commonMain/kotlin/org/jetbrains/kotlinx/multik/api/Engine.kt","webpack://tidyparse-web-frontend/../../../../../../../../opt/buildAgent/work/40296c97b9f61601/multik-core/src/jsMain/kotlin/org/jetbrains/kotlinx/multik/api/Engine.kt","webpack://tidyparse-web-frontend/../../../../../../../../opt/buildAgent/work/40296c97b9f61601/multik-default/src/commonMain/kotlin/org/jetbrains/kotlinx/multik/default/DefaultEngine.kt","webpack://tidyparse-web-frontend/../../../../../../../../opt/buildAgent/work/40296c97b9f61601/multik-default/src/jsMain/kotlin/org.jetbrains.kotlinx.multik.default/DefaultJsEngine.kt","webpack://tidyparse-web-frontend/../../../../../../../../opt/buildAgent/work/40296c97b9f61601/multik-kotlin/src/commonMain/kotlin/org/jetbrains/kotlinx/multik/kotlin/KEEngine.kt","webpack://tidyparse-web-frontend/../../../../../../../../opt/buildAgent/work/40296c97b9f61601/multik-kotlin/src/jsMain/kotlin/org.jetbrains.kotlinx.multik/kotlin/KEEngine.kt","webpack://tidyparse-web-frontend/webpack/bootstrap","webpack://tidyparse-web-frontend/webpack/before-startup","webpack://tidyparse-web-frontend/webpack/startup","webpack://tidyparse-web-frontend/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tidyparse-web-frontend\"] = factory();\n\telse\n\t\troot[\"tidyparse-web-frontend\"] = factory();\n})(this, () => {\nreturn ","package ai.hypergraph.tidyparse\n\nimport ai.hypergraph.kaliningraph.cache.LRUCache\nimport ai.hypergraph.kaliningraph.image.escapeHTML\nimport ai.hypergraph.kaliningraph.levenshtein\nimport ai.hypergraph.kaliningraph.parsing.*\nimport kotlin.math.absoluteValue\nimport kotlin.time.TimeSource\n\nval segmentationCache = mutableMapOf<Int, Segmentation>()\nval segmentationCacheHTML = mutableMapOf<Int, String>()\n\nfun preparseParseableLines(cfg: CFG, editorText: Σᐩ) {\n  editorText.split(\"---\").last().lines()\n    .filter { it.isNotBlank() && !it.containsHole() }.forEach { line ->\n      segmentationCacheHTML.getOrPut(cfg.hashCode() + line.hashCode()) {\n        Segmentation.build(cfg, line).toColorfulHTMLString()\n      }\n    }\n}\n\nfun getOrComputeSegmentations(cfg: CFG, editorText: Σᐩ): List<Segmentation> {\n  val lines = editorText.lines()\n  val lastGrammarLine = lines.map { it.trim() }.indexOfFirst { it.trim() == \"---\" }\n\n  fun String.isEmptyOrGrammarDelim(i: Int) = trim().isEmpty() || i in 0..lastGrammarLine\n\n  return lines.mapIndexed { lineNo, line ->\n    val key = cfg.hashCode() + line.hashCode()\n    if (key in segmentationCache) segmentationCache[key]!!\n    else if (line.isEmptyOrGrammarDelim(lineNo)) Segmentation(line = line)\n    else segmentationCache.getOrPut(key) { Segmentation.build(cfg, editorText) }\n  }\n}\n\nabstract class TidyEditor {\n  // TODO: eliminate this completely\n  var cfg: CFG = setOf()\n  var grammarFileCache: String = \"\"\n  val synthCache = LRUCache<Pair<String, CFG>, List<String>>()\n  var cache = mutableMapOf<Int, String>()\n  var currentWorkHash = 0\n  val toTake = 27\n\n  abstract fun readDisplayText(): Σᐩ\n  abstract fun readEditorText(): Σᐩ\n  abstract fun getCaretPosition(): Int\n  abstract fun currentLine(): Σᐩ\n  abstract fun writeDisplayText(s: Σᐩ)\n  abstract fun writeDisplayText(s: (Σᐩ) -> Σᐩ)\n  fun getLatestCFG(): CFG {\n    val grammar: String = readEditorText().substringBefore(\"---\")\n    return try {\n      if (grammar != grammarFileCache || cfg.isNotEmpty()) {\n        grammar.also { grammarFileCache = it }\n          .parseCFG(validate = true).freeze().also { cfg = it }\n      } else cfg\n    } catch (e: Exception) { cfg }\n  }\n\n  open fun handleInput() {\n    val timer = TimeSource.Monotonic.markNow()\n\n    val currentLine = currentLine()\n    if (currentLine.isBlank()) return\n    val caretInGrammar = caretInGrammar()\n\n    val cfg =\n      (if (caretInGrammar)\n        CFGCFG(\n          names = currentLine.tokenizeByWhitespace()\n            .filter { it !in setOf(\"->\", \"|\") }.toSet()\n        )\n      else getLatestCFG()).freeze()\n\n    if (cfg.isEmpty()) return\n\n    val tokens = currentLine().tokenizeByWhitespace()\n    val sanitized = tokens.joinToString(\" \")\n    val workHash = sanitized.hashCode() + cfg.hashCode()\n    currentWorkHash = workHash\n\n    if (workHash in cache) return writeDisplayText(cache[workHash]!!)\n\n    fun finally(it: String, action: String = \"Completed\") {\n      val displayText = \"$invalidPrefix$it\"\n      cache[workHash] = displayText\n      writeDisplayText(displayText)\n      println(\"$action in ${timer.elapsedNow().inWholeMilliseconds}ms\")\n    }\n    fun shouldContinue() = currentWorkHash == workHash && timer.hasTimeLeft()\n\n    return if (sanitized.containsHole()) {\n      cfg.enumSeqSmart(tokens).distinct()\n        .enumerateCompletionsInteractively(\n          metric = { it.size * 7919 + it.sumOf { it.length } },\n          shouldContinue = ::shouldContinue,\n          finally = ::finally,\n          localContinuation = ::continuation\n        )\n    }\n    else if (tokens in cfg.language) {\n      val parseTree = cfg.parse(sanitized)?.prettyPrint()\n      writeDisplayText(\"$parsedPrefix$parseTree\")\n    }\n    else cfg.fastRepairSeq(tokens)\n      .enumerateCompletionsInteractively(\n        metric = {\n          levenshtein(tokens, it) * 7919 +\n            (tokens.sumOf { it.length } - it.sumOf { it.length }).absoluteValue\n        },\n        shouldContinue = ::shouldContinue,\n        finally = ::finally,\n        localContinuation = ::continuation\n      )\n  }\n\n  fun caretInGrammar(): Boolean =\n    readEditorText().indexOf(\"---\")\n      .let { it == -1 || getCaretPosition() < it }\n\n  open fun diffAsHtml(l1: List<Σᐩ>, l2: List<Σᐩ>): Σᐩ = l2.joinToString(\" \")\n  abstract fun repair(cfg: CFG, str: Σᐩ): List<Σᐩ>\n  open fun redecorateLines(cfg: CFG = setOf()) {}\n\n  fun Sequence<String>.enumerateCompletionsInteractively(\n    resultsToPost: Int = toTake,\n    metric: (List<String>) -> Int,\n    shouldContinue: () -> Boolean,\n    postResults: (String) -> Unit = { writeDisplayText(\"$invalidPrefix$it\") },\n    finally: (String) -> Unit = { postResults(it) },\n    localContinuation: (() -> Unit) -> Any = { it() }\n  ) {\n    val results = mutableSetOf<String>()\n    val topNResults = mutableListOf<Pair<String, Int>>()\n    val iter = iterator()\n\n    fun findNextCompletion() {\n      var i = 0\n      if (!iter.hasNext() || !shouldContinue())\n        return finally(topNResults.joinToString(\"\\n\", \"\", \"\\n...\") {\n          \"${i++.toString().padStart(2)}.) ${it.first}\"\n        })\n\n      val next = iter.next()\n      println(\"Found: $next\")\n      val isNew = next !in results\n      if (next.isNotEmpty() && isNew) {\n        results.add(next)\n        val score = metric(next.tokenizeByWhitespace())\n        if (topNResults.size < resultsToPost || score < topNResults.last().second) {\n          val loc = topNResults.binarySearch { it.second.compareTo(score) }\n          val idx = if (loc < 0) { -loc - 1 } else loc\n          topNResults.add(idx, next to score)\n          if (topNResults.size > resultsToPost) topNResults.removeLast()\n          postResults(topNResults.joinToString(\"\\n\") { \"${i++.toString().padStart(2)}.) ${it.first}\" })\n        }\n      }\n\n      localContinuation(::findNextCompletion)\n    }\n\n    findNextCompletion()\n  }\n\n  open fun continuation(f: () -> Unit): Any = { f() }\n\n  fun getGrammarText(): Σᐩ = readEditorText().substringBefore(\"---\")\n\n  fun currentGrammar(): CFG =\n    try { readEditorText().parseCFG() } catch (e: Exception) { setOf() }\n\n  fun currentGrammarIsValid(): Boolean = currentGrammar().isNotEmpty()\n}",null,null,null,null,null,null,"import ai.hypergraph.kaliningraph.parsing.*\nimport kotlinx.browser.*\nimport org.w3c.dom.*\nimport kotlin.time.TimeSource\n\n/**\nTODO (soon):\n - Extract platform-independent code from IntelliJ plugin\n - Get Myers diffs working properly\n - Clean up the Gradle build wreckage\n - Render the Chomsky-normalized CFG\n - Syntax highlighting for the snippets\n - Rank results by more sensible metric\n - Provide assistance for grammar editing\n - Allow richer HTML content in RHS panel\n *//*\nTODO (maybe):\n - Add demo for Python and Java\n - Add Ctrl+Space code completion popup\n - Configurable settings, e.g., timeout, max repairs\n - Auto-alignment of the productions\n - Calculate finger-travel distance\n - Collect telemetry for a user study\n - Improve support for incrementalization\n - Look into ropes, zippers and lenses\n*/\nval parser = Parser(\n  \"whitespace\" to \"\\\\s+\",\n//  \"red\"        to \"->|\\\\|\",\n  \"blue\"       to \"---\",\n  \"gray\"       to \"->|_|\\\\|\",\n  \"green\"      to \"START\",\n  \"other\"      to \"\\\\S\"\n  // Uncomment or add more rules as needed\n  // \"orange\" to \"orange\",\n  // \"yellow\" to \"yellow\",\n  // \"indigo\" to \"indigo\",\n  // \"violet\" to \"violet\",\n)\n\n// ./gradlew browserDevelopmentRun --continuous\nfun main() {\n  TIMEOUT_MS = 5_000\n  jsEditor.getLatestCFG()\n  window.onload = { jsEditor.redecorateLines() }\n//  inputField.addEventListener(\"input\", { jsEditor.handleInput() })\n  inputField.addEventListener(\"input\", { jsEditor.redecorateLines() })\n}\n\nval decorator by lazy { TextareaDecorator(inputField, parser) }\nval jsEditor by lazy { JSTidyEditor(inputField, outputField) }\nval inputField by lazy { document.getElementById(\"tidyparse-input\") as HTMLTextAreaElement }\nval outputField by lazy { document.getElementById(\"tidyparse-output\") as Node }",null,"import ai.hypergraph.kaliningraph.levenshtein\nimport ai.hypergraph.kaliningraph.parsing.*\nimport ai.hypergraph.tidyparse.*\nimport kotlinx.browser.window\nimport org.w3c.dom.*\nimport kotlin.math.absoluteValue\nimport kotlin.time.TimeSource\n\n/** Compare with [ai.hypergraph.tidyparse.IJTidyEditor] */\nclass JSTidyEditor(val editor: HTMLTextAreaElement, val output: Node): TidyEditor() {\n  override fun readDisplayText(): Σᐩ = output.textContent ?: \"\"\n\n  override fun readEditorText(): Σᐩ = editor.value\n\n  override fun getCaretPosition(): Int = editor.selectionStart!!\n\n  companion object {\n    private fun HTMLTextAreaElement.getEndOfLineIdx() = value.indexOf(\"\\n\", selectionStart!!)\n    private fun HTMLTextAreaElement.getCurrentLine() = value.substring(0, getEndOfLineIdx()).split(\"\\n\").last()\n    fun String.diff(other: String): String = other\n\n    //fun String.diff(other: String): String {\n    //  val output = tokenizeByWhitespace().toMutableList()\n    //  differenceOf(output, other.tokenizeByWhitespace())\n    //    .applyDiff(\n    //      remove = { index -> output.removeAt(index) },\n    //      insert = { item, index -> output.add(index, \"<span style=\\\"background-color: green;\\\">${item.escapeHTML()}</span>\") },\n    //      move = { old, new ->  }\n    //    )\n    //  return output.joinToString(\" \") { if (it.startsWith(\"<span style=\")) it else it.escapeHTML() }\n    //}\n  }\n\n  override fun continuation(f: () -> Unit): Any = window.setTimeout(f, 0)\n\n  override fun currentLine(): Σᐩ = editor.getCurrentLine()\n\n  override fun writeDisplayText(s: Σᐩ) {\n    outputField.textContent = s\n//    (outputField as HTMLTextAreaElement).outerHTML.also { println(it) }\n  }\n\n  override fun redecorateLines(cfg: CFG) {\n    val decCFG = getLatestCFG()\n    fun decorate() {\n//      val startTime = TimeSource.Monotonic.markNow()\n//      println(\"Read grammar in ${startTime.elapsedNow().inWholeMilliseconds}ms\")\n      jsEditor.apply { preparseParseableLines(decCFG, readEditorText()) }\n//      println(\"Preparsed in ${startTime.elapsedNow().inWholeMilliseconds}ms\")\n      decorator.update(decCFG)\n//      println(\"Redecorated in ${startTime.elapsedNow().inWholeMilliseconds}ms\")\n    }\n\n    if (caretInGrammar()) {\n      decorator.update(decCFG)\n      if (currentLine().isValidProd()) decorate()\n    } else decorate()\n  }\n\n  override fun writeDisplayText(s: (Σᐩ) -> Σᐩ) = writeDisplayText(s(readDisplayText()))\n\n  override fun repair(cfg: CFG, str: Σᐩ): List<Σᐩ> = TODO()\n}",null,null,"import ai.hypergraph.kaliningraph.image.escapeHTML\nimport ai.hypergraph.kaliningraph.parsing.*\nimport ai.hypergraph.tidyparse.*\nimport kotlinx.browser.*\nimport org.w3c.dom.*\n\nclass Parser(private val ruleMap: Map<String, Regex>) {\n  constructor(vararg rules: Pair<String, String>): this(\n    rules.associate { (color, regex) -> color to Regex(regex) }\n  )\n  private val parseRE: Regex =\n    ruleMap.values.joinToString(\"|\") { it.pattern }.toRegex()\n\n  fun tokenize(input: String): List<String> =\n    parseRE.findAll(input).map { it.value }.toList()\n\n  fun identify(token: String): String? =\n    ruleMap.entries.firstOrNull { it.value.matches(token) }?.key\n}\n\nclass TextareaDecorator(val inputField: HTMLTextAreaElement, private val parser: Parser) {\n  private val output: HTMLPreElement = document.createElement(\"pre\") as HTMLPreElement\n\n  init {\n    // Construct editor DOM\n    val parent = document.createElement(\"div\") as HTMLDivElement\n    parent.apply { className = \"ldt $className\" }.appendChild(output)\n    val label = document.createElement(\"label\") as HTMLLabelElement\n    parent.appendChild(label)\n\n    inputField.apply {\n      // Replace the textarea with RTA DOM and reattach on label\n      parentNode?.replaceChild(parent, this)\n      label.appendChild(this)\n\n      // Transfer the CSS styles to our editor\n      className = \"\"\n      spellcheck = false\n      wrap = \"off\"\n    }\n  }\n\n  fun update(cfg: CFG = emptySet()) {\n    val sb = StringBuilder()\n    var lines: Int\n    var maxLen = 0\n    inputField.value.lines().also { lines = it.size }.forEach { line ->\n      if (line.length > maxLen) maxLen = line.length\n      sb.appendLine(segmentationCacheHTML.getOrElse(cfg.hashCode() + line.hashCode()) { line.toColorfulHTML() })\n    }\n\n    output.innerHTML = sb.toString()\n    inputField.cols = maxLen + 1\n    inputField.rows = lines + 2\n  }\n\n  fun String.toColorfulHTML() =\n    tokenizeByWhitespaceAndKeepDelimiters().joinToString(\"\") { token ->\n      val escapedToken = token.escapeHTML()\n      parser.identify(token)?.let { \"<span class=\\\"$it\\\">$escapedToken</span>\" } ?: token\n    }\n}",null,null,null,"package ai.hypergraph.kaliningraph.types\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.cache.LRUCache\nimport ai.hypergraph.kaliningraph.graphs.*\nimport ai.hypergraph.kaliningraph.parsing.Σᐩ\nimport ai.hypergraph.kaliningraph.tensor.*\nimport ai.hypergraph.kaliningraph.theory.wl\nimport kotlin.js.JsName\nimport kotlin.math.sqrt\nimport kotlin.properties.ReadOnlyProperty\nimport kotlin.random.Random\n\n// Provides caching and inheritable constructors for reified parameters <G, E, V>\n// Interfaces are our only option because we need multiple inheritance\n@Suppress(\"FunctionName\", \"UNCHECKED_CAST\")\ninterface IGF<G, E, V> where G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V> {\n  @JsName(\"G0\") val G: (vertices: Set<V>) -> G // Graph constructor\n  @JsName(\"E0\") val E: (s: V, t: V) -> E // Edge constructor\n  @JsName(\"V0\") val V: (old: V, edgeMap: (V) -> Set<E>) -> V // Vertex constructor\n  fun V(out: Set<V>): V = TODO(\"Must override me if you want a fresh vertex\")\n\n  val deepHashCode: Int\n  @JsName(\"G1\") fun G() = G(setOf())\n  @JsName(\"G2\") fun G(vararg graphs: G): G = G(graphs.toList())\n  @JsName(\"G3\") fun G(vararg vertices: V): G = G(vertices.map { it.graph })\n  @JsName(\"G4\") fun G(list: List<Any>): G = when {\n    list.isEmpty() -> setOf()\n    list allAre G() -> list.fold(G()) { it, acc -> it + acc as G }\n    list allAre list.first() -> list.map { it as V }.toSet()\n    else -> throw Exception(\"Unsupported constructor: G(${list.joinToString(\",\") { it::class.simpleName!! }})\")\n  }.let { G(it) }\n}\n\ntypealias AdjList<V> = List<V2<V>>\ninterface IGraph<G, E, V>: IGF<G, E, V>, Set<V>, Encodable\n/*\n * TODO: Which primary interface should we expect graphs to fulfill?\n *\n * 1. a set Set<V>\n *   - Pros: Simple, has precedent cf. https://github.com/maxitg/SetReplace/\n *   - Cons: Finite, no consistency constraints on edges\n * 2. a [partial] function E ⊆ V×V / (V) -> Set<V>\n *   - Pros: Mathematically analogous, can represent infinite graphs\n *   - Cons: Disallowed on JS, see https://discuss.kotlinlang.org/t/extending-function-in-class/15176\n * 3. a [multi]map Map<V, Set<V>>\n *   - Pros: Computationally efficient representation, graph[v] <=> graph(v)\n *   - Cons: Finite, incompatible with Set<V> perspective\n * 4. a semiring, see https://en.wikipedia.org/wiki/Semiring#Definition\n *   - Pros: Useful for describing many algebraic path problems\n *   - Cons: Esoteric API / unsuitable as an abstract interface\n *\n * Algebraic perspective   : https://github.com/snowleopard/alga-paper/releases/download/final/algebraic-graphs.pdf\n *                         : https://arxiv.org/pdf/1909.04881.pdf\n * Type-family perspective : https://www.cs.cornell.edu/~ross/publications/shapes/shapes-pldi14-tr.pdf#page=3\n *                         : https://www.cs.cornell.edu/andru/papers/familia/familia.pdf#page=8\n * Inductive perspective   : https://web.engr.oregonstate.edu/~erwig/papers/InductiveGraphs_JFP01.pdf\n *                         : https://doi.org/10.1145/258949.258955\n *                         : https://www.cs.utexas.edu/~wcook/Drafts/2012/graphs.pdf\n * Semiring perspective    : http://stedolan.net/research/semirings.pdf\n *                         : https://doi.org/10.1007/978-0-387-75450-5\n *                         : https://doi.org/10.2200/S00245ED1V01Y201001CNT003\n */\n\n  where G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V> {\n  val vertices: Set<V>\n\n  // TODO: Move the following ceremony into named tensor\n  //-------\n  operator fun get(cond: (V) -> Boolean): Set<V> = vertices.filter(cond)\n  val index: VIndex<G, E, V> get() = VIndex(vertices)\n  operator fun get(vertexIdx: Int): V = index[vertexIdx]\n  class VIndex<G: IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>>(val set: Set<V>) {\n    val array: List<V> = set.toList()\n    val map: Map<V, Int> = array.mapIndexed { index, a -> a to index }.toMap()\n    //    operator fun get(it: IVertex<G, E, V>): Int? = map[it]\n    operator fun get(it: Int): V = array[it]\n    operator fun get(v: V): Int = map[v] ?: -1\n  }\n//  operator fun SpsMat.get(n0: V, n1: V) = this[index[n0]!!, index[n1]!!]\n//  operator fun SpsMat.set(n0: V, n1: V, value: Double) {\n//    this[index[n0]!!, index[n1]!!] = value\n//  }\n  //-------\n\n  // Implements graph merge. For all vertices in common, merge their neighbors.\n  // TODO: Figure out how to implement this operator \"correctly\"\n  // https://github.com/snowleopard/alga-paper/releases/download/final/algebraic-graphs.pdf\n  operator fun plus(that: G): G =\n    G((this - that) + (this join that) + (that - this))\n\n\n  operator fun minus(graph: G): G = G(vertices - graph.vertices)\n\n  infix fun join(that: G): Set<V> =\n    (vertices intersect that.vertices).sortedBy { it.id }.toSet()\n      .zip((that.vertices intersect vertices).sortedBy { it.id }.toSet())\n      .map { (left, right) -> V(left) { left.outgoing + right.outgoing } }\n      .toSet()\n\n  // TODO: Reimplement using matrix transpose\n  fun reversed(): G =\n    (vertices.associateWith { setOf<E>() } +\n      vertices.flatMap { src ->\n        src.outgoing.map { edge -> edge.target to E(edge.target, src) }\n      }.groupBy({ it.first }, { it.second }).mapValues { (_, v) -> v.toSet() })\n      .map { (k, v) -> V(k) { v } }.toSet().let { G(it) }\n\n  fun isomorphicTo(that: G): Boolean =\n    this.size == that.size &&\n      this.edges.size == that.edges.size &&\n      this.encode().contentEquals(that.encode())\n\n  fun vwise(lf: IGraph<G, E, V>.(V, V) -> Double): DoubleMatrix =\n    DoubleMatrix(size) { i, j ->\n      (this[i] cc this[j]).let { (v, n) ->\n        if (n in v.neighbors) lf(v, n) else 0.0\n      }\n    }\n\n  fun reachSequence(from: Set<V>, ADJ: BooleanMatrix = A_AUG, terminateOnFixpoint: Boolean = false): Sequence<Set<V>> =\n    sequence {\n      var B = BooleanMatrix(vertices.size, 1, vertices.map { it in from })\n      while (true) {\n        // Check if fixpoint reached\n        val OLD_B = B\n        B = ADJ * B\n        val toYield = B.data.mapIndexed { i, b -> if (b) index[i] else null }.filterNotNull().toSet()\n        val same = B == OLD_B\n        if (same && terminateOnFixpoint) break\n        else if(same) while(true) { yield(toYield) }\n        else yield(toYield)\n      }\n    }\n\n  fun reachability(from: Set<V>, steps: Int): Set<V> =\n    (A_AUG.pow(steps - 1) * BooleanMatrix(vertices.size, 1, vertices.map { it in from }).also { println(\"v: ${it.shape()}\") }).data\n      .mapIndexed { i, b -> if (b) index[i] else null }.filterNotNull().toSet()\n\n  fun transitiveClosure(vtxs: Set<V>): Set<V>  =\n    // edges.filter { it.source in vtxs }.map { it.target }\n    // TODO: Why does this work but the previous line does not?!\n    (edgList.filter { it.first in vtxs }.map { it.second.target }.toSet() - vtxs)\n      .let { if (it.isEmpty()) vtxs else transitiveClosure(vtxs + it) }\n\n  fun randomWalk(r: Random = Random.Default) = RandomWalk(r, this as G)\n\n  fun asString() =\n    edgList.map { \"${it.first} -> ${it.second.target}\" }.formatAsGrid().toString()\n\n  fun toDot(highlight: Set<V> = setOf()): String {\n    fun String.htmlify() =\n      replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n    return \"\"\"\n      strict digraph {\n          graph [\"concentrate\"=\"true\",\"rankdir\"=\"LR\",\"bgcolor\"=\"transparent\",\"margin\"=\"0.0\",\"compound\"=\"true\",\"nslimit\"=\"20\"]\n          ${\n      vertices.joinToString(\"\\n\") {\n        \"\"\"\"${it.id.htmlify()}\" [\"color\"=\"black\",\"fontcolor\"=\"black\",\"fontname\"=\"JetBrains Mono\",\"fontsize\"=\"15\",\"penwidth\"=\"2.0\",\"shape\"=\"Mrecord\"${if(it in highlight)\"\"\",\"fillcolor\"=\"lightgray\",\"style\"=\"filled\"\"\"\" else \"\"}]\"\"\" }\n          } \n          ${edgList.joinToString(\"\\n\") { (v, e) -> \n        \"\"\"\"${v.id.htmlify()}\" -> \"${e.target.id.htmlify()}\" [\"color\"=\"${ if (v is LGVertex && v.occupied) \"red\" else \"black\" }\",\"arrowhead\"=\"normal\",\"penwidth\"=\"2.0\",\"label\"=\"${(e as? LabeledEdge)?.label ?: \"\"}\"]\"\"\" }\n          }\n      }\n    \"\"\".trimIndent()\n  }\n}\n\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.D: DoubleMatrix         by cache { DoubleMatrix(size) { i, j -> if (i == j) this[i].neighbors.size.toDouble() else 0.0 } }\n\n// Adjacency matrix\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.A: BooleanMatrix        by cache { BooleanMatrix(size) { i, j -> this[j] in this[i].neighbors } }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.A_AUG: BooleanMatrix    by cache { A + A.transpose + BooleanMatrix.one(size) }\n\n// Symmetric normalized adjacency\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.ASYMNORM: DoubleMatrix  by cache { vwise { v, n -> 1.0 / sqrt(v.outdegree.toDouble() * n.outdegree.toDouble()) } }\n\n// Graph Laplacian matrix\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.L: DoubleMatrix         by cache { D - A }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.I: DoubleMatrix         by cache { DoubleMatrix(size, size, ::kroneckerDelta) }\n// Symmetric normalized Laplacian\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.LSYMNORM: DoubleMatrix  by cache { I - ASYMNORM }\n\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.ENCODED: DoubleMatrix   by cache { vertices.map { it.encode() }.toTypedArray().toDoubleMatrix() }\n\n// TODO: Implement APSP distance matrix using algebraic Floyd-Warshall\n//       https://doi.org/10.1137/1.9780898719918.ch5\n\n// All pairs shortest path\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.APSP: Map<Pair<V, V>, Int>     by cache {\n  val dist = mutableMapOf<Pair<V, V>, Int>()\n  for ((u, v) in vertices * vertices) {\n      dist[v to u] = if (v == u) 0 else Int.MAX_VALUE\n  }\n  for (e in adjList) { dist[e.first to e.second] = 1 }\n  while (true) {\n    var done = true\n    for ((k, i, j) in vertices * vertices * vertices) {\n      if (dist[i to k]!! < Int.MAX_VALUE && dist[k to j]!! < Int.MAX_VALUE) {\n        val newDist = dist[i to k]!! + dist[k to j]!!\n        if (newDist < dist[i to j]!!) { dist[i to j] = newDist; done = false }\n      }\n    }\n    if (done) break\n  }\n  dist\n}\n\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.degMap: Map<V, Int>     by cache { vertices.associateWith { it.neighbors.size } }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.edges: Set<E>           by cache { edgMap.values.flatten().toSet() }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.edgList: List<Π2<V, E>> by cache { vertices.flatMap { s -> s.outgoing.map { s to it } } }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.adjList: AdjList<V>     by cache { edgList.map { (v, e) -> v cc e.target } }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.edgMap: Map<V, Set<E>>  by cache { vertices.associateWith { it.outgoing } }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IGraph<G, E, V>.histogram: Map<V, Int>  by cache { associateWith { it.neighbors.size } }\n\nval cache = LRUCache<String, Any>()\nfun getCaller() = Throwable().stackTraceToString().lines()[3].hashCode()\n\n// Lazily evaluates and caches result for later use, until cache expiry,\n// after which said value will be reevaluated and cached if it is needed\n// again. If you believe there may be a bug here, it is really important\n// to first check hashCode() / deepHashCode - we expect it to be unique!\n// We use this to materialize properties that are expensive to compute,\n// and that we expect to be used multiple times once computed.\nfun <T, Y> cache(caller: Int = getCaller(), fn: Y.() -> T) =\n  ReadOnlyProperty<Y, T> { y, _ ->\n    val id = if (y is IGF<*, *, *>) y.deepHashCode else y.hashCode()\n    val csg = \"$id$caller\"\n//    val csg = \"${y!!::class.simpleName}${id}$caller\"\n    cache.getOrPut(csg) { y.fn() as Any } as T\n  }\n\nclass RandomWalk<G, E, V>(\n  val rand: Random = Random.Default,\n  val graph: G,\n  val head: V = graph.random()\n): Sequence<RandomWalk<G, E, V>>\n  where G: IGraph<G, E, V>,\n        E: IEdge<G, E, V>,\n        V: IVertex<G, E, V> {\n  val tail by lazy {\n    RandomWalk(\n      graph = graph,\n      head = graph.edgMap[head]!!.random(rand).target,\n      rand = rand\n    )\n  }\n\n  override fun toString() = head.toString()\n\n  override fun iterator() = generateSequence(this) { it.tail }.iterator()\n}\n\ninterface IEdge<G, E, V> : IGF<G, E, V>\n        where G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V> {\n  val source: V\n  val target: V\n\n  operator fun component1() = source\n  operator fun component2() = target\n}\n\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IEdge<G, E, V>.graph: G by cache { target.graph }\n\n// TODO: Make this a \"view\" of the container graph\ninterface IVertex<G, E, V> : IGF<G, E, V>, Encodable\n        where G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V> {\n  val id: String // TODO: Need to think about this more carefully\n\n  val edgeMap: (V) -> Set<E> // Make a self-loop by passing this\n\n  // tailrec prohibited on open members? may be possible with deep recursion\n  // https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deep-recursive-function/\n  fun neighbors(k: Int = 0, vertices: Set<V> = neighbors + this as V): Set<V> =\n    if (k == 0 || vertices.neighbors() == vertices) vertices\n    else neighbors(k - 1, vertices + vertices.neighbors() + this as V)\n\n  // Removes all edges pointing outside the set\n  private fun Set<V>.closure(): Set<V> =\n    map { v -> V(this@IVertex as V) { v.outgoing.filter { it.target in this }.toSet() } }.toSet()\n\n  private fun Set<V>.neighbors(): Set<V> = flatMap { it.neighbors() }.toSet()\n\n  fun neighborhood(): G = G(neighbors(0).closure())\n\n  override fun encode(): DoubleArray\n}\n\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IVertex<G, E, V>.graph: G          by cache { G(neighbors(-1)) }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IVertex<G, E, V>.incoming: Set<E>  by cache { graph.reversed().edgMap[this] ?: emptySet() }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IVertex<G, E, V>.outgoing: Set<E>  by cache { edgeMap(this as V).toSet() }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IVertex<G, E, V>.neighbors: Set<V> by cache { outgoing.map { it.target }.toSet() }\nval <G: IGraph<G, E, V>, E: IEdge<G, E, V>, V: IVertex<G, E, V>> IVertex<G, E, V>.outdegree: Int get() = neighbors.size\n\nabstract class AGF<G, E, V> : IGF<G, E, V>\n  where G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V> {\n  override val deepHashCode: Int = Random.nextInt()\n  override fun hashCode() = deepHashCode\n}\n\nabstract class Graph<G, E, V>(override val vertices: Set<V> = setOf()) :\n  AGF<G, E, V>(), IGraph<G, E, V>, Set<V> by vertices\n  where G : Graph<G, E, V>, E : Edge<G, E, V>, V : Vertex<G, E, V> {\n  override fun equals(other: Any?) =\n    super.equals(other) || (other as? G)?.isomorphicTo(this as G) ?: false\n  override fun encode() =\n    if (isEmpty()) DoubleArray(10) { 0.0 }\n    else wl().values.sorted().map { it.toDouble() }.toDoubleArray()\n  // https://web.engr.oregonstate.edu/~erwig/papers/InductiveGraphs_JFP01.pdf#page=6\n  override fun toString() = asString()\n}\n\nabstract class Edge<G, E, V>(override val source: V, override val target: V) :\n  AGF<G, E, V>(), IEdge<G, E, V>\n  where G : Graph<G, E, V>, E : Edge<G, E, V>, V : Vertex<G, E, V> {\n  override fun equals(other: Any?) = (other as? E)?.let { hashCode() == other.hashCode() } ?: false\n  override fun hashCode(): Int = source.hashCode() + target.hashCode()\n  override fun toString() = \"$source→$target\"\n}\n\nabstract class Vertex<G, E, V>(override val id: String) :\n  AGF<G, E, V>(), IVertex<G, E, V>\n  where G : Graph<G, E, V>, E : Edge<G, E, V>, V : Vertex<G, E, V> {\n    val hash by lazy { id.hashCode() }\n  override fun equals(other: Any?) = (other as? Vertex<*, *, *>)?.let { id == it.id } ?: false\n  override fun encode() = id.vectorize()\n  override fun hashCode() = hash\n  override fun toString() = id\n}\n\ninterface Encodable { fun encode(): DoubleArray }\n\n// https://github.com/amodeus-science/amod\nabstract class TMap: IGraph<TMap, TRoad, TCity>\nabstract class TRoad: IEdge<TMap, TRoad, TCity>\nabstract class TCity: IVertex<TMap, TRoad, TCity>\n\ninterface SGF<G, E, V> where\n  G: SGraph<G, E, V>, E: SEdge<G, E, V>, V: SVertex<G, E, V> { /*...*/ }\n\ninterface SGraph<G, E, V>: SGF<G, E, V> where\n  G: SGraph<G, E, V>, E: SEdge<G, E, V>, V: SVertex<G, E, V> { /*...*/ }\n\ninterface SEdge<G, E, V>: SGF<G, E, V> where\n  G: SGraph<G, E, V>, E: SEdge<G, E, V>, V: SVertex<G, E, V> { /*...*/ }\n\ninterface SVertex<G, E, V>: SGF<G, E, V> where\n  G: SGraph<G, E, V>, E: SEdge<G, E, V>, V: SVertex<G, E, V> { /*...*/ }\n\nclass SMap: SGraph<SMap, SRoad, SCity> { /*...*/ }\nclass SRoad: SEdge<SMap, SRoad, SCity> { /*...*/ }\nclass SCity: SVertex<SMap, SRoad, SCity> { /*...*/ }",null,null,"package ai.hypergraph.kaliningraph.graphs\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.sampling.randomString\nimport ai.hypergraph.kaliningraph.tensor.BooleanMatrix\nimport ai.hypergraph.kaliningraph.types.*\nimport kotlin.reflect.KProperty\n\n/**\n * DSL for labeled graphs - just enumerate paths. Duplicates will be merged.\n */\n\nclass LGBuilder internal constructor() {\n  var mutGraph = LabeledGraph()\n\n  val a by LGVertex(); val b by LGVertex(); val c by LGVertex()\n  val d by LGVertex(); val e by LGVertex(); val f by LGVertex()\n  val g by LGVertex(); val h by LGVertex(); val i by LGVertex()\n  val j by LGVertex(); val k by LGVertex(); val l by LGVertex()\n  val m by LGVertex(); val n by LGVertex(); val o by LGVertex()\n  val p by LGVertex(); val q by LGVertex(); val r by LGVertex()\n  val s by LGVertex(); val t by LGVertex(); val u by LGVertex()\n  val v by LGVertex(); val w by LGVertex(); val x by LGVertex()\n  val y by LGVertex(); val z by LGVertex()\n\n  operator fun LGVertex.minus(v: LGVertex) =\n    V(v) { v.outgoing + LabeledEdge(v, this) }.also { mutGraph += it.graph }\n  operator fun LGVertex.minus(v: String): LGVertex = this - LGVertex(v)\n  operator fun String.minus(v: LGVertex): LGVertex = LGVertex(this) - v\n  operator fun String.minus(v: String): LGVertex = LGVertex(this) - LGVertex(v)\n  operator fun String.set(s: String, v: String): LGVertex =\n    ProtoEdge(LGVertex(this), s) - LGVertex(v)\n\n  operator fun LGVertex.plus(edge: LabeledEdge) =\n    V(this) { outgoing + edge }.also { mutGraph += it.graph }\n\n  operator fun LGVertex.plus(vertex: LGVertex) =\n    (graph + vertex.graph).also { mutGraph += it }\n\n  class ProtoEdge(val source: LGVertex, val label: String)\n\n  // Arithmetic is right-associative, so we construct in reverse and flip after\n  operator fun ProtoEdge.minus(target: LGVertex) = target + LabeledEdge(target, source, label)\n}\n\ninterface LGFamily: IGF<LabeledGraph, LabeledEdge, LGVertex> {\n  override val E: (s: LGVertex, t: LGVertex) -> LabeledEdge\n    get() = { s, t -> LabeledEdge(s, t) }\n  override val G: (vertices: Set<LGVertex>) -> LabeledGraph\n    get() = { vertices: Set<LGVertex> -> LabeledGraph(vertices) }\n  override val V: (old: LGVertex, edgeMap: (LGVertex) -> Set<LabeledEdge>) -> LGVertex\n    get() = { old: LGVertex, edgeMap: (LGVertex) -> Set<LabeledEdge> -> LGVertex(old, edgeMap ) }\n\n  override fun V(out: Set<LGVertex>) = LGVertex(label = randomString(), out = out)\n}\n\n// TODO: convert to/from other graph types\nopen class LabeledGraph constructor(override val vertices: Set<LGVertex> = setOf()):\n  Graph<LabeledGraph, LabeledEdge, LGVertex>(vertices), LGFamily {\n  constructor(vararg vertices: LGVertex): this(vertices.toSet())\n  constructor(builder: LGBuilder.() -> Unit):\n    this(LGBuilder().also { it.builder() }.mutGraph.reversed())\n  constructor(graph: String): this(\n    graph.split(Regex(\"\\\\s+\")).fold(LabeledGraph()) { acc, it ->\n      acc + P(*it.toList().zipWithNext().map { (a, b) -> a.toString() cc b.toString() }.toTypedArray())\n    }\n  )\n  companion object: LabeledGraph() {\n    fun P(\n      vararg adjList: V2<String>,\n      p2v: (V2<String>) -> LGVertex = { (s, t) -> LGVertex(label=s, out=setOf(LGVertex(t))) }\n    ) = LabeledGraph(adjList.map { p2v(it) }.fold(LabeledGraph()) { acc, v -> acc + v.graph })\n  }\n\n  var accumuator = mutableSetOf<String>()\n  var description = \"\"\n\n  fun S() = BooleanMatrix(vertices.size, 1) { i, j -> this[i].occupied }\n\n  fun rewrite(substitution: V2<String>) =\n    randomWalk().take(200).toList().joinToString(\"\")\n      .replace(substitution.first, substitution.second)\n      .let { LabeledGraph(it) }\n\n  fun propagate() {\n    val (previousStates, unoccupied) = vertices.partition { it.occupied }\n    val nextStates = unoccupied.intersect(previousStates.flatMap { it.neighbors }.toSet())\n    previousStates.forEach { it.occupied = false }\n    nextStates.forEach { it.occupied = true; accumuator.add(it.id) }\n  }\n}\n\n// TODO: Move occupancy, propagation and accumulator/description here\nclass StatefulGraph: LabeledGraph()\n\nopen class LGVertex internal constructor(\n  open val label: String = \"\",\n  override val id: String = label,\n  override val edgeMap: (LGVertex) -> Set<LabeledEdge>,\n): Vertex<LabeledGraph, LabeledEdge, LGVertex>(id), LGFamily {\n  var occupied: Boolean = false\n\n  constructor(\n    label: String = \"#RGEN_\" + randomString(),\n    id: String = label,\n    out: Set<LGVertex> = emptySet()\n  ) : this(label = label, id = id, edgeMap = { s ->\n    out.map { t -> LabeledEdge(s, t, label.substringBefore(\"#RGEN_\")) }.toSet() })\n\n  constructor(lgv: LGVertex, edgeMap: (LGVertex) -> Set<LabeledEdge>) :\n    this(label = lgv.label, id = lgv.id, edgeMap = edgeMap)\n\n  override fun encode() = label.vectorize()\n  operator fun getValue(a: Any?, prop: KProperty<*>): LGVertex = LGVertex(prop.name)\n\n  override fun toString(): String = label\n}\n\nclass FreshLGVertex internal constructor(\n  override val label: String = \"\",\n  override val id: String = randomString(),\n  override val edgeMap: (LGVertex) -> Set<LabeledEdge>,\n): LGVertex(label, id, edgeMap) {\n  constructor(\n    label: String,\n    out: Set<LGVertex> = emptySet()\n  ): this(\n    label = label,\n    edgeMap = { s -> out.map { t -> LabeledEdge(s, t) }.toSet() }\n  )\n\n  constructor(lgv: LGVertex, edgeMap: (LGVertex) -> Set<LabeledEdge>):\n    this(label = lgv.label, edgeMap = edgeMap)\n}\n\nopen class LabeledEdge(\n  override val source: LGVertex,\n  override val target: LGVertex,\n  val label: String? = null\n): Edge<LabeledGraph, LabeledEdge, LGVertex>(source, target), LGFamily {\n  constructor(source: LGVertex, target: LGVertex): this(source, target, null)\n}","package ai.hypergraph.kaliningraph.tensor\n\nimport ai.hypergraph.kaliningraph.types.*\nimport kotlin.math.*\nimport kotlin.random.Random\n\n/**\n * Generic matrix which supports overloadable addition and multiplication\n * using an abstract algebra (e.g., tropical semiring). Useful for many\n * problems in graph theory.\n *\n * @see [Ring]\n */\n\ninterface Matrix<T, A : Ring<T>, M : Matrix<T, A, M>> : SparseTensor<Π3<Int, Int, T>> {\n  val algebra: A\n  val data: List<T>\n\n  // TODO: Tensor stuff\n  // TODO: create a constructor that takes a List<Pair<List<Int>, T>>\n  //       for sparse tensors, e.g.: [([1, 2, 3], \"a\"), ([2, 4, 1], \"b\"), ...]\n  override val map: MutableMap<Π3<Int, Int, T>, Int> get() = TODO()\n  fun shape() = numRows cc numCols /** TODO: return [Π3] instead */\n  operator fun get(r: Any, c: Any): T = TODO(\"Implement support for named indexing\")\n\n  val numRows: Int\n  val numCols: Int\n\n  operator fun plus(t: M): M =\n    safeJoin(t, criteria = shape() == t.shape()) { i, j -> this@Matrix[i, j] + t[i, j] }\n\n  operator fun times(t: M): M =\n    t.transpose.let { tt -> safeJoin(t, criteria = numCols == t.numRows) { i, j -> this@Matrix[i] dot tt[j] } }\n\n  // Squares an upper-triangular matrix whose diagonal and lower-triangular elements are zero\n  fun squareUpperTriangular(): M =\n    new(numRows, numCols, allPairs(numRows, numCols).map { (i, j) ->\n      if (j <= i) algebra.nil\n      else this@Matrix[i].drop(i + 1).take(j) dot this@Matrix.cols[j].drop(i + 1).take(j)\n    })\n//  transpose.let { tt ->\n//    safeJoin(tt, criteria = numCols == numRows) { i, j ->\n//      if (j <= i) algebra.nil\n//      else this@Matrix[i].drop(i + 1).take(j) dot tt[j].drop(i + 1).take(j)\n//    }\n//  }\n\n  fun <Y> map(f: (T) -> Y): M = new(numRows, numCols, data.map(f) as List<T>)\n\n  fun getElements(filterBy: (Int, Int) -> Boolean) =\n    allPairs(numRows, numCols).mapNotNull { (r, c) -> if (filterBy(r, c)) this[r, c] else null }\n\n  infix fun List<T>.dot(es: List<T>): T =\n    require(size == es.size) { \"Length mismatch: $size . ${es.size}\" }\n//      .run { with(algebra) { mapIndexed { i, a -> a * es[i] }.reduce { a, b -> a + b } } }\n    .run { with(algebra) { zip(es).map { (a, b) -> a * b }.reduce { a, b -> a + b } } }\n\n  // Constructs a new instance with the same concrete matrix type\n  fun new(rows: Int = numRows, cols: Int = numCols, data: List<T>, alg: A = algebra): M\n// TODO = this::class.primaryConstructor!!.call(algebra, numRows, numCols, data) as M\n\n  fun safeJoin(\n    that: M,\n    ids: Set<V2<Int>> = allPairs(numRows, that.numCols),\n    criteria: Boolean,\n    op: A.(Int, Int) -> T\n  ): M = require(criteria) { \"Dimension mismatch: $numRows,$numCols . ${that.numRows},${that.numCols}\" }\n    .run { new(numRows, that.numCols, ids.map { (i, j) -> algebra.op(i, j) }) }\n\n  operator fun get(r: Int, c: Int): T = data[r * numCols + c]\n  operator fun get(r: Int): List<T> = data.toList().subList(r * numCols, r * numCols + numCols)\n}\n\n// Only include nonzero indices for sparse matrices?\nval <T, A : Ring<T>, M : Matrix<T, A, M>> Matrix<T, A, M>.idxs      by cache { allPairs(numRows, numCols) }\nval <T, A : Ring<T>, M : Matrix<T, A, M>> Matrix<T, A, M>.rows      by cache { data.chunked(numCols) }\nval <T, A : Ring<T>, M : Matrix<T, A, M>> Matrix<T, A, M>.cols      by cache { (0 until numCols).map { c -> rows.map { it[c] } } }\nval <T, A : Ring<T>, M : Matrix<T, A, M>> Matrix<T, A, M>.transpose by cache { new(numCols, numRows, cols.flatten()) }\n\n// https://www.ijcai.org/Proceedings/2020/0685.pdf\nval BOOLEAN_ALGEBRA: Ring<Boolean> =\n  Ring.of(\n    nil = false,\n    one = true,\n    plus = { a, b -> a || b },\n    times = { a, b -> a && b }\n  )\n\nval XOR_ALGEBRA =\n  Ring.of(\n    nil = false,\n    one = true,\n    plus = { a, b -> a xor b },\n    times = { a, b -> a and b }\n  )\n\nval INTEGER_FIELD: Field<Int> =\n  Field.of(\n    nil = 0,\n    one = 1,\n    plus = { a, b -> a + b },\n    minus = { a, b -> a - b },\n    times = { a, b -> a * b },\n    div = { _, _ -> throw NotImplementedError(\"Division not defined on integer field.\") }\n  )\n\nval DOUBLE_FIELD: Field<Double> =\n  Field.of(\n    nil = 0.0,\n    one = 1.0,\n    plus = { a, b -> a + b },\n    minus = { a, b -> a - b },\n    times = { a, b -> a * b },\n    div = { a, b -> a / b }\n  )\n\nval MINPLUS_ALGEBRA: Ring<Int> =\n  Ring.of(\n    nil = Int.MAX_VALUE,\n    one = 0,\n    plus = { a, b -> min(a, b) },\n    times = { a, b -> a + b }\n  )\n\nval MAXPLUS_ALGEBRA: Ring<Int> =\n  Ring.of(\n    nil = Int.MIN_VALUE,\n    one = 0,\n    plus = { a, b -> max(a, b) },\n    times = { a, b -> a + b }\n  )\n\nval GF2_ALGEBRA: Ring<Int> =\n  Ring.of(\n    nil = 0,\n    one = 1,\n    plus = { a, b -> (a + b) % 2 },\n    times = { a, b -> (a * b) % 2 }\n  )\n\nfun <T> TODO_ALGEBRA(t: T?): Ring<T?> =\n  Ring.of(\n    nil = t,\n    plus = { _, _ -> TODO() },\n    times = { _, _ -> TODO() }\n  )\n\nabstract class AbstractMatrix<T, A: Ring<T>, M: AbstractMatrix<T, A, M>> constructor(\n  override val algebra: A,\n  override val numRows: Int,\n  override val numCols: Int = numRows\n): Matrix<T, A, M> {\n  val values by lazy { data.toSet() }\n  override val map: MutableMap<Π3<Int, Int, T>, Int> by lazy {\n    idxs.fold(mutableMapOf()) { map, (r, c) ->\n      val element = get(r, c)\n      if (element != algebra.nil) map[Π(r, c, element)] = 1\n      map\n    }\n  }\n\n  override fun toString() =\n    \"\\n\" + cols.map { it.maxOf { \"$it\".length } }.let { colWidth ->\n      rows.joinToString(\"\\n\") {\n        it.mapIndexed { i, c -> \"$c\".padEnd(colWidth[i]) }.joinToString(\"  \",)\n      }\n    }\n\n  override fun equals(other: Any?): Boolean {\n    if (this === other) return true\n    if (other == null || this::class != other::class) return false\n\n    other as AbstractMatrix<*, *, *>\n\n    if (numRows != other.numRows) return false\n    if (numCols != other.numCols) return false\n    if (data != other.data) return false\n//    if (algebra != other.algebra) return false\n\n    return true\n  }\n\n  val hash by lazy {\n    var result = super.hashCode()\n    result = 31 * result + numRows\n    result = 31 * result + numCols\n    result = 31 * result + data.hashCode()\n    result = 31 * result + algebra.hashCode()\n    result\n  }\n\n  override fun hashCode(): Int = hash\n}\n\n// A free matrix has no associated algebra by default. If you try to do math\n// with the default implementation it will fail at runtime.\nopen class FreeMatrix<T> constructor(\n  override val numRows: Int,\n  override val numCols: Int = numRows,\n  override val data: List<T>,\n  override val algebra: Ring<T> = TODO_ALGEBRA(data.firstOrNull()) as Ring<T>\n): AbstractMatrix<T, Ring<T>, FreeMatrix<T>>(algebra, numRows, numCols) {\n  constructor(elements: List<T>) : this(\n    numRows = sqrt(elements.size.toDouble()).toInt(),\n    data = elements\n  )\n\n  constructor(algebra: Ring<T>, elements: List<T>) : this(\n    algebra = algebra,\n    numRows = sqrt(elements.size.toDouble()).toInt(),\n    data = elements\n  )\n\n  constructor(numRows: Int, numCols: Int = numRows, f: (Int, Int) -> T) : this(\n    numRows = numRows,\n    numCols = numCols,\n    data = List(numRows * numCols) { f(it / numCols, it % numCols) }\n  )\n\n  constructor(\n    algebra: Ring<T>,\n    numRows: Int,\n    numCols: Int = numRows,\n    f: (Int, Int) -> T\n  ) : this(\n    algebra = algebra,\n    numRows = numRows,\n    numCols = numCols,\n    data = List(numRows * numCols) { f(it / numCols, it % numCols) }\n  )\n\n  override fun new(rows: Int, cols: Int, data: List<T>, alg: Ring<T>) = FreeMatrix(rows, cols, data, algebra)\n\n  override fun toString() =\n    \"\\n\" + cols.map { it.maxOf { \"$it\".length } }.let { colWidth ->\n      rows.joinToString(\"\\n\") {\n        it.mapIndexed { i, c -> \"$c\".padEnd(colWidth[i]) }\n          .joinToString(\"  |  \", \"|  \", \"  |\")\n      }\n    }\n}\n\n// Concrete subclasses\nopen class BooleanMatrix constructor(\n  override val numRows: Int,\n  override val numCols: Int = numRows,\n  override val data: List<Boolean>,\n  override val algebra: Ring<Boolean> = BOOLEAN_ALGEBRA,\n): AbstractMatrix<Boolean, Ring<Boolean>, BooleanMatrix>(algebra, numRows, numCols) {\n  constructor(elements: List<Boolean>): this(\n    numRows = sqrt(elements.size.toDouble()).toInt(),\n    data = elements\n  )\n\n  constructor(algebra: Ring<Boolean>, elements: List<Boolean>): this(\n    algebra = algebra,\n    numRows = sqrt(elements.size.toDouble()).toInt(),\n    data = elements\n  )\n\n  constructor(numRows: Int, numCols: Int = numRows, f: (Int, Int) -> Boolean): this(\n    numRows = numRows,\n    numCols = numCols,\n    data = List(numRows * numCols) { f(it / numCols, it % numCols) }\n  )\n\n  constructor(vararg rows: Short): this(rows.fold(\"\") { a, b -> a + b })\n  constructor(rows: String): this(\n    rows.filter { !it.isWhitespace() }.toCharArray().let { chars ->\n      val values = chars.distinct()\n      require(values.size <= 2) { \"Expected two values or less\" }\n      values.maxOrNull()!!.let { hi -> chars.map { it == hi } }\n    }\n  )\n\n  constructor(\n    numRows: Int,\n    numCols: Int = numRows,\n    values: List<Π2<Π2<Int, Int>, Boolean>>\n  ): this(numRows, numCols,\n    values.toMap().let { map ->\n      List(numRows * numCols) { map[it / numCols to it % numCols] ?: false }\n    }\n  )\n\n  // TODO: Implement Four Russians for speedy Boolean matmuls https://arxiv.org/pdf/0811.1714.pdf#page=5\n  // override fun BooleanMatrix.times(t: BooleanMatrix): BooleanMatrix = TODO()\n\n  val isFull by lazy { data.all { it } }\n\n  companion object {\n    fun grayCode(size: Int): BooleanMatrix = TODO()\n    fun zeroes(size: Int) = BooleanMatrix(size) { _, _ -> false }\n    fun ones(size: Int) = BooleanMatrix(size) { _, _ -> true }\n    fun one(size: Int) = BooleanMatrix(size) { i, j -> i == j }\n    fun random(rows: Int, cols: Int = rows) = BooleanMatrix(rows, cols) { _, _ -> Random.nextBoolean() }\n  }\n\n  override fun toString() =\n    data.chunked(numCols).joinToString(\"\\n\", \"\\n\") { it.joinToString(\" \") { if (it) \"1\" else \"0\" } }\n\n  override fun new(rows: Int, cols: Int, data: List<Boolean>, alg: Ring<Boolean>) = BooleanMatrix(rows, cols, data, alg)\n}\n\nopen class DoubleMatrix constructor(\n  override val numRows: Int,\n  override val numCols: Int = numRows,\n  override val data: List<Double>,\n  override val algebra: Field<Double> = DOUBLE_FIELD,\n): AbstractMatrix<Double, Field<Double>, DoubleMatrix>(algebra, numRows, numCols) {\n  constructor(elements: List<Double>) : this(\n    numRows = sqrt(elements.size.toDouble()).toInt(),\n    data = elements\n  )\n\n  constructor(numRows: Int, numCols: Int = numRows, f: (Int, Int) -> Double) : this(\n    numRows = numRows,\n    numCols = numCols,\n    data = List(numRows * numCols) { f(it / numCols, it % numCols) }\n  )\n\n  constructor(vararg rows: Double) : this(rows.toList())\n\n  operator fun minus(that: DoubleMatrix): DoubleMatrix = this + -1.0 * that\n\n  companion object {\n    fun random(size: Int) = DoubleMatrix(size) { _, _ -> Random.nextDouble() }\n    fun one(size: Int) = DoubleMatrix(size) { i, j -> if (i == j) 1.0 else 0.0 }\n    fun ones(size: Int) = DoubleMatrix(size) { _, _ -> 1.0 }\n    fun zeroes(size: Int) = DoubleMatrix(size) { _, _ -> 0.0 }\n    fun vector(vararg data: Double) = DoubleMatrix(1, data.size, data.toList(), DOUBLE_FIELD)\n  }\n\n  override fun new(rows: Int, cols: Int, data: List<Double>, alg: Field<Double>) = DoubleMatrix(rows, cols, data, alg)\n}\n\noperator fun Double.times(value: DoubleMatrix): DoubleMatrix = value * this\noperator fun DoubleMatrix.times(value: Double): DoubleMatrix =\n  DoubleMatrix(numRows, numCols, data.map { it * value })\n\n// TODO: Rewrite this from scratch using T: List<UTMatrix<T>> recursive type with overlapping trees\n// Diagonals of a strictly-UT matrix for DAG-based dynamic programming\nclass UTMatrix<T> constructor(\n  val diagonals: List<List<T>>, // List of strictly-UT diagonals from longest to shortest\n  override val algebra: Ring<T>\n): AbstractMatrix<T, Ring<T>, UTMatrix<T>>(algebra, diagonals.first().size + 1) {\n  constructor(ts: Array<T>, algebra: Ring<T>) : this(diagonals = listOf(ts.toList()), algebra = algebra)\n  constructor(numRows: Int, numCols: Int, data: List<T>, alg: Ring<T>): this(\n    diagonals = when (data.size) {\n      numRows * numCols -> // Just take the upper diagonal entries of a rectangular matrix\n        (0 until numRows).map { r ->\n          (r + 1 until numCols).mapNotNull { c -> data[r * numCols + c] }\n        }.flip().dropLast(1)\n      ((numRows * numCols) - numRows) / 2 -> // Take rows of a UTMatrix and flip them into diagonals\n        (numCols - 1 downTo 1).fold(listOf<List<T>>() to 0) { acc, i ->\n          acc.first + listOf(data.subList(acc.second, acc.second + i)) to acc.second + i\n        }.first.flip()\n      else -> throw Exception(\"Invalid UTMatrix shape: $numRows.$numCols != ${data.size}\")\n    },\n    algebra = alg\n  )\n\n  override val data: List<T> by lazy {\n    (diagonals + listOf(emptyList())).flip()\n      .map { List(diagonals.size + 1 - it.size) { algebra.nil } + it }.flatten()\n  }\n\n  private companion object {\n    private fun <T> List<List<T>>.flip() =\n      List(size) { i -> mapNotNull { it.elementAtOrNull(i) } }\n  }\n\n  override fun plus(t: UTMatrix<T>): UTMatrix<T> =\n    UTMatrix(diagonals = diagonals.zip(t.diagonals).map { (ld, rd) ->\n      ld.zip(rd).map { (l, r) -> with(algebra) { l + r } }\n    }, algebra = algebra)\n\n  // TODO: Implement sparse matrix multiplication properly\n  override fun times(t: UTMatrix<T>): UTMatrix<T> =\n    (toFullMatrix() * t.toFullMatrix()).toUTMatrix()\n    // diagonals.zip(diagonals.flip()).map { (l, r) -> l dot r }\n\n  fun squared() = toFullMatrix().squareUpperTriangular().toUTMatrix()\n\n  fun seekFixpoint(\n    // Carries a triple of:\n    //    (1) the element itself,\n    //    (2) row to an element's left (inclusive)\n    //    (3) column beneath an element (inclusive)\n    carry: List<Triple<T, List<T>, List<T>>> =\n      diagonals.last().map { it to listOf(it) to listOf(it) },\n    iteration: Int = 0,\n    maxIterations: Int = diagonals.first().size\n  ): UTMatrix<T> =\n    if (diagonals.last().size == 1) this\n    // Populate the remaining diagonals with nils\n    else if (iteration == maxIterations)\n      UTMatrix(\n        diagonals = diagonals + ((diagonals.last().size - 1) downTo 1).map { i -> List(i) { algebra.nil } },\n        algebra = algebra\n      )\n    else carry.windowed(2, 1).map { window ->\n      window[0].second.zip(window[1].third)\n        .map { (l, r) -> with(algebra) { l * r } }\n        .fold(algebra.nil) { t, acc -> with(algebra) { acc + t } }\n        .let { it to (window[0].second + it) to (listOf(it) + window[1].third) }\n    }.let { next ->\n      UTMatrix(\n        diagonals = diagonals + listOf(next.map { it.first }),\n        algebra = algebra\n      ).seekFixpoint(next, iteration + 1, maxIterations)\n    }\n\n  fun seekFixpointFast(maxIterations: Int = diagonals.first().size): UTMatrix<T> {\n    var iteration = 0\n\n    val diagonalsMutable = diagonals.toMutableList()\n    val carry = diagonals.last().map { it to mutableListOf(it) to mutableListOf(it) }.toMutableList()\n\n    while (iteration < maxIterations && diagonalsMutable.last().size != 1) {\n      val next = mutableListOf<Triple<T, MutableList<T>, MutableList<T>>>()\n\n      for (i in 1 until carry.size) {\n        var acc = algebra.nil\n        for (j in carry[i - 1].second.indices) {\n          acc = with(algebra) { acc + (carry[i - 1].second[j] * carry[i].third[j]) }\n        }\n\n        val left = carry[i - 1].second.apply { add(acc) }\n        val right = carry[i].third.apply { add(0, acc) }\n\n        next.add(Triple(acc, left, right))\n      }\n\n      diagonalsMutable += next.map { it.first }\n      carry.clear()\n      carry.addAll(next)\n      iteration++\n    }\n\n    return UTMatrix(\n      diagonals = diagonalsMutable,\n      algebra = algebra\n    )\n  }\n\n  // Offsets diagonals by one when converting back to matrix (superdiagonal)\n  fun toFullMatrix() =\n    if (diagonals.last().size != 1)\n      throw IndexOutOfBoundsException(\"OOB: [${diagonals.first().size}, ${diagonals.last().size}]\")\n    else FreeMatrix(algebra, diagonals.size + 1, diagonals.size + 1) { r, c ->\n      if (c <= r) algebra.nil else diagonals[c - r - 1][r]\n    }\n\n  override fun new(rows: Int, cols: Int, data: List<T>, alg: Ring<T>): UTMatrix<T> =\n    UTMatrix(rows, cols, data, alg)\n\n  fun map(f: (T) -> T): UTMatrix<T> =\n    UTMatrix(diagonals = diagonals.map { it.map(f) }, algebra = algebra)\n}\n\nfun <T, A : Ring<T>> Matrix<T, A, *>.toUTMatrix() = UTMatrix(numRows, numCols, data, algebra)\n\ntailrec fun <T> T.seekFixpoint(\n  i: Int = 0,\n  hashCodes: List<Int> = listOf(hashCode()),\n  checkHistory: Boolean = false,\n  stop: (Int, T, T) -> Boolean = { i, t, tt -> t == tt },\n  succ: (T) -> T\n): T {\n  val next = succ(this)\n  return if (stop(i, this, next)) next//.also { println(\"Converged in $i iterations\") }\n  else if (checkHistory) {\n    val hash = next.hashCode()\n    if (hash in hashCodes)\n      throw Exception(\"Cycle of length ${hashCodes.size - hashCodes.indexOf(hash)} detected!\")\n    else next.seekFixpoint(i + 1, hashCodes + hash, true, stop, succ)\n  } else next.seekFixpoint(i + 1, stop = stop, succ = succ)\n}\n\nfun DoubleMatrix.toBMat(\n  threshold: Double = (data.maxOf { it } + data.minOf { it }) / 2,\n  partitionFn: (Double) -> Boolean = { it > threshold }\n) = BooleanMatrix(numRows, numCols) { i, j -> partitionFn(get(i, j)) }\n\noperator fun BooleanMatrix.times(mat: DoubleMatrix): DoubleMatrix = toDoubleMatrix() * mat\noperator fun BooleanMatrix.plus(mat: DoubleMatrix): DoubleMatrix = toDoubleMatrix() + mat\noperator fun DoubleMatrix.minus(mat: BooleanMatrix): DoubleMatrix = this - mat.toDoubleMatrix()\n\nfun BooleanMatrix.toDoubleMatrix(): DoubleMatrix =\n  DoubleMatrix(numRows, numCols) { i, j -> if (get(i, j)) 1.0 else 0.0 }\n\n/**cf. [P]*/\n// Alternatively: a length-2ⁿ array which can be \"parsed\" into a certain shape?\n// See: http://conal.net/talks/can-tensor-programming-be-liberated.pdf\ninterface SparseTensor<T/*Should be a named tuple or dataclass of some kind*/> {\n// TODO: Precompute specific [Borel] subsets of T's attributes that we expect to be queried at runtime\n// e.g., (n-1)-D slices and 1D fibers\n// https://mathoverflow.net/questions/393427/generalization-of-sinkhorn-s-theorem-to-stochastic-tensors\n// private val marginals: MutableMap<List<T>, Int> = mutableMapOf()\n  val map: MutableMap<T, Int>\n  operator fun get(t: T) = map.getOrElse(t) { 0 }\n\n//  TODO: Support mutability but also map-reduce-ability/merge-ability for parallelism\n//  operator fun plus(other: SparseTensor<T>) = SparseTensor(map = this.map + other.map)\n//  operator fun MutableMap<T, Int>.plus(map: MutableMap<T, Int>): MutableMap<T, Int> =\n//    HashMap(this).apply { map.forEach { (k, v) -> merge(k, v, Int::plus) } }\n\n  operator fun set(index: T, i: Int) { map[index] = i }\n\n  fun count(selector: (T) -> Boolean) =\n    map.entries.sumOf { if (selector(it.key)) it.value else 0 }\n}",null,"package ai.hypergraph.kaliningraph\n\nimport ai.hypergraph.kaliningraph.sampling.randomVector\nimport ai.hypergraph.kaliningraph.tensor.*\nimport ai.hypergraph.kaliningraph.types.*\nimport kotlin.math.*\nimport kotlin.random.*\nimport kotlin.reflect.KClass\n\nfun <T, R : Ring<T>, M : Matrix<T, R, M>> Matrix<T, R, M>.elwise(op: (T) -> T): M =\n  new(data = data.map { op(it) })\n\noperator fun <T, R : Ring<T>, M : Matrix<T, R, M>> T.times(m: Matrix<T, R, M>): M =\n  with(m.algebra) { m.elwise { this@times * it  } }\n\noperator fun <T, R : Ring<T>, M : Matrix<T, R, M>> Matrix<T, R, M>.times(t: T): M =\n  with(algebra) { elwise { it * t } }\n\nfun <T, R : Ring<T>, M : Matrix<T, R, M>> Matrix<T, R, M>.pow(i: Int): M =\n  (0..i).fold(this) { a, _ -> a * this as M } as M\n\nfun DoubleMatrix.norm() = data.sumOf { it * it }.pow(0.5)\n\nfun DoubleMatrix.companionMatrix(): DoubleMatrix =\n  if (numRows != 1) throw Exception(\"Companion matrix requires scalar coefficients\")\n  else DoubleMatrix(numCols) { r, c ->\n    if (r + 1 == c) 1.0\n    else if (r == numCols - 1) -this[0, c]\n    else 0.0\n  }\n\nfun DoubleMatrix.eigen(tolerance: Double = 0.00001): Π2<DoubleMatrix, Double> {\n  val init = this * DoubleMatrix(numCols, 1, List(numCols) { 1.0 })\n  val eigVec = init.seekFixpoint(\n    stop = { i, t, tt -> (t - tt).norm() < tolerance },\n    succ =  { (this * it).let { it * (1.0 / it.norm()) } }\n  )\n\n  val eigVal = ((this * eigVec) * eigVec.transpose)[0, 0] /\n      (eigVec * eigVec.transpose)[0, 0]\n\n  return eigVec to eigVal\n}\n\ninfix fun <T, R : Ring<T>, M : Matrix<T, R, M>> List<T>.dot(m: Matrix<T, R, M>): List<T> =\n  m.cols.map { col -> with(m.algebra) { zip(col).fold(nil) { c, (a, b) -> c + a * b } } }\n\nval ACT_TANH: (DoubleMatrix) -> DoubleMatrix = { it.elwise { tanh(it) } }\n\nval NORM_AVG: (DoubleMatrix) -> DoubleMatrix = { it.meanNorm() }\n\nfun DoubleMatrix.minMaxNorm() =\n  data.fold(0.0 cc 0.0) { (a, b), e ->\n    min(a, e) cc max(b, e)\n  }.let { (min, max) -> elwise { e -> (e - min) / (max - min) } }\n\nfun DoubleMatrix.meanNorm() =\n  data.fold(VT(0.0, 0.0, 0.0)) { (a, b, c), e ->\n    VT(a + e / data.size.toDouble(), min(b, e), max(c, e))\n  }.let { (μ, min, max) -> elwise { e -> (e - μ) / (max - min) } }\n\ninfix fun Int.choose(k: Int): Int {\n  require(0 <= k && 0 <= this) { \"Bad (k, n) = ($k, $this)!\" }\n  if (k > this || k < 0) return 0\n  if (k > this / 2) return this choose this - k\n  var result = 1\n  for (i in 1..k) result = result * (this - i + 1) / i\n  return result\n}\n\ntailrec fun fact(n: Int, t: Int = 1): Int = if (n == 1) t else fact(n - 1, t * n)\n\nfun DoubleMatrix.exp(max: Int = 10): DoubleMatrix =\n  (1..max).fold(DoubleMatrix.one(numRows) to this) { (acc, an), i ->\n    (acc + an * (1.0 / fact(i).toDouble())) to (an * this)\n  }.first\n\nfun <T, Y> joinToScalar(\n  m1: Matrix<T, *, *>,\n  m2: Matrix<T, *, *>,\n  filter: (Int, Int) -> Boolean = { _, _ -> true },\n  join: (T, T) -> Y,\n  reduce: (Y, Y) -> Y\n): Y =\n  if (m1.shape() != m2.shape())\n    throw Exception(\"Shape mismatch: ${m1.shape()} != ${m2.shape()}\")\n  else m1.data.zip(m2.data)\n    .filterIndexed { i, _ -> filter(i / m1.numCols, i % m1.numCols) }\n    .map { (a, b) -> join(a, b) }\n    .reduce { a, b -> reduce(a, b) }\n\nfun Array<DoubleArray>.toDoubleMatrix() = DoubleMatrix(size, this[0].size) { i, j -> this[i][j] }\n\nfun kroneckerDelta(i: Int, j: Int) = if (i == j) 1.0 else 0.0\n\nconst val DEFAULT_FEATURE_LEN = 20\nfun String.vectorize(len: Int = DEFAULT_FEATURE_LEN) =\n  Random(hashCode()).let { randomVector(len) { it.nextDouble() } }\n\ntailrec fun <T> closure(\n  toVisit: Set<T> = emptySet(),\n  visited: Set<T> = emptySet(),\n  successors: Set<T>.() -> Set<T>\n): Set<T> =\n  if (toVisit.isEmpty()) visited\n  else closure(\n    toVisit = toVisit.successors() - visited,\n    visited = visited + toVisit,\n    successors = successors\n  )\n\n// Maybe we can hack reification using super type tokens?\ninfix fun Any.isA(that: Any) = when {\n  this !is KClass<out Any> && that !is KClass<out Any> -> this::class.isInstance(that)\n  this !is KClass<out Any> && that is KClass<out Any> -> this::class.isInstance(that)\n  this is KClass<out Any> && that is KClass<out Any> -> this.isInstance(that)\n  this is KClass<out Any> && that !is KClass<out Any> -> this.isInstance(that)\n  else -> TODO()\n}\n\ninfix fun Collection<Any>.allAre(that: Any) = all { it isA that }\ninfix fun Collection<Any>.anyAre(that: Any) = any { it isA that }",null,"package ai.hypergraph.kaliningraph\n\nimport ai.hypergraph.kaliningraph.automata.*\nimport ai.hypergraph.kaliningraph.parsing.*\nimport ai.hypergraph.kaliningraph.tensor.FreeMatrix\nimport ai.hypergraph.kaliningraph.tensor.transpose\nimport ai.hypergraph.kaliningraph.types.*\nimport kotlin.math.*\n\ninfix fun Char.closes(that: Char) =\n  if (this == ')' && that == '(') true\n  else if (this == ']' && that == '[') true\n  else if (this == '}' && that == '{') true\n  else this == '>' && that == '<'\n\nval BRACKETS = \"()[]{}<>\".toCharArray().toSet()\nval JUST_PARENS = \"()[]{}\".toCharArray().toSet()\nfun Σᐩ.hasBalancedBrackets(brackets: Set<Char> = BRACKETS): Boolean =\n  filter { it in brackets }.fold(Stack<Char>()) { stack, c ->\n    stack.apply { if (isNotEmpty() && c.closes(peek())) pop() else push(c) }\n  }.isEmpty() && brackets.any { it in this }\n\nfun Σᐩ.splitProd() = replaceFirst(\"->\", \"→\").split('→').map { it.trim() }\n\nfun List<Σᐩ>.formatAsGrid(cols: Int = -1): FreeMatrix<Σᐩ> {\n  fun Σᐩ.tok() = splitProd()\n  fun Σᐩ.LHS() = tok()[0]\n  fun Σᐩ.RHS() = tok()[1]\n  val groups = groupBy { it.LHS() }\n\n  fun List<Σᐩ>.rec() = if (cols == -1) // Minimize whitespace over all grids with a predefined number of columns\n    (3..5).map { formatAsGrid(it) }.minBy { it.toString().length }\n  else sortedWith(compareBy(\n    { groups[it.LHS()]!!.maxOf { it.length } }, // Shortest longest pretty-printed production comes first\n    { -groups[it.LHS()]!!.size }, // Take small groups first\n    { it.LHS() }, // Must never split up two LHS productions\n    { it.length }\n  )).let { productions ->\n    val (cols, rows) = cols to ceil(productions.size.toDouble() / cols).toInt()\n    val padded = productions + List(cols * rows - productions.size) { \"\" }\n    FreeMatrix(cols, rows, padded).transpose\n  }.let { up ->\n    FreeMatrix(up.numRows, up.numCols) { r, c ->\n      if (up[r, c].isEmpty()) return@FreeMatrix \"\"\n      val (lhs, rhs) = up[r, c].splitProd().let { it[0] to it[1] }\n      val lp = lhs.padStart(up.transpose[c].maxOf { it.substringBefore(\" -> \").length })\n      val rp = rhs.padEnd(up.transpose[c].maxOf { it.substringAfter(\" -> \").length })\n      \"$lp → $rp\"\n    }\n  }\n\n  return rec()\n}\n\nprivate fun <T> List<List<T>>.col(i: Int) = map { it[i] }\n\n// https://en.wikipedia.org/wiki/Seam_carving\nfun Σᐩ.carveSeams(toRemove: Regex = Regex(\"\\\\s{2,}\")): Σᐩ =\n  replace(\"  |  \", \"    \")\n    .lines().filter { it.isNotBlank() }.map { it.split('→') }.let { toMerge ->\n    val minCols = toMerge.minOf { it.size }\n    val takeAway = (0 until minCols).map { toMerge.col(it).minOf { toRemove.find(it)!!.value.length } }\n    val subs = takeAway.map { List(it) { \" \" }.joinToString(\"\") }\n    toMerge.joinToString(\"\\n\", \"\\n\") {\n      it.mapIndexed { i, it -> if (i < minCols) it.replaceFirst(subs[i], \"   \") else it }\n        .joinToString(\"→\").drop(4).dropLast(3)\n    }\n  }\n\nfun allPairsLevenshtein(s1: Set<Σᐩ>, s2: Set<Σᐩ>) =\n  (s1 * s2).sumOf { (a, b) -> levenshtein(a, b) }\n\nfun levenshtein(s1: Σᐩ, s2: Σᐩ): Int =\n  levenshtein(s1.tokenizeByWhitespace().toList(), s2.tokenizeByWhitespace().toList())\n\nfun <T> levenshtein(o1: List<T>, o2: List<T>): Int {\n  var prev = IntArray(o2.size + 1)\n  for (j in 0 until o2.size + 1) prev[j] = j\n  for (i in 1 until o1.size + 1) {\n    val curr = IntArray(o2.size + 1)\n    curr[0] = i\n    for (j in 1 until o2.size + 1) {\n      val d1 = prev[j] + 1\n      val d2 = curr[j - 1] + 1\n      val d3 = prev[j - 1] + if (o1[i - 1] == o2[j - 1]) 0 else 1\n      curr[j] = min(min(d1, d2), d3)\n    }\n\n    prev = curr\n  }\n  return prev[o2.size]\n}\n\nfun multisetManhattanDistance(s1: Σᐩ, s2: Σᐩ): Int =\n  multisetManhattanDistance(s1.tokenizeByWhitespace().toList(), s2.tokenizeByWhitespace().toList())\n\nfun <T> multisetManhattanDistance(q1: List<T>, q2: List<T>): Int {\n  val (s1, s2) = listOf(q1, q2).map { it.groupingBy { it }.eachCount() }\n\n  val totalDiff = s1.keys.union(s2.keys)\n    .sumOf { t -> (s1.getOrElse(t) { 0 } - s2.getOrElse(t) { 0 }).absoluteValue }\n\n  return totalDiff\n}\n\nfun String.removeEpsilon() = tokenizeByWhitespace().filter { it != \"ε\" }.joinToString(\" \")\n\n// Intersperses \"\" in between every token in a list of tokens\nfun List<Σᐩ>.intersperse(i: Int = 1, tok: Σᐩ = \"\", spacer: List<Σᐩ> = List(i) { tok }): List<Σᐩ> =\n  fold(spacer) { acc, s -> acc + spacer + s } + spacer\n\nfun String.cfgType() = when {\n  isNonterminalStub() -> \"NT/$this\"\n  // Is a Java or Kotlin identifier character in Kotlin common library (no isJavaIdentifierPart)\n  Regex(\"[a-zA-Z0-9_]+\").matches(this) -> \"ID/$this\"\n  any { it in BRACKETS } -> \"BK/$this\"\n  else -> \"OT\"\n}\n\nconst val ANSI_RESET = \"\\u001B[0m\"\nconst val ANSI_BLACK = \"\\u001B[30m\"\nconst val ANSI_RED = \"\\u001B[31m\"\nconst val ANSI_GREEN = \"\\u001B[32m\"\nconst val ANSI_YELLOW = \"\\u001B[33m\"\nconst val ANSI_BLUE = \"\\u001B[34m\"\nconst val ANSI_PURPLE = \"\\u001B[35m\"\nconst val ANSI_CYAN = \"\\u001B[36m\"\nconst val ANSI_WHITE = \"\\u001B[37m\"\n\nconst val ANSI_BLACK_BACKGROUND = \"\\u001B[40m\"\nconst val ANSI_RED_BACKGROUND = \"\\u001B[41m\"\nconst val ANSI_GREEN_BACKGROUND = \"\\u001B[42m\"\nconst val ANSI_ORANGE_BACKGROUND = \"\\u001B[43m\"\nconst val ANSI_YELLOW_BACKGROUND = \"\\u001B[43m\"\nconst val ANSI_BLUE_BACKGROUND = \"\\u001B[44m\"\nconst val ANSI_PURPLE_BACKGROUND = \"\\u001B[45m\"\nconst val ANSI_CYAN_BACKGROUND = \"\\u001B[46m\"\nconst val ANSI_WHITE_BACKGROUND = \"\\u001B[47m\"","package ai.hypergraph.kaliningraph.cache\n\n// TODO: LFU Cache\nclass LRUCache<K, V>(\n  private val maxSize: Int = 10_000,\n  private val sizeOf: (key: K, value: V) -> Int = { _, _ -> 1 }\n) {\n  private val map: LinkedHashMap<K, V> = LinkedHashMap(0, .75f)\n  private var size: Int = 0\n\n  fun getOrPut(key: K, value: () -> V): V =\n    map[key] ?: value().also { put(key, it) }\n\n  operator fun get(key: K) = map[key]\n\n  fun put(key: K, value: V): V? {\n    size += sizeOf(key, value)\n    val prev: V? = map.put(key, value)\n    prev?.let { size -= sizeOf(key, it) }\n\n    trimToSize()\n    return prev\n  }\n\n  fun remove(key: K): V? {\n    val prev = map.remove(key)\n    prev?.let { size -= sizeOf(key, it) }\n    return prev\n  }\n\n  private fun trimToSize() {\n    if (size <= maxSize || map.isEmpty()) return\n    try {\n      val toEvict = map.entries.iterator().next()\n      val key = toEvict.key\n      val value = toEvict.value\n      map.remove(key)\n      size -= sizeOf(key, value)\n      trimToSize()\n    } catch (_: Exception) {}\n  }\n\n  override fun toString() = \"$size/$maxSize cached=$map\"\n  operator fun contains(key: K) = key in map\n}","package ai.hypergraph.kaliningraph.image\n\nimport ai.hypergraph.kaliningraph.minMaxNorm\nimport ai.hypergraph.kaliningraph.tensor.*\nimport ai.hypergraph.kaliningraph.types.ℤⁿ\nimport kotlin.math.roundToInt\n\nfun String.escapeHTML() =\n  map { ch ->\n    when (ch) {\n      '\\'' -> \"&apos;\"\n      '\\\"' -> \"&quot\"\n      '&' -> \"&amp;\"\n      '<' -> \"&lt;\"\n      '>' -> \"&gt;\"\n      else -> ch\n    }\n  }.joinToString(\"\")\n\nfun <T> FreeMatrix<T>.toHtmlTable(): String {\n  var html = \"<table>\\n\"\n  for (row in rows) {\n    html += \"\\t<tr >\\n\"\n    for (col in this[0].indices) html +=\n      \"\"\"<td style=\"vertical-align:top\"><pre><code>${row[col]}</code></pre></td>\"\"\"\n    html += \"\\t</tr>\\n\"\n  }\n  html += \"</table>\"\n  return html\n}\n\nfun <T> FreeMatrix<T>.toHtmlPage(): String =\n  \"\"\"\n    <html>\n    <head>\n    <style>\n    table, th, td {\n      border: 1px solid black;\n      border-collapse: collapse;\n      table-layout: auto;\n      min-width: 300px;\n      height: 200px;\n      text-align: center;\n    }\n    </style>\n    </head>\n    <body>${toHtmlTable()}</body>\n    </html>\n  \"\"\".trimIndent()\n\nfun Matrix<*, *, *>.matToBase64Img(\n  pixelsPerEntry: Int = (200 / numRows).coerceIn(1..20),\n  arr: Array<ℤⁿ> = when (this) {\n    is BooleanMatrix -> data.map { if (it) 255 else 0 }\n    is DoubleMatrix -> minMaxNorm().data.map { (it * 255).roundToInt() }\n    else -> TODO(\"Renderer is undefined\")\n  }.let { FreeMatrix(it).rows.map { it.toIntArray() }.toTypedArray() }.enlarge(pixelsPerEntry),\n): String = \"data:image/bmp;base64,\" + BMP().saveBMP(arr).encodeBase64ToString()\n\nfun Array<ℤⁿ>.enlarge(factor: Int = 2): Array<ℤⁿ> =\n  map { row -> row.flatMap { col -> (0 until factor).map { col } }\n    .let { r -> (0 until factor).map { r.toIntArray() } } }.flatten().toTypedArray()\n\nclass BMP {\n  lateinit var bytes: ByteArray\n  fun saveBMP(rgbValues: Array<ℤⁿ>): ByteArray {\n    bytes = ByteArray(54 + 3 * rgbValues.size * rgbValues[0].size +\n      getPadding(rgbValues[0].size) * rgbValues.size)\n    saveFileHeader()\n    saveInfoHeader(rgbValues.size, rgbValues[0].size)\n    saveBitmapData(rgbValues)\n    return bytes\n  }\n\n  private fun saveFileHeader() {\n    var a = intToByteCouple(BMP_CODE)\n    bytes[0] = a[1]\n    bytes[1] = a[0]\n    a = intToFourBytes(bytes.size)\n    bytes[5] = a[0]\n    bytes[4] = a[1]\n    bytes[3] = a[2]\n    bytes[2] = a[3]\n\n    //data offset\n    bytes[10] = 54\n  }\n\n  private fun saveInfoHeader(height: Int, width: Int) {\n    bytes[14] = 40\n    var a = intToFourBytes(width)\n    bytes[22] = a[3]\n    bytes[23] = a[2]\n    bytes[24] = a[1]\n    bytes[25] = a[0]\n    a = intToFourBytes(height)\n    bytes[18] = a[3]\n    bytes[19] = a[2]\n    bytes[20] = a[1]\n    bytes[21] = a[0]\n    bytes[26] = 1\n    bytes[28] = 24\n  }\n\n  private fun saveBitmapData(rgbValues: Array<ℤⁿ>) {\n    for (i in rgbValues.indices) writeLine(i, rgbValues)\n  }\n\n  private fun writeLine(row: Int, rgbValues: Array<ℤⁿ>) {\n    val offset = 54\n    val rowLength: Int = rgbValues[row].size\n    val padding = getPadding(rgbValues[0].size)\n    for (i in 0 until rowLength) {\n      val rgb = rgbValues[row][i]\n      val temp = offset + 3 * (i + rowLength * row) + row * padding\n      bytes[temp] = (rgb shr 16).toByte()\n      bytes[temp + 1] = (rgb shr 8).toByte()\n      bytes[temp + 2] = rgb.toByte()\n    }\n    val temp = offset + 3 * ((rowLength - 1) + rowLength * row) + row * padding + 3\n    for (j in 0 until padding) bytes[temp + j] = 0\n  }\n\n  private fun intToByteCouple(x: Int): ByteArray {\n    val array = ByteArray(2)\n    array[1] = x.toByte()\n    array[0] = (x shr 8).toByte()\n    return array\n  }\n\n  private fun intToFourBytes(x: Int): ByteArray {\n    val array = ByteArray(4)\n    array[3] = x.toByte()\n    array[2] = (x shr 8).toByte()\n    array[1] = (x shr 16).toByte()\n    array[0] = (x shr 24).toByte()\n    return array\n  }\n\n  private fun getPadding(rowLength: Int): Int {\n    var padding = 3 * rowLength % 4\n    if (padding != 0) padding = 4 - padding\n    return padding\n  }\n\n  private val BMP_CODE = 19778\n}\n\nfun ByteArray.encodeBase64ToString(): String =\n  encodeBase64().map { it.toInt().toChar() }.toCharArray().concatToString()\n\nfun ByteArray.encodeBase64(): ByteArray {\n  val table = (CharRange('A', 'Z') + CharRange('a', 'z') + CharRange('0', '9') + '+' + '/').toCharArray()\n  val output = mutableListOf<Int>()\n  var padding = 0\n  var position = 0\n  while (position < this.size) {\n    var b = this[position].toInt() and 0xFF shl 16 and 0xFFFFFF\n    if (position + 1 < this.size) b = b or (this[position + 1].toInt() and 0xFF shl 8) else padding++\n    if (position + 2 < this.size) b = b or (this[position + 2].toInt() and 0xFF) else padding++\n    for (i in 0 until 4 - padding) {\n      val c = b and 0xFC0000 shr 18\n      output.add(table[c].code)\n      b = b shl 6\n    }\n    position += 3\n  }\n  for (i in 0 until padding) output.add('='.code)\n\n  return output.toIntArray().map { it.toByte() }.toByteArray()\n}",null,"@file:Suppress(\"NonAsciiCharacters\")\npackage ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.graphs.LabeledGraph\nimport ai.hypergraph.kaliningraph.sampling.choose\nimport ai.hypergraph.kaliningraph.types.*\nimport kotlin.jvm.JvmName\nimport kotlin.time.*\n\ntypealias Σᐩ = String\ntypealias Production = Π2<Σᐩ, List<Σᐩ>>\n// TODO: make this immutable\ntypealias CFG = Set<Production>\n\nval Production.LHS: Σᐩ get() = first\nval Production.RHS: List<Σᐩ> get() =\n  second.let { if (it.size == 1) it.map(Σᐩ::stripEscapeChars) else it }\n\n/**\n * \"Freezes\" the enclosed CFG, making it immutable and caching its hashCode for\n * much faster equality checks unlike the default LinkedHashSet implementation,\n * which must recompute hashCode(), incurring O(n) cost in the size of the CFG.\n * This is only necessary because we are using the cache { ... } pattern, which\n * will be slow to compute the first time, but much faster on subsequent calls.\n * Storing the hashCode() in a field avoids recomputing it on every read.\n */\nfun CFG.freeze(): CFG = if (this is FrozenCFG) this else FrozenCFG(this)\nprivate class FrozenCFG(val cfg: CFG): CFG by cfg {\n  val cfgId = cfg.hashCode()\n  override fun equals(other: Any?) =\n    ((other as? FrozenCFG)?.cfgId == cfgId) || (other as? CFG) == cfg\n  override fun hashCode(): Int = cfgId\n}\n\nval CFG.language: CFL by cache { CFL(this) }\nval CFG.delimiters: Array<Σᐩ> by cache { (terminals.sortedBy { -it.length } + arrayOf(HOLE_MARKER, \" \")).toTypedArray() }\nval CFG.nonterminals: Set<Σᐩ> by cache { map { it.LHS }.toSet() }\nval CFG.symbols: Set<Σᐩ> by cache { nonterminals + flatMap { it.RHS } }\nval CFG.terminals: Set<Σᐩ> by cache { symbols - nonterminals }\nval CFG.terminalUnitProductions: Set<Production>\n    by cache { filter { it.RHS.size == 1 && it.RHS[0] !in nonterminals } }\nval CFG.unitProductions: Set<Production> by cache { filter { it.RHS.size == 1 } }\nval CFG.nonterminalProductions: Set<Production> by cache { filter { it !in terminalUnitProductions } }\nval CFG.unitNonterminals: Set<Σᐩ> by cache { terminalUnitProductions.map { it.LHS }.toSet() }\nval CFG.bimap: BiMap by cache { BiMap(this) }\n// Maps nonterminal sets to their terminals, n.b., each terminal can be generated\n// by multiple nonterminals, and each nonterminal can generate multiple terminals\nval CFG.tmap: Map<Set<Σᐩ>, Set<Σᐩ>> by cache {\n  terminals.map { bimap[listOf(it)] to it }.groupBy { it.first }\n    .mapValues { it.value.map { it.second }.toSet() }\n}\n\n// Maps each nonterminal to the set of nonterminals that can generate it\nval CFG.vindex: Array<IntArray> by cache {\n  Array(bindex.indexedNTs.size) { i ->\n    bimap[bindex[i]].filter { it.size > 1 }\n      .flatMap { listOf(bindex[it[0]], bindex[it[1]]) }.toIntArray()\n  }\n}\n\nval CFG.bindex: Bindex<Σᐩ> by cache { Bindex(nonterminals) }\nval CFG.normalForm: CFG by cache { normalize() }\nval CFG.depGraph: LabeledGraph by cache { dependencyGraph() }\nval CFG.revDepGraph: LabeledGraph by cache { revDependencyGraph() }\n\nval CFG.originalForm: CFG by cache { rewriteHistory[this]?.get(0) ?: this }\nval CFG.nonparametricForm: CFG by cache { rewriteHistory[this]!![1] }\n//val CFG.originalForm by cache { rewriteHistory[this]!![0] }\n//val CFG.nonparametricForm by cache { rewriteHistory[this]!![1] }\n\n/** Backing fields for [reachableSymbols], [reachableSymbolsViaUnitProds]\n    TODO: back the fields with functions instead of vis versa using mutable maps?\n          - Pros: early accesses are faster with a gradually-filled map\n          - Cons: immutable fields follow convention, easier to reason about\n */\nval CFG.reachability by cache { mutableMapOf<Σᐩ, Set<Σᐩ>>() }\n\n// Equivalence class of an NT B are all NTs, A ->* B ->* C\n// reachable via unit productions (in forward or reverse)\nval CFG.unitReachability by cache {\n  symbols.associateWith { from ->\n    LabeledGraph {\n      unitProductions.map { it.LHS to it.RHS[0] }\n//      .filter { (a, b) -> nonterminals.containsAll(listOf(a, b)) }\n        .forEach { (a, b) -> a - b }\n    }.let {\n      setOf(from) + (it.transitiveClosure(setOf(from)) +\n        it.reversed().transitiveClosure(setOf(from)))\n    }.filter { it in nonterminals }\n  }\n}\n\nval CFG.noNonterminalStubs: CFG by cache {\n  println(\"Disabling nonterminal stubs!\")\n  filter { it.RHS.none { it.isNonterminalStubIn(this) } }.toSet()\n    .also { rewriteHistory.put(it, freeze().let { rewriteHistory[it]!! + listOf(it)}) }\n    .also { it.blocked.addAll(blocked) }\n}\n\nval CFG.noEpsilonOrNonterminalStubs: CFG by cache {\n  println(\"Disabling nonterminal stubs!\")\n  filter { it.RHS.none { it.isNonterminalStubIn(this) } }\n    .filter { \"ε\" !in it.toString() }.toSet()\n    .also { rewriteHistory.put(it, freeze().let { rewriteHistory[it]!! + listOf(it)}) }\n    .also { it.blocked.addAll(blocked) }\n}\n\nval CFG.parikhFPCache: Map<Σᐩ, BitvecPosetInterval> by cache { TODO() }\n\n// Maps each symbol to the set of nonterminals that can generate it\nval CFG.generators: Map<Σᐩ, Set<Σᐩ>> by cache {\n  map { prod -> prod.RHS.map { it to prod.LHS } }.flatten()\n    .groupBy { it.first }.mapValues { it.value.map { it.second }.toSet() }\n}\n\nval CFG.nonterminalFormulas: Map<Σᐩ, Σᐩ> by cache {\n  nonterminals.associateWith { nt -> toFormula(nt) }\n}\n\n/**\n * Maps each nonterminal to terminals that can be reached from it. At least one of\n * each of these terminals must be present in the input string for the nonterminal\n * to be matched. If a string does not contain any of these terminals, we know the\n * nonterminal is not contained in the parse tree, and can prune it from the CFG.\n *\n *       Γ |- A -> a\n *       -----------------------\n *       Γ |- φ[A] = a\n *\n *       Γ |- A -> B C\n *       -----------------------\n *       Γ |- φ[A] = φ[B] ʌ φ[C]\n *\n *       Γ |- A -> B | C\n *       -----------------------\n *       Γ |- φ[A] = φ[B] v φ[C]\n */\n\nfun CFG.toFormula(nt: Σᐩ): Σᐩ =\n  when (nt) {\n    in terminals -> nt\n    !in nonterminals -> \"false\"\n    else -> bimap[nt].joinToString(\" or \", \"( \", \" )\") {\n      it.joinToString(\" and \", \"( \", \" )\") { toFormula(it) }\n    }\n  } // TODO: fix stack blowup when there is a cycle in the CFG\n\n\n// Prunes all nonterminals that represent a finite set of terminals down to the root\n// Usually this is a tree-like structure, but it can also be a DAG of nonterminals\nval CFG.pruneTreelikeNonterminals: CFG by cache {\n  println(\"Pruning treelike nonterminals!\")\n  filter { it.RHS.any { !it.isTreelikeNonterminalIn(this) } || \"ε\" in it.LHS }.toSet()\n    .let { cfg ->\n      val brokenReferences = cfg.terminals\n      cfg +\n        // Restore preexisting nonterminal stubs for all remaining treelike nonterminals\n        brokenReferences.filter { \"<$it>\" in terminals }.map { it to listOf(\"<$it>\") } +\n        cfg.nonterminals.filter { it.isOrganicNonterminal() }.map { it to listOf(\"<$it>\") } +\n        // Restore old nonterminal stubs for unreferenced unit productions\n        brokenReferences.filter { it.isSyntheticNonterminal() && it in nonterminals }\n          .map { l -> filter { it.LHS == l }.map { l to it.RHS } }\n          .flatten()\n//          .first()\n          .toSet().also { println(\"Restored productions: ${it.prettyPrint()}\") }\n    }\n    .let { it.transformIntoCNF() }\n    .also { rewriteHistory.put(it, freeze().let { listOf(rewriteHistory[it]!![0]) + listOf(it)}) }\n    .also { it.blocked.addAll(blocked) }\n}\n\n// Returns true iff the receiver is a nonterminal whose descendants\n// are themselves either (1) treelike nonterminals or (2) terminals\nprivate fun Σᐩ.isTreelikeNonterminalIn(\n  cfg: CFG,\n  reachables: Set<Σᐩ> = cfg.reachableSymbols(this) - this,\n  nonTreeLike: Set<Σᐩ> = setOf(this)\n): Bln = when {\n  \"ε\" in this -> true\n  (reachables intersect nonTreeLike).isNotEmpty() -> false\n  else -> reachables.all { it in cfg.terminals ||\n      it.isTreelikeNonterminalIn(cfg, nonTreeLike = nonTreeLike + reachables) }\n}\n\nval CFG.joinMap: JoinMap by cache { JoinMap(this) }\nclass JoinMap(val CFG: CFG) {\n  // TODO: Doesn't appear to confer any significant speedup? :/\n  val precomputedJoins: MutableMap<Π2A<Set<Σᐩ>>, Set<Π3A<Σᐩ>>> =\n    CFG.nonterminals.choose(1..3).let { it * it }\n      .associateWith { subsets -> subsets.let { (l, r) -> join(l, r) } }\n      .also { println(\"Precomputed join map has ${it.size} entries.\") }.toMutableMap()\n\n  fun join(l: Set<Σᐩ>, r: Set<Σᐩ>, tryCache: Bln = false): Set<Π3A<Σᐩ>> =\n    if (tryCache) precomputedJoins[l to r] ?: join(l, r, false).also { precomputedJoins[l to r] = it }\n    else (l * r).flatMap { (l, r) -> CFG.bimap[listOf(l, r)].map { Triple(it, l, r) } }.toSet()\n\n  @JvmName(\"setJoin\")\n  operator fun get(l: Set<Σᐩ>, r: Set<Σᐩ>): Set<Σᐩ> =\n    join(l, r, false).map { it.first }.toSet()\n\n  @JvmName(\"treeJoin\")\n  operator fun get(left: Forest, right: Forest): Forest =\n    join(left.map { it.root }.toSet(), right.map { it.root }.toSet(), false)\n      .map { (rt, l, r) ->\n        Tree(rt, null, left.first { it.root == l }, right.first { it.root == r })\n      }.toSet()\n}\n\n// Maps indices to nonterminals and nonterminals to indices\nclass Bindex<T>(\n  val set: Set<T>,\n  val indexedNTs: List<T> = set.toList(),\n  val ntIndices: Map<T, Int> = indexedNTs.zip(indexedNTs.indices).toMap()\n): List<T> by indexedNTs {\n  constructor(map: Map<Int, T>) : this(map.values.toSet(), map.values.toList(), map.entries.associate { it.value to it.key })\n  operator fun get(s: T): Int = ntIndices[s] ?: 1.also { println(\"Unknown nonterminal: $s\"); null!! }\n  fun getUnsafe(s: T): Int? = ntIndices[s]\n  override fun toString(): String = indexedNTs.mapIndexed { i, it -> \"$i: $it\" }.joinToString(\"\\n\", \"Bindex:\\n\", \"\\n\")\n}\n// Maps variables to expansions and expansions to variables in a grammar\nclass BiMap(cfg: CFG) {\n  val L2RHS by lazy { cfg.groupBy({ it.LHS }, { it.RHS }).mapValues { it.value.toSet() } }\n  val R2LHS by lazy { cfg.groupBy({ it.RHS }, { it.LHS }).mapValues { it.value.toSet() } }\n\n  val TDEPS: Map<Σᐩ, Set<Σᐩ>> by lazy { // Maps all symbols to NTs that can generate them\n    mutableMapOf<Σᐩ, MutableSet<Σᐩ>>().apply {\n      for ((l, r) in cfg) for (symbol in r)\n          getOrPut(symbol) { mutableSetOf() }.add(l)\n    }\n  }\n  val NDEPS: Map<Σᐩ, Set<Σᐩ>> by lazy { // Maps all NTs to the symbols they can generate\n    mutableMapOf<Σᐩ, MutableSet<Σᐩ>>().apply {\n      for ((l, r) in cfg) for (symbol in r)\n          getOrPut(l) { mutableSetOf() }.add(symbol)\n    }\n  }\n  val TRIPL by lazy {\n    R2LHS.filter { it.key.size == 2 }\n      .map { it.value.map { v -> v to it.key[0] to it.key[1] } }.flatten()\n  }\n  val X2WZ: Map<Σᐩ, List<Triple<Σᐩ, Σᐩ, Σᐩ>>> by lazy {\n    TRIPL.groupBy { it.second }\n      .mapValues { it.value.map { it.first to it.second to it.third } }\n  }\n  val UNITS by lazy {\n    cfg.filter { it.RHS.size == 1 && it.RHS[0] !in cfg.nonterminals }\n      .groupBy({ it.LHS }, { it.RHS[0] }).mapValues { it.value.toSet() }\n  }\n  operator fun get(p: List<Σᐩ>): Set<Σᐩ> = R2LHS[p] ?: emptySet()\n  operator fun get(p: Σᐩ): Set<List<Σᐩ>> = L2RHS[p] ?: emptySet()\n}\n\nfun CFG.forestHash(s: Σᐩ) = parseForest(s).map { it.structureEncode() }.hashCode()\nfun CFG.nonterminalHash(s: Σᐩ) = s.tokenizeByWhitespace().map { preimage(it) }.hashCode()\nfun CFG.preimage(vararg nts: Σᐩ): Set<Σᐩ> = bimap.R2LHS[nts.toList()] ?: emptySet()\n\nfun CFG.dependencyGraph() =\n  LabeledGraph { forEach { prod -> prod.second.forEach { rhs -> prod.LHS - rhs } } }\n\nfun CFG.revDependencyGraph() =\n  LabeledGraph { forEach { prod -> prod.second.forEach { rhs -> rhs - prod.LHS } } }\n\nfun CFG.jsonify() = \"cfg = {\\n\" +\n  bimap.L2RHS.entries.joinToString(\"\\n\") {\n    (\"\\\"${it.key}\\\": [${it.value.joinToString(\", \") {\n      it.joinToString(\", \", \"(\", \")\") { \"\\\"$it\\\"\" }\n    }}],\")\n  } + \"\\n}\"","@file:Suppress(\"ClassName\", \"NonAsciiCharacters\")\n\npackage ai.hypergraph.kaliningraph.types\n\nimport kotlin.jvm.JvmName\n\n// Monomorphic arrays\ntypealias Π2A<A> = Π2<A, A>\ntypealias Π3A<A> = Π3<A, A, A>\ntypealias Π4A<A> = Π4<A, A, A, A>\n\n// Multimorphic arrays\ndata class Π1<A>(val π1: A)/*: V1<A> by VT(π1)*/\n\ntypealias Π2<A, B> = Pair<A, B>\nval <A, B> Π2<A, B>.π1: A get() = first\nval <A, B> Π2<A, B>.π2: B get() = second\n\ntypealias Π3<A, B, C> = Triple<A, B, C>\nval <A, B, C> Π3<A, B, C>.π1: A get() = first\nval <A, B, C> Π3<A, B, C>.π2: B get() = second\nval <A, B, C> Π3<A, B, C>.π3: C get() = third\n\ndata class Π4<A, B, C, D>(val π1: A, val π2: B, val π3: C, val π4: D)\ndata class Π5<A, B, C, D, E>(val π1: A, val π2: B, val π3: C, val π4: D, val π5: E)\n\nfun <A: T, B: T, T> Π2<A, B>.toVT(): V2<T> = VT(π1, π2)\nfun <A: T, B: T, C: T, T> Π3<A, B, C>.toVT(): V3<T> = VT(π1, π2, π3)\nfun <A: T, B: T, C: T, D: T, T> Π4<A, B, C, D>.toVT(): V4<T> = VT(π1, π2, π3, π4)\nfun <A: T, B: T, C: T, D: T, E: T, T> Π5<A, B, C, D, E>.toVT(): V5<T> = VT(π1, π2, π3, π4, π5)\n\nfun <A, B> Π(π1: A, π2: B) = Π2(π1, π2)\nfun <A, B, C> Π(π1: A, π2: B, π3: C) = Π3(π1, π2, π3)\nfun <A, B, C, D> Π(π1: A, π2: B, π3: C, π4: D) = Π4(π1, π2, π3, π4)\nfun <A, B, C, D, E> Π(π1: A, π2: B, π3: C, π4: D, π5: E) = Π5(π1, π2, π3, π4, π5)\n\ninfix fun <A, B, Z> Π2<A, B>.to(that: Z) = Π(π1, π2, that)\ninfix fun <A, B, C, D> Π2<A, B>.to(that: Π2<C, D>): Π2<Π2<A, B>, Π2<C, D>> = Π(this, that)\ninfix fun <A, B, C, Z> Π3<A, B, C>.to(that: Z) = Π(π1, π2, π3, that)\ninfix fun <A, B, C, D, Z> Π4<A, B, C, D>.to(that: Z) = Π(π1, π2, π3, π4, that)\n\nfun allPairs(numRows: Int, numCols: Int): Set<V2<Int>> =\n  (0 until numRows) * (0 until numCols)\n\noperator fun IntProgression.times(s: IntProgression): Set<V2<Int>> =\n  flatMap { s.map(it::cc).toSet() }.toSet()\n\ninfix operator fun <T, U> Sequence<T>.times(other: Sequence<U>) =\n  flatMap { other.map(it::to) }\n\noperator fun <A, Z> Set<A>.times(s: Set<Z>): Set<Π2<A, Z>> =\n  flatMap { s.map(it::to).toSet() }.toSet()\n\nfun <T> Iterable<Set<T>>.intersect(): Set<T> =\n  fold(first().toMutableSet()) { a, b -> a.apply { retainAll(b) } }\n\nfun <T> Collection<T>.powerset(): Sequence<Set<T>> = sequence {\n  when (size) {\n    0 -> yield(emptySet())\n    else -> {\n      val head = first()\n      val tail = this@powerset - head\n      yieldAll(tail.powerset())\n      tail.powerset().forEach { yield(setOf(head) + it) }\n    }\n  }\n}\n\nfun <T> List<Set<T>>.cartesianProduct(): Sequence<List<T>> {\n  fun product(sets: List<Set<T>>, current: List<T>): Sequence<List<T>> =\n    sequence {\n      if (sets.isEmpty()) yield(current)\n      else sets.first().forEach { yieldAll(product(sets.drop(1), current + it)) }\n    }\n  return product(this, emptyList())\n}\n\ninfix fun IntRange.isSubsetOf(ir: IntRange) = ir.first <= first && last <= ir.last\ninfix fun IntRange.isStrictSubsetOf(ir: IntRange) =\n  ir.first <= first && last <= ir.last && this != ir\n\noperator fun <T> Set<T>.contains(s: Set<T>) = containsAll(s)\n\n@JvmName(\"cartProdPairSeq\") operator fun <E: Π2<A, B>, A, B, Z> Sequence<E>.times(s: Sequence<Z>): Sequence<Π3<A, B, Z>> =\n  flatMap { s.map(it::to) }\n\n@JvmName(\"cartProdPair\") operator fun <E: Π2<A, B>, A, B, Z> Set<E>.times(s: Set<Z>): Set<Π3<A, B, Z>> =\n  flatMap { s.map(it::to) }.toSet()\n\n@JvmName(\"cartProdPairPair\") operator fun <A, B, C, D> Set<Π2<A, B>>.times(s: Set<Π2<C, D>>): Set<Π2<Π2<A, B>, Π2<C, D>>> =\n  flatMap { s.map(it::to) }.toSet()\n\n@JvmName(\"cartProdTriple\") operator fun <E: Π3<A, B, C>, A, B, C, Z> Set<E>.times(s: Set<Z>): Set<Π4<A, B, C, Z>> =\n  flatMap { s.map(it::to) }.toSet()\n\n// IDK why the Kotlin stdlib provides these for Map but not Set\npublic inline fun <T> Set<T>.filter(noinline predicate: (T) -> Boolean): Set<T> =\n  toMutableSet().apply { retainAll(predicate) }\n//  filterTo(HashSet(), predicate)\n//public inline fun <T, Q> Set<T>.map(tx: (T) -> Q): Set<Q> = mapTo(HashSet(), tx)\n\ninterface VT<E, L: S<*>> : List<E> {\n  open val len: L\n  open val l: List<E>\n  fun <A: S<*>, B: S<*>> fetch(intRange: Pair<A, B>): List<E> = subList(intRange.first.toInt(), intRange.second.toInt())\n\n  class of<E, L: S<*>>(override val len: L, override val l: List<E>): VT<E, L>, List<E> by l {\n    internal constructor(l: L, vararg es: E): this(l, es.toList())\n\n    override fun equals(other: Any?) = (other as? VT<E, L>)?.l == l\n    override fun toString() = l.toString()\n  }\n}\n\nfun <A> Iterable<V2<A>>.unzip() = map { it[S1] to it[S2] }.unzip()\n\ninfix fun <T> T.cc(that: T) = VT(this, that)\n\nfun <T1: VT<E, L>, E, L: S<*>> T1.append(that: E): VT<E, Q1<L>> = VT.of(this.len + S1, this.l + listOf(that))\nfun <T1: VT<E, L>, E, L: S<*>> T1.prepend(that: E): VT<E, Q1<L>> = VT.of(this.len + S1, listOf(that) + this.l)\n\n@JvmName(\"cc2\") infix fun <T1: VT<E, L>, T2: VT<E, L1>, E, L: S<*>> T1.cc(that: T2): VT<E, Q1<L>> = VT.of(this.len + that.len, this.l + that.l)\n@JvmName(\"cc3\") infix fun <T1: VT<E, L>, T2: VT<E, L2>, E, L: S<*>> T1.cc(that: T2): VT<E, Q2<L>> = VT.of(this.len + that.len, this.l + that.l)\n@JvmName(\"cc4\") infix fun <T1: VT<E, L>, T2: VT<E, L3>, E, L: S<*>> T1.cc(that: T2): VT<E, Q3<L>> = VT.of(this.len + that.len, this.l + that.l)\n@JvmName(\"cc5\") infix fun <T1: VT<E, L>, T2: VT<E, L4>, E, L: S<*>> T1.cc(that: T2): VT<E, Q4<L>> = VT.of(this.len + that.len, this.l + that.l)\n@JvmName(\"cc6\") infix fun <T1: VT<E, L>, T2: VT<E, L5>, E, L: S<*>> T1.cc(that: T2): VT<E, Q5<L>> = VT.of(this.len + that.len, this.l + that.l)\n\nfun <E> VT(v1: E): VT<E, L1> = VT.of(S1, v1)\nfun <E> VT(v1: E, v2: E): VT<E, L2> = VT.of(S2, v1, v2)\nfun <E> VT(v1: E, v2: E, v3: E): VT<E, L3> = VT.of(S3, v1, v2, v3)\nfun <E> VT(v1: E, v2: E, v3: E, v4: E): VT<E, L4> = VT.of(S4, v1, v2, v3, v4)\nfun <E> VT(v1: E, v2: E, v3: E, v4: E, v5: E): VT<E, L5> = VT.of(S5, v1, v2, v3, v4, v5)\nfun <E> VT(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E): VT<E, L6> = VT.of(S6, v1, v2, v3, v4, v5, v6)\nfun <E> VT(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E, v7: E): VT<E, L7> = VT.of(S7, v1, v2, v3, v4, v5, v6, v7)\nfun <E> VT(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E, v7: E, v8: E): VT<E, L8> = VT.of(S8, v1, v2, v3, v4, v5, v6, v7, v8)\nfun <E> VT(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E, v7: E, v8: E, v9: E): VT<E, L9> = VT.of(S9, v1, v2, v3, v4, v5, v6, v7, v8, v9)\n\ntypealias V1<E> = VT<E, L1>\ntypealias V2<E> = VT<E, L2>\ntypealias V3<E> = VT<E, L3>\ntypealias V4<E> = VT<E, L4>\ntypealias V5<E> = VT<E, L5>\ntypealias V6<E> = VT<E, L6>\ntypealias V7<E> = VT<E, L7>\ntypealias V8<E> = VT<E, L8>\ntypealias V9<E> = VT<E, L9>\n\nfun <E, D1: S<*>, D2: S<*>> List<E>.chunked(d1: D1, d2: D2): List<VT<E, D2>> = chunked(d1.toInt()).map { VT.of(d2, it) }\n\n/** TODO: Unify this representation with [ai.hypergraph.kaliningraph.tensor.Matrix] */\ntypealias Mat<E, R, C> = VT<VT<E, C>, R>\n\ninline fun <reified R: S<*>> asInt() = R::class.simpleName!!.drop(1).toInt()\nfun <E, R: S<*>, C: S<*>> Mat(r: R, c: C, vararg es: E): Mat<E, R, C> = Mat(r, c, es.toList())\nfun <E, R: S<*>, C: S<*>> Mat(r: R, c: C, es: List<E>): Mat<E, R, C> = VT.of(r, es.chunked(r, c))\nfun <E, R: S<*>, C: S<*>> Mat(r: R, c: C, f: (Int, Int) -> E): Mat<E, R, C> =\n  Mat(r, c, allPairs(r.toInt(), c.toInt()).map { (r, c) -> f(r, c) }.toList())\n\nfun <E> Mat2x1(t1: E, t2: E): Mat<E, L2, L1> = Mat(S2, S1, t1, t2)\nfun <E> Mat1x2(t1: E, t2: E): Mat<E, L1, L2> = Mat(S1, S2, t1, t2)\n//...Optional pseudoconstructors\n\noperator fun <E, R: S<*>, C1: S<*>, C2: S<*>> Mat<E, R, C1>.times(that: Mat<E, C1, C2>): Mat<E, R, C2> = this as Mat<E, R, C2>\noperator fun <E, R: S<*>, C: S<*>> Mat<E, R, C>.get(r: Int, c: Int): E = l[r][c]\n//fun <E, R: S<*>, C: S<*>> Mat<E, R, C>.transpose(): Mat<E, C, R> = Mat { r, c -> this[c][r]}\n\n@JvmName(\"get1\") operator fun <R, L : Q1<R>, E> VT<E, L>.get(i: L1) = l[0]\n@JvmName(\"get2\") operator fun <R, L : Q2<R>, E> VT<E, L>.get(i: L2) = l[1]\n@JvmName(\"get3\") operator fun <R, L : Q3<R>, E> VT<E, L>.get(i: L3) = l[2]\n@JvmName(\"get4\") operator fun <R, L : Q4<R>, E> VT<E, L>.get(i: L4) = l[3]\n@JvmName(\"get5\") operator fun <R, L : Q5<R>, E> VT<E, L>.get(i: L5) = l[4]\n@JvmName(\"get6\") operator fun <R, L : Q6<R>, E> VT<E, L>.get(i: L6) = l[5]\n@JvmName(\"get7\") operator fun <R, L : Q7<R>, E> VT<E, L>.get(i: L7) = l[6]\n@JvmName(\"get8\") operator fun <R, L : Q8<R>, E> VT<E, L>.get(i: L8) = l[7]\n@JvmName(\"get9\") operator fun <R, L : Q9<R>, E> VT<E, L>.get(i: L9) = l[8]\n\nval <R, L : Q1<R>, E> VT<E, L>.first: E get() = component1()\nval <R, L : Q2<R>, E> VT<E, L>.second: E get() = component2()\nval <R, L : Q3<R>, E> VT<E, L>.third: E get() = component3()\n\noperator fun <T> Array<T>.get(range: IntRange) = sliceArray(range)\n\nfun <E, Z : Q1<P>, P> VT<E, Z>.take1(): VT<E, L1> = VT.of(S1, fetch(S0..S1))\nfun <E, Z : Q2<P>, P> VT<E, Z>.take2(): VT<E, L2> = VT.of(S2, fetch(S0..S2))\nfun <E, Z : Q3<P>, P> VT<E, Z>.take3(): VT<E, L3> = VT.of(S3, fetch(S0..S3))\nfun <E, Z : Q4<P>, P> VT<E, Z>.take4(): VT<E, L4> = VT.of(S4, fetch(S0..S4))\n\nfun <E, Z : Q2<P>, P> VT<E, Z>.drop1(): VT<E, S<P>> = VT.of(len - S1, fetch(S1..len))\nfun <E, Z : Q3<P>, P> VT<E, Z>.drop2(): VT<E, S<P>> = VT.of(len - S2, fetch(S2..len))\nfun <E, Z : Q4<P>, P> VT<E, Z>.drop3(): VT<E, S<P>> = VT.of(len - S3, fetch(S3..len))\nfun <E, Z : Q5<P>, P> VT<E, Z>.drop4(): VT<E, S<P>> = VT.of(len - S4, fetch(S4..len))\n\n//                              ┌────j────┐    ┌────k────┐    where j, j are the relative offsets Y - X, Z - Y respectively\n// Encodes the constraint:  P < X    <    Y && Y    <    Z    where X, Y are the start and end of range in a vector of length Z\n@JvmName(\"sv121\") operator fun <E, P, X: Q1<P>, Y: Q2<X>, Z : Q1<Y>> VT<E, Z>.get(r: Pair<X, Y>): VT<E, L2> = VT.of(S2, fetch(r))\n@JvmName(\"sv122\") operator fun <E, P, X: Q1<P>, Y: Q2<X>, Z : Q2<Y>> VT<E, Z>.get(r: Pair<X, Y>): VT<E, L2> = VT.of(S2, fetch(r))\n@JvmName(\"sv221\") operator fun <E, P, X: Q2<P>, Y: Q2<X>, Z : Q1<Y>> VT<E, Z>.get(r: Pair<X, Y>): VT<E, L2> = VT.of(S2, fetch(r))\n@JvmName(\"sv222\") operator fun <E, P, X: Q2<P>, Y: Q2<X>, Z : Q2<Y>> VT<E, Z>.get(r: Pair<X, Y>): VT<E, L2> = VT.of(S2, fetch(r))\n\noperator fun <A, B> S<A>.rangeTo(that: S<B>): Pair<S<A>, S<B>> = this to that\n\n// ============================= Naperian Functors ==============================\n\n// https://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/aplicative.pdf\n// https://github.com/NickHu/naperian-functors/blob/master/src/Data/Naperian.hs\n// https://github.com/NickHu/naperian-functors/blob/master/src/Data/Naperian/Vector.hs\n// https://github.com/NickHu/naperian-functors/blob/master/src/Data/Naperian/Symbolic.hs\n// \"The main idea is that a rank-n array is essentially a data structure of type\n// D₁(D₂(...(Dₙ a))), where each Dᵢ is a dimension : a container type, categorically\n// a functor; one might think in the first instance of lists.\"\n\n// This gives us something like a Church-encoded list\n// Using a recursive type bound T: TS<H, T> will blow up the compiler\nclass TS<H, T>(val head: H, val tail: T? = null) {\n  operator fun get(i: Int): H =\n    if (i == 0) head else if (tail is TS<*, *>) tail[i - 1] as H else throw IndexOutOfBoundsException()\n  fun size(): Int = if (tail == null) 1 else if (tail is TS<*, *>) 1 + tail.size() else 1\n  /** TODO: Maybe possible to make bidirectional, see [ai.hypergraph.experimental.DLL] */\n}\n\n// Product\ntypealias TS1<H> = TS<H, Nothing>\ntypealias TS2<H> = TS<H, TS1<H>>\ntypealias TS3<H> = TS<H, TS2<H>>\ntypealias TS4<H> = TS<H, TS3<H>>\ntypealias TS5<H> = TS<H, TS4<H>>\ntypealias TS6<H> = TS<H, TS5<H>>\ntypealias TS7<H> = TS<H, TS6<H>>\ntypealias TS8<H> = TS<H, TS7<H>>\ntypealias TS9<H> = TS<H, TS8<H>>\n\n// Array quotient\ntypealias TQ1<H, F> = TS<H, F>\ntypealias TQ2<H, F> = TS<H, TQ1<H, F>>\ntypealias TQ3<H, F> = TS<H, TQ2<H, F>>\ntypealias TQ4<H, F> = TS<H, TQ3<H, F>>\ntypealias TQ5<H, F> = TS<H, TQ4<H, F>>\ntypealias TQ6<H, F> = TS<H, TQ5<H, F>>\ntypealias TQ7<H, F> = TS<H, TQ6<H, F>>\ntypealias TQ8<H, F> = TS<H, TQ7<H, F>>\ntypealias TQ9<H, F> = TS<H, TQ8<H, F>>\n\ntypealias TM1x1<H> = TS1<TS1<H>>\ntypealias TM1x2<H> = TS1<TS2<H>>\ntypealias TM2x1<H> = TS2<TS1<H>>\ntypealias TM2x2<H> = TS2<TS2<H>>\ntypealias TM3x1<H> = TS3<TS1<H>>\ntypealias TM1x3<H> = TS1<TS3<H>>\ntypealias TM3x2<H> = TS3<TS2<H>>\ntypealias TM2x3<H> = TS2<TS3<H>>\ntypealias TM3x3<H> = TS3<TS3<H>>\n\ntypealias TMRx2<H, R> = TS<TS3<H>, R>\ntypealias TMRx3<H, R> = TS<TS3<H>, R>\ntypealias TM2xC<H, C> = TS2<TQ1<H, C>>\ntypealias TM3xC<H, C> = TS3<TQ1<H, C>>\ntypealias TMat<E, R, C> = TS<TS<E, C>, R> // I think this is a bush?\n\nfun <E> TV(v1: E): TS1<E> = TS(v1, null)\nfun <E> TV(v1: E, v2: E): TS2<E> = TS(v1, TS(v2, null))\nfun <E> TV(v1: E, v2: E, v3: E): TS3<E> = TS(v1, TS(v2, TS(v3, null)))\nfun <E> TV(v1: E, v2: E, v3: E, v4: E): TS4<E> = TS(v1, TS(v2, TS(v3, TS(v4, null))))\nfun <E> TV(v1: E, v2: E, v3: E, v4: E, v5: E): TS5<E> = TS(v1, TS(v2, TS(v3, TS(v4, TS(v5, null)))))\nfun <E> TV(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E): TS6<E> = TS(v1, TS(v2, TS(v3, TS(v4, TS(v5, TS(v6, null))))))\nfun <E> TV(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E, v7: E): TS7<E> = TS(v1, TS(v2, TS(v3, TS(v4, TS(v5, TS(v6, TS(v7, null)))))))\nfun <E> TV(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E, v7: E, v8: E): TS8<E> = TS(v1, TS(v2, TS(v3, TS(v4, TS(v5, TS(v6, TS(v7, TS(v8, null))))))))\nfun <E> TV(v1: E, v2: E, v3: E, v4: E, v5: E, v6: E, v7: E, v8: E, v9: E): TS9<E> = TS(v1, TS(v2, TS(v3, TS(v4, TS(v5, TS(v6, TS(v7, TS(v8, TS(v9, null)))))))))\n\n@JvmName(\"len1\") fun <H> TS1<H>.len(): L1 = S1\n@JvmName(\"len2\") fun <H> TS2<H>.len(): L2 = S2\n@JvmName(\"len3\") fun <H> TS3<H>.len(): L3 = S3\n@JvmName(\"len4\") fun <H> TS4<H>.len(): L4 = S4\n@JvmName(\"len5\") fun <H> TS5<H>.len(): L5 = S5\n\n@JvmName(\"pget1\") operator fun <E, Z: TQ1<E, TS>, TS> Z.get(i: L1): E = this[0]\n@JvmName(\"pget2\") operator fun <E, Z: TQ2<E, TS>, TS> Z.get(i: L2): E = this[1]\n@JvmName(\"pget3\") operator fun <E, Z: TQ3<E, TS>, TS> Z.get(i: L3): E = this[2]\n@JvmName(\"pget4\") operator fun <E, Z: TQ4<E, TS>, TS> Z.get(i: L4): E = this[3]\n\nfun <E, Z: TQ1<E, TS>, TS> Z.take1(): TS1<E> = TS(head, null)\nfun <E, Z: TQ2<E, TS>, TS> Z.take2(): TS2<E> = TS(head, tail!!.take1())\nfun <E, Z: TQ3<E, TS>, TS> Z.take3(): TS3<E> = TS(head, tail!!.take2())\nfun <E, Z: TQ4<E, TS>, TS> Z.take4(): TS4<E> = TS(head, tail!!.take3())\n\nfun <E, Z: TQ2<E, TS>, TS> Z.drop1(): TQ1<E, TS> = tail!!\nfun <E, Z: TQ3<E, TS>, TS> Z.drop2(): TQ1<E, TS> = drop1().drop1()\nfun <E, Z: TQ4<E, TS>, TS> Z.drop3(): TQ1<E, TS> = drop2().drop1()\nfun <E, Z: TQ5<E, TS>, TS> Z.drop4(): TQ1<E, TS> = drop2().drop2()\n\nfun <E> TM2x1(t1: E, t2: E): TS<TS<E, Nothing>, TS<TS<E, Nothing>, Nothing>> = TV(TV(t1), TV(t2))\nfun <E> TM1x2(t1: E, t2: E): TS<TS<E, TS<E, Nothing>>, Nothing> = TV(TV(t1, t2))\n\noperator fun <E, R> TS<E, R>.plus(o: TS<E, R>): TS<E, R> = TODO()\noperator fun <E, R> TS<E, R>.minus(o: TS<E, R>): TS<E, R> = TODO()\n// TODO: How do we express matrix multiplication? Not sure how to match the inner dimension...\n//fun <E, R, T: TSQ3<E, C>, C, C1> TSQ3<R, T>.times(o: TSQ1<>): TS<T",null,null,null,"package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.formatAsGrid\nimport ai.hypergraph.kaliningraph.tensor.FreeMatrix\nimport ai.hypergraph.kaliningraph.types.*\n\nfun Production.pretty(): Σᐩ = LHS + \" -> \" + RHS.joinToString(\" \")\nval CFG.pretty: FreeMatrix<Σᐩ> by cache { map { it.pretty() }.formatAsGrid(3) }\n//fun CJL.prettyPrint() = cfgs.joinToString(\"\\nΛ\\n\") { it.prettyPrint() }\nfun CFG.prettyPrint(): Σᐩ = pretty.toString()","package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.types.*\n\n// https://en.wikipedia.org/wiki/Regular_grammar\ntypealias REG = Set<Π2A<Σᐩ>>\nval REG.language: REL by cache { REL(this) }\n\n// Subsumption holds a fortiori: REG <: CFG <: CJL\nval REG.asCFG: CFG by cache { map { (a, b) -> a to listOf(b) }.toSet() }\nval CFG.asCJL: CJL by cache { CJL(language) }\n\ninfix fun CFG.intersect(that: CFG) = CJL(language, that.language)\n\ndata class REL(val reg: REG) // https://en.wikipedia.org/wiki/Regular_language#Closure_properties\ndata class CFL(val cfg: CFG) // https://en.wikipedia.org/wiki/Context-free_language#Closure_properties\n\n// TODO: Conjunctive grammar: https://en.wikipedia.org/wiki/Conjunctive_grammar\n// TODO: Boolean grammar: https://en.wikipedia.org/wiki/Boolean_grammar\n// May need to stage set expressions to support both ∪ and ∩,\n// but currently just represents the intersection of CFL(s).\n\nclass CJL(vararg cfls: CFL) {\n  val cfls: Array<CFL> = cfls.toSet().toTypedArray()\n  val cfgs by cache { cfls.map { it.cfg } }\n  val nonterminals: Set<Σᐩ> by cache { intersect { nonterminals } }\n  val terminals: Set<Σᐩ> by cache { intersect { terminals } }\n  val symbols: Set<Σᐩ> by cache { intersect { symbols } }\n\n  private fun <T> intersect(item: CFG.() -> Set<T>): Set<T> = cfgs.map { it.item() }.intersect()\n}\n\nfun CJL.upwardClosure(terminals: Set<Σᐩ>): CJL =\n  CJL(*cfgs.map { CFL(it.upwardClosure(terminals)) }.toTypedArray())\n\n// Given a set of tokens from a string, find the upward closure of the CFG w.r.t. the tokens.\nfun CFG.upwardClosure(tokens: Set<Σᐩ>): CFG =\n  tokens.intersect(terminals).let {\n    if (it.isEmpty()) this\n    else (depGraph.reversed().transitiveClosure(tokens) - terminals)\n      .let { closure -> filter { it.LHS in closure } }\n  }\n\nfun pruneInactiveRules(cfg: CFG): CFG =\n  TODO(\"Identify and prune all nonterminals t generating\" +\n    \"a finite language rooted at t and disjoint from the upward closure.\")\n\n// REL ⊂ CFL ⊂ CJL\noperator fun REL.contains(s: Σᐩ): Bln = s in reg.asCFG.language\noperator fun CFL.contains(s: Σᐩ): Bln = cfg.isValid(s)\noperator fun CJL.contains(s: Σᐩ): Bln = cfls.all { s in it }\noperator fun CFL.contains(s: List<Σᐩ>): Bln = cfg.isValid(s)\n\n// https://arxiv.org/pdf/2209.06809.pdf\n// http://www.cs.umd.edu/~gasarch/BLOGPAPERS/cfg.pdf\ninfix fun CFL.intersect(rel: REL): CFL = TODO(\"Implement Bar-Hillel construction\")\ninfix fun REL.intersect(cfl: CFL): CFL = cfl intersect this\n\n// https://sites.cs.ucsb.edu/~cappello/136/lectures/17cfls/slides.pdf#page=9\ninfix fun CFL.intersect(cfl: CFL): CJL = CJL(this, cfl)\ninfix fun CJL.intersect(cfl: CFL): CJL = CJL(*cfls, cfl)\ninfix fun CFL.intersect(cjl: CJL): CJL = CJL(this, *cjl.cfls)\ninfix fun CJL.intersect(cjl: CJL): CJL = CJL(*cfls, *cjl.cfls)\n\n// Complement: https://nokyotsu.com/me/papers/cic01.pdf","package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.cache.LRUCache\nimport ai.hypergraph.kaliningraph.graphs.LabeledGraph\nimport ai.hypergraph.kaliningraph.types.*\n\n//=====================================================================================\n// CFG Normalization\n// http://firsov.ee/cert-norm/cfg-norm.pdf\n// https://www.cs.rit.edu/~jmg/courses/cs380/20051/slides/7-1-chomsky.pdf\n// https://user.phil-fak.uni-duesseldorf.de/~kallmeyer/Parsing/cyk.pdf#page=21\n\nval rewriteHistory = LRUCache<CFG, List<CFG>>()\n\n/**\n * n.b. Normalization may destroy organic nonterminals!\n * In order to preserve every organic nonterminal, you\n * must first generateNonterminalStubs() for all V ∈ G\n * ensure that ∃v.(v->*) ∈ G => (v-><v>) ∈ G holds.\n */\nfun CFG.normalize(): CFG =\n  mutableListOf<CFG>().let { rewrites ->\n    addGlobalStartSymbol()\n      .expandOr()\n      .also { rewrites.add(it) } /** [originalForm] */\n      .eliminateParametricityFromLHS()\n      .also { rewrites.add(it) } /** [nonparametricForm] */\n      .transformIntoCNF()\n      // This should occur after CNF transform otherwise it causes issues\n      // during nonterminal-constrained synthesis, e.g., _ _ _ <NT> _ _ _\n      // because we do not use equivalence class during bitvector encoding\n      // Must remember to run the unit test if order changes in the future\n      // ./gradlew jvmTest --tests \"ai.hypergraph.kaliningraph.sat.SATValiantTest.testTLArithmetic\"\n      .generateNonterminalStubs()\n      .also { cnf -> rewriteHistory.put(cnf.freeze(), rewrites) }\n  }\n\nfun CFG.transformIntoCNF(): CFG =\n  addEpsilonProduction()\n    .refactorEpsilonProds()\n    .elimVarUnitProds()\n    .refactorRHS()\n    .terminalsToUnitProds()\n    .removeUselessSymbols()\n\nval START_SYMBOL = \"START\"\n\nfun Σᐩ.getParametersIn(cfg: CFG) =\n  cfg.unitProductions.map { it.LHS }.filter { \"<$it>\" in this }\n\nfun CFG.eliminateParametricityFromRHS(\n  ntReplaced: Σᐩ,\n  ntReplacements: Set<Σᐩ>\n): CFG =\n  if (ntReplacements.isEmpty()) this\n  else flatMap { prod ->\n    if (prod.RHS.none { ntReplaced in it }) listOf(prod)\n    else ntReplacements.map { ntr ->\n      (prod.LHS to prod.RHS.map { if (it == ntReplaced) ntr else it })\n    }\n  }.toSet()\n\nfun CFG.eliminateParametricityFromLHS(\n  parameters: Set<Σᐩ> =\n    nonterminals.flatMap { it.getParametersIn(this) }.toSet()\n): CFG =\n  if (parameters.isEmpty()) this else {\n    var i = false\n    var (ntReplaced, ntReplacements) = \"\" to setOf<Σᐩ>()\n    flatMap { prod ->\n      val params = prod.LHS.getParametersIn(this)\n      if (params.isEmpty() || i) return@flatMap listOf(prod)\n      i = true\n      ntReplaced = prod.LHS\n      val map = params.associateWith { bimap[it].map { it[0] }.toSet() }\n      val (s, r) = map.entries.maxByOrNull { it.value.size }!!\n      r.map { rc ->\n        prod.LHS.replace(\"<$s>\", \"<$rc>\").also { ntReplacements += it } to\n          prod.RHS.map { it.replace(\"<$s>\", \"<$rc>\") }\n      }\n    }.toSet()\n      .eliminateParametricityFromRHS(ntReplaced, ntReplacements)\n      .eliminateParametricityFromLHS()\n  }\n\nfun CFG.generateNonterminalStubs(): CFG =\n  this + (filter { it.LHS.isOrganicNonterminal()  }\n    .map { it.LHS to listOf(\"<${it.LHS}>\") }.toSet()).addEpsilonProduction()\n\nfun Σᐩ.isSyntheticNonterminal() =\n  split('.').size != 1 || \"ε\" in this || this == \"START\"\nfun Σᐩ.isOrganicNonterminal() =\n  split('.').size == 1 && \"ε\" !in this && this != \"START\"\n\n// Add start symbol if none are present (e.g., in case the user forgets)\nprivate fun CFG.addGlobalStartSymbol(): CFG =\n  this + if (START_SYMBOL in nonterminals) emptySet()\n  else nonterminals.map { START_SYMBOL to listOf(it) }\n\n// Expands RHS `|` productions, e.g., (A -> B | C) -> (A -> B, A -> C)\nfun CFG.expandOr(): CFG =\n  flatMap { prod ->\n    prod.RHS.fold(listOf(listOf<Σᐩ>())) { acc, s ->\n      if (s == \"|\") (acc + listOf(listOf()))\n      else (acc.dropLast(1) + listOf(acc.last() + s))\n    }.map { prod.LHS to it }\n  }.toSet()\n\n// Adds V -> εV | Vε to every unit production [V -> v] in CFG\n// so that holes can be [optionally] elided by the SAT solver.\nprivate fun CFG.addEpsilonProduction(): CFG =\n  terminalUnitProductions.filterNot { \"ε\" in it.pretty() }.map { it.LHS }.toSet()\n    .fold(this) { acc, it -> acc + (it to listOf(it, \"ε+\")) + (it to listOf(\"ε+\", it)) } +\n    (\"ε+\" to listOf(\"ε+\", \"ε+\")) + (\"ε+\" to listOf(\"ε\"))\n\n// http://firsov.ee/cert-norm/cfg-norm.pdf#subsection.3.1\ntailrec fun CFG.nullableNonterminals(\n  nbls: Set<Σᐩ> = setOf(\"ε\"),\n  nnts: Set<Σᐩ> = filter { nbls.containsAll(it.RHS) }.map { it.LHS }.toSet()\n): Set<Σᐩ> = if (nnts == (nbls - \"ε\")) nnts else nullableNonterminals(nnts + nbls)\n\nfun List<Σᐩ>.drop(nullables: Set<Σᐩ>, keep: Set<Int>): List<Σᐩ> =\n  mapIndexedNotNull { i, s ->\n    if (s in nullables && i !in keep) null\n    else if (s in nullables && i in keep) s\n    else s\n  }\n\n// http://firsov.ee/cert-norm/cfg-norm.pdf#subsection.3.2\nfun Production.allSubSeq(nullables: Set<Σᐩ>): Set<Production> =\n  RHS.indices.filter { RHS[it] in nullables }.powerset().toSet()\n    .map { idxs -> LHS to RHS.drop(nullables, idxs) }.toSet()\n\n/**\n * Makes ε-productions optional. n.b. We do not use CNF, but almost-CNF!\n * ε-productions are allowed because we want to be able to synthesize them\n * as special characters, then simply omit them during printing.\n *\n *  - Determine nullable variables, i.e., those which contain ε on the RHS\n *  - For each production omit every possible subset of nullable variables,\n *      e.g., (P -> AxB, A -> ε, B -> ε) -> (P -> xB, P -> Ax, P -> x)\n *  - Remove all productions with an empty RHS\n */\n\nfun CFG.refactorEpsilonProds(nlbls: Set<Σᐩ> = nullableNonterminals()): CFG =\n  (this + setOf(START_SYMBOL to listOf(START_SYMBOL, \"ε\")))\n    .flatMap { p -> if (p.RHS.any { it in nlbls }) p.allSubSeq(nlbls) else listOf(p) }\n    .filter { it.RHS.isNotEmpty() }.toSet()\n\n/**\n * Eliminate all non-generating and unreachable symbols.\n *\n * All terminal-producing symbols are generating.\n * If A -> [..] and all symbols in [..] are generating, then A is generating\n * No other symbols are generating.\n *\n * START is reachable.\n * If S -> [..] is reachable, then all variables in [..] are reachable.\n * No other symbols are reachable.\n *\n * A useful symbol is both generating and reachable.\n */\n\n// TODO: https://zerobone.net/blog/cs/non-productive-cfg-rules/\nfun CFG.removeUselessSymbols(\n  generating: Set<Σᐩ> = genSym(),\n  reachable: Set<Σᐩ> = reachSym()\n): CFG =\n  toMutableSet().apply {\n    removeAll { (s, _) -> s !in generating || s !in reachable }\n  }\n//  .also {\n//    println(\n//      it.second.joinToString(\"\\n\") { (l, r) ->\n//        \"Removed ($l -> ${r.joinToString(\" \")}) because it was\" +\n//            if (l !in generating && l !in reachable) \"non-generating/unreachable.\"\n//            else if (l !in generating) \"non-generating.\"\n//            else \"unreachable.\"\n//      }\n//    )\n//  }\n//  .first.toSet()\n\n//fun CFG.removeNonGenerating(generating: Set<Σᐩ> = genSym()) =\n//  toMutableSet().apply { removeAll { (s, _) -> s !in generating } }\n//\n//fun CFG.removeUnreachable() =\n//  toMutableSet().apply { removeAll { (s, _) -> !reachableNTs[bindex[s]] } }\n//    .also { println(\"Removed ${size - it.size} unreachable productions.\") }\n\nfun CFG.equivalenceClass(from: Σᐩ): Set<Σᐩ> = unitReachability[from] ?: setOf(from)\n\nfun LabeledGraph.transitiveClosure(from: Set<Σᐩ>) =\n  transitiveClosure(filter { it.label in from }).map { it.label }.toSet()\n\nfun CFG.reachSym(from: Σᐩ = START_SYMBOL): Set<Σᐩ> {\n  val allReachable: MutableSet<Σᐩ> = mutableSetOf(from)\n  val nextReachable = mutableSetOf(from)\n\n  do {\n    val t = nextReachable.first()\n    nextReachable.remove(t)\n    allReachable += t\n    nextReachable += (bimap.NDEPS[t]?: emptyList())\n      .filter { it !in allReachable && it !in nextReachable }\n  } while (nextReachable.isNotEmpty())\n\n  return allReachable\n}\n\n// All symbols that are reachable from START_SYMBOL\nfun CFG.reachableSymbols(from: Σᐩ = START_SYMBOL): Set<Σᐩ> =\n  reachability.getOrPut(from) { depGraph.transitiveClosure(setOf(from)) }\n\nfun CFG.genSym(from: Set<Σᐩ> = terminalUnitProductions.map { it.LHS }.toSet()): Set<Σᐩ> {\n  val allGenerating: MutableSet<Σᐩ> = mutableSetOf()\n  val nextGenerating = from.toMutableSet()\n\n  do {\n    val t = nextGenerating.first()\n    nextGenerating.remove(t)\n    allGenerating += t\n    nextGenerating += (bimap.TDEPS[t] ?: emptyList())\n      .filter { it !in allGenerating && it !in nextGenerating }\n  } while (nextGenerating.isNotEmpty())\n\n  return allGenerating\n}\n\n// All symbols that are either terminals or generate terminals\nfun CFG.generatingSymbols(\n  from: Set<Σᐩ> = terminalUnitProductions.map { it.LHS }.toSet(),\n  revGraph: LabeledGraph = revDepGraph\n): Set<Σᐩ> = revGraph.transitiveClosure(from)\n\n/* Drops variable unit productions, for example:\n * Initial grammar: (A -> B, B -> c, B -> d) ->\n * After expansion: (A -> B, A -> c, A -> d, B -> c, B -> d) ->\n * After elimination: (A -> c, A -> d, B -> c, B -> d)\n */\nprivate tailrec fun CFG.elimVarUnitProds(\n  toVisit: Set<Σᐩ> = nonterminals,\n  vars: Set<Σᐩ> = nonterminals,\n  toElim: Σᐩ? = toVisit.firstOrNull()\n): CFG {\n  fun Production.isVariableUnitProd() = RHS.size == 1 && RHS[0] in vars\n  if (toElim == null) return filter { !it.isVariableUnitProd() }\n  val varsThatMapToMe =\n    filter { it.RHS.size == 1 && it.RHS[0] == toElim }.map { it.LHS }.toSet()\n  val thingsIMapTo = filter { it.LHS == toElim }.map { it.RHS }.toSet()\n  return (varsThatMapToMe * thingsIMapTo).fold(this) { g, p -> g + p }\n    .elimVarUnitProds(toVisit.drop(1).toSet(), vars)\n}\n\n// Refactors long productions, e.g., (A -> BCD) -> (A -> BE, E -> CD)\nprivate tailrec fun CFG.refactorRHS(): CFG {\n  val longProd = firstOrNull { it.RHS.size > 2 } ?: return this\n  val freshName = longProd.RHS.takeLast(2).joinToString(\".\")\n  val newProd = freshName to longProd.RHS.takeLast(2)\n  val shortProd = longProd.LHS to (longProd.RHS.dropLast(2) + freshName)\n  val newGrammar = this - longProd + shortProd + newProd\n  return if (this == newGrammar) this else newGrammar.refactorRHS()\n}\n\n// Replaces terminals in non-unit productions, e.g., (A -> bC) -> (A -> BC, B -> b)\nprivate tailrec fun CFG.terminalsToUnitProds(): CFG {\n  val mixProd = nonterminalProductions.firstOrNull { it.RHS.any { it !in nonterminals } } ?: return this\n  val termIdx = mixProd.RHS.indexOfFirst { it !in nonterminals }\n  val freshName = \"F.\" + mixProd.RHS[termIdx]\n  val freshRHS = mixProd.RHS.toMutableList().also { it[termIdx] = freshName }\n  val newProd = freshName to listOf(mixProd.RHS[termIdx])\n  val newGrammar = this - mixProd + (mixProd.LHS to freshRHS) + newProd\n  return if (this == newGrammar) this else newGrammar.terminalsToUnitProds()\n}",null,"package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.image.escapeHTML\n\ndata class Segmentation(\n  val valid: List<Int> = emptyList(),\n  val invalid: List<Int> = emptyList(),\n  val illegal: List<Int> = emptyList(),\n  val line: String = \"\"\n) {\n  companion object {\n    private fun Σᐩ.illegalWordIndices(cfg: CFG) =\n      tokenizeByWhitespace().mapIndexedNotNull { idx: Int, s: Σᐩ -> if (s !in cfg.terminals) idx else null }\n\n    fun build(cfg: CFG, line: Σᐩ): Segmentation {\n      val tokens = line.tokenizeByWhitespace()\n      return when {\n        \"_\" in tokens -> emptyList<Int>() to emptyList()\n        line in cfg.language -> emptyList<Int>() to emptyList()\n        tokens.size < 4 -> emptyList<Int>() to tokens.indices.toList()\n        else -> cfg.parseInvalidWithMaximalFragments(line)\n          .map { it.span }.filter { 2 < (it.last - it.first) }.flatten()\n          .let { it to tokens.indices.filterNot { i -> i in it } }\n      }.let {\n        Segmentation(\n          valid = it.first,\n          invalid = it.second,\n          illegal = line.illegalWordIndices(cfg),\n          line = line\n        )\n      }\n    }\n  }\n\n  val parseableRegions = valid.map { it..it }.mergeContiguousRanges().map { it.charIndicesOfWordsInString(line) }\n  val unparseableRegions = invalid.filter { it !in illegal }.map { it..it }.mergeContiguousRanges().map { it.charIndicesOfWordsInString(line) }\n  val illegalRegions = illegal.map { it..it }.map { it.charIndicesOfWordsInString(line) }\n\n  fun toColorfulHTMLString(): String {\n    val illegalRegions =\n      unparseableRegions.map { it to \"orange\" } +\n        illegalRegions.map { it to \"red\" }\n\n    val regions =\n      (parseableRegions.map { it to \"other\" } + illegalRegions).sortedBy { it.first.first }\n\n    if (illegalRegions.isEmpty()) return line.escapeHTML()\n\n    val coloredLine = StringBuilder().append(\"<u>\")\n    regions.forEach { (range, color) ->\n      coloredLine.append(\"<span class=\\\"$color\\\">${line.substring(range).escapeHTML()}</span>\")\n    }\n    coloredLine.append(\"</u>\")\n\n    return coloredLine.toString()\n  }\n\n  fun toColorfulString(): String {\n    val coloredLine = StringBuilder()\n\n    val regions =\n      parseableRegions.map { it to ANSI_GREEN } +\n      unparseableRegions.map { it to ANSI_YELLOW } +\n      illegalRegions.map { it to ANSI_RED }\n\n    for (i in line.indices) {\n      val color = regions.find { i in it.first }?.second ?: ANSI_RESET\n      coloredLine.append(color).append(line[i])\n    }\n\n    coloredLine.append(ANSI_RESET)\n    return coloredLine.toString()\n  }\n\n  fun List<IntRange>.mergeContiguousRanges(): List<IntRange> =\n    sortedBy { it.first }.fold(mutableListOf()) { acc, range ->\n      if (acc.isEmpty()) acc.add(range)\n      else if (acc.last().last + 1 >= range.first) acc[acc.lastIndex] = acc.last().first..range.last\n      else acc.add(range)\n      acc\n    }\n\n  // Takes an IntRange of word indices and a String of words delimited by one or more whitespaces,\n// and returns the corresponding IntRange of character indices in the original string.\n// For example, if the input is (1..2, \"a__bb___ca d e f\"), the output is 3..10\n  fun IntRange.charIndicesOfWordsInString(str: String): IntRange {\n    // All tokens, including whitespaces\n    val wordTokens = str.split(\"\\\\s+\".toRegex()).filter { it.isNotEmpty() }\n    val whitespaceTokens = str.split(\"\\\\S+\".toRegex())\n\n    val allTokens = wordTokens.zip(whitespaceTokens)\n    val polarity = str.startsWith(wordTokens.first())\n    val interwoven = allTokens.flatMap {\n      if (polarity) listOf(it.first, it.second)\n      else listOf(it.second, it.first)\n    }\n\n    val s = start * 2\n    val l = last * 2\n    val (startIdx, endIdx) = (s) to (l + 1)\n\n    val adjust = if (startIdx == 0) 0 else 1\n\n    val startOffset = interwoven.subList(0, startIdx).sumOf { it.length } + adjust\n    val endOffset = interwoven.subList(0, endIdx + 1).sumOf { it.length }\n    return startOffset..endOffset\n  }\n}","@file:Suppress(\"NonAsciiCharacters\")\n\npackage ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.sampling.*\nimport ai.hypergraph.kaliningraph.tensor.*\nimport ai.hypergraph.kaliningraph.types.*\n\n\n// SetValiant interface\n//=====================================================================================\nfun Σᐩ.matches(cfg: Σᐩ): Bln = matches(cfg.parseCFG())\nfun Σᐩ.matches(CFG: CFG): Bln = CFG.isValid(tokenizeByWhitespace())\nfun Σᐩ.matches(CJL: CJL): Bln = CJL.cfgs.all { matches(it) }\nfun List<Σᐩ>.matches(CFG: CFG): Bln = CFG.isValid(this)\nfun Σᐩ.parse(s: Σᐩ): Tree? = parseCFG().parse(s)\nfun CFG.parse(s: Σᐩ): Tree? =\n  try {\n//    enumTree(s.tokenizeByWhitespace()).firstOrNull()?.denormalize()\n    parseForest(s).firstOrNull { it.root == START_SYMBOL }?.denormalize()\n  } catch (e: Exception) { checkUnitWord(s).ifEmpty { null }?.firstOrNull() }\n\nfun CFG.checkUnitWord(str: Σᐩ): Forest =\n  if (str.tokenizeByWhitespace().size == 1 && START_SYMBOL in bimap[listOf(str)]) {\n    setOf(Tree(START_SYMBOL, str))\n  } else setOf()\n\nfun CFG.parseAll(s: Σᐩ): Forest =\n  try { parseForest(s).filter { it.root == START_SYMBOL }.map { it.denormalize() }.toSet() }\n  catch (e: Exception) { setOf() }\n\n/**\n * Checks whether a given string is valid by computing the transitive closure\n * of the matrix constructed by [initialMatrix]. If the upper-right corner entry\n * is empty, the string is invalid. If the entry is S, it parses.\n */\n\nprivate fun List<Σᐩ>.pad3(): List<Σᐩ> =\n  if (isEmpty()) listOf(\"ε\", \"ε\", \"ε\")\n  else if (size == 1) listOf(\"ε\", first(), \"ε\")\n  else this\n\nfun CFG.isValid(str: Σᐩ): Bln = isValid(str.tokenizeByWhitespace())\nfun CFG.isValid(str: List<Σᐩ>): Bln =\n  if (str.size == 1) checkUnitWord(str.first()).isNotEmpty()\n  else initialUTBMatrix(str.pad3()).seekFixpoint().diagonals.last()[0]\n    //.also { it.forEachIndexed { r, d -> d.forEachIndexed { i, it -> println(\"$r, $i: ${toNTSet(it)}\") } } }\n    //.also { println(\"Last: ${it.joinToString(\",\") {if (it) \"1\" else \"0\"}}\") }\n    .let { corner -> corner[bindex[START_SYMBOL]] }\n\nfun CFG.corner(str: Σᐩ) =\n solveFixedpoint(str.tokenizeByWhitespace())[0].last().map { it.root }.toSet()\n//  START_SYMBOL in solveFixedpoint(str.tokenizeByWhitespace())[0].last().map { it.root }.toSet()\n\nfun CFG.parseForest(str: Σᐩ): Forest = solveFixedpoint(str.tokenizeByWhitespace())[0].last()\nfun CFG.parseTable(str: Σᐩ): TreeMatrix = solveFixedpoint(str.tokenizeByWhitespace())\n\nfun CFG.parse(\n  tokens: List<Σᐩ>,\n  utMatrix: UTMatrix<Forest> = initialUTMatrix(tokens),\n): Forest = utMatrix.seekFixpoint().diagonals.last().firstOrNull() ?: emptySet()\n//  .also { if (it) println(\"Sol:\\n$finalConfig\") }\n\nfun CFG.solveFixedpoint(\n  tokens: List<Σᐩ>,\n  utMatrix: UTMatrix<Forest> = initialUTMatrix(tokens),\n): TreeMatrix = utMatrix.seekFixpoint().toFullMatrix()\n\n// Returns first valid whole-parse tree if the string is syntactically valid, and if not,\n// a sequence of partial trees ordered by the length of the substring that can be parsed.\nfun CFG.parseWithStubs(s: Σᐩ): Pair<Forest, List<Tree>> =\n  solveFixedpoint(s.tokenizeByWhitespace()).toUTMatrix().diagonals.asReversed().let {\n    it[0][0].filter { it.root == START_SYMBOL }.map { it.denormalize() }.toSet() to\n      it.flatten().flatten().map { it.denormalize() }\n  }\n\nfun CFG.parseInvalidWithMaximalFragments(s: Σᐩ): List<Tree> =\n  parseWithStubs(s).second.fold(setOf<Tree>()) { acc, t ->\n    if (acc.any { t.span isStrictSubsetOf it.span }) acc else acc + t\n  }.sortedBy { it.span.first }\n\n//=====================================================================================\n/* Algebraic operations\n *\n * See: http://www.cse.chalmers.se/~patrikj/talks/IFIP2.1ZeegseJansson_ParParseAlgebra.org\n *\n * \"The following procedure specifies a recogniser: by finding the closure of\n *  I(w) one finds if w is parsable, but not the corresponding parse tree.\n *  However, one can obtain a proper parser by using sets of parse trees\n *  (instead of non-terminals) and extending (·) to combine parse trees.\"\n *\n * Taken from: https://arxiv.org/pdf/1601.07724.pdf#page=3\n *\n * TODO: Other algebras? https://aclanthology.org/J99-4004.pdf#page=8\n */\n\nfun CFG.makeForestAlgebra(): Ring<Forest> =\n  Ring.of(// Not a proper ring, but close enough.\n    // 0 = ∅\n    nil = setOf(),\n    // x + y = x ∪ y\n    plus = { x, y -> x union y },\n    // x · y = { A0 | A1 ∈ x, A2 ∈ y, (A0 -> A1 A2) ∈ P }\n    times = { x, y -> treeJoin(x, y) }\n  )\n\n//fun CFG.treeJoin(left: Forest, right: Forest): Forest = joinMap[left, right]\nfun CFG.treeJoin(left: Forest, right: Forest): Forest =\n  (left * right).flatMap { (lt, rt) ->\n    bimap[listOf(lt.root, rt.root)].map { Tree(it, null, lt, rt) }\n  }.toSet()\n\n//fun CFG.setJoin(left: Set<Σᐩ>, right: Set<Σᐩ>): Set<Σᐩ> = joinMap[left, right]\nfun CFG.setJoin(left: Set<Σᐩ>, right: Set<Σᐩ>): Set<Σᐩ> =\n  (left * right).flatMap { bimap[it.toList()] }.toSet()\n\nfun CFG.toBitVec(nts: Set<Σᐩ>): Blns =\n  if (1 < nts.size) nonterminals.map { it in nts }.toBooleanArray()\n  else BooleanArray(nonterminals.size) { false }\n    .also { if (1 == nts.size) it[bindex[nts.first()]] = true }\n\nfun fastJoin(/**[vindex]*/vidx: Array<ℤⁿ>, left: Blns, right: Blns): Blns {\n  if (left.isEmpty() || right.isEmpty()) return booleanArrayOf()\n\n  val result = BooleanArray(vidx.size)\n  for ((i, indexArray) in vidx.withIndex()) {\n    var j = 0\n    while (j < indexArray.size) {\n      if (left[indexArray[j]] && right[indexArray[j + 1]]) {\n        result[i] = true\n        break\n      }\n      j += 2\n    }\n  }\n  return result\n}\n\n//  if (left.isEmpty() || right.isEmpty()) booleanArrayOf()\n//  else vindex.map { it.any { (B, C) -> left[B] and right[C] } }.toBooleanArray()\n\nfun CFG.join(left: Blns, right: Blns): Blns = fastJoin(vindex, left, right)\n\nfun maybeJoin(vindexFast: Array<ℤⁿ>, left: Blns?, right: Blns?): Blns? =\n  if (left == null || right == null) null else fastJoin(vindexFast, left, right)\n\nfun maybeUnion(left: Blns?, right: Blns?): Blns? =\n  if (left == null || right == null) { left ?: right }\n  else if (left.isEmpty() && right.isNotEmpty()) right\n  else if (left.isNotEmpty() && right.isEmpty()) left\n  else union(left, right)\n\nfun union(left: Blns, right: Blns): Blns {\n  val result = BooleanArray(left.size)\n  for (i in left.indices) {\n    result[i] = left[i]\n    if (result[i]) continue\n    result[i] = right[i]\n  }\n  return result\n}\n\nval CFG.bitwiseAlgebra: Ring<Blns> by cache {\n  vindex.let {\n    Ring.of(\n      nil = BooleanArray(nonterminals.size) { false },\n      plus = { x, y -> union(x, y) },\n      times = { x, y -> fastJoin(it, x, y) }\n    )\n  }\n}\n\n// Like bitwiseAlgebra, but with nullable bitvector literals for free variables\nval CFG.satLitAlgebra: Ring<Blns?> by cache {\n  vindex.let {\n    Ring.of(\n      nil = BooleanArray(nonterminals.size) { false },\n      plus = { x, y -> maybeUnion(x, y) },\n      times = { x, y -> maybeJoin(it, x, y) }\n    )\n  }\n}\n\nfun CFG.toNTSet(nts: Blns): Set<Σᐩ> =\n  nts.mapIndexed { i, it -> if (it) bindex[i] else null }.filterNotNull().toSet()\n\nfun Blns.decodeWith(cfg: CFG): Set<Σᐩ> =\n  mapIndexed { i, it -> if (it) cfg.bindex[i] else null }.filterNotNull().toSet()\n\nfun CFG.toBooleanArray(nts: Set<Σᐩ>): Blns =\n  BooleanArray(nonterminals.size) { i -> bindex[i] in nts }\n\n//=====================================================================================\n\nval HOLE_MARKER = \"_\"\nfun Σᐩ.containsHole(): Bln = HOLE_MARKER in this\nfun Σᐩ.isHoleTokenIn(cfg: CFG) = containsHole() || isNonterminalStubIn(cfg)\n//val ntRegex = Regex(\"<[^\\\\s>]*>\")\nfun Σᐩ.isNonterminalStub() = isNotEmpty() && first() == '<' && last() == '>'\nfun Σᐩ.isNonterminalStubInNTs(nts: Set<Σᐩ>): Bln = isNonterminalStub() && drop(1).dropLast(1) in nts\nfun Σᐩ.isNonterminalStubIn(cfg: CFG): Bln = isNonterminalStub() && drop(1).dropLast(1) in cfg.nonterminals\nfun Σᐩ.isNonterminalStubIn(CJL: CJL): Bln = CJL.cfgs.map { isNonterminalStubIn(it) }.all { it }\nfun Σᐩ.containsNonterminal(): Bln = Regex(\"<[^\\\\s>]*>\") in this\n\n// Converts tokens to UT matrix via constructor: σ_i = { A | (A -> w[i]) ∈ P }\nfun CFG.initialMatrix(str: List<Σᐩ>): TreeMatrix =\n  FreeMatrix(makeForestAlgebra(), str.size + 1) { i, j ->\n    if (i + 1 != j) emptySet()\n    else bimap[listOf(str[j - 1])].map {\n      Tree(root = it, terminal = str[j - 1], span = (j - 1) until j)\n    }.toSet()\n  }\n\nfun CFG.initialUTBMatrix(\n  tokens: List<Σᐩ>,\n  allNTs: Set<Σᐩ> = nonterminals,\n  bmp: BiMap = bimap,\n  unitReach: Map<Σᐩ, Set<Σᐩ>> = originalForm.unitReachability\n): UTMatrix<Blns> =\n  UTMatrix(\n    ts = tokens.map { it ->\n      bmp[listOf(it)].let { nts ->\n        // Check whether the token part of a string that contains a user-\n        // defined nonterminal stub that was in the original grammar\n        if (tokens.none { it.isNonterminalStubInNTs(allNTs) }) nts\n        // We use the original form because A -> B -> C can be normalized\n        // to A -> C, and we want B to be included in the equivalence class\n        else nts.map { unitReach[it] ?: setOf(it) }.flatten().toSet()\n      }.let { nts -> allNTs.map { it in nts } }.toBooleanArray()\n    }.toTypedArray(),\n    algebra = bitwiseAlgebra\n  )\n\nfun CFG.initialUTMatrix(\n  tokens: List<Σᐩ>,\n  origCFG: CFG = originalForm,\n  bmp: BiMap = bimap,\n  unitReach: Map<Σᐩ, Set<Σᐩ>> = origCFG.unitReachability\n): UTMatrix<Forest> =\n  UTMatrix(\n    ts = tokens.mapIndexed { i, terminal ->\n      if (terminal == HOLE_MARKER)\n        unitReachability.values.flatten().toSet().map { root ->\n          bmp[root].filter { it.size == 1 }.map { it.first() }.filter { it in terminals }\n            .map { Tree(root = root, terminal = it, span = i until (i + 1)) }\n        }.flatten().toSet()\n      else bmp[listOf(terminal)].let { nts ->\n        if (tokens.none { it.isNonterminalStubIn(this) }) nts\n        // We use the original form because A -> B -> C can be normalized\n        // to A -> C, and we want B to be included in the equivalence class\n        else nts.map { (unitReach[it] ?: setOf(it)) }.flatten().toSet()\n      }.map { Tree(root = it, terminal = terminal, span = i until (i + 1)) }.toSet()\n    }.toTypedArray(),\n    algebra = makeForestAlgebra()\n  )\n\nprivate val freshNames: Sequence<Σᐩ> =\n  ('A'..'Z').asSequence().map { \"$it\" }\n  .let { it + (it * it).map { (a, b) -> a + b } }\n    .filter { it != START_SYMBOL }\n\nfun Σᐩ.parseCFG(\n  normalize: Bln = true,\n  validate: Bln = false\n): CFG =\n  lines().filter { \"->\" in it }.map { line ->\n    if (validate && !line.isValidProd()) throw Exception(\"Invalid production: $line\")\n    line.splitProd().let { it[0] to it[1].tokenizeByWhitespace() }\n  }.toSet().let { if (normalize) it.normalForm else it }\n\nfun Σᐩ.stripEscapeChars(escapeSeq: Σᐩ = \"`\"): Σᐩ = replace(escapeSeq, \"\")\n\nval PRODCFG = Regex(\"\\\\s*[^|]+\\\\s+->\\\\s+([^|]+\\\\s+\\\\|\\\\s+)*[^|]+\\\\s*\")\nfun Σᐩ.isValidProd() = matches(PRODCFG)\n\nfun CFGCFG(names: Collection<Σᐩ>): CFG = \"\"\"\n    START -> CFG\n    CFG -> PRD | CFG \\n CFG\n    PRD -> VAR `->` RHS\n    VAR -> ${names.joinToString(\" | \")}\n    RHS -> VAR | RHS RHS | RHS `|` RHS\n  \"\"\".parseCFG(validate = false)\n\nfun Σᐩ.validate(\n  presets: Set<Σᐩ> = setOf(\"|\", \"->\"),\n  tokens: Sequence<Σᐩ> = tokenizeByWhitespace().filter { it !in presets }.asSequence(),\n  names: Map<Σᐩ, Σᐩ> = freshNames.filterNot(::contains).zip(tokens).toMap(),\n): Σᐩ = lines().filter { \"->\" in it }\n  .onEach { if (!it.isValidProd()) throw Exception(\"Invalid production: $it\") }\n  .joinToString(\" \\\\n \").tokenizeByWhitespace()\n  .joinToString(\" \") { names[it] ?: it }\n  .let { if (it.matches(CFGCFG(names.values))) this\n  else throw Exception(\"!CFL: $it\") }\n\n/*\n * Takes a grammar and a partially complete string where '_' denotes holes, and\n * returns a set of completed strings consistent with that grammar. Naïve search\n * over all holes takes O(|Σ|^n) where n is the number of holes.\n */\n\nfun List<Σᐩ>.solve(\n  CFG: CFG,\n  fillers: Set<Σᐩ> = CFG.terminals - CFG.blocked,\n  takeMoreWhile: () -> Bln = { true },\n): Sequence<Σᐩ> =\n  genCandidates(CFG, fillers)\n//    .also { println(\"Solving (Complexity: ${fillers.size.pow(count { it == \"_\" })}): ${joinToString(\" \")}\") }\n    .takeWhile { takeMoreWhile() }.filter { it.matches(CFG) }.map { it.removeEpsilon() }\n\nfun List<Σᐩ>.genCandidates(CFG: CFG, fillers: Set<Σᐩ> = CFG.terminals): Sequence<Σᐩ> =\n  MDSamplerWithoutReplacement(fillers, count { it == HOLE_MARKER }).map {\n    fold(\"\" to it) { (a, b), c ->\n      if (c == HOLE_MARKER) (a + \" \" + b[0]) to b.drop(1) else (\"$a $c\") to b\n    }.first.replace(\"ε \", \"\").trim()\n  }\n\n// TODO: Compactify [en/de]coding: https://news.ycombinator.com/item?id=31442706#31442719\nfun CFG.nonterminals(bitvec: List<Bln>): Set<Σᐩ> =\n    bitvec.mapIndexedNotNull { i, it -> if (it) bindex[i] else null }.toSet()\n        .apply { ifEmpty { throw Exception(\"Unable to reconstruct NTs from: $bitvec\") } }\n\nfun CFG.handleSingleton(s: Σᐩ): Set<Σᐩ> =\n    if (s == \"_\") terminals\n    else if (s.matches(Regex(\"<.+>\")))\n        bimap[s.substring(1, s.length - 1)]\n            .mapNotNull { if (it.size == 1) it[0] else null }.toSet()\n    else setOf()","package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.sampling.choose\nimport ai.hypergraph.kaliningraph.types.powerset\nimport kotlin.math.absoluteValue\nimport ai.hypergraph.kaliningraph.types.cache\nimport ai.hypergraph.kaliningraph.types.Π2A\nimport kotlin.math.pow\nimport kotlin.time.*\n\nvar MAX_SAMPLE = 20 // Maximum number of repairs to sample\nvar MAX_TOKENS = 80 // Maximum number of tokens per repair\nvar TIMEOUT_MS = 90_000 // Timeout for each repair attempt (default, modify elsewhere)\nvar MAX_REPAIR = 2 // Maximum number of edits per repair\n\ntypealias Reconstructor = MutableList<Π2A<Σᐩ>>\n// Takes a string and a set of invariant indices and returns mutated strings\ntypealias Mutator = (Σᐩ, Set<Int>) -> Sequence<Σᐩ>\n\n// Terminals which are blocked from being synthesized by a solver\nval CFG.blocked: MutableSet<Σᐩ> by cache { mutableSetOf() }\n\nfun repair(\n  prompt: Σᐩ,\n  cfg: CFG,\n  coarsen: Σᐩ.() -> Σᐩ = { this },\n  uncoarsen: Σᐩ.(Σᐩ) -> Σᐩ = { this },\n  synthesizer: CFG.(List<Σᐩ>) -> Sequence<Σᐩ>,\n  updateProgress: (Σᐩ) -> Unit = {},\n  filter: (Σᐩ.() -> Boolean)? = null,\n  diagnostic: ((String) -> Unit)? = null,\n  score: (Σᐩ) -> Float = { levenshtein(it, prompt).toFloat() },\n  variations: List<Mutator> =\n    listOf(\n      { a, b -> a.randomInsertions() },\n      { a, b -> a.randomDeletions(b) },\n      { a, b -> a.randomSingleSubtitutions(exclusions = b) },\n      { a, b -> a.randomDoubleSubstitutions(numberOfEdits = MAX_REPAIR, exclusions = b) }\n    )\n): List<Σᐩ> {\n  val coarsened = prompt.coarsen()\n  println(\"Repairing: $prompt\" + if (coarsened != prompt) \"\\nCoarsened: $coarsened\" else \"\" )\n\n//  if (cfg.parse(coarsened) != null) return emptyList()\n  val tokens = coarsened.tokenizeByWhitespace()\n  val tokensWithHoles = tokens.map { if (it in cfg.terminals) it else HOLE_MARKER }\n  val sanitized: Σᐩ = tokensWithHoles.joinToString(\" \")\n\n  var totalSamples = 0\n\n  val t = TimeSource.Monotonic.markNow()\n  val repairs: List<Σᐩ> = sanitized.synthesizeWithVariations(\n    cfg = cfg,\n    synthesizer = synthesizer,\n    allowNTs = false,\n    updateProgress = updateProgress,\n    takeMoreWhile = { t.elapsedNow().inWholeMilliseconds < TIMEOUT_MS },\n    variations = variations,\n  )\n    .map { totalSamples++; it.uncoarsen(prompt) }\n    .let { if (filter != null) it.filter(filter) else it }\n    .let { if (diagnostic != null) it.onEach { diagnostic(it) } else it }\n    .map { it to score(it) }\n    .take(MAX_SAMPLE).toList().sortedBy { it.second }\n    .also { println(\"Best score: (${it.firstOrNull()?.second})\") }\n    .map { it.first.trim() }\n\n  if (filter != null) println(\"Filtered out ${totalSamples - repairs.size}/${totalSamples} invalid samples!\")\n\n  return repairs\n}\n\nfun repairLazily(\n  prompt: Σᐩ,\n  cfg: CFG,\n  edits: Int = 3,\n  coarsen: Σᐩ.() -> Σᐩ = { this },\n  uncoarsen: Σᐩ.(Σᐩ) -> Σᐩ = { this },\n  synthesizer: CFG.(List<Σᐩ>) -> Sequence<Σᐩ>,\n  filter: (Σᐩ.() -> Boolean)? = null,\n): Sequence<Σᐩ> {\n  println(\"Repairing: $prompt\")\n  val coarsened = prompt.coarsen()\n//  if (cfg.parse(coarsened) != null) return emptyList()\n  val tokens = coarsened.tokenizeByWhitespace()\n  val tokensWithHoles = tokens.map { if (it in cfg.terminals) it else HOLE_MARKER }\n  val sanitized: Σᐩ = tokensWithHoles.joinToString(\" \")\n\n  val variations: List<Mutator> =\n    listOf({ a, b -> a.randomDoubleSubstitutions(numberOfEdits = edits, exclusions = b)})\n  var totalSamples = 0\n  return sanitized.synthesizeWithVariations(\n    cfg = cfg,\n    synthesizer = synthesizer,\n    allowNTs = false,\n    variations = variations,\n  )\n    .map { totalSamples++; it.uncoarsen(prompt) }\n    .let { if (filter != null) it.filter(filter) else it }\n}\n\nfun List<Σᐩ>.isSetValiantOptimalFor(cfg: CFG): Boolean =\n    none { it.isNonterminalStubIn(cfg) } &&\n    (cfg.terminals - cfg.blocked).size.toDouble().pow(count { it.isHoleTokenIn(cfg) }) < 512\n\n// Generates a lazy sequence of mutations for a broken string\n// and feeds them to the synthesizer for completion.\nfun Σᐩ.synthesizeWithVariations(\n  cfg: CFG,\n  allowNTs: Boolean = true,\n  enablePruning: Boolean = false,\n  variations: List<Mutator> = listOf({ a, b -> sequenceOf() }),\n  takeMoreWhile: () -> Boolean = { true },\n  updateProgress: (Σᐩ) -> Unit = {},\n  synthesizer: CFG.(List<Σᐩ>) -> Sequence<Σᐩ>\n): Sequence<Σᐩ> {\n  val cfg_ = (if (!allowNTs) cfg.noNonterminalStubs else cfg).freeze()\n\n  val (stringToSolve, reconstructor: Reconstructor) =\n    if (enablePruning) cfg_.prune(this) else this to mutableListOf()\n  if (this != stringToSolve) println(\"Before pruning: $this\\nAfter pruning: $stringToSolve\")\n\n  val tokens = stringToSolve.tokenizeByWhitespace()\n  if (MAX_TOKENS < tokens.size) return sequenceOf<Σᐩ>()\n    .also { println(\"Too many tokens: $stringToSolve\") }\n\n  val recStubs = reconstructor.map { it.first }.toSet()\n  val exclude =\n      tokens.indices.filter { i -> tokens[i].let { it in cfg_.blocked || it in recStubs } }.toSet()\n\n  val allVariants: Sequence<Σᐩ> =\n    variations.fold(sequenceOf(stringToSolve)) { a, b -> a + b(stringToSolve, exclude) }.distinct()\n//      .filter { !cfg_.containsImpossibleBigram(it) }\n\n  return allVariants\n    .filter { s -> s.tokenizeByWhitespace().any { it.isHoleTokenIn(cfg) } }\n    .onEach { updateProgress(it) }\n    .flatMap { variant ->\n      val variantTokens = variant.tokenizeByWhitespace()\n      cfg_.run { synthesizer(variantTokens) }\n//        .ifEmpty { cfg_.rememberBigramPolarity(variantTokens, synthesizer) }\n//        .map { cfg_.rememberPossibleBigrams(variantTokens); it }\n    }.takeWhile { takeMoreWhile() }.distinct()\n//    .distinctBy(levenshteinFingerprint)\n    .map {\n      val rec: Reconstructor = reconstructor.toList().toMutableList()\n      it.tokenizeByWhitespace().mapIndexed { i, it ->\n        if (\"ε\" in it) \"\"\n        else if (it.isNonterminalStubIn(cfg_) && it == rec.firstOrNull()?.first) rec.removeFirst().second\n        else it\n      }.filter { it.isNotBlank() }.joinToString(\" \")\n    }\n}\n\n/**\n * Attempts to reduce parsable subsequences into a single token to reduce total\n * token count, e.g. ( w ) + _ => <S> + _ resulting in two fewer tokens overall.\n * Consider 3 + 5 * _ != <S> * _ for checked arithmetic, so context-insensitive\n * pruning is not always sound, thus we should err on the side of caution.\n *\n * TODO: A proper solution requires ruling out whether the left- and right-\n *       quotients of the root nonterminal ever yield another derivation.\n */\n\nfun CFG.prune(\n  string: Σᐩ,\n  minimumWidth: Int = 4,\n  // Maps nonterminal stubs from pruned branches back to original string\n  reconstructor: Reconstructor =\n    string.tokenizeByWhitespace().filter { it.isNonterminalStubIn(this) }\n      .map { it to it }.toMutableList()\n): Pair<Σᐩ, Reconstructor> {\n  val tokens = string.tokenizeByWhitespace()\n  val stubs = parseInvalidWithMaximalFragments(string)\n\n  val treesToBeChopped =\n    stubs.filter { \"START\" in unitReachability[it.root]!! }\n      .map { it.span to it }.let {\n        val (spans, trees) = it.unzip()\n        // Find trees corresponding to ranges which have an unambiguous parse tree\n        trees.filter { tree ->\n          minimumWidth < tree.span.run { last - first } &&\n            spans.filter { it != tree.span }\n              .none { tree.span.intersect(it).isNotEmpty() }\n        }\n      }\n\n  var totalPruned = 0\n  var previousNonterminals = 0\n  val prunedString = tokens.indices.mapNotNull { i ->\n    val possibleTree = treesToBeChopped.firstOrNull { i in it.span }\n    if (possibleTree != null)\n      if (i == possibleTree.span.first) \"<${possibleTree.root}>\".also {\n        val (a, b) = it to possibleTree.contents()\n        println(\"Reduced: $b => $a\")\n        reconstructor.add(previousNonterminals++, a to b)\n      } else { totalPruned++; null }\n    else tokens[i].also { if (it.isNonterminalStubIn(this)) previousNonterminals++ }\n  }.joinToString(\" \")\n\n  println(\"Pruned $totalPruned tokens in total\")\n  return if (totalPruned == 0) string to reconstructor\n  else prune(prunedString, minimumWidth, reconstructor)\n}\n\n// TODO: implement complete substring decider\n// https://nokyotsu.com/me/papers/cic01.pdf\n// https://cs.stackexchange.com/questions/154130/minimal-length-strings-which-are-substrings-of-no-string-in-a-given-cfl\n// These strings must never appear in any length-k string in the language defined by this grammar\nval CFG.impossibleBigrams by cache { mutableSetOf<Σᐩ>() }\n// Underapproximates impossible substrings for a sketch template of a given length by tracking\n// the impossible substrings that cannot fit inside an equal- or longer-length string, i.e., if\n// a string does not fit in Σ^100, then it definitely will not fit in Σ^k<100. In the worst case\n// it will be a false negative and we do unnecessary work trying to solve an impossible template.\n\n// These strings all appear in an arbitrary-length string in the language defined by this grammar\nval CFG.possibleBigrams by cache { mutableSetOf<Σᐩ>() }\n\nfun CFG.containsImpossibleBigram(str: Σᐩ): Boolean =\n  str.tokenizeByWhitespace().windowed(2).any { bigram ->\n    val bg = bigram.joinToString(\" \")\n    (bg in impossibleBigrams).also {\n      if (it) println(\"$str was rejected because it contains an impossible bigram: $bg\")\n    }\n  }\n\nval CFG.startSymbols by cache { mutableSetOf(START_SYMBOL) }\nfun CFG.rememberPossibleBigrams(str: List<Σᐩ>) =\n  possibleBigrams.addAll(str.windowed(2).asSequence().map { it.joinToString(\" \")})\n// Caches possible and impossible bigrams in the language defined by this grammar on a per-query basis\nfun CFG.rememberBigramPolarity(str: List<Σᐩ>, synthesizer: CFG.(List<Σᐩ>) -> Sequence<Σᐩ>): Sequence<Σᐩ> =\n  str.windowed(2).asSequence().filter {\n    it.all { it in terminals } && it.joinToString(\" \") !in (possibleBigrams + impossibleBigrams)\n  }.forEach {\n    val holes = List(8) { HOLE_MARKER }.joinToString(\" \")\n    val substring = it.joinToString(\" \")\n    val tokens = \"$holes $substring $holes\".tokenizeByWhitespace()\n\n    startSymbols.addAll(nonterminals) // If anything can be derived from the whole string, it is \"possible\"\n    val blockers = blocked.toSet()\n    blocked.removeAll(blockers)\n\n    if (synthesizer(tokens).firstOrNull() == null)\n      impossibleBigrams.add(substring.also { println(\"\\\"$it\\\" determined to be an impossible bigram using:\\n${prettyPrint()}\\n\") })\n    else possibleBigrams.add(substring)\n\n    startSymbols.removeAll { it != START_SYMBOL }\n    blocked.addAll(blockers)\n  }.let { emptySequence() }\n\n// TODO: Instead of haphazardly splattering holes everywhere and hoping to hit the lottery\n//       we should work out a principled way to localize holes using the language quotient.\n//       For example, we can do this bottom-up, by localizing substrings which are known to\n//       be outside the language, e.g., for the following grammar and string:\n//             E → E+E | E*E | (E) | x                      (+)+x*x+x+(x*x)\n//       we know that the substring (+) cannot be in the grammar, so we can infer (_+_).\n//             https://nokyotsu.com/me/papers/cic01.pdf\n//\n// Idea: Generate minimal strings which cannot be repaired by left or right insertion,\n//       these will become our initial set. Whenever we encounter one of these substrings\n//       in the candidate string, we know that without repairing that part of the string\n//       candidate, its full string can never be in the language defined by the given CFG.\n//\n//       { S | |S| < k & !∃ S' ∈ L(CFG) s.t. S is a substring of S' }\n//       This will help us refine where the repairs must happen.\n\nfun List<Tree>.allIndicesInsideParseableRegions(): Set<Int> =\n  map { it.span }.filter { 3 < it.last - it.first }\n    .flatMap { (it.first + 1) until it.last }.toSet()\n\n/*\n * Generates all single character replacements and insertions.\n * Original: www\n * Variants: _www w_ww ww_w www_\n *           _ww w_w ww_\n */\n\nfun Σᐩ.singleTokenSubtitutionsAndInsertions(): Sequence<Σᐩ> =\n  multiTokenSubstitutionsAndInsertions(numberOfEdits = 1)\n\nfun Σᐩ.randomInsertions(\n  tokens: List<Σᐩ> = tokenizeByWhitespace() + \"\",\n  numberOfEdits: Int = 1,\n): Sequence<Σᐩ> =\n  tokens.indices.toSet().let { sortedIndices ->\n    (1..numberOfEdits).asSequence().flatMap { sortedIndices.choose(it) }\n  }.map { idxs -> tokens.substitute(idxs) { it, _ -> \"_ $it\" } }\n\nfun Σᐩ.randomDeletions(\n  exclusions: Set<Int>,\n  tokens: List<Σᐩ> = tokenizeByWhitespace() + \"\",\n  numberOfEdits: Int = 1,\n): Sequence<Σᐩ> =\n  tokens.indices.toSet().filterNot { it in exclusions }.let { sortedIndices ->\n    (1..numberOfEdits).asSequence().flatMap { sortedIndices.choose(it) }\n  }.map { idxs -> tokens.substitute(idxs) { it, _ -> \"_\" } }\n\nfun Σᐩ.randomSingleSubtitutions(\n  tokens: List<Σᐩ> = tokenizeByWhitespace(),\n  numberOfEdits: Int = 1,\n  exclusions: Set<Int> = setOf(),\n): Sequence<Σᐩ> =\n  tokens.indices.toSet().let { sortedIndices ->\n    (1..numberOfEdits).asSequence().flatMap { sortedIndices.choose(it) }\n  }.map { idxs -> tokens.substitute(idxs) { it, i -> if (i in exclusions) \"$it _\" else \"_\" } }\n\nfun Σᐩ.randomDoubleSubstitutions(\n  tokens: List<Σᐩ> = tokenizeByWhitespace(),\n  padded: List<Σᐩ> = listOf(\"\", *tokens.toTypedArray(), \"\"),\n  numberOfEdits: Int = minOf(2, tokens.size),\n  exclusions: Set<Int> = setOf(),\n  shiftedExclusions: Set<Int> = exclusions.map { it + 1 }.toSet(),\n): Sequence<Σᐩ> =\n  (padded.indices.toSet())//.also { println(\"Exclusions: $exclusions\") })// - exclusions.map { it + 1 }.toSet())\n    .let { sortedIndices -> (1..numberOfEdits).asSequence().flatMap { sortedIndices.choose(it) } }\n    .map { idxs -> padded.substitute(idxs) { it, i -> if (i in shiftedExclusions) \"_ $it _\" else \"_ _\" } }\n\nfun Σᐩ.multiTokenSubstitutionsAndInsertions(\n  tokens: List<Σᐩ> = tokenizeByWhitespace(),\n  padded: List<Σᐩ> = listOf(\"\", *tokens.toTypedArray(), \"\"),\n  numberOfEdits: Int = minOf(2, tokens.size),\n  exclusions: Set<Int> = setOf(),\n  // Sorted list of locations believed to be erroneous\n  fishyLocations: List<Int> = listOf(tokens.size)\n): Sequence<Σᐩ> =\n  allSubstitutions(padded.indices.toSet() - exclusions.map { it + 1 }.toSet(), numberOfEdits, fishyLocations)\n    .map { idxs -> padded.substitute(idxs) { _, _ -> \"_ _\" } }\n//    .apply {\n//      println(\"Exclusions: ${tokens.mapIndexed { i, it -> if (i !in exclusions) HOLE_MARKER.padEnd(it.length) else it }.joinToString(\" \")}\")\n//      println(\"Fishy toks: ${tokens.mapIndexed { i, it -> if (i in fishyLocations) HOLE_MARKER.padEnd(it.length) else it }.joinToString(\" \")}\")\n//    }\n\nfun allSubstitutions(eligibleIndices: Set<Int>, numEdits: Int, fishyLocations: List<Int>) =\n  eligibleIndices.sortedWith(\n    compareBy<Int> { a -> fishyLocations.minOf { b -> (a - b).absoluteValue } }\n      .thenBy { (it - fishyLocations.first()).absoluteValue }\n  ).let { sortedIndices -> setOf(1, numEdits)\n    .asSequence().flatMap { sortedIndices.choose(it) } }\n//  setOf(1, numEdits).asSequence()\n//    .flatMap { eligibleIndices.choose(it) }.map { it.sorted().toSet() }\n//    .sortedWith(\n//      compareBy<Set<Int>> { it.size }\n//        // Out of all chosen indices, how far apart from its nearest fishy neighbor\n//        // is the chosen index whose nearest fishy neighbor is the farthest apart?\n//        .thenBy { it.maxOf { a -> fishyLocations.minOf { b -> abs(a - b) } } }\n//  //  .thenBy { it.sumOf { a -> fishyLocations.indices.minBy { abs(a - fishyLocations[it]) } } } // Sort by precedence?\n//        .thenBy { it.fold(0 to it.first()) { (a, b), it -> a + abs(it - b) to it }.first } // Sort by dispersion?\n//        .thenBy { a -> a.sumOf { abs(fishyLocations.first() - it) } } // Sort by distance to first fishy location (caret)\n//    ).map { it.toSet() }\n\nfun List<Σᐩ>.substituteIndices(idxs: Set<Int>, sub: (Σᐩ, Int) -> Σᐩ): List<Σᐩ> =\n  mapIndexed { i, it -> if (i !in idxs) it else sub(it, i) }\n\nprivate fun List<Σᐩ>.substitute(idxs: Set<Int>, sub: (Σᐩ, Int) -> Σᐩ): Σᐩ =\n  substituteIndices(idxs, sub).joinToString(\" \").trim()\n\nfun Σᐩ.tokenizeByWhitespace(): List<Σᐩ> = split(Regex(\"\\\\s+\")).filter { it.isNotBlank() }\n\nfun Σᐩ.tokenizeByWhitespaceAndKeepDelimiters(): List<Σᐩ> =\n  split(Regex(\"(?<=\\\\s)|(?=\\\\s)\"))\n\n// MUCH faster than above (but incorrect)\n//fun Σᐩ.tokenizeByWhitespace(): List<Σᐩ> =\n//  mutableListOf<Σᐩ>().also { list ->\n//    var start = 0\n//    var end = 0\n//    while (end < length) {\n//      while (end < length && this[end].isWhitespace()) end++\n//      if (end > start) list.add(substring(start, end))\n//      start = end\n//      while (end < length && !this[end].isWhitespace()) end++\n//      if (end > start) list.add(substring(start, end))\n//      start = end\n//    }\n//  }\n\n/*\n * Treats contiguous underscores as a single hole and lazily enumerates every\n * hole configuration in the powerset of all holes within a snippet.\n * Original: ___w__w_w__w___ -> _w_w_w_w_\n * Variants: _wwww  _w_www _w_w_ww ... _w_w_w_w_\n *           w_www  _ww_ww _w_ww_w\n *           ww_ww  _www_w _w_www_\n *           ...    ...    ...\n */\n\nfun Σᐩ.everySingleHoleConfig(): Sequence<Σᐩ> {\n  val new = replace(Regex(\"($HOLE_MARKER( )*)+\"), \"$HOLE_MARKER \")\n  val toks = new.tokenizeByWhitespace()\n  val indices = toks.indices.filter { toks[it] == HOLE_MARKER }.powerset()\n  return indices.map { ids -> toks.drop(setOf(HOLE_MARKER), ids).joinToString(\" \") }\n}\n\n/*\n * Lazily enumerates all underscores chunkings in order of increasing length up\n * to the lesser of (1) its original size or (2) the longest underscore chunk.\n * Original: ___w__w_w__w___\n * Variants: _w_w_w_w_\n *           __w__w_w__w__\n *           ___w__w_w__w___\n */\n\nfun Σᐩ.mergeHoles(): Σᐩ =\n  replace(Regex(\"\\\\s+\"), \" \")\n    .replace(Regex(\"(?<=_)\\\\s(?=_)\"), \"\")\n\nfun Σᐩ.increasingLengthChunks(): Sequence<Σᐩ> {\n  val chunks = mergeHoles().split(Regex(\"((?<=[^_])|(?=[^_]))\"))\n  return (2..chunks.maxOf { it.length }).asSequence()\n    .map { l -> chunks.joinToString(\"\") { if (it.containsHole()) it.take(l).toCharArray().joinToString(\" \") else it } }\n}\n","package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.graphs.LGVertex\nimport ai.hypergraph.kaliningraph.graphs.LabeledGraph\nimport ai.hypergraph.kaliningraph.tensor.FreeMatrix\n\ntypealias TreeMatrix = FreeMatrix<Forest>\ntypealias Forest = Set<Tree>\n\nclass Tree constructor(\n  val root: Σᐩ,\n  val terminal: Σᐩ? = null,\n  vararg val children: Tree,\n  val span: IntRange = children.fold(Int.MAX_VALUE to Int.MIN_VALUE) { (a, b), t ->\n    minOf(a, t.span.first) to maxOf(b, t.span.last)}.let { it.first..it.second }\n) {\n  val hash by lazy { root.hashCode() + terminal.hashCode() + contents().hashCode() }\n  override fun toString() = root\n  override fun hashCode() = hash\n  override fun equals(other: Any?) = hashCode() == other.hashCode()\n\n  fun structureEncode(): Σᐩ =\n//    if (terminal == \"ε\") \"\"\n    if (children.isEmpty()) \"()\"\n    else children.joinToString(\"\", prefix = \"(\", postfix = \")\") { it.structureEncode() }\n\n  fun toGraph(j: Σᐩ = \"0\"): LabeledGraph =\n    LabeledGraph { LGVertex(root, \"$root.$j\").let { it - it } } +\n      children.foldIndexed(\n        LabeledGraph {\n          children.forEachIndexed { i, it ->\n            LGVertex(root, \"$root.$j\") - LGVertex(it.root, \"${it.root}.$j.$i\")\n          }\n        }\n      ) { i, acc, it -> acc + it.toGraph(\"$j.$i\") }\n\n  val indxInfo by lazy { if (span.first < Int.MAX_VALUE) \" [${span.first}]\" else \"\" }\n  val spanInfo by lazy { if (span.first < Int.MAX_VALUE) \" [$span]\" else \"\" }\n\n  fun prettyPrint(buffer: Σᐩ = \"\", prefix: Σᐩ = \"\", nextPrefix: Σᐩ = \"\"): Σᐩ =\n    if (children.isEmpty()) (buffer + prefix + \"${terminal?.htmlify()}$indxInfo\\n\")\n    else children.foldIndexed(\"$buffer$prefix\" + root.htmlify() +\n      (if (-1 !in span) spanInfo else \"\") + \"\\n\") { i: Int, acc: Σᐩ, it: Tree ->\n        if (i == children.size - 1)\n          it.prettyPrint(acc + \"\", \"$nextPrefix└── \", \"$nextPrefix    \")\n        else it.prettyPrint(acc, \"$nextPrefix├── \", \"$nextPrefix│   \")\n      }\n\n  fun latexify(): Σᐩ = \"\\\\Tree ${qtreeify()}\"\n\n  private fun qtreeify(): Σᐩ =\n   if (children.isEmpty()) \"\\\\texttt{$terminal}\"\n   else \"[.\\\\texttt{$root} \" + children.joinToString(\" \", \"\", \" ]\") { it.qtreeify() }\n\n  private fun Σᐩ.htmlify() =\n    replace('<', '⟨').replace('>', '⟩')\n\n  // Xujie's algorithm - it works! :-D\n  fun denormalize(): Tree {\n    fun Tree.removeSynthetic(\n      refactoredChildren: List<Tree> = children.map { it.removeSynthetic() }.flatten(),\n      isSynthetic: (Tree) -> Boolean = { 2 <= root.split('.').size }\n    ): List<Tree> =\n      if (children.isEmpty()) listOf(Tree(root, terminal, span = span))\n      else if (isSynthetic(this)) refactoredChildren\n      else listOf(Tree(root, children = refactoredChildren.toTypedArray(), span = span))\n\n    return removeSynthetic().first()\n  }\n\n  fun contents(removeEpsilon: Boolean = false): Σᐩ =\n    if (children.isEmpty()) \"$terminal\"\n    else children.map { it.contents(removeEpsilon) }\n      .let { if (removeEpsilon) it.filter { it != \"ε\" } else it }\n      .joinToString(\" \")\n}",null,null,"package ai.hypergraph.kaliningraph.sampling\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.tensor.*\nimport ai.hypergraph.kaliningraph.types.*\nimport kotlin.math.*\nimport kotlin.random.*\nimport kotlin.time.*\n\nfun randomMatrix(rows: Int, cols: Int = rows, rand: () -> Double = { Random.Default.nextDouble() }) =\n  Array(rows) { Array(cols) { rand() }.toDoubleArray() }.toDoubleMatrix()\n\nfun randomVector(size: Int, rand: () -> Double = { Random.Default.nextDouble() }) =\n  Array(size) { rand() }.toDoubleArray()\n\nfun randomString(\n  length: Int = 5,\n  alphabet: List<Char> = ('a'..'z') + ('A'..'Z') + ('0'..'9')\n) = List(length) { alphabet.random() }.joinToString(\"\")\n\n/* Iterates over the Cartesian product space without repetition, generating\n * a lazy stochastic sequence of tuples. Can be viewed as a random space-filling\n * curve in n-dimensional space. This method can sample without replacement from\n * an arbitrarily large product space in linear time and space.\n * https://www.nayuki.io/page/galois-linear-feedback-shift-register\n * https://gist.github.com/rgov/891712/40fc067e1df176667ec4618aa197d0453307cac0\n * https://en.wikipedia.org/wiki/Maximum_length_sequence\n * https://en.wikipedia.org/wiki/Gray_code#n-ary_Gray_code\n */\n\nfun <T> findAll(base: Set<T>, dimension: Int = 1): Sequence<List<T>> =\n  findAll(List(dimension) { base })\n\nfun <T> findAll(\n  dimensions: List<Set<T>>,\n  cardinalities: List<Int> = dimensions.map { it.size },\n  asList: List<List<T>> = dimensions.map { it.shuffled() }\n): Sequence<List<T>> =\n   all(cardinalities).map { (asList zip it).map { (l, i) -> l[i] } }\n\nfun all(i: List<Int>, l: List<Int> = emptyList()): Sequence<List<Int>> =\n  if (i.isEmpty()) sequenceOf(l)\n  else (0 until i[0]).asSequence().flatMap { all(i.drop(1), l + it) }\n\n// Does not pass empirical tests?\nval lecuyerGenerator =\n  listOf(1, 3, 7, 11, 13, 19, 25, 37, 59,\n    47, 61, 55, 41, 67, 97, 91, 109, 103,\n    115, 131, 193, 137, 145, 143, 241, 157, 185,\n    167, 229, 171, 213, 191, 253, 203, 211, 239,\n    247, 285, 369, 299, 425, 301, 361, 333, 357,\n    351, 501, 355, 397, 391, 451, 463, 487, 529,\n    545, 539, 865, 557, 721, 563, 817, 601, 617,\n    607, 1001, 623, 985, 631, 953, 637, 761, 647,\n    901, 661, 677, 675, 789, 687, 981, 695, 949,\n    701, 757, 719, 973, 731, 877, 787, 803, 799,\n    995, 827, 883, 847, 971, 859, 875, 895, 1019,\n    911, 967, 1033, 1153, 1051, 1729, 1063, 1825, 1069,\n    1441, 1125, 1329, 1135, 1969, 1163, 1673, 1221, 1305,\n    1239, 1881, 1255, 1849, 1267, 1657, 1279, 2041, 1293,\n    1413, 1315, 1573, 1341, 1509, 1347, 1557, 1367, 1877,\n    1387, 1717, 1423, 1933, 1431, 1869, 1479, 1821, 1527,\n    1917, 1531, 1789, 1555, 1603, 1591, 1891, 1615, 1939,\n    1627, 1747, 1663, 2035, 1759, 2011, 1815, 1863, 2053,\n    2561, 2071, 3713, 2091, 3393, 2093, 2881, 2119, 3617,\n    2147, 3169, 2149, 2657, 2161, 2273, 2171, 3553, 2189,\n    2833, 2197, 2705, 2207, 3985, 2217, 2385, 2225, 2257,\n    2255, 3889, 2279, 3697, 2283, 3441, 2293, 2801, 2317,\n    2825, 2323, 3209, 2341, 2633, 2345, 2377, 2363, 3529,\n    2365, 3017, 2373, 2601, 2395, 3497, 2419, 3305, 2421,\n    2793, 2431, 4073, 2435, 3097, 2447, 3865, 2475, 3417,\n    2477, 2905, 2489, 2521, 2503, 3641, 2533, 2681, 2551,\n    3833, 2567, 3589, 2579, 3205, 2581, 2693, 2669, 2917,\n    2687, 4069, 2717, 2965, 2727, 3669, 2731, 3413, 2739,\n    3285, 2741, 2773, 2783, 4021, 2799, 3957, 2811, 3573,\n    2819, 3085, 2867, 3277, 2879, 4045, 2891, 3373, 2911,\n    4013, 2927, 3949, 2941, 3053, 2951, 3613, 2955, 3357,\n    2963, 3229, 2991, 3933, 2999, 3805, 3005, 3037, 3035,\n    3517, 3047, 3709, 3083, 3331, 3103, 3971, 3159, 3747,\n    3179, 3427, 3187, 3299, 3223, 3731, 3227, 3475, 3251,\n    3283, 3263, 4051, 3271, 3635, 3319, 3827, 3343, 3851,\n    3367, 3659, 3399, 3627, 3439, 3947, 3487, 3995, 3515,\n    3547, 3543, 3771, 3559, 3707, 3623, 3655, 3679, 4007,\n    3743, 3991, 3791, 3895, 4179, 6465, 4201, 4801, 4219,\n    7105, 4221, 6081, 4249, 4897, 4305, 4449, 4331, 6881,\n    4359, 7185, 4383, 7953, 4387, 6289, 4411, 7057, 4431)\n    .mapIndexed { i, it -> i to listOf(it.toLong()) }.toMap()\n\n// TODO: Compute minimal elements of GF(p^e) dynamically\n// http://www.seanerikoconnor.freeservers.com/Mathematics/AbstractAlgebra/PrimitivePolynomials/theory.html\n// https://math.stackexchange.com/questions/2232179/how-to-find-minimal-polynomial-for-an-element-in-mboxgf2m\n// http://crc.stanford.edu/crc_papers/CRC-TR-04-03.pdf#page=24\n// https://link.springer.com/content/pdf/bbm%3A978-3-642-54649-5%2F1.pdf#page=5\n\nval generator = mapOf(\n  // Degree to binary polynomial coefficients in decimal form\n  // https://link.springer.com/content/pdf/bbm%3A978-1-4615-1509-8%2F1.pdf\n  // https://sci-hub.se/https://doi.org/10.1023/A:1027422805851\n  // https://github.com/umontreal-simul/ssj/blob/f384e22adf08bd5202ea65bb7cd53fee192cb3ce/src/main/java/umontreal/ssj/hups/SobolSequence.java#L488\n  0 to listOf(0L),\n  1 to listOf(1L),\n  2 to listOf(7L),\n  3 to listOf(11L),\n  4 to listOf(19L, 25L),\n  5 to listOf(37L, 41L, 47L, 55L, 59L, 61L),\n  6 to listOf(67L, 91L, 97L, 103L, 109L, 115L),\n  7 to listOf(\n    131L, 137L, 143L, 145L, 157L, 167L, 171L, 185L, 191L, 193L, 203L, 211L, 213L, 229L,\n    239L, 241L, 247L, 253\n  ),\n  8 to listOf(\n    285L, 299L, 301L, 333L, 351L, 355L, 357L, 361L, 369L, 391L, 397L, 425L, 451L, 463L,\n    487L, 501\n  ),\n  9 to listOf(\n    529L, 539L, 545L, 557L, 563L, 601L, 607L, 617L, 623L, 631L, 637L, 647L, 661L, 675L,\n    677L, 687L, 695L, 701L, 719L, 721L, 731L, 757L, 761L, 787L, 789L, 799L, 803L, 817L,\n    827L, 847L, 859L, 865L, 875L, 877L, 883L, 895L, 901L, 911L, 949L, 953L, 967L, 971L,\n    973L, 981L, 985L, 995L, 1001L, 1019\n  ),\n  10 to listOf(\n    1033L, 1051L, 1063L, 1069L, 1125L, 1135L, 1153L, 1163L, 1221L, 1239L, 1255L,\n    1267L, 1279L, 1293L, 1305L, 1315L, 1329L, 1341L, 1347L, 1367L, 1387L, 1413L,\n    1423L, 1431L, 1441L, 1479L, 1509L, 1527L, 1531L, 1555L, 1557L, 1573L, 1591L,\n    1603L, 1615L, 1627L, 1657L, 1663L, 1673L, 1717L, 1729L, 1747L, 1759L, 1789L,\n    1815L, 1821L, 1825L, 1849L, 1863L, 1869L, 1877L, 1881L, 1891L, 1917L, 1933L,\n    1939L, 1969L, 2011L, 2035L, 2041L\n  ),\n  11 to listOf(\n    2053L, 2071L, 2091L, 2093L, 2119L, 2147L, 2149L, 2161L, 2171L, 2189L, 2197L,\n    2207L, 2217L, 2225L, 2255L, 2257L, 2273L, 2279L, 2283L, 2293L, 2317L, 2323L,\n    2341L, 2345L, 2363L, 2365L, 2373L, 2377L, 2385L, 2395L, 2419L, 2421L, 2431L,\n    2435L, 2447L, 2475L, 2477L, 2489L, 2503L, 2521L, 2533L, 2551L, 2561L, 2567L,\n    2579L, 2581L, 2601L, 2633L, 2657L, 2669L, 2681L, 2687L, 2693L, 2705L, 2717L,\n    2727L, 2731L, 2739L, 2741L, 2773L, 2783L, 2793L, 2799L, 2801L, 2811L, 2819L,\n    2825L, 2833L, 2867L, 2879L, 2881L, 2891L, 2905L, 2911L, 2917L, 2927L, 2941L,\n    2951L, 2955L, 2963L, 2965L, 2991L, 2999L, 3005L, 3017L, 3035L, 3037L, 3047L,\n    3053L, 3083L, 3085L, 3097L, 3103L, 3159L, 3169L, 3179L, 3187L, 3205L, 3209L,\n    3223L, 3227L, 3229L, 3251L, 3263L, 3271L, 3277L, 3283L, 3285L, 3299L, 3305L,\n    3319L, 3331L, 3343L, 3357L, 3367L, 3373L, 3393L, 3399L, 3413L, 3417L, 3427L,\n    3439L, 3441L, 3475L, 3487L, 3497L, 3515L, 3517L, 3529L, 3543L, 3547L, 3553L,\n    3559L, 3573L, 3589L, 3613L, 3617L, 3623L, 3627L, 3635L, 3641L, 3655L, 3659L,\n    3669L, 3679L, 3697L, 3707L, 3709L, 3713L, 3731L, 3743L, 3747L, 3771L, 3791L,\n    3805L, 3827L, 3833L, 3851L, 3865L, 3889L, 3895L, 3933L, 3947L, 3949L, 3957L,\n    3971L, 3985L, 3991L, 3995L, 4007L, 4013L, 4021L, 4045L, 4051L, 4069L, 4073\n  ),\n  12 to listOf(\n    4179L, 4201L, 4219L, 4221L, 4249L, 4305L, 4331L, 4359L, 4383L, 4387L, 4411L,\n    4431L, 4439L, 4449L, 4459L, 4485L, 4531L, 4569L, 4575L, 4621L, 4663L, 4669L,\n    4711L, 4723L, 4735L, 4793L, 4801L, 4811L, 4879L, 4893L, 4897L, 4921L, 4927L,\n    4941L, 4977L, 5017L, 5027L, 5033L, 5127L, 5169L, 5175L, 5199L, 5213L, 5223L,\n    5237L, 5287L, 5293L, 5331L, 5391L, 5405L, 5453L, 5523L, 5573L, 5591L, 5597L,\n    5611L, 5641L, 5703L, 5717L, 5721L, 5797L, 5821L, 5909L, 5913L, 5955L, 5957L,\n    6005L, 6025L, 6061L, 6067L, 6079L, 6081L, 6231L, 6237L, 6289L, 6295L, 6329L,\n    6383L, 6427L, 6453L, 6465L, 6501L, 6523L, 6539L, 6577L, 6589L, 6601L, 6607L,\n    6631L, 6683L, 6699L, 6707L, 6761L, 6795L, 6865L, 6881L, 6901L, 6923L, 6931L,\n    6943L, 6999L, 7057L, 7079L, 7103L, 7105L, 7123L, 7173L, 7185L, 7191L, 7207L,\n    7245L, 7303L, 7327L, 7333L, 7355L, 7365L, 7369L, 7375L, 7411L, 7431L, 7459L,\n    7491L, 7505L, 7515L, 7541L, 7557L, 7561L, 7701L, 7705L, 7727L, 7749L, 7761L,\n    7783L, 7795L, 7823L, 7907L, 7953L, 7963L, 7975L, 8049L, 8089L, 8123L, 8125L,\n    8137\n  ),\n  13 to listOf(\n    8219L, 8231L, 8245L, 8275L, 8293L, 8303L, 8331L, 8333L, 8351L, 8357L, 8367L,\n    8379L, 8381L, 8387L, 8393L, 8417L, 8435L, 8461L, 8469L, 8489L, 8495L, 8507L,\n    8515L, 8551L, 8555L, 8569L, 8585L, 8599L, 8605L, 8639L\n  ),\n  14 to listOf(\n    16427L, 16441L, 16467L, 16479L, 16507L, 16553L, 16559L, 16571L, 16573L,\n    16591L, 16619L, 16627L, 16653L, 16659L, 16699L, 16707L, 16795L, 16797L,\n    16807L, 16813L, 16821L, 16853L, 16857L, 16881L\n  ),\n  15 to listOf(\n    32771L, 32785L, 32791L, 32813L, 32821L, 32863L, 32887L, 32897L, 32903L,\n    32915L, 32933L, 32963L, 32975L, 32989L, 32999L, 33013L, 33025L, 33045L,\n    33061L, 33111L, 33117L, 33121L, 33133L, 33157L\n  ),\n  16 to listOf(\n    65581L, 65593L, 65599L, 65619L, 65725L, 65751L, 65839L, 65853L, 65871L,\n    65885L, 65943L, 65953L, 65965L, 65983L, 65991L, 66069L, 66073L, 66085L,\n    66095L, 66141L, 66157L, 66181L, 66193L, 66209L\n  ),\n  17 to listOf(\n    131081L, 131087L, 131105L, 131117L, 131123L, 131135L, 131137L,\n    131157L, 131177L, 131195L, 131213L, 131225L, 131235L, 131247L,\n    131259L, 131269L, 131317L\n  ),\n  18 to listOf(262183L, 262207L, 262221L, 262267L, 262273L, 262363L, 262375L, 262381L, 262407L),\n  19 to listOf(524327L, 524351L, 524359L, 524371L, 524377L, 524387L, 524399L, 524413L, 524435L, 524463L),\n  20 to listOf(1048585L, 1048659L, 1048677L, 1048681L, 1048699L),\n  21 to listOf(2097157L, 2097191L, 2097215L, 2097253L),\n  22 to listOf(4194307L, 4194361L),\n  23 to listOf(8388641L, 8388651L, 8388653L, 8388659L, 8388671L, 8388685L, 8388709L),\n  24 to listOf(16777243L),\n  25 to listOf(33554441L),\n  26 to listOf(67108935L),\n  // https://oeis.org/A132453\n  27 to listOf(134217767L),\n  28 to listOf(268435465L),\n  29 to listOf(536870917L),\n  30 to listOf(1073741907L),\n  31 to listOf(2147483657L),\n  32 to listOf(4294967493L),\n) + (33..64).associateWith { lecuyerGenerator[it]!! }\n\n// https://dl.acm.org/doi/pdf/10.1145/321765.321777\n// http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/ARTICLES/tgfsr3.pdf\n// https://en.wikipedia.org/wiki/Linear-feedback_shift_register#Non-binary_Galois_LFSR\n// TODO: https://www-users.cse.umn.edu/~garrett/students/reu/MB_algorithm.pdf#page=3\n// http://www.bolet.org/~pornin/2007-fse-granboulan+pornin.pdf\n// If sample space is not power of two, we can iterate the smallest LFSR greater\n// than our set cardinality until it emits a value in range: \"Hasty Pudding trick\"\n// All values will be unique.\n\nfun LFSR(\n  degree: Int = 16,\n  primitivePolynomial: List<Int> = generator[degree]!!.random().toString(2)\n    .mapIndexedNotNull { i, c -> if (c == '1') i else null }\n): Sequence<ULong> = // LFSRM(degree)\n  if (degree == 0) sequenceOf() else sequence {\n    val max = 1L shl degree\n    val vec0 = Random.nextULong(1UL ..max.toULong())\n    var vec = vec0\n    var i = 0\n    do {\n      val bit = primitivePolynomial.fold(0UL) { a, c -> a xor (vec shr c) } and 1UL\n      vec = (vec shr 1) or (bit shl (degree - 1))\n      yield(vec)\n    } while (++i < max - 1)\n  }\n\n// Generates a random sequence of unique values in range\nfun randomSequenceWithoutRepetition(range: IntRange): Sequence<Int> =\n  LFSR(ceil(log2((range.last - range.first + 1).toDouble())).toInt())\n    .filter { it.toInt() <= range.last - range.first }\n    .map { range.first + it.toInt() - 1 }\n\nprivate fun RandomVector(\n  degree: Int,\n  initialValue: ULong = Random.nextULong(1UL..(2.0.pow(degree).toULong())),\n  initialState: List<Boolean> = initialValue.toBitList2(degree),\n) = FreeMatrix(XOR_ALGEBRA, degree, 1) { r, _ -> initialState[r] }\n\n// https://en.wikipedia.org/wiki/Linear-feedback_shift_register#Matrix_forms\nprivate fun TransitionMatrix(degree: Int, polynomial: List<Boolean>) =\n  FreeMatrix(XOR_ALGEBRA, degree) { r, c -> if (r == 0) polynomial[c] else c == r - 1 }\n\nprivate fun PrimitivePolynomial(length: Int): List<Boolean> =\n  generator[length]!!.random().toString(2).map { it == '1' }\n\nfun LFSRM(\n  degree: Int,\n  initialVec: FreeMatrix<Boolean> = RandomVector(degree),\n  primitivePolynomial: List<Boolean> = PrimitivePolynomial(degree),\n  matrix: FreeMatrix<Boolean> = TransitionMatrix(degree, primitivePolynomial)\n): Sequence<UInt> = sequence {\n  var i = 0\n  var s: FreeMatrix<Boolean> = initialVec\n  do {\n    s = matrix * s\n    yield(s.data.toUInt())\n  } while (++i < 2.0.pow(degree).toInt() - 1)\n}\n\nfun <T> MDSamplerWithoutReplacement(set: Set<T>, dimension: Int = 1, skip: Int = 1, shift: Int = 0): Sequence<List<T>> =\n  MDSamplerWithoutReplacement(List(dimension) { set }, skip = skip, shift = shift)\n\nfun <T> MDSamplerWithoutReplacement(\n  dimensions: List<Set<T>>,\n  cardinalities: List<Int> = dimensions.map { it.size },\n  skip: Int = 1,\n  shift: Int = 0,\n  // Shuffle coordinates to increase entropy of sampling\n  shuffledDims: List<List<T>> = dimensions.map { it.shuffled() },\n  bitLens: List<Int> = dimensions.map(Set<T>::size).toBitLens2(),\n  degree: Int = bitLens.sum()\n): Sequence<List<T>> =\n  if (degree < 4) findAll(dimensions).shuffled()\n  else if (degree !in generator) throw Exception(\"Space is too large! ($degree) dim=${dimensions.map { it.size }.joinToString(\"x\", \"[\", \"]\")}\")\n  else LFSR(degree)\n    .let { if (skip == 1) it else it.filterIndexed { i, _ -> i % skip == shift } }\n    .map { it.toBitList2(degree) }\n    .hastyPuddingTrick(cardinalities)\n    .map { shuffledDims.zip(it).map { (dims, idx) -> dims[idx] } } +\n    sequenceOf(shuffledDims.map { it[0] }) // LFSR will never generate all 0s\n\n// Samples without replacement from the joint distribution of ordered k-combinations of n elements crossed with Σ^k\nfun <T> MDSamplerWithoutReplacementNK(Σ: Set<T>, n: Int, k: Int, skip: Int = 1, shift: Int = 0)=\n  MDSamplerWithoutReplacementNKF(Σ, n=n, k=k, skip=skip, shift=shift)\n    .map { (a, b) -> a.zip(b) }\n\nfun <T> MDSamplerWithoutReplacementNKF(\n  dimensions: Set<T>,\n  n: Int,\n  k: Int,\n  // Controls the start index and stride of each core's sampler (for parallelization)\n  skip: Int = 1,\n  shift: Int = 0,\n  // Shuffle coordinates to increase entropy of sampling\n  shuffledDims: List<T> = dimensions.shuffled(),\n  cardinality: Int = dimensions.size.pow(k),\n  choices: Int = n choose k,\n  degree: Int = log_2(choices) + log_2(cardinality)\n): Sequence<Pair<Set<Int>, List<T>>> =\n  if (degree < 4) throw Exception(\"Space is too small! ($degree)\")\n  else if (degree !in generator) throw Exception(\"Space is too large! ($degree)\")\n  else LFSR(degree)\n    //.also { println(\"Params: n=$n, k=$k, skip=$skip, shift=$shift, cardinality=$cardinality, choices=$choices, degree=$degree\") }\n    .let { if (skip == 1) it else it.filterIndexed { i, _ -> i % skip == shift } }\n    .map { it.toBitList2(degree) }.hastyPuddingTrick(listOf(choices, cardinality))\n    .map { it.first().decodeCombo(k) to it.last().untupled(k).map { shuffledDims[it] } } +\n      sequenceOf(0.decodeCombo(k) to 0.untupled(k).map { shuffledDims[it] }) // LFSR will never generate all 0s\n\n// ceil(log_2(x)) but faster than converting to double and back\nfun log_2(x: Int): Int {\n  var i = 0\n  var j = x\n  while (j > 0) {\n    j = j shr 1\n    i++\n  }\n  return i\n}\n\nprivate fun List<Int>.toBitLens2(): List<Int> = map { log_2(it) }\n\nprivate fun List<Boolean>.toInt() = joinToString(\"\") { if (it) \"1\" else \"0\" }.toInt(2)\n// Above function rewritten much faster:\nprivate fun List<Boolean>.toIntFast(): Int {\n  var i = 0\n  for (b in this) {\n    i = (i shl 1) or if (b) 1 else 0\n  }\n  return i\n}\nprivate fun List<Boolean>.toUInt() = joinToString(\"\") { if (it) \"1\" else \"0\" }.toUInt(2)\n\nprivate fun UInt.toBitList(len: Int): List<Boolean> =\n  toString(2).padStart(len, '0').map { it == '1' }\n// Much faster version of above function:\nprivate fun ULong.toBitList2(len: Int): List<Boolean> {\n  val bits = mutableListOf<Boolean>()\n  var i = this\n  for (j in 0 until len) {\n    bits.add(i and 1UL == 1UL)\n    i = i shr 1\n  }\n  return bits\n}\n\n// Takes a list of bits and chunk lengths and returns a list of Ints, e.g.,\n// (1010101100, [3, 2, 3, 2]) -> [101, 01, 011, 00] -> [4, 1, 3, 0]\nprivate fun List<Boolean>.toIndexes(bitLens: List<Int>): List<Int> =\n  bitLens.fold(listOf<List<Boolean>>() to this) { (a, b), i ->\n    (a + listOf(b.take(i))) to b.drop(i)\n  }.first.map { it.toIntFast() }\n// Above function rewritten much faster:\nprivate fun List<Boolean>.toIndexes2(bitLens: List<Int>): List<Int> {\n  val indexes = mutableListOf<Int>()\n  var i = 0\n  for (len in bitLens) {\n    indexes.add(subList(i, i + len).toIntFast())\n    i += len\n  }\n  return indexes\n}\n\n// Discards samples representing an integer exceeding set cardinality in any dimension\nprivate fun Sequence<List<Boolean>>.hastyPuddingTrick(cardinalities: List<Int>): Sequence<List<Int>> =\n  map { it.toIndexes2(cardinalities.toBitLens2()) }\n    .filter { it.zip(cardinalities).all { (a, b) -> a < b } }\n\n// Samples from unnormalized counts with normalized frequency\nfun <T> Map<T, Number>.sample(random: Random = Random.Default): Sequence<T> =\n  entries.map { (k, v) -> k to v }.unzip()\n    .let { (keys, values) -> generateSequence { keys[values.cdf().sample(random)] } }\n\nfun Collection<Number>.cdf() = CDF(\n  sumOf { it.toDouble() }\n    .let { sum -> map { i -> i.toDouble() / sum } }\n    .runningReduce { acc, d -> d + acc }\n)\n\nclass CDF(val cdf: List<Double>): List<Double> by cdf\n\n// Draws a single sample using KS-transform w/binary search\nfun CDF.sample(random: Random = Random.Default,\n               target: Double = random.nextDouble()): Int =\n  cdf.binarySearch { it.compareTo(target) }\n    .let { if (it < 0) abs(it) - 1 else it }\n\nfun <T> Set<T>.choose(i: IntRange): Sequence<Set<T>> =\n  i.asSequence().flatMap { findAll(this, it).map { it.toSet() } }.distinct()\n\ninline fun <reified T> Set<T>.choose(\n  k: Int,\n  numEl: Int = size choose k,\n  order: Sequence<Int> = randomSequenceWithoutRepetition(0 .. numEl),\n  asArray: Array<T> = toTypedArray()\n): Sequence<Set<T>> =\n  if (size <= k) sequenceOf(this)\n  else order.map { it.decodeCombo(k).map { asArray[it] }.toSet() }\n\n// TODO: implement choice with Cartesian product (n choose k) x {...}^k\nfun <T, Y> Set<T>.chooseWith(k: IntRange, g: Set<Y>): Sequence<Π2<Set<T>, List<Y>>> = TODO()\n\n// Enumerate k-combinations in order provided\ninline fun <reified T> List<T>.choose(\n  k: Int,\n  numEl: Int = size choose k,\n  asArray: Array<T> = toTypedArray()\n): Sequence<Set<T>> =\n  if (size <= k) sequenceOf(toSet())\n  else (0 until numEl).asSequence().map { it.decodeCombo(k).map { asArray[it] }.toSet() }","package ai.hypergraph.kaliningraph.theory\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.sampling.randomMatrix\nimport ai.hypergraph.kaliningraph.sampling.sample\nimport ai.hypergraph.kaliningraph.tensor.*\nimport ai.hypergraph.kaliningraph.types.*\n\n// https://en.wikipedia.org/wiki/Barab%C3%A1si%E2%80%93Albert_model#Algorithm\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.prefAttach(\n  graph: G = this as G,\n  numVertices: Int = 1,\n  degree: Int = 3,\n  attach: G.(Int) -> G = { degree ->\n    this + V(\n      if (vertices.isEmpty()) emptySet()\n      else degMap.sample().take(degree.coerceAtMost(size)).toSet()\n    ).graph\n  }\n): G = if (numVertices <= 0) graph\nelse prefAttach(graph.attach(degree), numVertices - 1, degree, attach)\n\n/* (A')ⁿ[a, b] counts the number of walks between vertices a, b of\n * length n. Let i be the smallest natural number such that (A')ⁱ\n * has no zeros. i is the length of the longest shortest path in G.\n */\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.slowDiameter(\n  i: Int = 1,\n  walks: BooleanMatrix = A_AUG\n): Int =\n  if (walks.isFull) i\n  else slowDiameter(i = i + 1, walks = walks * A_AUG)\n\n// Based on Booth & Lipton (1981): https://doi.org/10.1007/BF00264532\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.diameter(\n  i: Int = 1,\n  prev: BooleanMatrix = A_AUG,\n  next: BooleanMatrix = prev\n): Int =\n  if (next.isFull) slowDiameter(i / 2, prev)\n  else diameter(i = 2 * i, prev = next, next = next * next)\n\n/* Weisfeiler-Lehman isomorphism test:\n * http://www.jmlr.org/papers/volume12/shervashidze11a/shervashidze11a.pdf#page=6\n * http://davidbieber.com/post/2019-05-10-weisfeiler-lehman-isomorphism-test/\n * https://breandan.net/2020/06/30/graph-computation/#weisfeiler-lehman\n */\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.wl(\n  k: Int = 5,\n  label: (V) -> Int = { histogram[it]!! }\n): Map<V, Int> {\n  val updates = associateWith { it.neighbors.map(label).sorted().hashCode() }\n  return if (k <= 0 || all { label(it) == updates[it] }) updates\n  else wl(k - 1) { updates[it]!! }\n}\n\n/* IGraph-level GNN implementation\n * https://www.cs.mcgill.ca/~wlh/grl_book/files/GRL_Book-Chapter_5-GNNs.pdf#page=6\n * H^t := σ(AH^(t-1)W^(t) + H^(t-1)W^t)\n *\n * TODO:\n *   Pooling: https://www.cs.mcgill.ca/~wlh/grl_book/files/GRL_Book-Chapter_5-GNNs.pdf#page=18\n *   Convolution: https://arxiv.org/pdf/2004.03519.pdf#page=2\n */\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.gnn(\n  // Message passing rounds\n  t: Int = diameter() * 10,\n  // Matrix of node representations ℝ^{|V|xd}\n  H: DoubleMatrix = ENCODED,\n  // (Trainable) weight matrix ℝ^{dxd}\n  W: DoubleMatrix = randomMatrix(H.numCols),\n  // Bias term ℝ^{dxd}\n  b: DoubleMatrix = randomMatrix(size, H.numCols),\n  // Nonlinearity ℝ^{*} -> ℝ^{*}\n  σ: (DoubleMatrix) -> DoubleMatrix = ACT_TANH,\n  // Layer normalization ℝ^{*} -> ℝ^{*}\n  z: (DoubleMatrix) -> DoubleMatrix = NORM_AVG,\n  // Message ℝ^{*} -> ℝ^{*}\n  m: (DoubleMatrix) -> DoubleMatrix = { σ(z(A * it * W + it * W + b)) }\n): DoubleMatrix = if (t == 0) H else gnn(t = t - 1, H = m(H), W = W, b = b)\n\n// https://fabianmurariu.github.io/posts/scala3-typeclassery-graphs/\n// https://doisinkidney.com/pdfs/algebras-for-weighted-search.pdf\n// https://www.youtube.com/watch?v=n6oS6X-DOlg\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.dfs(\n  init: V = random(),\n  cond: (V) -> Boolean\n): V = TODO()\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.bfs(\n  init: V = random(),\n  cond: (V) -> Boolean\n): V = TODO()\n\ntailrec fun <G : IGraph<G, E, V>, E : IEdge<G, E, V>, V : IVertex<G, E, V>> IGraph<G, E, V>.beamsearch(\n  init: V = random(),\n  cond: (V) -> Boolean\n): V = TODO()","@file:Suppress(\"UNUSED_PARAMETER\", \"UNCHECKED_CAST\")\npackage ai.hypergraph.kaliningraph.types\n\nimport kotlin.jvm.JvmName\n\nopen class S<X>(val x: X?) {\n  override fun equals(other: Any?) = if (other is S<*>) if (x == null && other.x == null) true else x == other.x else false\n  override fun hashCode() = x.hashCode().hashCode()\n}\nobject O: S<O>(null)\nfun S<*>.toInt(i: Int = 0): Int = (x as? S<*>)?.toInt(i + 1) ?: i\n\noperator fun Number.plus(s: S<*>): Int = toInt() + s.toInt()\noperator fun Number.minus(s: S<*>): Int = toInt() - s.toInt()\noperator fun Number.times(s: S<*>): Int = toInt() * s.toInt()\noperator fun Number.div(s: S<*>): Int = toInt() / s.toInt()\n\noperator fun S<*>.plus(n: Number): Int = toInt() + n.toInt()\noperator fun S<*>.minus(n: Number): Int = toInt() - n.toInt()\noperator fun S<*>.times(n: Number): Int = toInt() * n.toInt()\noperator fun S<*>.div(n: Number): Int = toInt() / n.toInt()\n\nval S0: L0 = O\nval S1: L1 = S(O)\nval S2: L2 = S(S1)\nval S3: L3 = S(S2)\nval S4: L4 = S(S3)\nval S5: L5 = S(S4)\nval S6: L6 = S(S5)\nval S7: L7 = S(S6)\nval S8: L8 = S(S7)\nval S9: L9 = S(S8)\n\n// Literal types\ntypealias L0 = O\ntypealias L1 = S<O>\ntypealias L2 = Q2<O>\ntypealias L3 = Q3<O>\ntypealias L4 = Q4<O>\ntypealias L5 = Q5<O>\ntypealias L6 = Q6<O>\ntypealias L7 = Q7<O>\ntypealias L8 = Q8<O>\ntypealias L9 = Q9<O>\n\n// Quotient types, QN<T> represents T + N, QN<*> represents N or more\ntypealias Q1<T> = S<T>\ntypealias Q2<T> = S<Q1<T>>\ntypealias Q3<T> = S<Q2<T>>\ntypealias Q4<T> = S<Q3<T>>\ntypealias Q5<T> = S<Q4<T>>\ntypealias Q6<T> = S<Q5<T>>\ntypealias Q7<T> = S<Q6<T>>\ntypealias Q8<T> = S<Q7<T>>\ntypealias Q9<T> = S<Q8<T>>\n\nfun <W: S<*>, X: S<W>> W.plus1(): X = S(this) as X\nfun <W: S<*>, X: S<W>> X.minus1(): W = x as W\nfun <W: S<*>, X: Q2<W>> W.plus2(): X = plus1().plus1()\nfun <W: S<*>, X: Q2<W>> X.minus2(): W = minus1().minus1()\nfun <W: S<*>, X: Q3<W>> W.plus3(): X = plus1().plus2()\nfun <W: S<*>, X: Q3<W>> X.minus3(): W = minus1().minus2()\nfun <W: S<*>, X: Q4<W>> W.plus4(): X = plus2().plus2()\nfun <W: S<*>, X: Q4<W>> X.minus4(): W = minus2().minus2()\nfun <W: S<*>, X: Q5<W>> W.plus5(): X = plus2().plus3()\nfun <W: S<*>, X: Q5<W>> X.minus5(): W = minus2().minus3()\nfun <W: S<*>, X: Q6<W>> W.plus6(): X = plus3().plus3()\nfun <W: S<*>, X: Q6<W>> X.minus6(): W = minus3().minus3()\nfun <W: S<*>, X: Q7<W>> W.plus7(): X = plus3().plus4()\nfun <W: S<*>, X: Q7<W>> X.minus7(): W = minus3().minus4()\nfun <W: S<*>, X: Q8<W>> W.plus8(): X = plus4().plus4()\nfun <W: S<*>, X: Q8<W>> X.minus8(): W = minus4().minus4()\nfun <W: S<*>, X: Q9<W>> W.plus9(): X = plus4().plus5()\nfun <W: S<*>, X: Q9<W>> X.minus9(): W = minus4().minus5()\n\n@JvmName(\"n+0\") operator fun <W: S<*>> W.plus(x: O): W = this\n@JvmName(\"0+n\") operator fun <X: S<*>> O.plus(x: X): X = x\n@JvmName(\"n+1\") operator fun <W: S<*>, X: S<O>> W.plus(x: X): S<W> = plus1()\n@JvmName(\"1+n\") operator fun <W: S<*>, X: S<O>> X.plus(w: W): S<W> = w.plus1()\n@JvmName(\"n-1\") operator fun <W: S<*>, X: S<W>, Y: S<O>> X.minus(y: Y): W = minus1()\n@JvmName(\"n÷1\") operator fun <W: S<*>, X: S<O>> W.div(x: X): W = this\n@JvmName(\"n*1\") operator fun <W: S<*>, X: S<O>> W.times(x: X): W = this\n@JvmName(\"1*n\") operator fun <W: S<*>, X: S<O>> X.times(w: W): W = w\n@JvmName(\"n*0\") operator fun <W: S<*>> W.times(x: O): O = O\n@JvmName(\"0*n\") operator fun <X: S<*>> O.times(x: X): O = O\n\n@JvmName(\"n+2\") operator fun <W: L2, X: S<*>> X.plus(x: W): Q2<X> = plus2()\n@JvmName(\"n+3\") operator fun <W: L3, X: S<*>> X.plus(x: W): Q3<X> = plus3()\n@JvmName(\"n+4\") operator fun <W: L4, X: S<*>> X.plus(x: W): Q4<X> = plus4()\n@JvmName(\"n+5\") operator fun <W: L5, X: S<*>> X.plus(x: W): Q5<X> = plus5()\n@JvmName(\"n+6\") operator fun <W: L6, X: S<*>> X.plus(x: W): Q6<X> = plus6()\n@JvmName(\"n+7\") operator fun <W: L7, X: S<*>> X.plus(x: W): Q7<X> = plus7()\n@JvmName(\"n+8\") operator fun <W: L8, X: S<*>> X.plus(x: W): Q8<X> = plus8()\n@JvmName(\"n+9\") operator fun <W: L9, X: S<*>> X.plus(x: W): Q9<X> = plus9()\n\n@JvmName(\"n-2\") operator fun <V: L2, W: S<*>, X: Q2<W>> X.minus(v: V): W = minus2()\n@JvmName(\"n-3\") operator fun <V: L3, W: S<*>, X: Q3<W>> X.minus(v: V): W = minus3()\n@JvmName(\"n-4\") operator fun <V: L4, W: S<*>, X: Q4<W>> X.minus(v: V): W = minus4()\n@JvmName(\"n-5\") operator fun <V: L5, W: S<*>, X: Q5<W>> X.minus(v: V): W = minus5()\n@JvmName(\"n-6\") operator fun <V: L6, W: S<*>, X: Q6<W>> X.minus(v: V): W = minus6()\n@JvmName(\"n-7\") operator fun <V: L7, W: S<*>, X: Q7<W>> X.minus(v: V): W = minus7()\n@JvmName(\"n-8\") operator fun <V: L8, W: S<*>, X: Q8<W>> X.minus(v: V): W = minus8()\n@JvmName(\"n-9\") operator fun <V: L9, W: S<*>, X: Q9<W>> X.minus(v: V): W = minus9()\n\n@JvmName(\"2*2\") operator fun <W: L2, X: L2> W.times(x: X): L4 = S4\n@JvmName(\"2*3\") operator fun <W: L2, X: L3> W.times(x: X): L6 = S6\n@JvmName(\"2*4\") operator fun <W: L2, X: L4> W.times(x: X): L8 = S8\n@JvmName(\"3*2\") operator fun <W: L3, X: L2> W.times(x: X): L6 = S6\n@JvmName(\"3*3\") operator fun <W: L3, X: L3> W.times(x: X): L9 = S9\n@JvmName(\"4*2\") operator fun <W: L4, X: L2> W.times(x: X): L8 = S8\n@JvmName(\"4÷2\") operator fun <W: L4, X: L2> W.div(x: X): L2 = S2\n@JvmName(\"6÷2\") operator fun <W: L6, X: L2> W.div(x: X): L3 = S3\n@JvmName(\"6÷3\") operator fun <W: L6, X: L3> W.div(x: X): L2 = S2\n@JvmName(\"8÷2\") operator fun <W: L8, X: L2> W.div(x: X): L4 = S4\n@JvmName(\"8÷4\") operator fun <W: L8, X: L4> W.div(x: X): L2 = S2\n@JvmName(\"9÷3\") operator fun <W: L9, X: L3> W.div(x: X): L3 = S3\n","package ai.hypergraph.kaliningraph.types\n\n/** Corecursive Fibonacci sequence of [Nat]s **/\ntailrec fun <T> Nat<T>.fibonacci(\n  n: T,\n  seed: V2<T> = nil cc one,\n  fib: (V2<T>) -> V2<T> = { (a, b) -> b cc a + b },\n  i: T = nil,\n): T =\n  if (i == n) fib(seed).first\n  else fibonacci(n = n, seed = fib(seed), i = i.next())\n\n/** Returns [n]! **/\nfun <T> Nat<T>.factorial(n: T): T = prod(seq(to = n.next()))\n\n/** Returns a sequence of [Nat]s starting from [from] until [to] **/\ntailrec fun <T> Nat<T>.seq(\n  from: T = one, to: T,\n  acc: Set<T> = emptySet()\n): Set<T> = if (from == to) acc else seq(from.next(), to, acc + from)\n\n/** Returns true iff [t] is prime **/\nfun <T> Nat<T>.isPrime(t: T, kps: Set<T> = emptySet()): Boolean =\n  // Take Cartesian product, filter distinct pairs due to commutativity\n  (if (kps.isNotEmpty()) kps * kps else seq(to = t) * seq(to = t))\n    .distinctBy { (l, r) -> setOf(l, r) }\n    .all { (i, j) -> if (i == one || j == one) true else i * j != t }\n\n/** Returns [total] prime [Nat]s **/\ntailrec fun <T> Nat<T>.primes(\n  total: T, // total number of primes\n  i: T = nil, // counter\n  c: T = one.next(), // prime candidate\n  kps: Set<T> = emptySet() // known primes\n): Set<T> =\n  when {\n    i == total -> kps\n    isPrime(c) -> primes(total, i.next(), c.next(), kps + c)\n    else -> primes(total, i, c.next(), kps)\n  }\n\n/** Returns the sum of two [Nat]s **/\ntailrec fun <T> Nat<T>.plus(l: T, r: T, acc: T = l, i: T = nil): T =\n  if (i == r) acc else plus(l, r, acc.next(), i.next())\n\n/** Returns the product of two [Nat]s **/\ntailrec fun <T> Nat<T>.times(l: T, r: T, acc: T = nil, i: T = nil): T =\n  if (i == r) acc else times(l, r, acc + l, i.next())\n\ntailrec fun <T> Nat<T>.pow(base: T, exp: T, acc: T = one, i: T = one): T =\n  if (i == exp) acc else pow(base, exp, acc * base, i.next())\n\nfun <T> Nat<T>.sum(list: Iterable<T>): T = list.reduce { acc, t -> acc + t }\n\nfun <T> Nat<T>.prod(list: Iterable<T>): T = list.reduce { acc, t -> (acc * t) }\n\ninterface Nat<T> {\n  val nil: T\n  val one: T get() = nil.next()\n\n  fun T.next(): T\n\n  // TODO: implement pred, minus?\n  // https://en.wikipedia.org/wiki/Church_encoding#Derivation_of_predecessor_function\n  operator fun T.plus(t: T) = plus(this, t)\n  operator fun T.times(t: T) = times(this, t)\n  infix fun T.pow(t: T) = pow(this, t)\n  class of<T>(override val nil: T, val vnext: T.() -> T): Nat<T> {\n    override fun T.next(): T = vnext()\n  }\n}\n\ninterface Group<T>: Nat<T> {\n  override fun T.next(): T = this + one\n  override fun T.plus(t: T): T\n\n  class of<T>(\n    override val nil: T, override val one: T,\n    val plus: T.(T, T) -> T\n  ): Group<T> {\n    override fun T.plus(t: T) = plus(this, t)\n  }\n}\n\ninterface Ring<T>: Group<T> {\n  override fun T.plus(t: T): T\n  override fun T.times(t: T): T\n\n  open class of<T>(\n    override val nil: T, override val one: T = nil,\n    val plus: T.(T, T) -> T,\n    val times: T.(T, T) -> T\n  ): Ring<T> {\n    override fun T.plus(t: T) = plus(this, t)\n    override fun T.times(t: T) = times(this, t)\n  }\n}\n\n@Suppress(\"NO_TAIL_CALLS_FOUND\")\n/** Returns the result of subtracting two [Field]s **/\ntailrec fun <T> Field<T>.minus(l: T, r: T, acc: T = nil, i: T = nil): T = TODO()\n\n@Suppress(\"NO_TAIL_CALLS_FOUND\")\n/** Returns the result of dividing of two [Field]s **/\ntailrec fun <T> Field<T>.div(l: T, r: T, acc: T = l, i: T = nil): T = TODO()\n\ninterface Field<T>: Ring<T> {\n  operator fun T.minus(t: T): T = minus(this, t)\n  operator fun T.div(t: T): T = div(this, t)\n  class of<T>(\n    override val nil: T, override val one: T,\n    val plus: T.(T, T) -> T,\n    val times: T.(T, T) -> T,\n    val minus: T.(T, T) -> T,\n    val div: T.(T, T) -> T\n  ): Field<T> {\n    override fun T.plus(t: T) = plus(this, t)\n    override fun T.times(t: T) = times(this, t)\n    override fun T.minus(t: T) = minus(this, t)\n    override fun T.div(t: T) = div(this, t)\n  }\n}\n\ninterface Vector<T> {\n  val ts: List<T>\n\n  fun vmap(map: (T) -> T) = of(ts.map { map(it) })\n\n  fun zip(other: Vector<T>, merge: (T, T) -> T) =\n    of(ts.zip(other.ts).map { (a, b) -> merge(a, b) })\n\n  class of<T>(override val ts: List<T>): Vector<T> {\n    constructor(vararg ts: T): this(ts.toList())\n\n    override fun toString() =\n      ts.joinToString(\",\", \"${ts::class.simpleName}[\", \"]\")\n  }\n}\n\ninterface VectorField<T, F: Field<T>> {\n  val f: F\n  operator fun Vector<T>.plus(vec: Vector<T>): Vector<T> = zip(vec) { a, b -> with(f) { a + b } }\n  infix fun T.dot(p: Vector<T>): Vector<T> = p.vmap { f.times(it, this) }\n  class of<T, F: Field<T>>(override val f: F): VectorField<T, F>\n}\n\n// TODO: Clifford algebra?\n\n// http://www.math.ucsd.edu/~alina/oldcourses/2012/104b/zi.pdf\ndata class GaussInt(val a: Int, val b: Int) {\n  operator fun plus(o: GaussInt): GaussInt = GaussInt(a + o.a, b + o.b)\n  operator fun times(o: GaussInt): GaussInt =\n    GaussInt(a * o.a - b * o.b, a * o.b + b * o.a)\n}\n\nclass Rational {\n  constructor(i: Int, j: Int = 1) {\n    if (j == 0) throw ArithmeticException(\"Denominator must not be zero!\")\n    canonicalRatio = reduce(i, j)\n    a = canonicalRatio.first\n    b = canonicalRatio.second\n  }\n\n  private val canonicalRatio: V2<Int>\n\n  /**\n   * TODO: Use [Nat] instead?\n   */\n  val a: Int\n  val b: Int\n\n  operator fun times(r: Rational) = Rational(a * r.a, b * r.b)\n\n  operator fun plus(r: Rational) = Rational(a * r.b + r.a * b, b * r.b)\n\n  operator fun minus(r: Rational) = Rational(a * r.b - r.a * b, b * r.b)\n\n  operator fun div(r: Rational) = Rational(a * r.b, b * r.a)\n\n  override fun toString() = \"$a/$b\"\n  override fun equals(other: Any?) =\n    (other as? Rational).let { a == it!!.a && b == it.b }\n\n  override fun hashCode() = toString().hashCode()\n\n  companion object {\n    val ZERO = Rational(0, 1)\n    val ONE = Rational(1, 1)\n    fun reduce(a: Int, b: Int) = a / a.gcd(b) cc b / a.gcd(b)\n\n    // https://github.com/binkley/kotlin-rational/blob/61be6f7df2d579ad83c6810a5f9426a4478b99a2/src/main/kotlin/hm/binkley/math/math-functions.kt#L93\n    private tailrec fun Int.gcd(that: Int): Int = when {\n      this == that -> this\n      this in 0..1 || that in 0..1 -> 1\n      this > that -> (this - that).gcd(that)\n      else -> gcd(that - this)\n    }\n  }\n}\n","package ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.*\nimport ai.hypergraph.kaliningraph.sampling.choose\nimport ai.hypergraph.kaliningraph.tensor.UTMatrix\nimport ai.hypergraph.kaliningraph.types.*\nimport com.ionspin.kotlin.bignum.integer.*\nimport kotlin.math.*\nimport kotlin.random.Random\nimport kotlin.time.measureTimedValue\n\ntypealias PForest = Map<String, PTree> // ℙ₃\n// Algebraic data type / polynomial functor for parse forests (ℙ₂)\nclass PTree(val root: String = \".ε\", val branches: List<Π2A<PTree>> = listOf()) {\n//  val hash by lazy { root.hashCode() + if (branches.isEmpty()) 0 else branches.hashCode() }\n//  override fun hashCode(): Int = hash\n\n  val branchRatio: Pair<Double, Double> by lazy { if (branches.isEmpty()) 0.0 to 0.0 else\n    (branches.size.toDouble() + branches.sumOf { (l, r) -> l.branchRatio.first + r.branchRatio.first }) to\n    (1 + branches.sumOf { (l, r) -> l.branchRatio.second + r.branchRatio.second })\n  }\n\n  val allTerminals: Set<String> by lazy {\n    if (branches.isEmpty()) setOf(root)\n    else branches.map { (l, r) -> l.allTerminals + r.allTerminals }.flatten().toSet()\n  }\n\n  // Σ^n/|T(n)|, if < 1 then we know the grammar is surely ambiguous\n  val inverseDensity by lazy {\n    measureTimedValue { allTerminals.size.toBigInteger().pow(depth) / totalTrees }\n      .also { println(\"Solution density was: 1/${it.value} (${it.duration})\") }.value\n  }\n\n  // TODO: Use weighted choice mechanism\n  val shuffledBranches by lazy { branches.shuffled().sortedBy { \"ε\" !in it.first.root + it.second.root } }\n  val totalTrees: BigInteger by lazy {\n    if (branches.isEmpty()) BigInteger.ONE\n    else branches.map { (l, r) -> l.totalTrees * r.totalTrees }\n      .reduce { acc, it -> acc + it }\n  }\n\n  // e.g., if we want to prioritize shorter strings we can sort by total epsilons\n  val numEpsilons: BigInteger by lazy {\n    if (branches.isEmpty()) if (root == \"ε\") BigInteger.ONE else BigInteger.ZERO\n    else branches.map { (l, r) -> l.totalTrees * r.totalTrees }.reduce { acc, it -> acc + it }\n//    else branches.maxOf { (l, r) -> l.numEpsilons + r.numEpsilons }\n  }\n\n  fun Π2A<PTree>.countEpsilons() = first.numEpsilons + second.numEpsilons\n\n  val epsSortedBranches by lazy { branches.sortedBy { -it.countEpsilons() } }\n\n  val depth: Int by lazy {\n    if (branches.isEmpty()) 0\n    else branches.maxOf { (l, r) -> maxOf(l.depth, r.depth) + 1 }\n  }\n\n  private val choice by lazy {\n    if (branches.isEmpty()) listOf(if (\"ε\" in root) \"\" else root)\n    else shuffledBranches.flatMap { (l, r) ->\n      (l.choose() * r.choose()).map { (a, b) ->\n        if (a.isEmpty()) b else if (b.isEmpty()) a else \"$a $b\"\n      }\n    }.distinct()\n  }\n\n  fun choose(): Sequence<String> = choice.asSequence()\n\n  private fun decodeString(i: BigInteger): Pair<String, BigInteger> {\n    if (branches.isEmpty()) return (if (\"ε\" in root) \"\" else root) to i\n    val (quotient1, remainder) = i.divrem(branches.size.toBigInteger())\n    val (lb, rb) = shuffledBranches[remainder.intValue()]\n    val (l, quotient2) = lb.decodeString(quotient1)\n    val (r, quotient3) = rb.decodeString(quotient2)\n    val concat = (if(l.isEmpty()) r else if(r.isEmpty()) l else \"$l $r\")\n    return concat to quotient3\n  }\n\n  private fun decodeTree(i: BigInteger): Pair<Tree, BigInteger> {\n    if (branches.isEmpty()) return Tree(root) to i\n    val (quotient1, remainder) = i.divrem(branches.size.toBigInteger())\n    val (lb, rb) = shuffledBranches[remainder.toString().toInt()]\n    val (l, quotient2) = lb.decodeTree(quotient1)\n    val (r, quotient3) = rb.decodeTree(quotient2)\n    val isSingleton = l.children.isEmpty() && r.root == \".ε\"\n    return (if (isSingleton) Tree(root, terminal = l.root)\n    else Tree(root, children = arrayOf(l, r))) to quotient3\n  }\n\n  fun sampleTreesWithoutReplacement(): Sequence<Tree> =\n    sequence {\n      var i = BigInteger.ZERO\n      while (i < totalTrees) yield(decodeTree(i++).first)\n    }\n\n  fun sampleStrWithoutReplacement(): Sequence<String> = sequence {\n    var i = BigInteger.ZERO\n    while (i < 3 * totalTrees) yield(decodeString(i++).first)\n  }.distinct()\n\n  // Samples instantaneously from the parse forest, but may return duplicates\n  // and only returns a fraction of the number of distinct strings when compared\n  // to SWOR on medium-sized finite sets under the same wall-clock timeout. If\n  // the set is sufficiently large, distinctness will never be a problem.\n  fun sampleWithReplacement(): Sequence<String> = generateSequence { sample() }\n\n  fun sampleDiverseTrees(): Sequence<Tree> =\n    sampleTreesWithoutReplacement().distinctBy { it.structureEncode() }\n\n  fun sampleTree(): Tree =\n    if (branches.isEmpty()) Tree(root)\n    else shuffledBranches.random().let { (l, r) ->\n      val (a, b) = l.sampleTree() to r.sampleTree()\n      Tree(root, children = arrayOf(a, b))\n    }\n\n  fun sample(): String =\n    if (branches.isEmpty()) if (\"ε\" in root) \"\" else root\n    else branches.random().let { (l, r) ->\n      val (a, b) = l.sample() to r.sample()\n      if (a.isEmpty()) b else if (b.isEmpty()) a else \"$a $b\"\n    }\n\n  fun sampleWRGD(): Sequence<String> = generateSequence { sampleStrWithGeomDecay() }\n\n  fun sampleStrWithGeomDecay(): String =\n    if (branches.isEmpty()) if (\".ε\" in root) \"\" else root\n    else {\n//      val p = 0.9 // Adjust this for different decay rates\n//      val rnd = Random.nextDouble()\n//      val index =(-(1.0 / ln(1 - p)) * ln(1 - rnd) * branches.size).toInt().coerceIn(branches.indices)\n//      println(index)\n      epsSortedBranches.sampleWithGeomDecay().let { (l, r) ->\n        val (a, b) = l.sampleStrWithGeomDecay() to r.sampleStrWithGeomDecay()\n        if (a.isEmpty()) b else if (b.isEmpty()) a else \"$a $b\"\n      }\n    }\n\n  fun <T> List<T>.sampleWithGeomDecay(): T {\n    if (isEmpty()) throw NoSuchElementException(\"List is empty.\")\n\n    val r = 0.5 // Common ratio; adjust this for different decay rates\n\n    // Compute the total sum of the geometric series up to size\n    val total = (1 - r.pow(size)) / (1 - r)\n\n    // Generate a random value between 0 and the total\n    val rnd = Random.nextDouble() * total\n\n    // Iterate to find which item this random value corresponds to\n    var cumulativeSum = 0.0\n    var index = 0\n    while (index < size) {\n      cumulativeSum +=r.pow(index.toDouble())\n      if (rnd < cumulativeSum) break\n      index++\n    }\n\n    return this[index]\n  }\n\n//  fun List<Π2A<PTree>>.sampleWithGeomDecay(): Π2A<PTree> {\n//    val p = 0.5 // Adjust this for different decay rates\n//    val rnd = Random.nextDouble()\n//    val index = -(1.0 / ln(1 - p)) * ln(1 - rnd)\n//    return epsSortedBranches[index.toInt().coerceAtMost(branches.size - 1)]\n//  }\n}\n\nfun CFG.startPTree(tokens: List<String>) = measureTimedValue {\n  initPForestMat(tokens).seekFixpoint().diagonals.last()[0][START_SYMBOL]\n}.also { println(\"Took ${it.duration} to compute parse forest\") }.value\n\n// Instead of defining a special case, we instead represent the unit production\n// as a left child whose sibling is empty like so: Left child to Right child\nfun PSingleton(v: String): List<Π2A<PTree>> = listOf(PTree(v) to PTree())\n\nfun CFG.initPForestMat(tokens: List<String>): UTMatrix<PForest> =\n  UTMatrix(\n    ts = tokens.map { token ->\n      (if (token != HOLE_MARKER) bimap[listOf(token)] else unitNonterminals)\n        .associateWith { nt ->\n          // Here we construct\n          if (token != HOLE_MARKER) PSingleton(token)\n          else bimap.UNITS[nt]?.map { PSingleton(it) }?.flatten() ?: listOf()\n        }.map { (k, v) -> k to PTree(k, v) }.toMap()\n    }.toTypedArray(),\n    algebra = Ring.of(\n      nil = emptyMap(),\n      plus = { x, y -> merge(x, y) },\n      times = { x, y -> joinSeq(x, y) },\n    )\n  )\n\nfun merge(X: PForest, Z: PForest): PForest =\n  X.toMutableMap().apply {\n    Z.forEach { (k, v) ->\n      if (k in this) this[k] = PTree(k, (this[k]!!.branches + v.branches).distinct())\n      else this[k] = v\n    }\n  }.toMap()\n\n// Too slow:\n//  (X.keys + Z.keys).associateWith { k ->\n////    PTree(k, ((X[k]?.branches ?: listOf()) + (Z[k]?.branches ?: listOf())).toSet().toList())\n//    PTree(k, (X[k]?.branches ?: listOf()) + (Z[k]?.branches ?: listOf()))\n//  }\n\n//fun merge(X: PForest, Z: PForest): PForest =\n//  (X.keys + Z.keys).associateWith { k ->\n//    PTree(k, ((X[k]?.branches ?: listOf()) + (Z[k]?.branches ?: listOf()))\n//      .groupBy { it.first.root to it.second.root }.map { (k, v) ->\n//        PTree(k.first, v.map { it.first.branches }.flatten()) to PTree(k.second, v.map { it.second.branches }.flatten())\n//      }\n//    )\n//  }\n\n// X ⊗ Z := { w | <x, z> ∈ X × Z, (w -> xz) ∈ P }\nfun CFG.joinSeq(X: PForest, Z: PForest): PForest =\n  bimap.TRIPL.filter { (_, x, z) -> x in X && z in Z }\n//    .map { (w, x, z) -> PTree(w, listOf(X[x]!! to Z[z]!!)) }\n    .map { (w, x, z) -> Triple(w, X[x]!!, Z[z]!!) }.groupBy { it.first }\n    .map { (k, v) -> k to PTree(k, v.map { it.second to it.third }) }\n    .toMap()\n\n//    .groupingBy { it.first }.aggregate { _, acc: List<Π2A<PTree>>?, it, _->\n//      val pair = X[it.second]!! to Z[it.third]!!\n//      if (acc == null) listOf(pair) else acc + pair\n//    }.map { (k, v) -> k to PTree(k, v) }.toMap()\n\nfun CFG.sliceSolve(size: Int): Sequence<String> = solveSeq(List(size) { \"_\" })\n\nfun CFG.sliceSample(size: Int): Sequence<String> = sampleSeq(List(size) { \"_\" })\n\n// Lazily computes all syntactically strings compatible with the given template\n// Generally slow, but guaranteed to return all solutions\nfun CFG.solveSeq(tokens: List<String>): Sequence<String> =\n  startPTree(tokens)?.choose()?.distinct() ?: sequenceOf()\n\n// This should never return duplicates and is the second fastest.\n// Eventually, this will become the default method for sampling.\nfun CFG.enumSeq(tokens: List<String>): Sequence<String> =\n  startPTree(tokens)?.sampleStrWithoutReplacement() ?: sequenceOf()\n\nvar maxTrees = 100_000\n// This should never return duplicates and is the second fastest.\n// Eventually, this will become the default method for sampling.\nfun CFG.enumSeqSmart(tokens: List<String>): Sequence<String> =\n  startPTree(tokens)?.let { pt ->\n    if (BigInteger.ONE < pt.inverseDensity) {\n      if (pt.totalTrees < BigInteger(maxTrees)) {\n        println(\"Small number of parse trees (${pt.totalTrees}), sampling without replacement!\")\n        pt.sampleStrWithoutReplacement()\n      }\n      else {\n        println(\"Large number of parse trees (${pt.totalTrees}), sampling with replacement!\")\n        pt.sampleWithReplacement()\n//        pt.sampleDiverseTrees().map { it.contents(true) }\n      }\n    }\n    // This means the grammar is highly ambiguous and we would probably be\n    // better off sampling from the bottom-up, instead of from the top-down.\n    else {\n      println(\"Ambiguity exceeds total solutions, switching to bottom-up naïve search!\")\n      tokens.solve(this)\n    }\n  } ?: sequenceOf()\n\n// This is generally the fastest method, but may return duplicates\nfun CFG.sampleSeq(tokens: List<String>): Sequence<String> =\n  startPTree(tokens)?.sampleWithReplacement() ?: sequenceOf()\n\nfun CFG.enumTree(tokens: List<String>): Sequence<Tree> =\n  startPTree(tokens)?.sampleTreesWithoutReplacement() ?: sequenceOf()\n\nfun CFG.enumSWOR(tokens: List<String>): Sequence<String> =\n  startPTree(tokens)?.sampleWRGD() ?: sequenceOf()\n\nfun CFG.hammingBallRepair(tokens: List<String>): Sequence<String> =\n  tokens.indices.toSet().choose(5)\n    .map { tokens.substituteIndices(it) { it, i -> \"_\" } }\n    .flatMap { enumSWOR(it).take(100) }\n\nfun CFG.repairSeq(tokens: List<String>): Sequence<String> =\n  tokens.intersperse(2, \"ε\").let { prompt ->\n    hammingBallRepair(prompt).flatMap {\n      val result = it.tokenizeByWhitespace()\n      val edit = prompt.calcEdit(it.tokenizeByWhitespace())\n      Repair(prompt, edit, result, 0.0)\n        .minimalAdmissibleSubrepairs({ it.filter { it != \"ε\" } in language }, { edit.size.toDouble() })\n    }.distinct().map { it.resToStr().removeEpsilon() }.distinct()\n  }\n\nfun CFG.fastRepairSeq(tokens: List<String>): Sequence<String> =\n  tokens.intersperse(1, \"ε\").let { prompt ->\n    prompt.indices.toSet().choose(4)\n      .map { prompt.substituteIndices(it) { _, _ -> \"_\" } }\n      .flatMap { enumSWOR(it).take(100).ifEmpty { sequenceOf(\"ε\") } }\n      .map { it.removeEpsilon() }\n  }\n","@file:Suppress(\"NonAsciiCharacters\")\n\npackage ai.hypergraph.kaliningraph.parsing\n\nimport ai.hypergraph.kaliningraph.levenshtein\nimport ai.hypergraph.kaliningraph.tensor.UTMatrix\nimport ai.hypergraph.kaliningraph.types.*\n\n// The main issue with SortValiant is we eagerly compute the Cartesian product\n// and this blows up very quickly, so we need to sort and prune aggressively.\n// We can instead use a lazy Cartesian product, which is what SeqValiant does.\n// The downside is that we lose the ability to sort the results while parsing,\n// but we can still use a metric to sort the results after the fact.\n\n// Returns all syntactically strings ordered by distance to withRespect\nfun CFG.solve(s: Σᐩ, metric: ChoiceMetric): Set<Σᐩ> =\n  solve(s.tokenizeByWhitespace(), metric)\n\nfun CFG.solve(s: List<Σᐩ>, metric: ChoiceMetric): Set<Σᐩ> =\n  try { solveSortedFP(s, metric)?.sorted()?.map { it.asString }?.toSet() }\n  catch (e: Exception) { e.printStackTrace(); null } ?: setOf()\n\nfun CFG.solveSortedFP(\n  tokens: List<Σᐩ>,\n  metric: ChoiceMetric,\n  utMatrix: UTMatrix<Sort> = initialUTSMatrix(tokens, sortwiseAlgebra(metric)),\n) = utMatrix.seekFixpoint().toFullMatrix()[0].last()[START_SYMBOL]\n\nfun CFG.initialUTSMatrix(\n  tokens: List<Σᐩ>,\n  algebra: Ring<Sort>\n): UTMatrix<Sort> =\n  UTMatrix(\n    ts = tokens.map { token ->\n      (if (token != HOLE_MARKER) bimap[listOf(token)] else unitNonterminals)\n      .associateWith { nt ->\n        if (token != HOLE_MARKER) setOf(Choice(token))\n        else bimap.UNITS[nt]?.map { Choice(it) }?.toSet() ?: setOf()\n      }\n    }.toTypedArray(),\n    algebra = algebra\n  )\n\n// Maintains a sorted list of nonterminal roots and their leaves\nfun CFG.sortwiseAlgebra(metric: ChoiceMetric): Ring<Sort> =\n  Ring.of(\n    nil = mapOf(),\n    plus = { x, y -> union(x, y) },\n    times = { x, y -> join(x, y, metric) },\n  )\n\nvar MAX_SORT_CAPACITY = 50\n// X ⊗ Z := { w | <x, z> ∈ X × Z, (w -> xz) ∈ P }\n// Greedily selects candidate string fragments according to ChoiceMetric\nfun CFG.join(X: Sort, Z: Sort, metric: ChoiceMetric = { it.weight }): Sort =\n  bimap.TRIPL.filter { (_, x, z) -> x in X && z in Z }\n  .map { (w, x, z) ->\n    // This Cartesian product becomes expensive quickly so MAX_CAPACITY is used\n    // to limit the number of elements in the product. This is a greedy approach\n    // and we always take the top MAX_CAPACITY-elements by the provided metric.\n    ((X[x] ?: setOf()) * (Z[z] ?: setOf()))\n      .map { (q, r) -> w to (q + r) }\n  }.flatten().groupingBy { it.first }\n  .aggregate<Pair<Σᐩ, Choice>, Σᐩ, MutableList<Choice>> { _, acc, it, _ ->\n    val choice = Choice(it.second.tokens, metric(it.second))\n    val list = acc ?: mutableListOf()\n    val idx = list.binarySearch(choice, Choice.comparator)\n    if (idx < 0) list.add(-idx - 1, choice) // Only if not already present\n    list.apply { if (MAX_SORT_CAPACITY < size) removeLast() }\n  }.mapValues { it.value.toSet() }\n\nfun union(l: Sort, r: Sort): Sort =\n  (l.keys + r.keys).associateWith { k -> (l[k] ?: setOf()) + (r[k] ?: setOf()) }\n\n// Map of root to the possible sets of token sequences it can produce in context\n// This is identical to a forest minus internal branches, just roots and leaves\n// Each root represents many strings, we only care about unique leaf sequences\n// Maintains a sort ordering based on some metric of the most likely derivations\ntypealias Sort = Map<Σᐩ, Set<Choice>>\ntypealias ChoiceMetric = (Choice) -> Float\n// Substring and some metric (e.g., number of blanks)\n// TODO: Associate a more concrete semantics with second value,\n//       but for now just the number of terminals. For example,\n//       we could use perplexity of a Markov chain or the length\n//       of the longest common substring with the original string.\ndata class Choice(val tokens: List<Σᐩ>, val weight: Float): Comparable<Choice> {\n  constructor(token: Σᐩ): this(listOf(token), if (\"ε\" in token) 0f else 1f)\n\n  companion object {\n    val comparator: Comparator<Choice> = compareBy<Choice> { it.weight }\n      .thenBy { it.sanitized.size }.thenBy { it.asString }\n  }\n\n  override fun compareTo(other: Choice): Int = comparator.compare(this, other)\n\n  operator fun plus(other: Choice) =\n    Choice(sanitized + other.sanitized, weight + other.weight)\n\n  val sanitized by lazy { tokens.filter { \"ε\" !in it } }\n  val asString by lazy { sanitized.joinToString(\" \") }\n}\n\n// Returns a metric measuring Levenshtein distance w.r.t. some reference string\nfun levMetric(withRespectTo: Σᐩ): ChoiceMetric =\n  withRespectTo.tokenizeByWhitespace()\n    .let { wrt -> { levenshtein(it.sanitized, wrt).toFloat() } }",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./kotlin/Tidyparse-tidyparse-web-frontend.js\");\n",""],"names":["<get-segmentationCacheHTML>","<init>","getLatestCFG","grammar","e","caretInGrammar","redecorateLines","cfg","redecorateLines$default","preparseParseableLines","editorText","element","value","answer","<init properties TidyEditor.kt>","<get-parser>","<get-decorator>","<get-jsEditor>","<get-inputField>","<get-outputField>","main","decorator$delegate$lambda","jsEditor$delegate$lambda","inputField$delegate$lambda","outputField$delegate$lambda","main$lambda","it","decorator$factory","get","jsEditor$factory","inputField$factory","outputField$factory","<init properties Client.kt>","getEndOfLineIdx","<this>","getCurrentLine","redecorateLines$decorate","decCFG","editor","output","readEditorText","getCaretPosition","currentLine","Parser_init_$Init$","rules","capacity","color","regex","Parser_init_$Create$","Parser$parseRE$lambda","ruleMap","identify","token","TextareaDecorator$toColorfulHTML$lambda","TextareaDecorator$toColorfulHTML$lambda$lambda","escapedToken","inputField","parser","parent","label","update","sb","lines","maxLen","toColorfulHTML","G","graphs","vertices","item","list","accumulator","<get-index>","vertexIdx","plus","that","minus","graph","join","left","right","reversed","result","key","v","k","isomorphicTo","vwise","lf","transitiveClosure","vtxs","asString","<get-E>","<get-G>","<get-V>","neighbors","neighbors$default","shape","t","new$default","rows","cols","data","alg","safeJoin","ids","criteria","op","message","i","j","safeJoin$default","r","c","elwise","meanNorm","a","b","μ","min","max","kroneckerDelta","toDoubleMatrix","vectorize","len","allAre","isA","ACT_TANH$lambda","ACT_TANH$lambda$lambda","NORM_AVG$lambda","meanNorm$lambda","$μ","$max","$min","meanNorm$lambda$lambda","toDoubleMatrix$lambda","toDoubleMatrix$lambda$lambda","vectorize$lambda","vectorize$lambda$lambda","<init properties CommonUtils.kt>","formatAsGrid","groups","splitProd","formatAsGrid$tok","formatAsGrid$LHS","formatAsGrid$rec","$cols","iterator","minElem","minValue","index","padded","formatAsGrid$rec$lambda","$groups","formatAsGrid$rec$lambda$lambda","maxValue","lhs","rhs","lp","rp","<init properties StringUtils.kt>","trimToSize","toEvict","<unused var>","LRUCache$<init>$lambda","maxSize","sizeOf","getOrPut","put","prev","toString","LabeledGraph_init_$Init$","builder","LabeledGraph_init_$Create$","<get-vertices>","LGBuilder$minus$lambda","$v","LGBuilder$minus$lambda$lambda","LGVertex_init_$Init$","id","out","LGVertex_init_$Create$","lgv","edgeMap","LGVertex$<init>$lambda","$out","$label","LGVertex$<init>$lambda$lambda","s","<get-label>","<get-id>","<get-edgeMap>","encode","LabeledEdge_init_$Init$","source","target","LabeledEdge_init_$Create$","<get-source>","<get-target>","LGFamily$<get-E>$lambda","LGFamily$<get-G>$lambda","LGFamily$<get-V>$lambda","old","escapeHTML","<get-language>","<get-nonterminals>","<get-symbols>","<get-terminals>","<get-terminalUnitProductions>","<get-unitProductions>","<get-nonterminalProductions>","<get-bimap>","<get-vindex>","<get-bindex>","<get-normalForm>","<get-depGraph>","<get-originalForm>","<get-reachability>","<get-unitReachability>","freeze","<get-LHS>","<get-RHS>","BiMap$L2RHS$delegate$lambda","$cfg","BiMap$L2RHS$delegate$lambda$lambda","BiMap$R2LHS$delegate$lambda","BiMap$R2LHS$delegate$lambda$lambda","BiMap$TDEPS$delegate$lambda","BiMap$TDEPS$delegate$lambda$lambda","l","symbol","BiMap$NDEPS$delegate$lambda","BiMap$NDEPS$delegate$lambda$lambda","BiMap$TRIPL$delegate$lambda","BiMap$TRIPL$delegate$lambda$lambda","BiMap$X2WZ$delegate$lambda","BiMap$X2WZ$delegate$lambda$lambda","BiMap$UNITS$delegate$lambda$lambda","BiMap$UNITS$delegate$lambda$lambda$lambda","BiMap$UNITS$delegate$lambda","<get-L2RHS>","<get-R2LHS>","<get-TDEPS>","<get-NDEPS>","<get-TRIPL>","p","set","indexedNTs","ntIndices","contains","containsAll","elements","isEmpty","listIterator","subList","fromIndex","toIndex","<get-size>","dependencyGraph","revDependencyGraph","toFormula","nt","isTreelikeNonterminalIn","reachables","nonTreeLike","CFG","tryCache","join$default","equals","other","hashCode","<get-RHS>$stripEscapeChars","language$delegate$lambda","$this$cache","delimiters$delegate$lambda","compare","delimiters$delegate$lambda$lambda","nonterminals$delegate$lambda","symbols$delegate$lambda","terminals$delegate$lambda","terminalUnitProductions$delegate$lambda","terminalUnitProductions$delegate$lambda$lambda","$this_cache","terminalUnitProductions$delegate$lambda$lambda$lambda","unitProductions$delegate$lambda","unitProductions$delegate$lambda$lambda","nonterminalProductions$delegate$lambda","nonterminalProductions$delegate$lambda$lambda","nonterminalProductions$delegate$lambda$lambda$lambda","unitNonterminals$delegate$lambda","bimap$delegate$lambda","tmap$delegate$lambda","vindex$delegate$lambda","vindex$delegate$lambda$lambda","bindex$delegate$lambda","normalForm$delegate$lambda","depGraph$delegate$lambda","revDepGraph$delegate$lambda","originalForm$delegate$lambda","nonparametricForm$delegate$lambda","reachability$delegate$lambda","unitReachability$delegate$lambda","unitReachability$delegate$lambda$lambda","unitReachability$delegate$lambda$lambda$lambda","$this$LabeledGraph","noNonterminalStubs$delegate$lambda","noNonterminalStubs$delegate$lambda$lambda","noNonterminalStubs$delegate$lambda$lambda$lambda","noEpsilonOrNonterminalStubs$delegate$lambda","noEpsilonOrNonterminalStubs$delegate$lambda$lambda","noEpsilonOrNonterminalStubs$delegate$lambda$lambda$lambda","parikhFPCache$delegate$lambda","generators$delegate$lambda","nonterminalFormulas$delegate$lambda","pruneTreelikeNonterminals$delegate$lambda","brokenReferences","pruneTreelikeNonterminals$delegate$lambda$lambda","pruneTreelikeNonterminals$delegate$lambda$lambda$lambda","joinMap$delegate$lambda","dependencyGraph$lambda","dependencyGraph$lambda$lambda","revDependencyGraph$lambda","revDependencyGraph$lambda$lambda","toFormula$lambda$lambda","toFormula$lambda$lambda$lambda","toFormula$lambda","language$factory","receiver","nonterminals$factory","symbols$factory","terminals$factory","terminalUnitProductions$factory","unitProductions$factory","nonterminalProductions$factory","bimap$factory","vindex$factory","bindex$factory","normalForm$factory","depGraph$factory","originalForm$factory","reachability$factory","unitReachability$factory","L2RHS$factory","R2LHS$factory","TDEPS$factory","NDEPS$factory","TRIPL$factory","<init properties CFG.kt>","<get-pretty>","prettyPrint","pretty","pretty$delegate$lambda","pretty$factory","<init properties Debugging.kt>","reg","intersect","CJL$cfgs$delegate$lambda","$cfls","CJL$cfgs$delegate$lambda$lambda","CJL$nonterminals$delegate$lambda","CJL$nonterminals$delegate$lambda$lambda","$this$intersect","CJL$terminals$delegate$lambda","CJL$terminals$delegate$lambda$lambda","CJL$symbols$delegate$lambda","CJL$symbols$delegate$lambda$lambda","cfls","<get-cfgs>","asCFG$delegate$lambda","asCJL$delegate$lambda","cfgs$factory","<init properties FLTheory.kt>","<get-rewriteHistory>","<get-START_SYMBOL>","normalize","from","transformIntoCNF","isSyntheticNonterminal","isOrganicNonterminal","reachableSymbols","generateNonterminalStubs","eliminateParametricityFromLHS","parameters","ntReplaced","ntReplacements","params","map","maxElem","expandOr","addGlobalStartSymbol","removeUselessSymbols","generating","reachable","terminalsToUnitProds","mixProd","termIdx","freshName","freshRHS","newProd","newGrammar","refactorRHS","longProd","shortProd","elimVarUnitProds","toVisit","vars","toElim","varsThatMapToMe","thingsIMapTo","refactorEpsilonProds","nlbls","addEpsilonProduction","getParametersIn","eliminateParametricityFromRHS","genSym","allGenerating","nextGenerating","reachSym","allReachable","nextReachable","nullableNonterminals","nbls","nnts","allSubSeq","nullables","drop","keep","elimVarUnitProds$isVariableUnitProd","transitiveClosure$lambda","$from","transitiveClosure$lambda$lambda","generateNonterminalStubs$lambda","removeUselessSymbols$lambda","$generating","$reachable","removeUselessSymbols$lambda$lambda","elimVarUnitProds$lambda","$vars","elimVarUnitProds$lambda$lambda","$toElim","nullableNonterminals$lambda","$nbls","nullableNonterminals$lambda$lambda","$tmp1","<init properties Normalization.kt>","illegalWordIndices","build","line","tokens","Segmentation$toColorfulHTMLString$lambda","Segmentation$mergeContiguousRanges$lambda","valid","invalid","illegal","toColorfulHTMLString","illegalRegions","regions","coloredLine","range","mergeContiguousRanges","charIndicesOfWordsInString","str","wordTokens","whitespaceTokens","allTokens","polarity","interwoven","startIdx","endIdx","adjust","sum","startOffset","endOffset","<get-bitwiseAlgebra>","<get-HOLE_MARKER>","<get-PRODCFG>","isNonterminalStubIn","stripEscapeChars","escapeSeq","parseCFG","validate","union","fastJoin","vidx","indexArray","maybeUnion","maybeJoin","vindexFast","isNonterminalStub","isValidProd","parseInvalidWithMaximalFragments","parseWithStubs","solveFixedpoint","utMatrix","initialUTMatrix","origCFG","bmp","unitReach","makeForestAlgebra","treeJoin","lt","rt","isValid","checkUnitWord","initialUTBMatrix","allNTs","pad3","isNonterminalStubInNTs","nts","containsHole","bitwiseAlgebra$delegate$lambda","bitwiseAlgebra$delegate$lambda$lambda","$this$of","x","y","bitwiseAlgebra$delegate$lambda$lambda$lambda","satLitAlgebra$delegate$lambda","satLitAlgebra$delegate$lambda$lambda","satLitAlgebra$delegate$lambda$lambda$lambda","freshNames$lambda","parseInvalidWithMaximalFragments$lambda","parseWithStubs$lambda","initialUTMatrix$lambda","makeForestAlgebra$lambda","makeForestAlgebra$lambda$lambda","bitwiseAlgebra$factory","<init properties SetValiant.kt>","<set-TIMEOUT_MS>","<set-?>","<get-blocked>","tokenizeByWhitespace","tokenizeByWhitespaceAndKeepDelimiters","blocked$delegate$lambda","impossibleBigrams$delegate$lambda","possibleBigrams$delegate$lambda","startSymbols$delegate$lambda","blocked$factory","<init properties SyntaxRepair.kt>","denormalize$removeSynthetic","refactoredChildren","isSynthetic","denormalize$removeSynthetic$default","Tree$hash$delegate$lambda","Tree$hash$delegate$lambda$lambda","Tree$indxInfo$delegate$lambda","Tree$indxInfo$delegate$lambda$lambda","Tree$spanInfo$delegate$lambda","Tree$spanInfo$delegate$lambda$lambda","Tree$denormalize$removeSynthetic$lambda","Tree$denormalize$removeSynthetic$lambda$lambda","root","terminal","children","span","<get-hash>","denormalize","contents","removeEpsilon","contents$default","hash$factory","<get-lecuyerGenerator>","randomString","length","alphabet","choose","findAll","base","dimension","dimensions","cardinalities","asList","all","randomVector","size","rand","choose$lambda$lambda","choose$lambda","findAll$lambda","$asList","findAll$lambda$lambda","all$lambda","$i","$l","all$lambda$lambda","randomVector$lambda","<init properties Samplers.kt>","<get-idxs>","<get-rows>","<get-cols>","<get-transpose>","<get-BOOLEAN_ALGEBRA>","<get-DOUBLE_FIELD>","DoubleMatrix_init_$Init$","numRows","numCols","f","DoubleMatrix_init_$Create$","algebra","<get-numRows>","<get-numCols>","<get-data>","<get-algebra>","new","Matrix$plus$lambda","$t","Matrix$plus$lambda$lambda","$this$safeJoin","flip","UTMatrix_init_$Init$","ts","UTMatrix_init_$Create$","UTMatrix$data$delegate$lambda","UTMatrix$data$delegate$lambda$lambda","UTMatrix$toFullMatrix$lambda","UTMatrix$toFullMatrix$lambda$lambda","diagonals","seekFixpoint","carry","iteration","maxIterations","seekFixpoint$default","toFullMatrix","FreeMatrix_init_$Init$","FreeMatrix_init_$Create$","FreeMatrix$toString$lambda","FreeMatrix$toString$lambda$lambda","AbstractMatrix$values$delegate$lambda","AbstractMatrix$values$delegate$lambda$lambda","AbstractMatrix$map$delegate$lambda","AbstractMatrix$map$delegate$lambda$lambda","AbstractMatrix$toString$lambda","AbstractMatrix$toString$lambda$lambda","AbstractMatrix$hash$delegate$lambda","AbstractMatrix$hash$delegate$lambda$lambda","times","toUTMatrix","TODO_ALGEBRA","BooleanMatrix$Companion$one$lambda","BooleanMatrix_init_$Init$","BooleanMatrix_init_$Create$","one","BooleanMatrix$isFull$delegate$lambda","BooleanMatrix$isFull$delegate$lambda$lambda","BooleanMatrix$toString$lambda","BooleanMatrix$toString$lambda$lambda","mat","idxs$delegate$lambda","rows$delegate$lambda","cols$delegate$lambda","transpose$delegate$lambda","BOOLEAN_ALGEBRA$lambda","XOR_ALGEBRA$lambda","INTEGER_FIELD$lambda","DOUBLE_FIELD$lambda","MINPLUS_ALGEBRA$lambda","MAXPLUS_ALGEBRA$lambda","GF2_ALGEBRA$lambda","TODO_ALGEBRA$lambda","idxs$factory","rows$factory","cols$factory","transpose$factory","data$factory","<init properties Tensor.kt>","wl","updates","wl$lambda","wl$lambda$lambda","$updates","of_init_$Init$","es","of_init_$Create$","<get-l>","VT","v1","v2","v3","to","powerset","allPairs","cc","Π","π1","π2","π3","<get-π1>","<get-π2>","<get-second>","<get-first>","isStrictSubsetOf","ir","to$ref","to$ref$lambda","times$lambda","$other","times$lambda$lambda","invoke","$this$sequence","$completion","doResume","powerset$slambda","powerset$slambda$lambda","<get-S1>","<get-S2>","<get-S3>","<get-S4>","<get-S5>","<get-S6>","<get-S7>","<get-S8>","<init properties Church.kt>","<get-D>","<get-A>","<get-ASYMNORM>","<get-I>","<get-edges>","<get-edgList>","<get-adjList>","<get-edgMap>","<get-histogram>","<get-cache>","<get-graph>","<get-outgoing>","<get-neighbors>","Vertex$hash$delegate$lambda","Vertex$hash$delegate$lambda$lambda","IGF$G$lambda","cache","caller","fn","IGraph$join$lambda","$left","$right","IGraph$join$lambda$lambda","IGraph$reversed$lambda","IGraph$reversed$lambda$lambda","IGraph$vwise$lambda","$lf","IGraph$vwise$lambda$lambda","n","<get-outdegree>","<get-deepHashCode>","getCaller","getValue","thisRef","property","D$delegate$lambda","D$delegate$lambda$lambda","D$delegate$lambda$lambda$lambda","A$delegate$lambda","A$delegate$lambda$lambda","A$delegate$lambda$lambda$lambda","A_AUG$delegate$lambda","ASYMNORM$delegate$lambda","ASYMNORM$delegate$lambda$lambda","$this$vwise","L$delegate$lambda","I$delegate$lambda","kroneckerDelta$ref","kroneckerDelta$ref$lambda","LSYMNORM$delegate$lambda","ENCODED$delegate$lambda","APSP$delegate$lambda","dist","u","done","newDist","degMap$delegate$lambda","edges$delegate$lambda","edgList$delegate$lambda","adjList$delegate$lambda","edgMap$delegate$lambda","histogram$delegate$lambda","graph$delegate$lambda","incoming$delegate$lambda","outgoing$delegate$lambda","neighbors$delegate$lambda","cache$lambda$lambda","$fn","$y","cache$lambda$lambda$lambda","cache$lambda","$caller","csg","D$factory","A$factory","ASYMNORM$factory","I$factory","edges$factory","edgList$factory","adjList$factory","edgMap$factory","histogram$factory","graph$factory","outgoing$factory","neighbors$factory","<init properties Graph.kt>","nil","div","<get-nil>","imul","O","start","relativeStart","end","relativeEnd","finalValue","TypedArray","epsilon","taylor_2_bound","taylor_n_bound","log","LN2","asUint","searchString","position","containsAllEntries","m","entry","releaseInterceptedContinuation","continuation","toList","toSet","joinToString","separator","prefix","postfix","limit","truncated","transform","toDoubleArray","toMutableList","toCollection","destination","joinTo","buffer","count","<get-lastIndex>","single","asSequence","indexOf","toIntArray","first","chunked","takeLast","resultSize","dropLast","firstOrNull","zip","second","last","toMutableSet","take","windowed","step","partialWindows","thisSize","resultCapacity","windowSize","removed","sorted","random","sortedWith","comparator","toBooleanArray","getOrNull","elementAt","elementAtOrElse","defaultValue","shuffle","elementAt$lambda","$index","elementAt$lambda$lambda","until","downTo","coerceAtLeast","minimumValue","coerceAtMost","maximumValue","coerceIn","dst","distinct","distinctBy","selector","filter","predicate","flatMap","asIterable","distinct$lambda","Sequence$iterator$ref","Sequence$iterator$ref$lambda","<Char__<init>-impl>","<get-value>","code","Char__compareTo-impl","Char__rangeTo-impl","Char__toInt-impl","Char__toString-impl","Char__equals-impl","Char__hashCode-impl","compareTo","name","ordinal","low","high","unaryMinus","inv","toInt","toDouble","valueOf","implement","interfaces","masks","currentSize","imask","iid","iidImask","bitMaskWith","activeBit","numberIndex","intArray","positionInNumber","numberWithSettledBit","compositeBitMask","mask","isBitSet","possibleActiveBit","fillArrayVal","array","initValue","arrayIterator","booleanArray","charArray","booleanArrayOf","arr","charArrayOf","$array","hasNext","next","<get-buf>","<get-bufFloat64>","<get-bufInt32>","<get-lowIndex>","<get-highIndex>","getNumberHashCode","obj","<init properties bitUtils.kt>","charSequenceGet","isString","charSequenceLength","charSequenceSubSequence","startIndex","endIndex","contentEqualsInternal","arrayToString","arrayToString$lambda","doubleCompareTo","ia","primitiveCompareTo","compareToDoNotIntrinsicify","identityHashCode","getObjectHashCode","hash","descriptor","calculateRandomHash","obj1","obj2","typeOf","o","getBooleanHashCode","getStringHashCode","getBigIntHashCode","shiftNumber","MASK","bigNumber","signum","chunk","getSymbolHashCode","hashCodeMap","cachedHashCode","anyToString","symbolIsSharable","getSymbolMap","getSymbolWeakMap","boxIntrinsic","unboxIntrinsic","captureStack","instance","constructorFunction","protoOf","constructor","defineProp","getter","setter","objectCreate","proto","newThrowable","cause","throwable","isUndefined","extendThrowable","this_","setPropertiesToThrowableInstance","errorInfo","ensureNotNull","THROW_NPE","THROW_CCE","<get-ZERO>","<get-ONE>","<get-NEG_ONE>","<get-MAX_VALUE>","<get-MIN_VALUE>","<get-TWO_PWR_24_>","thisNeg","otherNeg","add","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","multiply","divide","halfThis","approx","rem","res","approxDouble","approx2","log2","delta","approxRes","approxRem","shiftLeft","numBits","shiftRight","toNumber","toStringImpl","radix","radixLong","digitsPerTime","radixToPower","remDiv","intval","digits","equalsLong","fromInt","isNegative","isZero","isOdd","negate","lessThan","fromNumber","twoPwr32","greaterThan","greaterThanOrEqual","getLowBitsUnsigned","<init properties longJs.kt>","createMetadata","kind","defaultConstructor","associatedObjectKey","associatedObjects","suspendArity","undef","generateInterfaceId","initMetadataFor","ctor","metadata","initMetadataForClass","initMetadataForObject","initMetadataForInterface","initMetadataForLambda","initMetadataForCoroutine","initMetadataForFunctionReference","initMetadataForCompanion","classMeta","numberToInt","doubleToInt","toShort","numberToChar","toLong","numberRangeToNumber","endInclusive","<get-propertyRefClassMetadataCache>","metadataObject","getPropertyCallableRef","paramCount","superType","getPropertyRefClass","getKPropMetadata","getInterfaceMaskFor","<init properties reflectRuntime.kt>","isArrayish","isJsArray","isInterface","iface","isInterfaceImpl","isArray","isNumber","isComparable","type","isCharSequence","isBooleanArray","isByteArray","isShortArray","isCharArray","isIntArray","isFloatArray","isLongArray","isDoubleArray","jsIsType","jsClass","objType","jsClassType","klassMetadata","jsGetPrototypeOf","calculateErrorInfo","parentProto","hasProp","propName","getPrototypeOf","<get-VOID>","<init properties void.kt>","fill","contentEquals","copyOf","newSize","sort","sortWith","isWhitespaceImpl","ch","isNaN","takeHighestOneBit","collectionToArray","collection","terminateCollectionToArray","collectionSize","listOf","setOf","shuffled","mapCapacity","expectedSize","mapOf","pair","checkIndexOverflow","copyToArray","collectionsSort","AbstractMutableCollection$removeAll$lambda","$elements","AbstractMutableCollection$removeAll$lambda$lambda","AbstractMutableCollection$retainAll$lambda","AbstractMutableCollection$retainAll$lambda$lambda","remove","addAll","modified","removeAll","retainAll","toJSON","checkIsMutable","hasPrevious","previous","removeAt","AbstractMutableList$retainAll$lambda","AbstractMutableList$retainAll$lambda$lambda","createValuesView","<get-values>","arrayOfUninitializedElements","resetAt","resetRange","copyOfUninitializedElements","ArrayList_init_$Init$","ArrayList_init_$Create$","initialCapacity","increaseLength","amount","rangeCheck","insertionRangeCheck","offset","clear","toArray","sortArray","comparison","sortArrayWith","getStableSortingIsSupported","mergeSort","median","leftIndex","rightIndex","leftValue","rightValue","sortArray$lambda","sortArrayWith$lambda","$comparator","sortArrayWith$lambda$lambda","getStableSortingIsSupported$lambda","HashMap_init_$Init$","internalMap","HashMap_init_$Create$","loadFactor","original","containsKey","containsValue","<get-entries>","putAll","backing","$entryIterator","backingMap","entryIterator","HashSet_init_$Init$","HashSet_init_$Create$","computeHashSize","computeShift","hashSize","InternalHashMap_init_$Init$","InternalHashMap_init_$Create$","<get-capacity>","<get-hashSize>","registerModification","ensureExtraCapacity","shouldCompact","extraCapacity","spareCapacity","gaps","ensureCapacity","minCapacity","newHashSize","allocateValuesArray","curValuesArray","newValuesArray","compact","valuesArray","rehash","putRehash","probesLeft","findKey","findValue","addKey","tentativeMaxProbeDistance","probeDistance","putIndex","removeKey","removeKeyAt","removeHashAt","removedHash","hole","patchAttemptsLeft","otherHash","putEntry","oldValue","putAllEntries","updated","initNext","checkForComodification","nextHashCode","nextAppendString","<get-key>","keysArray","presenceArray","hashArray","maxProbeDistance","containsEntry","containsOtherEntry","removeEntry","keysIterator","valuesIterator","entriesIterator","LinkedHashMap_init_$Init$","LinkedHashMap_init_$Create$","LinkedHashSet_init_$Init$","LinkedHashSet_init_$Create$","<get-output>","println","outputStream","print","messageString","flush","<init properties console.kt>","isNode","releaseIntercepted","intercepted","resultContinuation","<get-context>","resumeWith","current","currentResult","currentException","outcome","exception","completion","createCoroutineUnintercepted","invokeSuspendSuperTypeWithReceiver","$receiver","$completion$1","Exception_init_$Init$","Exception_init_$Create$","IllegalArgumentException_init_$Init$","IllegalArgumentException_init_$Create$","IndexOutOfBoundsException_init_$Init$","IndexOutOfBoundsException_init_$Create$","IllegalStateException_init_$Init$","IllegalStateException_init_$Create$","UnsupportedOperationException_init_$Init$","UnsupportedOperationException_init_$Create$","RuntimeException_init_$Init$","RuntimeException_init_$Create$","NoSuchElementException_init_$Init$","NoSuchElementException_init_$Create$","Error_init_$Init$","Error_init_$Create$","ClassCastException_init_$Init$","ClassCastException_init_$Create$","ArithmeticException_init_$Init$","ArithmeticException_init_$Create$","ConcurrentModificationException_init_$Init$","ConcurrentModificationException_init_$Create$","NullPointerException_init_$Init$","NullPointerException_init_$Create$","lazy","initializer","fillFrom","src","srcLen","dstLen","arrayCopyResize","<get-INV_2_26>","<get-INV_2_53>","doubleFromParts","hi26","low27","defaultPlatformRandom","<init properties PlatformRandom.kt>","jClass","<get-jClass>","<get-simpleName>","isInstance","givenSimpleName","isInstanceFunction","<get-functionClasses>","PrimitiveClasses$anyClass$lambda","PrimitiveClasses$numberClass$lambda","PrimitiveClasses$booleanClass$lambda","PrimitiveClasses$byteClass$lambda","PrimitiveClasses$shortClass$lambda","PrimitiveClasses$intClass$lambda","PrimitiveClasses$floatClass$lambda","PrimitiveClasses$doubleClass$lambda","PrimitiveClasses$arrayClass$lambda","PrimitiveClasses$stringClass$lambda","PrimitiveClasses$throwableClass$lambda","PrimitiveClasses$booleanArrayClass$lambda","PrimitiveClasses$charArrayClass$lambda","PrimitiveClasses$byteArrayClass$lambda","PrimitiveClasses$shortArrayClass$lambda","PrimitiveClasses$intArrayClass$lambda","PrimitiveClasses$longArrayClass$lambda","PrimitiveClasses$floatArrayClass$lambda","PrimitiveClasses$doubleArrayClass$lambda","PrimitiveClasses$functionClass$lambda","$arity","PrimitiveClasses$functionClass$lambda$lambda","<get-anyClass>","<get-numberClass>","<get-nothingClass>","<get-booleanClass>","<get-byteClass>","<get-shortClass>","<get-intClass>","<get-floatClass>","<get-doubleClass>","<get-arrayClass>","<get-stringClass>","<get-throwableClass>","<get-booleanArrayClass>","<get-charArrayClass>","<get-byteArrayClass>","<get-shortArrayClass>","<get-intArrayClass>","<get-longArrayClass>","<get-floatArrayClass>","<get-doubleArrayClass>","functionClass","arity","<init properties primitives.kt>","getKClass","getKClassM","jClasses","getKClass1","kClass","getKClassFromExpression","reset","StringBuilder_init_$Init$","StringBuilder_init_$Create$","content","<get-length>","subSequence","append","uppercaseChar","uppercase","isWhitespace","Regex_init_$Init$","pattern","Regex_init_$Create$","escape","literal","nativeEscapeReplacement","Regex$findAll$lambda","$input","$startIndex","Regex$findAll$lambda$lambda","match","options","matches","input","find","findAll$default","split","lastStart","toFlags","prepend","findNext","nextPattern","toFlags$lambda","findNext$o$groups$o$iterator$lambda","findNext$o$groups$o$iterator$lambda$lambda","advanceToNextCharacter","code1","code2","$match","$range","$nextPattern","<get-range>","ignoreCase","n1","n2","thisChar","otherChar","toCharArray","STRING_CASE_INSENSITIVE_ORDER$lambda","<init properties stringJs.kt>","replace","newValue","replaceFirst","isBlank","regionMatches","thisOffset","otherOffset","startsWith","stackTraceToString","hasSeen","dumpFullTrace","indent","qualifier","dumpSelfTrace","shortInfo","stack","stackStart","messageLines","suppressed","suppressedIndent","dropCommonFrames","commonFrames","lastBreak","preLastBreak","pos","buildFor","<get-suppressedExceptions>","AbstractCollection$toString$lambda","AbstractCollection$toString$lambda$lambda","tryToComputeNext","setNext","checkElementIndex","checkPositionIndex","checkRangeIndexes","newCapacity","oldCapacity","orderedHashCode","orderedEquals","otherIterator","elem","elemOther","implFindEntry","AbstractMap$toString$lambda","AbstractMap$toString$lambda$lambda","ourValue","unorderedHashCode","setEquals","collectionToArrayCommonImpl","emptyList","<get-indices>","asCollection","optimizeReadOnlyList","arrayListOf","throwIndexOverflow","values","isVarargs","flatten","collectionSizeOrDefault","default","collectionSizeOrNull","emptyMap","pairs","toMutableMap","toMap","optimizeReadOnlyMap","hashMapOf","convertToListIfNotCollection","filterInPlace","predicateResultToRemove","writeIndex","readIndex","removeIndex","asReversed","delegate","reverseElementIndex","reversePositionIndex","sequence","block","yieldAll","nextNotReady","exceptionalState","yield","$block","sequenceOf","generateSequence","seedFunction","nextFunction","transformer","keySelector","calcNext","sendWhen","ensureItemIterator","itemIterator","nextItemIterator","emptySequence","getInitialValue","getNextValue","computeNext","flatten$lambda","emptySet","mutableSetOf","optimizeReadOnlySet","hashSetOf","checkWindowSizeStep","windowedIterator","reuseBuffer","RingBuffer_init_$Init$","RingBuffer_init_$Create$","filledSize","isFull","widx","idx","expanded","maxCapacity","newBuffer","removeFirst","$size","$step","$iterator","$reuseBuffer","$partialWindows","$this$iterator","windowedIterator$slambda","windowedIterator$slambda$lambda","compareBy","selectors","naturalOrder","compareValuesByImpl","diff","compareValues","compareBy$lambda","$selectors","compareBy$lambda$lambda","<get-COROUTINE_SUSPENDED>","getProgressionLastElement","differenceModulo","mod","nextBits","bitCount","nextInt","nextDouble","bits","rnd","Random","seed","checkRangeBounds","fastLog2","boundsErrorMessage","takeUpperBits","XorWowRandom_init_$Init$","seed1","seed2","XorWowRandom_init_$Create$","z","w","addend","v0","<get-start>","<get-endInclusive>","nextChar","fromClosedRange","rangeStart","rangeEnd","appendElement","thisUpper","otherUpper","delimiters","delimiter","substring","padEnd","padChar","substringBefore","missingDelimiterValue","padStart","substringAfter","string","currentOffset","nextIndex","isLimited","rangesDelimitedBy","delimitersList","indices","lineSequence","trim","startFound","indexOfAny","chars","char","charAtIndex","requireNonNegativeLimit","getNextMatch","findAnyOf","strings","matchingString","regionMatchesImpl","splitToSequence","lastIndexOf","rangesDelimitedBy$lambda","$delimiters","$ignoreCase","rangesDelimitedBy$lambda$lambda","$this$$receiver","currentIndex","$delimitersList","splitToSequence$lambda","splitToSequence$lambda$lambda","isInitialized","<Result__<init>-impl>","<Result__<get-value>-impl>","<Result__<get-isFailure>-impl>","Result__exceptionOrNull-impl","createFailure","throwOnFailure","component1","component2","third","component3","<UShort__<init>-impl>","<UShort__<get-data>-impl>","<get-enginesStore>","enginesProvider","<init properties Engine.kt>","<get-initializer>"],"sourceRoot":""}