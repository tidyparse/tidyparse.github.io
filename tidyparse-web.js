(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["tidyparse-web"] = factory();
	else
		root["tidyparse-web"] = factory();
})(globalThis, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./kotlin/KotlinBigInteger-bignum.js":
/*!*******************************************!*\
  !*** ./kotlin/KotlinBigInteger-bignum.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var log10 = Math.log10;
  var protoOf = kotlin_kotlin.$_$.a7;
  var VOID = kotlin_kotlin.$_$.c;
  var initMetadataForInterface = kotlin_kotlin.$_$.l6;
  var Unit_instance = kotlin_kotlin.$_$.j2;
  var Enum = kotlin_kotlin.$_$.q9;
  var initMetadataForClass = kotlin_kotlin.$_$.j6;
  var toLong = kotlin_kotlin.$_$.b7;
  var RuntimeException_init_$Create$ = kotlin_kotlin.$_$.t;
  var Pair = kotlin_kotlin.$_$.u9;
  var Long = kotlin_kotlin.$_$.s9;
  var noWhenBranchMatchedException = kotlin_kotlin.$_$.fa;
  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.n;
  var ensureNotNull = kotlin_kotlin.$_$.da;
  var get_lastIndex = kotlin_kotlin.$_$.o8;
  var charSequenceGet = kotlin_kotlin.$_$.z5;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.z;
  var contains = kotlin_kotlin.$_$.h8;
  var charSequenceLength = kotlin_kotlin.$_$.a6;
  var charArrayOf = kotlin_kotlin.$_$.y5;
  var split = kotlin_kotlin.$_$.y8;
  var listOf = kotlin_kotlin.$_$.w3;
  var toLong_0 = kotlin_kotlin.$_$.h9;
  var numberToLong = kotlin_kotlin.$_$.y6;
  var initMetadataForCompanion = kotlin_kotlin.$_$.k6;
  var Triple = kotlin_kotlin.$_$.w9;
  var numberToDouble = kotlin_kotlin.$_$.w6;
  var until = kotlin_kotlin.$_$.n7;
  var substring = kotlin_kotlin.$_$.e9;
  var THROW_CCE = kotlin_kotlin.$_$.v9;
  var abs = kotlin_kotlin.$_$.e7;
  var isNumber = kotlin_kotlin.$_$.q6;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var abs_0 = kotlin_kotlin.$_$.d7;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.m;
  var Comparable = kotlin_kotlin.$_$.o9;
  var getKClass = kotlin_kotlin.$_$.b;
  var toString = kotlin_kotlin.$_$.c7;
  var compareTo = kotlin_kotlin.$_$.b6;
  var PrimitiveClasses_getInstance = kotlin_kotlin.$_$.h2;
  var objectCreate = kotlin_kotlin.$_$.z6;
  var NumberFormatException_init_$Create$ = kotlin_kotlin.$_$.s;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.p;
  var _ULongArray___get_size__impl__ju6dtr = kotlin_kotlin.$_$.c2;
  var equals = kotlin_kotlin.$_$.c6;
  var ULongArray = kotlin_kotlin.$_$.aa;
  var UByte = kotlin_kotlin.$_$.x9;
  var UShort = kotlin_kotlin.$_$.ca;
  var UInt = kotlin_kotlin.$_$.z9;
  var ULong = kotlin_kotlin.$_$.ba;
  var ULongArray__iterator_impl_cq4d2h = kotlin_kotlin.$_$.a2;
  var ULong__hashCode_impl_6hv2lb = kotlin_kotlin.$_$.u1;
  var ULongArray__get_impl_pr71q9 = kotlin_kotlin.$_$.x1;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.t1;
  var toString_0 = kotlin_kotlin.$_$.ha;
  var hashCode = kotlin_kotlin.$_$.i6;
  var UIntArray__toString_impl_3zy802 = kotlin_kotlin.$_$.r1;
  var UIntArray__hashCode_impl_hr7ost = kotlin_kotlin.$_$.l1;
  var getBooleanHashCode = kotlin_kotlin.$_$.e6;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.s1;
  var _UInt___init__impl__l7qpdl = kotlin_kotlin.$_$.g1;
  var _UIntArray___init__impl__ghjpc6 = kotlin_kotlin.$_$.i1;
  var _UInt___get_data__impl__f0vqqw = kotlin_kotlin.$_$.h1;
  var _UIntArray___init__impl__ghjpc6_0 = kotlin_kotlin.$_$.j1;
  var UIntArray__isEmpty_impl_vd8j4n = kotlin_kotlin.$_$.m1;
  var _UIntArray___get_size__impl__r6l8ci = kotlin_kotlin.$_$.p1;
  var UIntArray__get_impl_gp5kza = kotlin_kotlin.$_$.k1;
  var _UIntArray___get_storage__impl__92a0v0 = kotlin_kotlin.$_$.q1;
  var copyOfRange = kotlin_kotlin.$_$.z2;
  var UIntArray = kotlin_kotlin.$_$.y9;
  var uintCompare = kotlin_kotlin.$_$.ja;
  var UIntArray__set_impl_7f2zu2 = kotlin_kotlin.$_$.o1;
  var println = kotlin_kotlin.$_$.u5;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.g;
  var UIntArray__iterator_impl_tkdv7k = kotlin_kotlin.$_$.n1;
  var uintDivide = kotlin_kotlin.$_$.ka;
  var uintRemainder = kotlin_kotlin.$_$.la;
  var ulongDivide = kotlin_kotlin.$_$.na;
  var ulongCompare = kotlin_kotlin.$_$.ma;
  var initMetadataForObject = kotlin_kotlin.$_$.n6;
  var ULongArray__toString_impl_wqk1p5 = kotlin_kotlin.$_$.e2;
  var ULongArray__hashCode_impl_aze4wa = kotlin_kotlin.$_$.y1;
  var longArrayOf = kotlin_kotlin.$_$.r6;
  var _ULongArray___init__impl__twm1l3 = kotlin_kotlin.$_$.w1;
  var _ULongArray___get_storage__impl__28e64j = kotlin_kotlin.$_$.d2;
  var copyOfRange_0 = kotlin_kotlin.$_$.a3;
  var ULongArray__isEmpty_impl_c3yngu = kotlin_kotlin.$_$.z1;
  var longArray = kotlin_kotlin.$_$.s6;
  var arrayCopy = kotlin_kotlin.$_$.q2;
  var ULongArray__set_impl_z19mvh = kotlin_kotlin.$_$.b2;
  var plus = kotlin_kotlin.$_$.j4;
  var toULongArray = kotlin_kotlin.$_$.k5;
  var slice = kotlin_kotlin.$_$.s4;
  var _ULongArray___init__impl__twm1l3_0 = kotlin_kotlin.$_$.v1;
  var ulongRemainder = kotlin_kotlin.$_$.oa;
  var copyOf = kotlin_kotlin.$_$.b3;
  var toString_1 = kotlin_kotlin.$_$.k9;
  var isCharSequence = kotlin_kotlin.$_$.o6;
  var reversed = kotlin_kotlin.$_$.x8;
  var _UShort___get_data__impl__g0245 = kotlin_kotlin.$_$.f2;
  var _UByte___get_data__impl__jof9qr = kotlin_kotlin.$_$.f1;
  var toString_2 = kotlin_kotlin.$_$.e1;
  var Char__minus_impl_a2frrh = kotlin_kotlin.$_$.a1;
  var Char__minus_impl_a2frrh_0 = kotlin_kotlin.$_$.b1;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.d1;
  //endregion
  //region block: pre-declaration
  function parseString$default(string, base, $super) {
    base = base === VOID ? 10 : base;
    return $super === VOID ? this.nn(string, base) : $super.nn.call(this, string, base);
  }
  function tryFromFloat$default(float, exactRequired, $super) {
    exactRequired = exactRequired === VOID ? false : exactRequired;
    return $super === VOID ? this.qn(float, exactRequired) : $super.qn.call(this, float, exactRequired);
  }
  function tryFromDouble$default(double, exactRequired, $super) {
    exactRequired = exactRequired === VOID ? false : exactRequired;
    return $super === VOID ? this.sn(double, exactRequired) : $super.sn.call(this, double, exactRequired);
  }
  initMetadataForInterface(Creator, 'Creator');
  function get_isNegative() {
    return this.zn() < 0;
  }
  initMetadataForInterface(BigNumber, 'BigNumber');
  function plus_0(other) {
    return this.co().un(other);
  }
  function minus(other) {
    return this.co().vn(other);
  }
  function times(other) {
    return this.co().wn(other);
  }
  function div(other) {
    return this.co().xn(other);
  }
  function plus_1(int) {
    return this.co().un(this.bo().pn(int));
  }
  function times_0(int) {
    return this.co().wn(this.bo().pn(int));
  }
  function minus_0(int) {
    return this.co().vn(this.bo().pn(int));
  }
  function div_0(int) {
    return this.co().xn(this.bo().pn(int));
  }
  function rem(int) {
    return this.co().yn(this.bo().pn(int));
  }
  initMetadataForInterface(CommonBigNumberOperations, 'CommonBigNumberOperations');
  initMetadataForClass(SignificantDecider, 'SignificantDecider', VOID, Enum);
  initMetadataForCompanion(Companion, VOID, [Creator]);
  initMetadataForClass(ScaleOps, 'ScaleOps', VOID, Enum);
  initMetadataForClass(BigDecimal, 'BigDecimal', VOID, VOID, [BigNumber, CommonBigNumberOperations, Comparable]);
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(DecimalMode, 'DecimalMode', DecimalMode);
  initMetadataForClass(RoundingMode, 'RoundingMode', VOID, Enum);
  initMetadataForCompanion(Companion_1, VOID, [Creator]);
  initMetadataForClass(QuotientAndRemainder, 'QuotientAndRemainder');
  initMetadataForClass(BigInteger, 'BigInteger', VOID, VOID, [BigNumber, CommonBigNumberOperations, Comparable]);
  initMetadataForClass(Sign, 'Sign', VOID, Enum);
  initMetadataForClass(Platform, 'Platform', VOID, Enum);
  initMetadataForClass(Sextuple, 'Sextuple');
  initMetadataForClass(Quadruple, 'Quadruple');
  initMetadataForClass(SignedUIntArray, 'SignedUIntArray');
  initMetadataForObject(BigInteger32Arithmetic, 'BigInteger32Arithmetic');
  initMetadataForClass(SignedULongArray, 'SignedULongArray');
  initMetadataForObject(BigInteger63Arithmetic, 'BigInteger63Arithmetic');
  initMetadataForObject(RuntimePlatform, 'RuntimePlatform');
  //endregion
  function Creator() {
  }
  function BigNumber() {
  }
  function CommonBigNumberOperations() {
  }
  var SignificantDecider_FIVE_instance;
  var SignificantDecider_LESS_THAN_FIVE_instance;
  var SignificantDecider_MORE_THAN_FIVE_instance;
  var SignificantDecider_entriesInitialized;
  function SignificantDecider_initEntries() {
    if (SignificantDecider_entriesInitialized)
      return Unit_instance;
    SignificantDecider_entriesInitialized = true;
    SignificantDecider_FIVE_instance = new SignificantDecider('FIVE', 0);
    SignificantDecider_LESS_THAN_FIVE_instance = new SignificantDecider('LESS_THAN_FIVE', 1);
    SignificantDecider_MORE_THAN_FIVE_instance = new SignificantDecider('MORE_THAN_FIVE', 2);
  }
  function roundOrDont($this, significand, exponent, decimalMode) {
    var tmp;
    if (decimalMode.po_1) {
      tmp = new BigDecimal(significand, exponent);
    } else {
      tmp = roundSignificand($this, significand, exponent, decimalMode);
    }
    return tmp;
  }
  function SignificantDecider(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function determineDecider($this, discarded) {
    var tmp = Companion_getInstance_1().vo_1;
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = discarded.bp().x2(toLong(1));
    var scale = tmp.cp(tmp$ret$0);
    var divrem = discarded.dp(scale);
    var significant = divrem.ep_1.gp().hp(true);
    var rest = divrem.fp_1.gp();
    var tmp_0;
    if (significant === 5) {
      var tmp_1;
      if (rest.equals(Companion_getInstance_1().so_1)) {
        tmp_1 = SignificantDecider_FIVE_getInstance();
      } else {
        tmp_1 = SignificantDecider_MORE_THAN_FIVE_getInstance();
      }
      tmp_0 = tmp_1;
    } else if (significant > 5) {
      tmp_0 = SignificantDecider_MORE_THAN_FIVE_getInstance();
    } else if (significant < 5) {
      tmp_0 = SignificantDecider_LESS_THAN_FIVE_getInstance();
    } else {
      throw RuntimeException_init_$Create$("Couldn't determine decider");
    }
    return tmp_0;
  }
  function roundDiscarded($this, significand, discarded, decimalMode) {
    var toDiscard = significand.bp().x2(decimalMode.mo_1);
    var tmp;
    if (toDiscard.d1(new Long(0, 0)) > 0) {
      var additionallyDiscarded = significand.dp(Companion_getInstance_1().vo_1.cp(toDiscard));
      tmp = new Pair(additionallyDiscarded.ep_1, additionallyDiscarded.fp_1);
    } else {
      tmp = new Pair(significand, discarded);
    }
    var _destruct__k2r9zo = tmp;
    var result = _destruct__k2r9zo.ye();
    var remainder = _destruct__k2r9zo.ze();
    var tmp_0;
    if (significand.equals(Companion_getInstance_1().so_1)) {
      tmp_0 = discarded.yo_1;
    } else {
      tmp_0 = significand.yo_1;
    }
    var sign = tmp_0;
    if (!decimalMode.no_1.equals(RoundingMode_AWAY_FROM_ZERO_getInstance()) && !decimalMode.no_1.equals(RoundingMode_TOWARDS_ZERO_getInstance())) {
      if (remainder.ip()) {
        return result;
      }
    } else {
      if (remainder.ip() && discarded.ip()) {
        return result;
      }
    }
    var decider = determineDecider($this, remainder);
    switch (decimalMode.no_1.q2_1) {
      case 2:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
          result = result.b3();
        } else {
          result = result.c3();
        }

        break;
      case 3:
        break;
      case 1:
        if (sign.equals(Sign_POSITIVE_getInstance())) {
          result = result.b3();
        }

        break;
      case 0:
        if (!sign.equals(Sign_POSITIVE_getInstance())) {
          result = result.c3();
        }

        break;
      case 5:
        switch (sign.q2_1) {
          case 0:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.b3();
            }

            break;
          case 1:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.c3();
            }

            break;
          case 2:
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }

        break;
      case 6:
        switch (sign.q2_1) {
          case 0:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.b3();
            }

            break;
          case 1:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.c3();
            }

            break;
          case 2:
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }

        break;
      case 7:
        switch (sign.q2_1) {
          case 0:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.b3();
            }

            break;
          case 1:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.c3();
            }

            break;
          case 2:
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }

        break;
      case 8:
        switch (sign.q2_1) {
          case 0:
            if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
              result = result.b3();
            }

            break;
          case 1:
            if (!decider.equals(SignificantDecider_LESS_THAN_FIVE_getInstance())) {
              result = result.c3();
            }

            break;
          case 2:
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }

        break;
      case 9:
        if (decider.equals(SignificantDecider_FIVE_getInstance())) {
          if (significand.lo(2).gp().equals(Companion_getInstance_1().to_1)) {
            switch (sign.q2_1) {
              case 0:
                result = result.b3();
                break;
              case 1:
                result = result.c3();
                break;
              case 2:
                break;
              default:
                noWhenBranchMatchedException();
                break;
            }
          }
        } else if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
          if (sign.equals(Sign_POSITIVE_getInstance())) {
            result = result.b3();
          }
          if (sign.equals(Sign_NEGATIVE_getInstance())) {
            result = result.c3();
          }
        }

        break;
      case 10:
        if (decider.equals(SignificantDecider_FIVE_getInstance())) {
          if (significand.lo(2).equals(Companion_getInstance_1().so_1)) {
            switch (sign.q2_1) {
              case 0:
                result = result.b3();
                break;
              case 1:
                result = result.c3();
                break;
              case 2:
                break;
              default:
                noWhenBranchMatchedException();
                break;
            }
          }
        } else if (decider.equals(SignificantDecider_MORE_THAN_FIVE_getInstance())) {
          if (sign.equals(Sign_POSITIVE_getInstance())) {
            result = result.b3();
          }
          if (sign.equals(Sign_NEGATIVE_getInstance())) {
            result = result.c3();
          }
        }

        break;
      case 4:
        throw ArithmeticException_init_$Create$('Non-terminating result of division operation. Specify decimalPrecision');
      default:
        noWhenBranchMatchedException();
        break;
    }
    return result;
  }
  function roundSignificand($this, significand, exponent, decimalMode) {
    if (significand.ip()) {
      return new BigDecimal(Companion_getInstance_1().so_1, exponent, decimalMode);
    }
    var significandDigits = significand.bp();
    var tmp;
    if (decimalMode.qo_1) {
      tmp = decimalMode.mo_1.w2(decimalMode.oo_1);
    } else {
      tmp = decimalMode.mo_1;
    }
    var desiredPrecision = tmp;
    var tmp_0;
    if (desiredPrecision.d1(significandDigits) > 0 && !decimalMode.qo_1) {
      var extendedSignificand = significand.fo(Companion_getInstance_1().vo_1.cp(desiredPrecision.x2(significandDigits)));
      tmp_0 = new BigDecimal(extendedSignificand, exponent, decimalMode);
    } else if (desiredPrecision.d1(significandDigits) < 0) {
      var divRem = significand.dp(Companion_getInstance_1().vo_1.cp(significandDigits.x2(desiredPrecision)));
      var resolvedRemainder = divRem.fp_1;
      if (divRem.fp_1.equals(Companion_getInstance_1().so_1)) {
        return new BigDecimal(divRem.ep_1, exponent, decimalMode);
      }
      var tmp_1;
      if (significand.bp().equals(divRem.ep_1.bp().w2(divRem.fp_1.bp()))) {
        var newSignificand = roundDiscarded($this, divRem.ep_1, resolvedRemainder, decimalMode);
        var exponentModifier = newSignificand.bp().x2(divRem.ep_1.bp());
        tmp_1 = new BigDecimal(newSignificand, exponent.w2(exponentModifier), decimalMode);
      } else {
        tmp_1 = $this.up(divRem.ep_1, exponent, decimalMode);
      }
      tmp_0 = tmp_1;
    } else {
      tmp_0 = new BigDecimal(significand, exponent, decimalMode);
    }
    return tmp_0;
  }
  function applyScale($this, significand, exponent, decimalMode) {
    if (!decimalMode.qo_1) {
      return new BigDecimal(significand, exponent, decimalMode);
    }
    var tmp;
    if (exponent.d1(new Long(0, 0)) >= 0) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = exponent.w2(decimalMode.oo_1).w2(toLong(1));
      tmp = new DecimalMode(tmp$ret$0, decimalMode.no_1);
    } else if (exponent.d1(new Long(0, 0)) < 0) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$1 = decimalMode.oo_1.w2(toLong(1));
      tmp = new DecimalMode(tmp$ret$1, decimalMode.no_1);
    } else {
      throw RuntimeException_init_$Create$('Unexpected state');
    }
    var workMode = tmp;
    var tmp_0;
    if (exponent.d1(new Long(0, 0)) >= 0) {
      tmp_0 = roundSignificand($this, significand, exponent, workMode);
    } else {
      var tmp_1;
      if (decimalMode.no_1.equals(RoundingMode_ROUND_HALF_TO_EVEN_getInstance())) {
        var temp = (new BigDecimal(significand, exponent)).ho(imul(significand.zn(), 2));
        tmp_1 = roundSignificand($this, temp.wp_1, temp.xp_1, workMode).jo(imul(significand.zn(), 2));
      } else {
        var temp_0 = (new BigDecimal(significand, exponent)).ho(significand.zn());
        tmp_1 = roundSignificand($this, temp_0.wp_1, temp_0.xp_1, workMode).jo(significand.zn());
      }
      tmp_0 = tmp_1;
    }
    return tmp_0;
  }
  function resolveDecimalMode($this, firstDecimalMode, secondDecimalMode, suppliedDecimalMode) {
    var tmp;
    if (!(suppliedDecimalMode == null)) {
      tmp = suppliedDecimalMode;
    } else {
      if (firstDecimalMode == null && secondDecimalMode == null) {
        return new DecimalMode();
      }
      if (firstDecimalMode == null && !(secondDecimalMode == null)) {
        return secondDecimalMode;
      }
      if (secondDecimalMode == null && !(firstDecimalMode == null)) {
        return firstDecimalMode;
      }
      if (!ensureNotNull(firstDecimalMode).no_1.equals(ensureNotNull(secondDecimalMode).no_1)) {
        throw ArithmeticException_init_$Create$('Different rounding modes! This: ' + firstDecimalMode.no_1.toString() + ' Other: ' + secondDecimalMode.no_1.toString());
      }
      var tmp_0;
      if (firstDecimalMode.mo_1.d1(secondDecimalMode.mo_1) >= 0) {
        tmp_0 = firstDecimalMode;
      } else {
        tmp_0 = secondDecimalMode;
      }
      var unifiedDecimalMode = tmp_0;
      tmp = unifiedDecimalMode;
    }
    return tmp;
  }
  function SignificantDecider_FIVE_getInstance() {
    SignificantDecider_initEntries();
    return SignificantDecider_FIVE_instance;
  }
  function SignificantDecider_LESS_THAN_FIVE_getInstance() {
    SignificantDecider_initEntries();
    return SignificantDecider_LESS_THAN_FIVE_instance;
  }
  function SignificantDecider_MORE_THAN_FIVE_getInstance() {
    SignificantDecider_initEntries();
    return SignificantDecider_MORE_THAN_FIVE_instance;
  }
  var ScaleOps_Max_instance;
  var ScaleOps_Min_instance;
  var ScaleOps_Add_instance;
  var ScaleOps_entriesInitialized;
  function ScaleOps_initEntries() {
    if (ScaleOps_entriesInitialized)
      return Unit_instance;
    ScaleOps_entriesInitialized = true;
    ScaleOps_Max_instance = new ScaleOps('Max', 0);
    ScaleOps_Min_instance = new ScaleOps('Min', 1);
    ScaleOps_Add_instance = new ScaleOps('Add', 2);
  }
  function Companion() {
    Companion_instance = this;
    this.jp_1 = new BigDecimal(Companion_getInstance_1().so_1);
    this.kp_1 = new BigDecimal(Companion_getInstance_1().to_1);
    this.lp_1 = new BigDecimal(Companion_getInstance_1().uo_1);
    this.mp_1 = new BigDecimal(Companion_getInstance_1().vo_1, new Long(1, 0));
    this.np_1 = false;
    var tmp = this;
    // Inline function 'kotlin.doubleArrayOf' call
    tmp.op_1 = new Float64Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10, 1.0E11, 1.0E12, 1.0E13, 1.0E14, 1.0E15, 1.0E16, 1.0E17, 1.0E18, 1.0E19, 1.0E20, 1.0E21, 1.0E22]);
    this.pp_1 = this.dq(1.7976931348623157E308);
    this.qp_1 = this.dq(4.9E-324);
    var tmp_0 = this;
    // Inline function 'kotlin.floatArrayOf' call
    tmp_0.rp_1 = new Float32Array([1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 1.0E7, 1.0E8, 1.0E9, 1.0E10]);
    this.sp_1 = this.eq(3.4028235E38);
    this.tp_1 = this.eq(1.4E-45);
  }
  protoOf(Companion).up = function (significand, exponent, decimalMode) {
    var tmp;
    if (significand.yo_1.equals(Sign_POSITIVE_getInstance())) {
      var tmp_0;
      switch (decimalMode.no_1.q2_1) {
        case 1:
        case 2:
          var increasedSignificand = significand.b3();
          var exponentModifier = increasedSignificand.bp().x2(significand.bp());
          tmp_0 = new BigDecimal(increasedSignificand, exponent.w2(exponentModifier), decimalMode);
          break;
        default:
          tmp_0 = new BigDecimal(significand, exponent, decimalMode);
          break;
      }
      tmp = tmp_0;
    } else if (significand.yo_1.equals(Sign_NEGATIVE_getInstance())) {
      var tmp_1;
      switch (decimalMode.no_1.q2_1) {
        case 0:
        case 2:
          var increasedSignificand_0 = significand.c3();
          var exponentModifier_0 = increasedSignificand_0.bp().x2(significand.bp());
          tmp_1 = new BigDecimal(increasedSignificand_0, exponent.w2(exponentModifier_0), decimalMode);
          break;
        default:
          tmp_1 = new BigDecimal(significand, exponent, decimalMode);
          break;
      }
      tmp = tmp_1;
    } else {
      tmp = new BigDecimal(significand, exponent, decimalMode);
    }
    return tmp;
  };
  protoOf(Companion).fq = function (long, decimalMode) {
    var bigint = Companion_getInstance_1().gq(long);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.bp().x2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).hq(decimalMode);
  };
  protoOf(Companion).iq = function (int, decimalMode) {
    var bigint = Companion_getInstance_1().pn(int);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.bp().x2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).hq(decimalMode);
  };
  protoOf(Companion).jq = function (short, decimalMode) {
    var bigint = Companion_getInstance_1().kq(short);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.bp().x2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).hq(decimalMode);
  };
  protoOf(Companion).lq = function (byte, decimalMode) {
    var bigint = Companion_getInstance_1().mq(byte);
    // Inline function 'kotlin.Long.minus' call
    var tmp$ret$0 = bigint.bp().x2(toLong(1));
    return (new BigDecimal(bigint, tmp$ret$0, decimalMode)).hq(decimalMode);
  };
  protoOf(Companion).nq = function (float, decimalMode) {
    var floatString = float.toString();
    var tmp;
    if (contains(floatString, _Char___init__impl__6a9atx(46)) && !contains(floatString, _Char___init__impl__6a9atx(69), true)) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.dropLastWhile' call
        var inductionVariable = get_lastIndex(floatString);
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.fromFloat.<anonymous>' call
            if (!(charSequenceGet(floatString, index) === _Char___init__impl__6a9atx(48))) {
              // Inline function 'kotlin.text.substring' call
              var endIndex = index + 1 | 0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$3 = floatString.substring(0, endIndex);
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$3 = '';
      }
      tmp = this.oq(tmp$ret$3, decimalMode).hq(decimalMode);
    } else {
      tmp = this.oq(floatString, decimalMode).hq(decimalMode);
    }
    return tmp;
  };
  protoOf(Companion).eq = function (float, decimalMode, $super) {
    decimalMode = decimalMode === VOID ? null : decimalMode;
    return $super === VOID ? this.nq(float, decimalMode) : $super.nq.call(this, float, decimalMode);
  };
  protoOf(Companion).pq = function (double, decimalMode) {
    var doubleString = double.toString();
    var tmp;
    if (contains(doubleString, _Char___init__impl__6a9atx(46)) && !contains(doubleString, _Char___init__impl__6a9atx(69), true)) {
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.dropLastWhile' call
        var inductionVariable = get_lastIndex(doubleString);
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.fromDouble.<anonymous>' call
            if (!(charSequenceGet(doubleString, index) === _Char___init__impl__6a9atx(48))) {
              // Inline function 'kotlin.text.substring' call
              var endIndex = index + 1 | 0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$3 = doubleString.substring(0, endIndex);
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$3 = '';
      }
      tmp = this.oq(tmp$ret$3, decimalMode).hq(decimalMode);
    } else {
      tmp = this.oq(doubleString, decimalMode).hq(decimalMode).hq(decimalMode);
    }
    return tmp;
  };
  protoOf(Companion).dq = function (double, decimalMode, $super) {
    decimalMode = decimalMode === VOID ? null : decimalMode;
    return $super === VOID ? this.pq(double, decimalMode) : $super.pq.call(this, double, decimalMode);
  };
  protoOf(Companion).gq = function (long) {
    return this.fq(long, null);
  };
  protoOf(Companion).pn = function (int) {
    return this.iq(int, null);
  };
  protoOf(Companion).kq = function (short) {
    return this.jq(short, null);
  };
  protoOf(Companion).mq = function (byte) {
    return this.lq(byte, null);
  };
  protoOf(Companion).qn = function (float, exactRequired) {
    return this.nq(float, null);
  };
  protoOf(Companion).sn = function (double, exactRequired) {
    return this.pq(double, null);
  };
  protoOf(Companion).nn = function (string, base) {
    return this.oq(string, null);
  };
  protoOf(Companion).qq = function (string) {
    return this.rq(string);
  };
  protoOf(Companion).oq = function (floatingPointString, decimalMode) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(floatingPointString) === 0) {
      throw ArithmeticException_init_$Create$('Empty string is not a valid decimal number');
    }
    if (contains(floatingPointString, _Char___init__impl__6a9atx(69), true)) {
      var tmp;
      if (!contains(floatingPointString, _Char___init__impl__6a9atx(46))) {
        var splitAroundE = split(floatingPointString, charArrayOf([_Char___init__impl__6a9atx(69), _Char___init__impl__6a9atx(101)]));
        tmp = listOf([splitAroundE.q(0), '0E' + splitAroundE.q(1)]);
      } else {
        tmp = split(floatingPointString, charArrayOf([_Char___init__impl__6a9atx(46)]));
      }
      var split_0 = tmp;
      if (split_0.k() === 2) {
        var signPresent = charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45) || charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(43);
        var tmp_0;
        if (signPresent) {
          tmp_0 = 1;
        } else {
          tmp_0 = 0;
        }
        var leftStart = tmp_0;
        var tmp_1;
        if (signPresent) {
          var tmp_2;
          if (charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45)) {
            tmp_2 = Sign_NEGATIVE_getInstance();
          } else {
            tmp_2 = Sign_POSITIVE_getInstance();
          }
          tmp_1 = tmp_2;
        } else {
          tmp_1 = Sign_POSITIVE_getInstance();
        }
        var sign = tmp_1;
        // Inline function 'kotlin.text.substring' call
        // Inline function 'kotlin.js.asDynamic' call
        var left = split_0.q(0).substring(leftStart);
        var rightSplit = split(split_0.q(1), charArrayOf([_Char___init__impl__6a9atx(69), _Char___init__impl__6a9atx(101)]));
        var right = rightSplit.q(0);
        var exponentSplit = rightSplit.q(1);
        var exponentSignPresent = charSequenceGet(exponentSplit, 0) === _Char___init__impl__6a9atx(45) || charSequenceGet(exponentSplit, 0) === _Char___init__impl__6a9atx(43);
        var tmp_3;
        if (charSequenceGet(exponentSplit, 0) === _Char___init__impl__6a9atx(45)) {
          tmp_3 = Sign_NEGATIVE_getInstance();
        } else {
          tmp_3 = Sign_POSITIVE_getInstance();
        }
        var exponentSign = tmp_3;
        var tmp_4;
        if (exponentSignPresent) {
          tmp_4 = 1;
        } else {
          tmp_4 = 0;
        }
        var skipSignIfPresent = tmp_4;
        // Inline function 'kotlin.text.substring' call
        // Inline function 'kotlin.js.asDynamic' call
        var exponentString = exponentSplit.substring(skipSignIfPresent);
        var tmp_5;
        if (exponentSign.equals(Sign_POSITIVE_getInstance())) {
          tmp_5 = toLong_0(exponentString, 10);
        } else {
          // Inline function 'kotlin.Long.times' call
          tmp_5 = toLong_0(exponentString, 10).y2(toLong(-1));
        }
        var exponent = tmp_5;
        var tmp$ret$7;
        $l$block: {
          // Inline function 'kotlin.text.indexOfFirst' call
          var inductionVariable = 0;
          var last = charSequenceLength(left) - 1 | 0;
          if (inductionVariable <= last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
              if (!(charSequenceGet(left, index) === _Char___init__impl__6a9atx(48))) {
                tmp$ret$7 = index;
                break $l$block;
              }
            }
             while (inductionVariable <= last);
          tmp$ret$7 = -1;
        }
        var leftFirstNonZero = tmp$ret$7;
        if (leftFirstNonZero === -1) {
          leftFirstNonZero = 0;
        }
        var tmp$ret$9;
        $l$block_0: {
          // Inline function 'kotlin.text.indexOfLast' call
          var inductionVariable_0 = charSequenceLength(right) - 1 | 0;
          if (0 <= inductionVariable_0)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + -1 | 0;
              // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
              if (!(charSequenceGet(right, index_0) === _Char___init__impl__6a9atx(48))) {
                tmp$ret$9 = index_0;
                break $l$block_0;
              }
            }
             while (0 <= inductionVariable_0);
          tmp$ret$9 = -1;
        }
        var rightLastNonZero = tmp$ret$9;
        if (rightLastNonZero === -1) {
          rightLastNonZero = right.length - 1 | 0;
        }
        var tmp12 = leftFirstNonZero;
        // Inline function 'kotlin.text.substring' call
        var endIndex = left.length;
        // Inline function 'kotlin.js.asDynamic' call
        var leftTruncated = left.substring(tmp12, endIndex);
        // Inline function 'kotlin.text.substring' call
        var endIndex_0 = rightLastNonZero + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        var rightTruncated = right.substring(0, endIndex_0);
        var significand = Companion_getInstance_1().nn(leftTruncated + rightTruncated, 10);
        if (significand.equals(Companion_getInstance_1().so_1)) {
          sign = Sign_ZERO_getInstance();
        }
        if (sign.equals(Sign_NEGATIVE_getInstance())) {
          significand = significand.sq();
        }
        var tmp_6;
        if (!(leftTruncated === '0')) {
          // Inline function 'kotlin.Long.plus' call
          var other = leftTruncated.length;
          // Inline function 'kotlin.Long.minus' call
          tmp_6 = exponent.w2(toLong(other)).x2(toLong(1));
        } else {
          // Inline function 'kotlin.Long.minus' call
          tmp_6 = exponent.x2(numberToLong(rightTruncated.length).x2(significand.bp())).x2(toLong(1));
        }
        var exponentModifiedByFloatingPointPosition = tmp_6;
        return new BigDecimal(significand, exponentModifiedByFloatingPointPosition, decimalMode);
      } else
        throw ArithmeticException_init_$Create$('Invalid (or unsupported) floating point number format: ' + floatingPointString);
    } else {
      if (contains(floatingPointString, _Char___init__impl__6a9atx(46))) {
        var split_1 = split(floatingPointString, charArrayOf([_Char___init__impl__6a9atx(46)]));
        if (split_1.k() === 2) {
          var signPresent_0 = charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45) || charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(43);
          var tmp_7;
          if (signPresent_0) {
            tmp_7 = 1;
          } else {
            tmp_7 = 0;
          }
          var leftStart_0 = tmp_7;
          var tmp_8;
          if (signPresent_0) {
            var tmp_9;
            if (charSequenceGet(floatingPointString, 0) === _Char___init__impl__6a9atx(45)) {
              tmp_9 = Sign_NEGATIVE_getInstance();
            } else {
              tmp_9 = Sign_POSITIVE_getInstance();
            }
            tmp_8 = tmp_9;
          } else {
            tmp_8 = Sign_POSITIVE_getInstance();
          }
          var sign_0 = tmp_8;
          // Inline function 'kotlin.text.substring' call
          // Inline function 'kotlin.js.asDynamic' call
          var left_0 = split_1.q(0).substring(leftStart_0);
          var right_0 = split_1.q(1);
          var tmp$ret$20;
          $l$block_1: {
            // Inline function 'kotlin.text.indexOfFirst' call
            var inductionVariable_1 = 0;
            var last_0 = charSequenceLength(left_0) - 1 | 0;
            if (inductionVariable_1 <= last_0)
              do {
                var index_1 = inductionVariable_1;
                inductionVariable_1 = inductionVariable_1 + 1 | 0;
                // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                if (!(charSequenceGet(left_0, index_1) === _Char___init__impl__6a9atx(48))) {
                  tmp$ret$20 = index_1;
                  break $l$block_1;
                }
              }
               while (inductionVariable_1 <= last_0);
            tmp$ret$20 = -1;
          }
          var leftFirstNonZero_0 = tmp$ret$20;
          if (leftFirstNonZero_0 === -1) {
            leftFirstNonZero_0 = 0;
          }
          var tmp$ret$22;
          $l$block_2: {
            // Inline function 'kotlin.text.indexOfLast' call
            var inductionVariable_2 = charSequenceLength(right_0) - 1 | 0;
            if (0 <= inductionVariable_2)
              do {
                var index_2 = inductionVariable_2;
                inductionVariable_2 = inductionVariable_2 + -1 | 0;
                // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                if (!(charSequenceGet(right_0, index_2) === _Char___init__impl__6a9atx(48))) {
                  tmp$ret$22 = index_2;
                  break $l$block_2;
                }
              }
               while (0 <= inductionVariable_2);
            tmp$ret$22 = -1;
          }
          var rightLastNonZero_0 = tmp$ret$22;
          if (rightLastNonZero_0 === -1) {
            rightLastNonZero_0 = right_0.length - 1 | 0;
          }
          var tmp30 = leftFirstNonZero_0;
          // Inline function 'kotlin.text.substring' call
          var endIndex_1 = left_0.length;
          // Inline function 'kotlin.js.asDynamic' call
          var leftTruncated_0 = left_0.substring(tmp30, endIndex_1);
          // Inline function 'kotlin.text.substring' call
          var endIndex_2 = rightLastNonZero_0 + 1 | 0;
          // Inline function 'kotlin.js.asDynamic' call
          var rightTruncated_0 = right_0.substring(0, endIndex_2);
          var significand_0 = Companion_getInstance_1().nn(leftTruncated_0 + rightTruncated_0, 10);
          var tmp_10;
          var tmp_11;
          // Inline function 'kotlin.text.isNotEmpty' call
          if (charSequenceLength(leftTruncated_0) > 0) {
            tmp_11 = !(charSequenceGet(leftTruncated_0, 0) === _Char___init__impl__6a9atx(48));
          } else {
            tmp_11 = false;
          }
          if (tmp_11) {
            tmp_10 = leftTruncated_0.length - 1 | 0;
          } else {
            var tmp$ret$29;
            $l$block_3: {
              // Inline function 'kotlin.text.indexOfFirst' call
              var inductionVariable_3 = 0;
              var last_1 = charSequenceLength(rightTruncated_0) - 1 | 0;
              if (inductionVariable_3 <= last_1)
                do {
                  var index_3 = inductionVariable_3;
                  inductionVariable_3 = inductionVariable_3 + 1 | 0;
                  // Inline function 'com.ionspin.kotlin.bignum.decimal.Companion.parseStringWithMode.<anonymous>' call
                  if (!(charSequenceGet(rightTruncated_0, index_3) === _Char___init__impl__6a9atx(48))) {
                    tmp$ret$29 = index_3;
                    break $l$block_3;
                  }
                }
                 while (inductionVariable_3 <= last_1);
              tmp$ret$29 = -1;
            }
            tmp_10 = imul(tmp$ret$29 + 1 | 0, -1);
          }
          var exponent_0 = tmp_10;
          if (significand_0.equals(Companion_getInstance_1().so_1)) {
            sign_0 = Sign_ZERO_getInstance();
          }
          if (sign_0.equals(Sign_NEGATIVE_getInstance())) {
            significand_0 = significand_0.sq();
          }
          return new BigDecimal(significand_0, toLong(exponent_0), decimalMode);
        } else
          throw ArithmeticException_init_$Create$('Invalid (or unsupported) floating point number format: ' + floatingPointString);
      } else {
        var significand_1 = Companion_getInstance_1().nn(floatingPointString, 10);
        // Inline function 'kotlin.Long.minus' call
        var tmp$ret$30 = significand_1.bp().x2(toLong(1));
        return new BigDecimal(significand_1, tmp$ret$30, decimalMode);
      }
    }
  };
  protoOf(Companion).rq = function (floatingPointString, decimalMode, $super) {
    decimalMode = decimalMode === VOID ? null : decimalMode;
    return $super === VOID ? this.oq(floatingPointString, decimalMode) : $super.oq.call(this, floatingPointString, decimalMode);
  };
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function removeTrailingZeroes($this, bigDecimal) {
    if (bigDecimal.ip())
      return $this;
    var significand = bigDecimal.wp_1;
    var divisionResult = new QuotientAndRemainder(bigDecimal.wp_1, Companion_getInstance_1().so_1);
    do {
      divisionResult = divisionResult.ep_1.dp(Companion_getInstance_1().vo_1);
      if (divisionResult.fp_1.equals(Companion_getInstance_1().so_1)) {
        significand = divisionResult.ep_1;
      }
    }
     while (divisionResult.fp_1.equals(Companion_getInstance_1().so_1));
    return new BigDecimal(significand, bigDecimal.xp_1);
  }
  function ScaleOps(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function computeMode($this, other, op) {
    var tmp;
    if ($this.yp_1 == null || $this.yp_1.po_1 || other.yp_1 == null || other.yp_1.po_1) {
      tmp = Companion_getInstance_0().tq_1;
    } else {
      var tmp0 = $this.yp_1.mo_1;
      // Inline function 'kotlin.math.max' call
      var b = other.yp_1.mo_1;
      var tmp_0 = tmp0.d1(b) >= 0 ? tmp0 : b;
      var tmp_1;
      if ($this.yp_1.qo_1 && other.yp_1.qo_1) {
        var tmp_2;
        switch (op.q2_1) {
          case 0:
            var tmp2 = $this.yp_1.oo_1;
            // Inline function 'kotlin.math.max' call

            var b_0 = other.yp_1.oo_1;
            tmp_2 = tmp2.d1(b_0) >= 0 ? tmp2 : b_0;
            break;
          case 1:
            var tmp4 = $this.yp_1.oo_1;
            // Inline function 'kotlin.math.min' call

            var b_1 = other.yp_1.oo_1;
            tmp_2 = tmp4.d1(b_1) <= 0 ? tmp4 : b_1;
            break;
          case 2:
            tmp_2 = $this.yp_1.oo_1.w2(other.yp_1.oo_1);
            break;
          default:
            noWhenBranchMatchedException();
            break;
        }
        tmp_1 = tmp_2;
      } else {
        tmp_1 = new Long(-1, -1);
      }
      tmp = new DecimalMode(tmp_0, $this.yp_1.no_1, tmp_1);
    }
    return tmp;
  }
  function getRidOfRadix($this, bigDecimal) {
    var precision = bigDecimal.wp_1.bp();
    // Inline function 'kotlin.Long.plus' call
    var newExponent = bigDecimal.xp_1.x2(precision).w2(toLong(1));
    return new BigDecimal(bigDecimal.wp_1, newExponent);
  }
  function bringSignificandToSameExponent($this, first, second) {
    var firstPrepared = getRidOfRadix($this, first);
    var secondPrepared = getRidOfRadix($this, second);
    var firstPreparedExponent = firstPrepared.xp_1;
    var secondPreparedExponent = secondPrepared.xp_1;
    var tmp;
    if (first.xp_1.d1(second.xp_1) > 0) {
      var moveFirstBy = firstPreparedExponent.x2(secondPreparedExponent);
      var tmp_0;
      if (moveFirstBy.d1(new Long(0, 0)) >= 0) {
        var movedFirst = firstPrepared.wp_1.fo(toBigInteger(10).cp(moveFirstBy));
        return new Triple(movedFirst, second.wp_1, secondPreparedExponent);
      } else {
        var tmp_1 = toBigInteger(10);
        // Inline function 'kotlin.Long.times' call
        var tmp$ret$0 = moveFirstBy.y2(toLong(-1));
        var movedSecond = secondPrepared.wp_1.fo(tmp_1.cp(tmp$ret$0));
        tmp_0 = new Triple(first.wp_1, movedSecond, firstPreparedExponent);
      }
      tmp = tmp_0;
    } else if (first.xp_1.d1(second.xp_1) < 0) {
      var moveSecondBy = secondPreparedExponent.x2(firstPreparedExponent);
      var tmp_2;
      if (moveSecondBy.d1(new Long(0, 0)) >= 0) {
        var movedSecond_0 = secondPrepared.wp_1.fo(toBigInteger(10).cp(moveSecondBy));
        tmp_2 = new Triple(first.wp_1, movedSecond_0, firstPreparedExponent);
      } else {
        var tmp_3 = toBigInteger(10);
        // Inline function 'kotlin.Long.times' call
        var tmp$ret$1 = moveSecondBy.y2(toLong(-1));
        var movedFirst_0 = firstPrepared.wp_1.fo(tmp_3.cp(tmp$ret$1));
        tmp_2 = new Triple(movedFirst_0, second.wp_1, firstPreparedExponent);
      }
      return tmp_2;
    } else if (first.xp_1.equals(second.xp_1)) {
      var delta = firstPreparedExponent.x2(secondPreparedExponent);
      var tmp_4;
      if (delta.d1(new Long(0, 0)) > 0) {
        var movedFirst_1 = first.wp_1.fo(toBigInteger(10).cp(delta));
        tmp_4 = new Triple(movedFirst_1, second.wp_1, firstPreparedExponent);
      } else {
        if (delta.d1(new Long(0, 0)) < 0) {
          var tmp_5 = toBigInteger(10);
          // Inline function 'kotlin.Long.times' call
          var tmp$ret$2 = delta.y2(toLong(-1));
          var movedSecond_1 = second.wp_1.fo(tmp_5.cp(tmp$ret$2));
          tmp_4 = new Triple(first.wp_1, movedSecond_1, firstPreparedExponent);
        } else {
          // Inline function 'kotlin.Long.compareTo' call
          if (delta.d1(toLong(0)) === 0) {
            tmp_4 = new Triple(first.wp_1, second.wp_1, firstPreparedExponent);
          } else {
            throw RuntimeException_init_$Create$('Invalid delta: ' + delta.toString());
          }
        }
      }
      return tmp_4;
    } else {
      throw RuntimeException_init_$Create$('Invalid comparison state BigInteger: ' + first.xp_1.toString() + ', ' + second.xp_1.toString());
    }
    return tmp;
  }
  function javascriptNumberComparison($this, number) {
    var double = numberToDouble(number);
    var tmp;
    if (double > (new Long(-1, 2147483647)).m3()) {
      tmp = $this.vq(Companion_getInstance().qq(double.toString()));
    } else if (double % 1 === 0.0) {
      tmp = $this.vq(Companion_getInstance().gq(numberToLong(number)));
    } else {
      tmp = $this.vq(toBigDecimal(numberToDouble(number)));
    }
    return tmp;
  }
  function placeADotInStringExpanded($this, input, position) {
    var prefix = substring(input, until(0, input.length - position | 0));
    var tmp0 = substring(input, until(input.length - position | 0, input.length));
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var inductionVariable = get_lastIndex(tmp0);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.placeADotInStringExpanded.<anonymous>' call
          if (!(charSequenceGet(tmp0, index) === _Char___init__impl__6a9atx(48))) {
            // Inline function 'kotlin.text.substring' call
            var endIndex = index + 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$3 = tmp0.substring(0, endIndex);
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    var suffix = tmp$ret$3;
    var tmp;
    // Inline function 'kotlin.text.isNotEmpty' call
    if (charSequenceLength(suffix) > 0) {
      tmp = prefix + '.' + suffix;
    } else {
      tmp = prefix;
    }
    return tmp;
  }
  function placeADotInString($this, input, position) {
    var prefix = substring(input, until(0, input.length - position | 0));
    var suffix = substring(input, until(input.length - position | 0, input.length));
    var prepared = prefix + '.' + suffix;
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var inductionVariable = get_lastIndex(prepared);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.placeADotInString.<anonymous>' call
          if (!(charSequenceGet(prepared, index) === _Char___init__impl__6a9atx(48))) {
            // Inline function 'kotlin.text.substring' call
            var endIndex = index + 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$3 = prepared.substring(0, endIndex);
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    return tmp$ret$3;
  }
  function ScaleOps_Max_getInstance() {
    ScaleOps_initEntries();
    return ScaleOps_Max_instance;
  }
  function BigDecimal(_significand, _exponent, _decimalMode) {
    Companion_getInstance();
    _exponent = _exponent === VOID ? new Long(0, 0) : _exponent;
    _decimalMode = _decimalMode === VOID ? null : _decimalMode;
    if (!(_decimalMode == null) && _decimalMode.qo_1) {
      var wrk = applyScale(Companion_getInstance(), _significand, _exponent, _decimalMode);
      if (!wrk.ip()) {
        this.wp_1 = wrk.wp_1;
        this.xp_1 = wrk.xp_1;
        var newPrecision = this.wp_1.bp();
        this.vp_1 = newPrecision;
        this.yp_1 = _decimalMode.wq(newPrecision);
      } else {
        this.wp_1 = wrk.wp_1;
        this.xp_1 = wrk.xp_1.y2(_decimalMode.mo_1.w2(_decimalMode.oo_1));
        this.vp_1 = _decimalMode.mo_1.w2(_decimalMode.oo_1);
        this.yp_1 = _decimalMode.wq(this.vp_1);
      }
    } else {
      this.wp_1 = _significand;
      this.vp_1 = _significand.bp();
      this.xp_1 = _exponent;
      this.yp_1 = _decimalMode;
    }
    var tmp = this;
    var tmp0_safe_receiver = this.yp_1;
    var tmp0_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.mo_1;
    tmp.zp_1 = tmp0_elvis_lhs == null ? new Long(0, 0) : tmp0_elvis_lhs;
    var tmp_0 = this;
    var tmp1_safe_receiver = this.yp_1;
    var tmp0_elvis_lhs_0 = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.no_1;
    tmp_0.aq_1 = tmp0_elvis_lhs_0 == null ? RoundingMode_NONE_getInstance() : tmp0_elvis_lhs_0;
    var tmp_1 = this;
    var tmp13_safe_receiver = this.yp_1;
    var tmp0_elvis_lhs_1 = tmp13_safe_receiver == null ? null : tmp13_safe_receiver.oo_1;
    tmp_1.bq_1 = tmp0_elvis_lhs_1 == null ? new Long(-1, -1) : tmp0_elvis_lhs_1;
    this.cq_1 = this.bq_1.d1(new Long(0, 0)) >= 0;
  }
  protoOf(BigDecimal).bo = function () {
    return Companion_getInstance();
  };
  protoOf(BigDecimal).co = function () {
    return this;
  };
  protoOf(BigDecimal).xq = function (other) {
    return this.yq(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).un = function (other) {
    return this.xq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).yq = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.yp_1, other.yp_1, decimalMode);
    if (this.ip()) {
      return roundOrDont(Companion_getInstance(), other.wp_1, other.xp_1, resolvedDecimalMode);
    }
    if (other.ip()) {
      return roundOrDont(Companion_getInstance(), this.wp_1, this.xp_1, resolvedDecimalMode);
    }
    var _destruct__k2r9zo = bringSignificandToSameExponent(this, this, other);
    var first = _destruct__k2r9zo.ye();
    var second = _destruct__k2r9zo.ze();
    var firstNumOfDigits = first.bp();
    var secondNumOfDigits = second.bp();
    var newSignificand = first.do(second);
    var newSignificandNumOfDigit = newSignificand.bp();
    var tmp;
    if (firstNumOfDigits.d1(secondNumOfDigits) > 0) {
      tmp = firstNumOfDigits;
    } else {
      tmp = secondNumOfDigits;
    }
    var largerOperand = tmp;
    var carryDetected = newSignificandNumOfDigit.x2(largerOperand);
    var tmp0 = this.xp_1;
    // Inline function 'kotlin.math.max' call
    var b = other.xp_1;
    var newExponent = (tmp0.d1(b) >= 0 ? tmp0 : b).w2(carryDetected);
    var tmp_0;
    if (resolvedDecimalMode.qo_1) {
      tmp_0 = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode.wq(newSignificandNumOfDigit));
    } else {
      tmp_0 = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode);
    }
    return tmp_0;
  };
  protoOf(BigDecimal).zq = function (other) {
    return this.ar(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).vn = function (other) {
    return this.zq(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).ar = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.yp_1, other.yp_1, decimalMode);
    if (this.ip()) {
      return roundOrDont(Companion_getInstance(), other.wp_1.sq(), other.xp_1, resolvedDecimalMode);
    }
    if (other.ip()) {
      return roundOrDont(Companion_getInstance(), this.wp_1, this.xp_1, resolvedDecimalMode);
    }
    var _destruct__k2r9zo = bringSignificandToSameExponent(this, this, other);
    var first = _destruct__k2r9zo.ye();
    var second = _destruct__k2r9zo.ze();
    var firstNumOfDigits = first.bp();
    var secondNumOfDigits = second.bp();
    var newSignificand = first.eo(second);
    var newSignificandNumOfDigit = newSignificand.bp();
    var tmp;
    if (firstNumOfDigits.d1(secondNumOfDigits) > 0) {
      tmp = firstNumOfDigits;
    } else {
      tmp = secondNumOfDigits;
    }
    var largerOperand = tmp;
    var borrowDetected = newSignificandNumOfDigit.x2(largerOperand);
    var tmp0 = this.xp_1;
    // Inline function 'kotlin.math.max' call
    var b = other.xp_1;
    var newExponent = (tmp0.d1(b) >= 0 ? tmp0 : b).w2(borrowDetected);
    if (this.cq_1) {
      return roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode.wq(newSignificandNumOfDigit));
    } else {
      return roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode);
    }
  };
  protoOf(BigDecimal).br = function (other) {
    return this.cr(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).wn = function (other) {
    return this.br(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).cr = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.yp_1, other.yp_1, decimalMode);
    var firstNumOfDigits = this.wp_1.bp();
    var secondNumOfDigits = other.wp_1.bp();
    var newSignificand = this.wp_1.fo(other.wp_1);
    var newSignificandNumOfDigit = newSignificand.bp();
    var moveExponent = newSignificandNumOfDigit.x2(firstNumOfDigits.w2(secondNumOfDigits));
    // Inline function 'kotlin.Long.plus' call
    var newExponent = this.xp_1.w2(other.xp_1).w2(moveExponent).w2(toLong(1));
    var tmp;
    if (resolvedDecimalMode.qo_1) {
      tmp = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode.wq(newSignificandNumOfDigit));
    } else {
      tmp = roundOrDont(Companion_getInstance(), newSignificand, newExponent, resolvedDecimalMode);
    }
    return tmp;
  };
  protoOf(BigDecimal).dr = function (other) {
    return this.er(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).xn = function (other) {
    return this.dr(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).er = function (other, decimalMode) {
    var resolvedDecimalMode = resolveDecimalMode(Companion_getInstance(), this.yp_1, other.yp_1, decimalMode);
    if (resolvedDecimalMode.po_1 && !resolvedDecimalMode.qo_1) {
      var newExponent = this.xp_1.x2(other.xp_1);
      // Inline function 'kotlin.Long.times' call
      // Inline function 'kotlin.Long.plus' call
      var power = other.vp_1.y2(toLong(2)).w2(toLong(6));
      var thisPrepared = this.wp_1.fo(Companion_getInstance_1().vo_1.cp(power));
      var divRem = thisPrepared.dp(other.wp_1);
      var result = divRem.ep_1;
      // Inline function 'kotlin.Long.minus' call
      var expectedDiff = other.vp_1.x2(toLong(1));
      var exponentModifier = expectedDiff.w2(result.bp().x2(thisPrepared.bp()));
      if (!divRem.fp_1.equals(Companion_getInstance_1().so_1)) {
        throw ArithmeticException_init_$Create$('Non-terminating result of division operation (i.e. 1/3 = 0.3333... library needs to know when to stop and how to round up at that point). Specify decimalPrecision inside your decimal mode.');
      }
      return new BigDecimal(result, newExponent.w2(exponentModifier), resolvedDecimalMode);
    } else {
      // Inline function 'kotlin.Long.minus' call
      var newExponent_0 = this.xp_1.x2(other.xp_1).x2(toLong(1));
      var desiredPrecision = resolvedDecimalMode.mo_1;
      var power_0 = desiredPrecision.x2(this.vp_1).w2(other.vp_1);
      var tmp;
      if (power_0.d1(new Long(0, 0)) > 0) {
        tmp = this.wp_1.fo(toBigInteger(10).cp(power_0));
      } else if (power_0.d1(new Long(0, 0)) < 0) {
        var tmp_0 = toBigInteger(10);
        // Inline function 'kotlin.math.absoluteValue' call
        var tmp$ret$4 = abs(power_0);
        tmp = this.wp_1.go(tmp_0.cp(tmp$ret$4));
      } else {
        tmp = this.wp_1;
      }
      var thisPrepared_0 = tmp;
      var divRem_0 = thisPrepared_0.dp(other.wp_1);
      var result_0 = divRem_0.ep_1;
      if (result_0.equals(Companion_getInstance_1().so_1)) {
        newExponent_0 = newExponent_0.c3();
      }
      var exponentModifier_0 = result_0.bp().x2(resolvedDecimalMode.mo_1);
      var tmp_1;
      if (this.cq_1) {
        tmp_1 = new BigDecimal(roundDiscarded(Companion_getInstance(), result_0, divRem_0.fp_1, resolvedDecimalMode), newExponent_0.w2(exponentModifier_0), resolvedDecimalMode.wq(result_0.bp()));
      } else {
        tmp_1 = new BigDecimal(roundDiscarded(Companion_getInstance(), result_0, divRem_0.fp_1, resolvedDecimalMode), newExponent_0.w2(exponentModifier_0), resolvedDecimalMode);
      }
      return tmp_1;
    }
  };
  protoOf(BigDecimal).fr = function (other) {
    return this.gr(other).xe_1;
  };
  protoOf(BigDecimal).yn = function (other) {
    return this.fr(other instanceof BigDecimal ? other : THROW_CCE());
  };
  protoOf(BigDecimal).gr = function (other) {
    if (this.xp_1.d1(new Long(0, 0)) < 0) {
      return new Pair(Companion_getInstance().jp_1, this);
    }
    if (other.gp().hr(this.gp()) > 0) {
      return new Pair(Companion_getInstance().jp_1, this);
    }
    var tmp16_safe_receiver = this.yp_1;
    var tmp;
    if (tmp16_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = this.xp_1.x2(other.xp_1).w2(toLong(1));
      tmp = tmp16_safe_receiver.wq(tmp$ret$0);
    }
    var tmp0_elvis_lhs = tmp;
    var tmp_0;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$1 = this.xp_1.x2(other.xp_1).w2(toLong(1));
      tmp_0 = new DecimalMode(tmp$ret$1, RoundingMode_FLOOR_getInstance());
    } else {
      tmp_0 = tmp0_elvis_lhs;
    }
    var resolvedRoundingMode = tmp_0;
    var quotient = this.er(other, resolvedRoundingMode);
    var quotientInfinitePrecision = quotient.ir(VOID, VOID, Companion_getInstance_0().tq_1);
    var remainder = this.kr(quotientInfinitePrecision.jr(other));
    return new Pair(quotient, remainder);
  };
  protoOf(BigDecimal).ip = function () {
    return this.wp_1.ip();
  };
  protoOf(BigDecimal).lr = function (significand, exponent, decimalMode) {
    return new BigDecimal(significand, exponent, decimalMode);
  };
  protoOf(BigDecimal).ir = function (significand, exponent, decimalMode, $super) {
    significand = significand === VOID ? this.wp_1 : significand;
    exponent = exponent === VOID ? this.xp_1 : exponent;
    decimalMode = decimalMode === VOID ? this.yp_1 : decimalMode;
    return $super === VOID ? this.lr(significand, exponent, decimalMode) : $super.lr.call(this, significand, exponent, decimalMode);
  };
  protoOf(BigDecimal).mr = function (places) {
    if (places.equals(new Long(0, 0))) {
      return this;
    }
    return this.ir(VOID, this.xp_1.w2(places));
  };
  protoOf(BigDecimal).nr = function () {
    if (this.xp_1.d1(new Long(0, 0)) < 0) {
      var tmp;
      switch (this.wp_1.yo_1.q2_1) {
        case 0:
          tmp = Companion_getInstance().jp_1;
          break;
        case 1:
          tmp = Companion_getInstance().kp_1.sq();
          break;
        case 2:
          tmp = Companion_getInstance().jp_1;
          break;
        default:
          noWhenBranchMatchedException();
          break;
      }
      return tmp;
    }
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = this.xp_1.w2(toLong(1));
    return this.hq(new DecimalMode(tmp$ret$0, RoundingMode_FLOOR_getInstance()));
  };
  protoOf(BigDecimal).or = function () {
    if (this.xp_1.d1(new Long(0, 0)) < 0) {
      return Companion_getInstance_1().so_1;
    }
    var precisionExponentDiff = this.xp_1.x2(this.vp_1);
    var tmp;
    if (precisionExponentDiff.d1(new Long(0, 0)) > 0) {
      var tmp_0 = toBigInteger(10);
      // Inline function 'kotlin.Long.plus' call
      var tmp$ret$0 = precisionExponentDiff.w2(toLong(1));
      tmp = this.wp_1.fo(tmp_0.cp(tmp$ret$0));
    } else if (precisionExponentDiff.d1(new Long(0, 0)) < 0) {
      var tmp_1 = toBigInteger(10);
      // Inline function 'kotlin.math.absoluteValue' call
      // Inline function 'kotlin.Long.minus' call
      var tmp$ret$2 = abs(precisionExponentDiff).x2(toLong(1));
      tmp = this.wp_1.go(tmp_1.cp(tmp$ret$2));
    } else {
      tmp = this.wp_1.io(10);
    }
    return tmp;
  };
  protoOf(BigDecimal).kr = function (other) {
    return this.ar(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).jr = function (other) {
    return this.cr(other, computeMode(this, other, ScaleOps_Max_getInstance()));
  };
  protoOf(BigDecimal).gp = function () {
    return new BigDecimal(this.wp_1.gp(), this.xp_1, this.yp_1);
  };
  protoOf(BigDecimal).sq = function () {
    return new BigDecimal(this.wp_1.sq(), this.xp_1, this.yp_1);
  };
  protoOf(BigDecimal).zn = function () {
    return this.wp_1.zn();
  };
  protoOf(BigDecimal).hq = function (decimalMode) {
    if (decimalMode == null) {
      return this;
    }
    return roundSignificand(Companion_getInstance(), this.wp_1, this.xp_1, decimalMode);
  };
  protoOf(BigDecimal).vq = function (other) {
    var tmp;
    if (this.xp_1.equals(other.xp_1) && this.vp_1.equals(other.vp_1)) {
      tmp = this.wp_1.pr(other.wp_1);
    } else {
      var _destruct__k2r9zo = bringSignificandToSameExponent(this, this, other);
      var preparedFirst = _destruct__k2r9zo.ye();
      var preparedSecond = _destruct__k2r9zo.ze();
      tmp = preparedFirst.pr(preparedSecond);
    }
    return tmp;
  };
  protoOf(BigDecimal).hr = function (other) {
    if (isNumber(other)) {
      if (RuntimePlatform_instance.qr().equals(Platform_JS_getInstance()) || RuntimePlatform_instance.qr().equals(Platform_WASMJS_getInstance())) {
        return javascriptNumberComparison(this, other);
      }
    }
    var tmp;
    if (other instanceof BigDecimal) {
      tmp = this.vq(other);
    } else {
      if (other instanceof Long) {
        tmp = this.vq(Companion_getInstance().gq(other));
      } else {
        if (typeof other === 'number') {
          tmp = this.vq(Companion_getInstance().pn(other));
        } else {
          if (typeof other === 'number') {
            tmp = this.vq(Companion_getInstance().kq(other));
          } else {
            if (typeof other === 'number') {
              tmp = this.vq(Companion_getInstance().mq(other));
            } else {
              if (typeof other === 'number') {
                tmp = this.vq(Companion_getInstance().dq(other));
              } else {
                if (typeof other === 'number') {
                  tmp = this.vq(Companion_getInstance().eq(other));
                } else {
                  throw RuntimeException_init_$Create$('Invalid comparison type for BigDecimal: ' + getKClassFromExpression(other).y9());
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(BigDecimal).d = function (other) {
    return this.hr(!(other == null) ? other : THROW_CCE());
  };
  protoOf(BigDecimal).equals = function (other) {
    var tmp;
    if (other instanceof BigDecimal) {
      tmp = this.vq(other);
    } else {
      if (other instanceof Long) {
        tmp = this.vq(Companion_getInstance().gq(other));
      } else {
        if (!(other == null) ? typeof other === 'number' : false) {
          tmp = this.vq(Companion_getInstance().pn(other));
        } else {
          if (!(other == null) ? typeof other === 'number' : false) {
            tmp = this.vq(Companion_getInstance().kq(other));
          } else {
            if (!(other == null) ? typeof other === 'number' : false) {
              tmp = this.vq(Companion_getInstance().mq(other));
            } else {
              if (!(other == null) ? typeof other === 'number' : false) {
                tmp = this.vq(Companion_getInstance().dq(other));
              } else {
                if (!(other == null) ? typeof other === 'number' : false) {
                  tmp = this.vq(Companion_getInstance().eq(other));
                } else {
                  tmp = -1;
                }
              }
            }
          }
        }
      }
    }
    var comparison = tmp;
    return comparison === 0;
  };
  protoOf(BigDecimal).hashCode = function () {
    if (this.ip()) {
      return 0;
    }
    return removeTrailingZeroes(this, this).wp_1.hashCode() + this.xp_1.hashCode() | 0;
  };
  protoOf(BigDecimal).toString = function () {
    if (Companion_getInstance().np_1) {
      return this.rr();
    }
    var significandString = this.wp_1.sr(10);
    var tmp;
    if (this.wp_1.hr(0) < 0) {
      tmp = 2;
    } else {
      tmp = 1;
    }
    var modifier = tmp;
    var tmp_0;
    var tmp0 = this.wp_1.toString();
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.text.dropLastWhile' call
      var inductionVariable = get_lastIndex(tmp0);
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.decimal.BigDecimal.toString.<anonymous>' call
          if (!(charSequenceGet(tmp0, index) === _Char___init__impl__6a9atx(48))) {
            // Inline function 'kotlin.text.substring' call
            var endIndex = index + 1 | 0;
            // Inline function 'kotlin.js.asDynamic' call
            tmp$ret$3 = tmp0.substring(0, endIndex);
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = '';
    }
    if (tmp$ret$3.length <= 1) {
      tmp_0 = '0';
    } else {
      tmp_0 = '';
    }
    var expand = tmp_0;
    var tmp_1;
    if (this.xp_1.d1(new Long(0, 0)) > 0) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand + 'E+' + this.xp_1.toString();
    } else if (this.xp_1.d1(new Long(0, 0)) < 0) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand + 'E' + this.xp_1.toString();
    } else if (this.xp_1.equals(new Long(0, 0))) {
      tmp_1 = placeADotInString(this, significandString, significandString.length - modifier | 0) + expand;
    } else {
      throw RuntimeException_init_$Create$('Invalid state, please report a bug (Integer compareTo invalid)');
    }
    return tmp_1;
  };
  protoOf(BigDecimal).rr = function () {
    if (this.ip()) {
      return '0';
    }
    var digits = this.wp_1.bp();
    if (this.xp_1.d1(new Long(2147483647, 0)) > 0) {
      throw RuntimeException_init_$Create$('Invalid toStringExpanded request (exponent > Int.MAX_VALUE)');
    }
    var significandString = this.wp_1.tr(10);
    var tmp;
    if (this.wp_1.yo_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = '-';
    } else {
      tmp = '';
    }
    var sign = tmp;
    var tmp_0;
    if (this.xp_1.d1(new Long(0, 0)) > 0) {
      // Inline function 'kotlin.Long.plus' call
      var diffBigInt = this.xp_1.x2(digits).w2(toLong(1));
      var tmp_1;
      if (diffBigInt.d1(new Long(0, 0)) > 0) {
        var expandZeros = this.ur(diffBigInt, _Char___init__impl__6a9atx(48));
        tmp_1 = significandString + expandZeros;
      } else {
        tmp_1 = placeADotInStringExpanded(this, significandString, (significandString.length - this.xp_1.l3() | 0) - 1 | 0);
      }
      tmp_0 = tmp_1;
    } else if (this.xp_1.d1(new Long(0, 0)) < 0) {
      // Inline function 'kotlin.math.absoluteValue' call
      var this_0 = this.xp_1.l3();
      var diffInt = abs_0(this_0);
      var tmp_2;
      if (diffInt > 0) {
        // Inline function 'kotlin.math.absoluteValue' call
        var this_1 = this.xp_1;
        var tmp$ret$2 = abs(this_1);
        var expandZeros_0 = this.ur(tmp$ret$2, _Char___init__impl__6a9atx(48));
        tmp_2 = placeADotInStringExpanded(this, expandZeros_0 + significandString, (diffInt + significandString.length | 0) - 1 | 0);
      } else {
        tmp_2 = placeADotInStringExpanded(this, significandString, significandString.length - 1 | 0);
      }
      tmp_0 = tmp_2;
    } else if (this.xp_1.equals(new Long(0, 0))) {
      if (digits.equals(new Long(1, 0))) {
        return sign + significandString;
      }
      tmp_0 = placeADotInStringExpanded(this, significandString, significandString.length - 1 | 0);
    } else {
      throw RuntimeException_init_$Create$('Invalid state, please report a bug (Integer compareTo invalid)');
    }
    var adjusted = tmp_0;
    return sign + adjusted;
  };
  protoOf(BigDecimal).ur = function (_this__u8e3s4, char) {
    if (_this__u8e3s4.d1(new Long(0, 0)) < 0) {
      throw RuntimeException_init_$Create$('Char cannot be multiplied with negative number');
    }
    var counter = _this__u8e3s4;
    var stringBuilder = StringBuilder_init_$Create$();
    while (counter.d1(new Long(0, 0)) > 0) {
      stringBuilder.e8(char);
      counter = counter.c3();
    }
    return stringBuilder.toString();
  };
  function toBigDecimal(_this__u8e3s4, exponentModifier, decimalMode) {
    exponentModifier = exponentModifier === VOID ? null : exponentModifier;
    decimalMode = decimalMode === VOID ? null : decimalMode;
    var tmp = Companion_getInstance().pq(_this__u8e3s4, decimalMode);
    return tmp.mr(exponentModifier == null ? new Long(0, 0) : exponentModifier);
  }
  function Companion_0() {
    Companion_instance_0 = this;
    this.tq_1 = new DecimalMode();
    this.uq_1 = new DecimalMode(new Long(30, 0), RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_getInstance(), new Long(2, 0));
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function DecimalMode(decimalPrecision, roundingMode, scale) {
    Companion_getInstance_0();
    decimalPrecision = decimalPrecision === VOID ? new Long(0, 0) : decimalPrecision;
    roundingMode = roundingMode === VOID ? RoundingMode_NONE_getInstance() : roundingMode;
    scale = scale === VOID ? new Long(-1, -1) : scale;
    this.mo_1 = decimalPrecision;
    this.no_1 = roundingMode;
    this.oo_1 = scale;
    if (this.mo_1.d1(new Long(0, 0)) < 0) {
      throw ArithmeticException_init_$Create$('Negative decimal precision is not allowed.');
    }
    this.po_1 = this.mo_1.equals(new Long(0, 0));
    this.qo_1 = this.oo_1.d1(new Long(0, 0)) >= 0;
    if (!this.qo_1 && this.mo_1.equals(new Long(0, 0)) && !this.no_1.equals(RoundingMode_NONE_getInstance())) {
      throw ArithmeticException_init_$Create$('Rounding mode with 0 digits precision.');
    }
    if (this.oo_1.d1(new Long(-1, -1)) < 0) {
      throw ArithmeticException_init_$Create$('Negative Scale is unsupported.');
    }
    if (this.qo_1 && this.no_1.equals(RoundingMode_NONE_getInstance())) {
      throw ArithmeticException_init_$Create$('Scale of ' + this.oo_1.toString() + ' digits to the right of the decimal requires a RoundingMode that is not NONE.');
    }
  }
  protoOf(DecimalMode).vr = function (decimalPrecision, roundingMode, scale) {
    return new DecimalMode(decimalPrecision, roundingMode, scale);
  };
  protoOf(DecimalMode).wq = function (decimalPrecision, roundingMode, scale, $super) {
    decimalPrecision = decimalPrecision === VOID ? this.mo_1 : decimalPrecision;
    roundingMode = roundingMode === VOID ? this.no_1 : roundingMode;
    scale = scale === VOID ? this.oo_1 : scale;
    return $super === VOID ? this.vr(decimalPrecision, roundingMode, scale) : $super.vr.call(this, decimalPrecision, roundingMode, scale);
  };
  protoOf(DecimalMode).toString = function () {
    return 'DecimalMode(decimalPrecision=' + this.mo_1.toString() + ', roundingMode=' + this.no_1.toString() + ', scale=' + this.oo_1.toString() + ')';
  };
  protoOf(DecimalMode).hashCode = function () {
    var result = this.mo_1.hashCode();
    result = imul(result, 31) + this.no_1.hashCode() | 0;
    result = imul(result, 31) + this.oo_1.hashCode() | 0;
    return result;
  };
  protoOf(DecimalMode).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof DecimalMode))
      return false;
    var tmp0_other_with_cast = other instanceof DecimalMode ? other : THROW_CCE();
    if (!this.mo_1.equals(tmp0_other_with_cast.mo_1))
      return false;
    if (!this.no_1.equals(tmp0_other_with_cast.no_1))
      return false;
    if (!this.oo_1.equals(tmp0_other_with_cast.oo_1))
      return false;
    return true;
  };
  var RoundingMode_FLOOR_instance;
  var RoundingMode_CEILING_instance;
  var RoundingMode_AWAY_FROM_ZERO_instance;
  var RoundingMode_TOWARDS_ZERO_instance;
  var RoundingMode_NONE_instance;
  var RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance;
  var RoundingMode_ROUND_HALF_TOWARDS_ZERO_instance;
  var RoundingMode_ROUND_HALF_CEILING_instance;
  var RoundingMode_ROUND_HALF_FLOOR_instance;
  var RoundingMode_ROUND_HALF_TO_EVEN_instance;
  var RoundingMode_ROUND_HALF_TO_ODD_instance;
  var RoundingMode_entriesInitialized;
  function RoundingMode_initEntries() {
    if (RoundingMode_entriesInitialized)
      return Unit_instance;
    RoundingMode_entriesInitialized = true;
    RoundingMode_FLOOR_instance = new RoundingMode('FLOOR', 0);
    RoundingMode_CEILING_instance = new RoundingMode('CEILING', 1);
    RoundingMode_AWAY_FROM_ZERO_instance = new RoundingMode('AWAY_FROM_ZERO', 2);
    RoundingMode_TOWARDS_ZERO_instance = new RoundingMode('TOWARDS_ZERO', 3);
    RoundingMode_NONE_instance = new RoundingMode('NONE', 4);
    RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance = new RoundingMode('ROUND_HALF_AWAY_FROM_ZERO', 5);
    RoundingMode_ROUND_HALF_TOWARDS_ZERO_instance = new RoundingMode('ROUND_HALF_TOWARDS_ZERO', 6);
    RoundingMode_ROUND_HALF_CEILING_instance = new RoundingMode('ROUND_HALF_CEILING', 7);
    RoundingMode_ROUND_HALF_FLOOR_instance = new RoundingMode('ROUND_HALF_FLOOR', 8);
    RoundingMode_ROUND_HALF_TO_EVEN_instance = new RoundingMode('ROUND_HALF_TO_EVEN', 9);
    RoundingMode_ROUND_HALF_TO_ODD_instance = new RoundingMode('ROUND_HALF_TO_ODD', 10);
  }
  function RoundingMode(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function RoundingMode_FLOOR_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_FLOOR_instance;
  }
  function RoundingMode_AWAY_FROM_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_AWAY_FROM_ZERO_instance;
  }
  function RoundingMode_TOWARDS_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_TOWARDS_ZERO_instance;
  }
  function RoundingMode_NONE_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_NONE_instance;
  }
  function RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_ROUND_HALF_AWAY_FROM_ZERO_instance;
  }
  function RoundingMode_ROUND_HALF_TO_EVEN_getInstance() {
    RoundingMode_initEntries();
    return RoundingMode_ROUND_HALF_TO_EVEN_instance;
  }
  function BigInteger_init_$Init$(long, $this) {
    var tmp = Companion_getInstance_1().ro_1.wr(long);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp22_subject = getKClass(Long);
    var tmp_0;
    if (tmp22_subject.equals(getKClass(Long))) {
      if (!(long instanceof Long))
        THROW_CCE();
      var tmp_1;
      // Inline function 'kotlin.Long.compareTo' call
      if (long.d1(toLong(0)) < 0) {
        tmp_1 = Sign_NEGATIVE_getInstance();
      } else {
        // Inline function 'kotlin.Long.compareTo' call
        if (long.d1(toLong(0)) > 0) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_ZERO_getInstance();
        }
      }
      tmp_0 = tmp_1;
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().pa())) {
      if (typeof long !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(long, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(long, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().oa())) {
      if (typeof long !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(long, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(long, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().na())) {
      if (typeof long !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(long, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(long, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + toString(getKClass(Long)));
    }
    var tmp$ret$2 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$2);
    return $this;
  }
  function BigInteger_init_$Create$(long) {
    return BigInteger_init_$Init$(long, objectCreate(protoOf(BigInteger)));
  }
  function BigInteger_init_$Init$_0(int, $this) {
    var tmp = Companion_getInstance_1().ro_1.xr(int);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp22_subject = PrimitiveClasses_getInstance().pa();
    var tmp_0;
    if (tmp22_subject.equals(getKClass(Long))) {
      if (!(int instanceof Long))
        THROW_CCE();
      var tmp_1;
      // Inline function 'kotlin.Long.compareTo' call
      if (int.d1(toLong(0)) < 0) {
        tmp_1 = Sign_NEGATIVE_getInstance();
      } else {
        // Inline function 'kotlin.Long.compareTo' call
        if (int.d1(toLong(0)) > 0) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_ZERO_getInstance();
        }
      }
      tmp_0 = tmp_1;
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().pa())) {
      if (typeof int !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(int, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(int, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().oa())) {
      if (typeof int !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(int, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(int, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().na())) {
      if (typeof int !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(int, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(int, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + toString(PrimitiveClasses_getInstance().pa()));
    }
    var tmp$ret$2 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$2);
    return $this;
  }
  function BigInteger_init_$Create$_0(int) {
    return BigInteger_init_$Init$_0(int, objectCreate(protoOf(BigInteger)));
  }
  function BigInteger_init_$Init$_1(short, $this) {
    var tmp = Companion_getInstance_1().ro_1.yr(short);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp22_subject = PrimitiveClasses_getInstance().oa();
    var tmp_0;
    if (tmp22_subject.equals(getKClass(Long))) {
      if (!(short instanceof Long))
        THROW_CCE();
      var tmp_1;
      // Inline function 'kotlin.Long.compareTo' call
      if (short.d1(toLong(0)) < 0) {
        tmp_1 = Sign_NEGATIVE_getInstance();
      } else {
        // Inline function 'kotlin.Long.compareTo' call
        if (short.d1(toLong(0)) > 0) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_ZERO_getInstance();
        }
      }
      tmp_0 = tmp_1;
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().pa())) {
      if (typeof short !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(short, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(short, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().oa())) {
      if (typeof short !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(short, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(short, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().na())) {
      if (typeof short !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(short, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(short, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + toString(PrimitiveClasses_getInstance().oa()));
    }
    var tmp$ret$2 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$2);
    return $this;
  }
  function BigInteger_init_$Create$_1(short) {
    return BigInteger_init_$Init$_1(short, objectCreate(protoOf(BigInteger)));
  }
  function BigInteger_init_$Init$_2(byte, $this) {
    var tmp = Companion_getInstance_1().ro_1.zr(byte);
    // Inline function 'com.ionspin.kotlin.bignum.integer.Companion.determinSignFromNumber' call
    Companion_getInstance_1();
    var tmp22_subject = PrimitiveClasses_getInstance().na();
    var tmp_0;
    if (tmp22_subject.equals(getKClass(Long))) {
      if (!(byte instanceof Long))
        THROW_CCE();
      var tmp_1;
      // Inline function 'kotlin.Long.compareTo' call
      if (byte.d1(toLong(0)) < 0) {
        tmp_1 = Sign_NEGATIVE_getInstance();
      } else {
        // Inline function 'kotlin.Long.compareTo' call
        if (byte.d1(toLong(0)) > 0) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_ZERO_getInstance();
        }
      }
      tmp_0 = tmp_1;
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().pa())) {
      if (typeof byte !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(byte, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(byte, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().oa())) {
      if (typeof byte !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(byte, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(byte, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else if (tmp22_subject.equals(PrimitiveClasses_getInstance().na())) {
      if (typeof byte !== 'number')
        THROW_CCE();
      tmp_0 = compareTo(byte, 0) < 0 ? Sign_NEGATIVE_getInstance() : compareTo(byte, 0) > 0 ? Sign_POSITIVE_getInstance() : Sign_ZERO_getInstance();
    } else {
      throw RuntimeException_init_$Create$('Unsupported type ' + toString(PrimitiveClasses_getInstance().na()));
    }
    var tmp$ret$2 = tmp_0;
    BigInteger.call($this, tmp, tmp$ret$2);
    return $this;
  }
  function BigInteger_init_$Create$_2(byte) {
    return BigInteger_init_$Init$_2(byte, objectCreate(protoOf(BigInteger)));
  }
  function Companion_1() {
    Companion_instance_1 = this;
    this.ro_1 = get_chosenArithmetic();
    this.so_1 = new BigInteger(this.ro_1.as(), Sign_ZERO_getInstance());
    this.to_1 = new BigInteger(this.ro_1.bs(), Sign_POSITIVE_getInstance());
    this.uo_1 = new BigInteger(this.ro_1.cs(), Sign_POSITIVE_getInstance());
    this.vo_1 = new BigInteger(this.ro_1.ds(), Sign_POSITIVE_getInstance());
    var tmp = this;
    // Inline function 'kotlin.math.log10' call
    tmp.wo_1 = log10(2.0);
  }
  protoOf(Companion_1).nn = function (string, base) {
    if (base < 2 || base > 36) {
      throw NumberFormatException_init_$Create$('Unsupported base: ' + base + '. Supported base range is from 2 to 36');
    }
    var decimal = contains(string, _Char___init__impl__6a9atx(46));
    if (decimal) {
      var bigDecimal = Companion_getInstance().qq(string);
      var isActuallyDecimal = bigDecimal.kr(bigDecimal.nr()).hr(0) > 0;
      if (isActuallyDecimal) {
        throw NumberFormatException_init_$Create$('Supplied string is decimal, which cannot be converted to BigInteger without precision loss.');
      }
      return bigDecimal.or();
    }
    var signed = charSequenceGet(string, 0) === _Char___init__impl__6a9atx(45) || charSequenceGet(string, 0) === _Char___init__impl__6a9atx(43);
    var tmp;
    if (signed) {
      if (string.length === 1) {
        throw NumberFormatException_init_$Create$('Invalid big integer: ' + string);
      }
      var tmp_0;
      if (charSequenceGet(string, 0) === _Char___init__impl__6a9atx(45)) {
        tmp_0 = Sign_NEGATIVE_getInstance();
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var isNegative = tmp_0;
      if (string.length === 2 && charSequenceGet(string, 1) === _Char___init__impl__6a9atx(48)) {
        return this.so_1;
      }
      // Inline function 'kotlin.text.substring' call
      var endIndex = string.length;
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$1 = string.substring(1, endIndex);
      tmp = new BigInteger(this.ro_1.es(tmp$ret$1, base), isNegative);
    } else {
      if (string.length === 1 && charSequenceGet(string, 0) === _Char___init__impl__6a9atx(48)) {
        return this.so_1;
      }
      tmp = new BigInteger(this.ro_1.es(string, base), Sign_POSITIVE_getInstance());
    }
    return tmp;
  };
  protoOf(Companion_1).fs = function (uLong) {
    return new BigInteger(this.ro_1.gs(uLong), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).hs = function (uInt) {
    return new BigInteger(this.ro_1.is(uInt), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).js = function (uShort) {
    return new BigInteger(this.ro_1.ks(uShort), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).ls = function (uByte) {
    return new BigInteger(this.ro_1.ms(uByte), Sign_POSITIVE_getInstance());
  };
  protoOf(Companion_1).gq = function (long) {
    return BigInteger_init_$Create$(long);
  };
  protoOf(Companion_1).pn = function (int) {
    return BigInteger_init_$Create$_0(int);
  };
  protoOf(Companion_1).kq = function (short) {
    return BigInteger_init_$Create$_1(short);
  };
  protoOf(Companion_1).mq = function (byte) {
    return BigInteger_init_$Create$_2(byte);
  };
  protoOf(Companion_1).qn = function (float, exactRequired) {
    // Inline function 'kotlin.math.floor' call
    var floatDecimalPart = float - Math.floor(float);
    var tmp = Companion_getInstance();
    // Inline function 'kotlin.math.floor' call
    var tmp$ret$1 = Math.floor(float);
    var bigDecimal = tmp.nq(tmp$ret$1, null);
    if (exactRequired) {
      if (floatDecimalPart > 0) {
        throw ArithmeticException_init_$Create$('Cant create BigInteger without precision loss, and exact  value was required');
      }
    }
    return bigDecimal.or();
  };
  protoOf(Companion_1).sn = function (double, exactRequired) {
    // Inline function 'kotlin.math.floor' call
    var doubleDecimalPart = double - Math.floor(double);
    var tmp = Companion_getInstance();
    // Inline function 'kotlin.math.floor' call
    var tmp$ret$1 = Math.floor(double);
    var bigDecimal = tmp.pq(tmp$ret$1, null);
    if (exactRequired) {
      if (doubleDecimalPart > 0) {
        throw ArithmeticException_init_$Create$('Cant create BigInteger without precision loss, and exact  value was required');
      }
    }
    return bigDecimal.or();
  };
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function isResultZero($this, resultMagnitude) {
    return Companion_getInstance_1().ro_1.ns(resultMagnitude, Companion_getInstance_1().ro_1.as()) === 0;
  }
  function javascriptNumberComparison_0($this, number) {
    var double = numberToDouble(number);
    var tmp;
    if (double > (new Long(-1, 2147483647)).m3()) {
      tmp = $this.pr(Companion_getInstance_1().on(double.toString()));
    } else if (double % 1 === 0.0) {
      tmp = $this.pr(Companion_getInstance_1().gq(numberToLong(number)));
    } else {
      var tmp_0 = numberToDouble(number);
      tmp = $this.os(tmp_0, BigInteger$javascriptNumberComparison$lambda($this));
    }
    return tmp;
  }
  function QuotientAndRemainder(quotient, remainder) {
    this.ep_1 = quotient;
    this.fp_1 = remainder;
  }
  protoOf(QuotientAndRemainder).ye = function () {
    return this.ep_1;
  };
  protoOf(QuotientAndRemainder).ze = function () {
    return this.fp_1;
  };
  protoOf(QuotientAndRemainder).toString = function () {
    return 'QuotientAndRemainder(quotient=' + this.ep_1.toString() + ', remainder=' + this.fp_1.toString() + ')';
  };
  protoOf(QuotientAndRemainder).hashCode = function () {
    var result = this.ep_1.hashCode();
    result = imul(result, 31) + this.fp_1.hashCode() | 0;
    return result;
  };
  protoOf(QuotientAndRemainder).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof QuotientAndRemainder))
      return false;
    var tmp0_other_with_cast = other instanceof QuotientAndRemainder ? other : THROW_CCE();
    if (!this.ep_1.equals(tmp0_other_with_cast.ep_1))
      return false;
    if (!this.fp_1.equals(tmp0_other_with_cast.fp_1))
      return false;
    return true;
  };
  function BigInteger$compareTo$lambda(this$0) {
    return function (it) {
      return this$0.pr(it);
    };
  }
  function BigInteger$compareTo$lambda_0(this$0) {
    return function (it) {
      return this$0.pr(it);
    };
  }
  function BigInteger$javascriptNumberComparison$lambda(this$0) {
    return function (it) {
      return this$0.pr(it);
    };
  }
  function BigInteger(wordArray, requestedSign) {
    Companion_getInstance_1();
    if (requestedSign.equals(Sign_ZERO_getInstance())) {
      // Inline function 'kotlin.require' call
      if (!isResultZero(this, wordArray)) {
        // Inline function 'com.ionspin.kotlin.bignum.integer.BigInteger.<anonymous>' call
        var message = 'sign should be Sign.ZERO iff magnitude has a value of 0';
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
    }
    this.xo_1 = BigInteger63Arithmetic_getInstance().ht(wordArray);
    var tmp = this;
    var tmp_0;
    if (isResultZero(this, this.xo_1)) {
      tmp_0 = Sign_ZERO_getInstance();
    } else {
      tmp_0 = requestedSign;
    }
    tmp.yo_1 = tmp_0;
    this.zo_1 = _ULongArray___get_size__impl__ju6dtr(this.xo_1);
    this.ap_1 = null;
  }
  protoOf(BigInteger).bo = function () {
    return Companion_getInstance_1();
  };
  protoOf(BigInteger).co = function () {
    return this;
  };
  protoOf(BigInteger).it = function (other) {
    var comparison = Companion_getInstance_1().ro_1.ns(this.xo_1, other.xo_1);
    var tmp;
    if (other.yo_1.equals(this.yo_1)) {
      return new BigInteger(Companion_getInstance_1().ro_1.kt(this.xo_1, other.xo_1), this.yo_1);
    } else {
      var tmp_0;
      if (comparison > 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().ro_1.jt(this.xo_1, other.xo_1), this.yo_1);
      } else if (comparison < 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().ro_1.jt(other.xo_1, this.xo_1), other.yo_1);
      } else {
        tmp_0 = Companion_getInstance_1().so_1;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(BigInteger).un = function (other) {
    return this.it(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).lt = function (other) {
    if (this.ip()) {
      return other.sq();
    }
    if (other.ip()) {
      return this;
    }
    var tmp;
    if (other.yo_1.equals(this.yo_1)) {
      var comparison = Companion_getInstance_1().ro_1.ns(this.xo_1, other.xo_1);
      var tmp_0;
      if (comparison > 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().ro_1.jt(this.xo_1, other.xo_1), this.yo_1);
      } else if (comparison < 0) {
        tmp_0 = new BigInteger(Companion_getInstance_1().ro_1.jt(other.xo_1, this.xo_1), this.yo_1.ot());
      } else {
        tmp_0 = Companion_getInstance_1().so_1;
      }
      tmp = tmp_0;
    } else {
      return new BigInteger(Companion_getInstance_1().ro_1.kt(this.xo_1, other.xo_1), this.yo_1);
    }
    return tmp;
  };
  protoOf(BigInteger).vn = function (other) {
    return this.lt(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).pt = function (other) {
    if (this.ip() || other.ip()) {
      return Companion_getInstance_1().so_1;
    }
    if (other.equals(Companion_getInstance_1().to_1)) {
      return this;
    }
    var tmp;
    if (!this.yo_1.equals(other.yo_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var tmp_0;
    if (sign.equals(Sign_POSITIVE_getInstance())) {
      tmp_0 = new BigInteger(Companion_getInstance_1().ro_1.qt(this.xo_1, other.xo_1), sign);
    } else {
      tmp_0 = new BigInteger(Companion_getInstance_1().ro_1.qt(this.xo_1, other.xo_1), sign);
    }
    return tmp_0;
  };
  protoOf(BigInteger).wn = function (other) {
    return this.pt(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).rt = function (other) {
    if (other.ip()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this.toString() + ' / ' + other.toString());
    }
    var result = Companion_getInstance_1().ro_1.st(this.xo_1, other.xo_1).we_1.hn_1;
    var tmp;
    if (equals(result, Companion_getInstance_1().ro_1.as())) {
      tmp = Companion_getInstance_1().so_1;
    } else {
      var tmp_0;
      if (!this.yo_1.equals(other.yo_1)) {
        tmp_0 = Sign_NEGATIVE_getInstance();
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var sign = tmp_0;
      tmp = new BigInteger(result, sign);
    }
    return tmp;
  };
  protoOf(BigInteger).xn = function (other) {
    return this.rt(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).tt = function (other) {
    if (other.ip()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this.toString() + ' / ' + other.toString());
    }
    var tmp;
    if (!this.yo_1.equals(other.yo_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var result = Companion_getInstance_1().ro_1.st(this.xo_1, other.xo_1).xe_1.hn_1;
    if (equals(result, Companion_getInstance_1().ro_1.as())) {
      sign = Sign_ZERO_getInstance();
    }
    return new BigInteger(result, sign);
  };
  protoOf(BigInteger).yn = function (other) {
    return this.tt(other instanceof BigInteger ? other : THROW_CCE());
  };
  protoOf(BigInteger).ut = function (other) {
    if (other.ip()) {
      throw ArithmeticException_init_$Create$('Division by zero! ' + this.toString() + ' / ' + other.toString());
    }
    var tmp;
    if (!this.yo_1.equals(other.yo_1)) {
      tmp = Sign_NEGATIVE_getInstance();
    } else {
      tmp = Sign_POSITIVE_getInstance();
    }
    var sign = tmp;
    var result = Companion_getInstance_1().ro_1.st(this.xo_1, other.xo_1);
    var tmp_0;
    if (equals(result.we_1, new ULongArray(Companion_getInstance_1().ro_1.as()))) {
      tmp_0 = Companion_getInstance_1().so_1;
    } else {
      tmp_0 = new BigInteger(result.we_1.hn_1, sign);
    }
    var quotient = tmp_0;
    var tmp_1;
    if (equals(result.xe_1, new ULongArray(Companion_getInstance_1().ro_1.as()))) {
      tmp_1 = Companion_getInstance_1().so_1;
    } else {
      tmp_1 = new BigInteger(result.xe_1.hn_1, this.yo_1);
    }
    var remainder = tmp_1;
    return new Pair(quotient, remainder);
  };
  protoOf(BigInteger).pr = function (other) {
    if (this.ip() && other.ip())
      return 0;
    if (other.ip() && this.yo_1.equals(Sign_POSITIVE_getInstance()))
      return 1;
    if (other.ip() && this.yo_1.equals(Sign_NEGATIVE_getInstance()))
      return -1;
    if (this.ip() && other.yo_1.equals(Sign_POSITIVE_getInstance()))
      return -1;
    if (this.ip() && other.yo_1.equals(Sign_NEGATIVE_getInstance()))
      return 1;
    if (!this.yo_1.equals(other.yo_1))
      return this.yo_1.equals(Sign_POSITIVE_getInstance()) ? 1 : -1;
    var result = Companion_getInstance_1().ro_1.ns(this.xo_1, other.xo_1);
    var tmp;
    if (this.yo_1.equals(Sign_NEGATIVE_getInstance()) && other.yo_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = imul(result, -1);
    } else {
      tmp = result;
    }
    return tmp;
  };
  protoOf(BigInteger).ip = function () {
    return this.yo_1.equals(Sign_ZERO_getInstance()) || get_chosenArithmetic().ns(this.xo_1, get_chosenArithmetic().as()) === 0;
  };
  protoOf(BigInteger).sq = function () {
    return new BigInteger(this.xo_1, this.yo_1.ot());
  };
  protoOf(BigInteger).gp = function () {
    return new BigInteger(this.xo_1, Sign_POSITIVE_getInstance());
  };
  protoOf(BigInteger).cp = function (exponent) {
    if (exponent.d1(new Long(0, 0)) < 0) {
      throw ArithmeticException_init_$Create$('Negative exponent not supported with BigInteger');
    }
    var tmp;
    if (this.ip()) {
      tmp = Companion_getInstance_1().so_1;
    } else if (this.equals(Companion_getInstance_1().to_1)) {
      tmp = Companion_getInstance_1().to_1;
    } else {
      var tmp_0;
      if (this.yo_1.equals(Sign_NEGATIVE_getInstance())) {
        var tmp_1;
        // Inline function 'kotlin.Long.rem' call
        if (exponent.a3(toLong(2)).equals(new Long(0, 0))) {
          tmp_1 = Sign_POSITIVE_getInstance();
        } else {
          tmp_1 = Sign_NEGATIVE_getInstance();
        }
        tmp_0 = tmp_1;
      } else {
        tmp_0 = Sign_POSITIVE_getInstance();
      }
      var sign = tmp_0;
      tmp = new BigInteger(Companion_getInstance_1().ro_1.vt(this.xo_1, exponent), sign);
    }
    return tmp;
  };
  protoOf(BigInteger).wt = function (exponent) {
    return this.cp(toLong(exponent));
  };
  protoOf(BigInteger).zn = function () {
    var tmp;
    switch (this.yo_1.q2_1) {
      case 0:
        tmp = 1;
        break;
      case 1:
        tmp = -1;
        break;
      case 2:
        tmp = 0;
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  protoOf(BigInteger).xt = function (position) {
    return Companion_getInstance_1().ro_1.yt(this.xo_1, position);
  };
  protoOf(BigInteger).zt = function () {
    return Companion_getInstance_1().ro_1.au(this.xo_1);
  };
  protoOf(BigInteger).bp = function () {
    if (this.ip()) {
      return new Long(1, 0);
    }
    var powersOf10 = BigInteger63Arithmetic_getInstance().gt_1;
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var inductionVariable = 0;
      var last = powersOf10.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'com.ionspin.kotlin.bignum.integer.BigInteger.numberOfDecimalDigits.<anonymous>' call
          var it = powersOf10[index].hn_1;
          if (BigInteger63Arithmetic_getInstance().bu(it, this.xo_1) > 0) {
            tmp$ret$1 = index;
            break $l$block;
          }
        }
         while (inductionVariable <= last);
      tmp$ret$1 = -1;
    }
    var quickSearch = tmp$ret$1;
    if (!(quickSearch === -1)) {
      return toLong(quickSearch);
    }
    var tmp = this.go(Companion_getInstance_1().vo_1.wt(powersOf10.length));
    var counter = new Long(0, 0);
    while (!tmp.ip()) {
      tmp = tmp.ko(10);
      counter = counter.b3();
    }
    var tmp2 = counter;
    // Inline function 'kotlin.Long.plus' call
    var other = powersOf10.length;
    return tmp2.w2(toLong(other));
  };
  protoOf(BigInteger).g3 = function (places) {
    var result = new BigInteger(Companion_getInstance_1().ro_1.cu(this.xo_1, places), this.yo_1);
    if (equals(result.xo_1, Companion_getInstance_1().ro_1.as())) {
      return Companion_getInstance_1().so_1;
    }
    return result;
  };
  protoOf(BigInteger).d3 = function () {
    return this.sq();
  };
  protoOf(BigInteger).c3 = function () {
    return this.eo(Companion_getInstance_1().to_1);
  };
  protoOf(BigInteger).b3 = function () {
    return this.do(Companion_getInstance_1().to_1);
  };
  protoOf(BigInteger).dp = function (other) {
    var result = this.ut(other);
    return new QuotientAndRemainder(result.we_1, result.xe_1);
  };
  protoOf(BigInteger).du = function (other) {
    var resultMagnitude = Companion_getInstance_1().ro_1.eu(this.xo_1, other.xo_1);
    var resultSign = isResultZero(this, resultMagnitude) ? Sign_ZERO_getInstance() : Sign_POSITIVE_getInstance();
    return new BigInteger(resultMagnitude, resultSign);
  };
  protoOf(BigInteger).fu = function (other) {
    var resultMagnitude = Companion_getInstance_1().ro_1.gu(this.xo_1, other.xo_1);
    var resultSign = !!(this.ao() ^ other.ao()) ? Sign_NEGATIVE_getInstance() : isResultZero(this, resultMagnitude) ? Sign_ZERO_getInstance() : Sign_POSITIVE_getInstance();
    return new BigInteger(resultMagnitude, resultSign);
  };
  protoOf(BigInteger).hr = function (other) {
    if (isNumber(other)) {
      if (RuntimePlatform_instance.qr().equals(Platform_JS_getInstance())) {
        return javascriptNumberComparison_0(this, other);
      }
    }
    var tmp;
    if (other instanceof BigInteger) {
      tmp = this.pr(other);
    } else {
      if (other instanceof Long) {
        tmp = this.pr(Companion_getInstance_1().gq(other));
      } else {
        if (typeof other === 'number') {
          tmp = this.pr(Companion_getInstance_1().pn(other));
        } else {
          if (typeof other === 'number') {
            tmp = this.pr(Companion_getInstance_1().kq(other));
          } else {
            if (typeof other === 'number') {
              tmp = this.pr(Companion_getInstance_1().mq(other));
            } else {
              if (other instanceof ULong) {
                tmp = this.pr(Companion_getInstance_1().fs(other.s1_1));
              } else {
                if (other instanceof UInt) {
                  tmp = this.pr(Companion_getInstance_1().hs(other.sm_1));
                } else {
                  if (other instanceof UShort) {
                    tmp = this.pr(Companion_getInstance_1().js(other.ju_1));
                  } else {
                    if (other instanceof UByte) {
                      tmp = this.pr(Companion_getInstance_1().ls(other.iu_1));
                    } else {
                      if (typeof other === 'number') {
                        tmp = this.os(other, BigInteger$compareTo$lambda(this));
                      } else {
                        if (typeof other === 'number') {
                          tmp = this.hu(other, BigInteger$compareTo$lambda_0(this));
                        } else {
                          throw RuntimeException_init_$Create$('Invalid comparison type for BigInteger: ' + toString(getKClassFromExpression(other)));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return tmp;
  };
  protoOf(BigInteger).d = function (other) {
    return this.hr(!(other == null) ? other : THROW_CCE());
  };
  protoOf(BigInteger).os = function (float, comparisonBlock) {
    // Inline function 'kotlin.math.floor' call
    var withoutDecimalPart = Math.floor(float);
    var hasDecimalPart = !(float % 1 === 0.0);
    var tmp;
    if (hasDecimalPart) {
      var comparisonResult = comparisonBlock(Companion_getInstance_1().rn(withoutDecimalPart + 1));
      var tmp_0;
      if (comparisonResult === 0) {
        tmp_0 = 1;
      } else {
        tmp_0 = comparisonResult;
      }
      tmp = tmp_0;
    } else {
      tmp = comparisonBlock(Companion_getInstance_1().rn(withoutDecimalPart));
    }
    return tmp;
  };
  protoOf(BigInteger).hu = function (double, comparisonBlock) {
    // Inline function 'kotlin.math.floor' call
    var withoutDecimalPart = Math.floor(double);
    var hasDecimalPart = !(double % 1 === 0.0);
    var tmp;
    if (hasDecimalPart) {
      var comparisonResult = comparisonBlock(Companion_getInstance_1().tn(withoutDecimalPart + 1));
      var tmp_0;
      if (comparisonResult === 0) {
        tmp_0 = 1;
      } else {
        tmp_0 = comparisonResult;
      }
      tmp = tmp_0;
    } else {
      tmp = comparisonBlock(Companion_getInstance_1().tn(withoutDecimalPart));
    }
    return tmp;
  };
  protoOf(BigInteger).equals = function (other) {
    var tmp;
    if (other instanceof BigInteger) {
      tmp = this.pr(other);
    } else {
      if (other instanceof Long) {
        tmp = this.pr(Companion_getInstance_1().gq(other));
      } else {
        if (!(other == null) ? typeof other === 'number' : false) {
          tmp = this.pr(Companion_getInstance_1().pn(other));
        } else {
          if (!(other == null) ? typeof other === 'number' : false) {
            tmp = this.pr(Companion_getInstance_1().kq(other));
          } else {
            if (!(other == null) ? typeof other === 'number' : false) {
              tmp = this.pr(Companion_getInstance_1().mq(other));
            } else {
              if (other instanceof ULong) {
                tmp = this.pr(Companion_getInstance_1().fs(other.s1_1));
              } else {
                if (other instanceof UInt) {
                  tmp = this.pr(Companion_getInstance_1().hs(other.sm_1));
                } else {
                  if (other instanceof UShort) {
                    tmp = this.pr(Companion_getInstance_1().js(other.ju_1));
                  } else {
                    if (other instanceof UByte) {
                      tmp = this.pr(Companion_getInstance_1().ls(other.iu_1));
                    } else {
                      tmp = -1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    var comparison = tmp;
    return comparison === 0;
  };
  protoOf(BigInteger).hashCode = function () {
    // Inline function 'kotlin.collections.fold' call
    var this_0 = this.xo_1;
    var accumulator = 0;
    var _iterator__ex2g4s = ULongArray__iterator_impl_cq4d2h(this_0);
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j().s1_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.BigInteger.hashCode.<anonymous>' call
      accumulator = accumulator + ULong__hashCode_impl_6hv2lb(element) | 0;
    }
    return accumulator + this.yo_1.hashCode() | 0;
  };
  protoOf(BigInteger).toString = function () {
    return this.sr(10);
  };
  protoOf(BigInteger).sr = function (base) {
    var tmp;
    if (this.yo_1.equals(Sign_NEGATIVE_getInstance())) {
      tmp = '-';
    } else {
      tmp = '';
    }
    var sign = tmp;
    return sign + this.tr(base);
  };
  protoOf(BigInteger).tr = function (base) {
    return Companion_getInstance_1().ro_1.ku(this.xo_1, base);
  };
  protoOf(BigInteger).hp = function (exactRequired) {
    if (exactRequired && (this.hr(2147483647) > 0 || this.hr(-2147483648) < 0)) {
      throw ArithmeticException_init_$Create$('Cannot convert to int and provide exact value');
    }
    // Inline function 'kotlin.ULong.toInt' call
    var this_0 = ULongArray__get_impl_pr71q9(this.xo_1, 0);
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(this_0).l3();
    return imul(tmp$ret$0, this.zn());
  };
  var Sign_POSITIVE_instance;
  var Sign_NEGATIVE_instance;
  var Sign_ZERO_instance;
  var Sign_entriesInitialized;
  function Sign_initEntries() {
    if (Sign_entriesInitialized)
      return Unit_instance;
    Sign_entriesInitialized = true;
    Sign_POSITIVE_instance = new Sign('POSITIVE', 0);
    Sign_NEGATIVE_instance = new Sign('NEGATIVE', 1);
    Sign_ZERO_instance = new Sign('ZERO', 2);
  }
  function Sign(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  protoOf(Sign).ot = function () {
    var tmp;
    switch (this.q2_1) {
      case 0:
        tmp = Sign_NEGATIVE_getInstance();
        break;
      case 1:
        tmp = Sign_POSITIVE_getInstance();
        break;
      case 2:
        tmp = Sign_ZERO_getInstance();
        break;
      default:
        noWhenBranchMatchedException();
        break;
    }
    return tmp;
  };
  function Sign_POSITIVE_getInstance() {
    Sign_initEntries();
    return Sign_POSITIVE_instance;
  }
  function Sign_NEGATIVE_getInstance() {
    Sign_initEntries();
    return Sign_NEGATIVE_instance;
  }
  function Sign_ZERO_getInstance() {
    Sign_initEntries();
    return Sign_ZERO_instance;
  }
  function toBigInteger(_this__u8e3s4) {
    return Companion_getInstance_1().pn(_this__u8e3s4);
  }
  function get_chosenArithmetic() {
    _init_properties_Configuration_kt__48zwcc();
    return chosenArithmetic;
  }
  var chosenArithmetic;
  var properties_initialized_Configuration_kt_gex7mu;
  function _init_properties_Configuration_kt__48zwcc() {
    if (!properties_initialized_Configuration_kt_gex7mu) {
      properties_initialized_Configuration_kt_gex7mu = true;
      chosenArithmetic = BigInteger63Arithmetic_getInstance();
    }
  }
  var Platform_JVM_instance;
  var Platform_NATIVE_instance;
  var Platform_JS_instance;
  var Platform_WASMJS_instance;
  var Platform_entriesInitialized;
  function Platform_initEntries() {
    if (Platform_entriesInitialized)
      return Unit_instance;
    Platform_entriesInitialized = true;
    Platform_JVM_instance = new Platform('JVM', 0);
    Platform_NATIVE_instance = new Platform('NATIVE', 1);
    Platform_JS_instance = new Platform('JS', 2);
    Platform_WASMJS_instance = new Platform('WASMJS', 3);
  }
  function Platform(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function Platform_JS_getInstance() {
    Platform_initEntries();
    return Platform_JS_instance;
  }
  function Platform_WASMJS_getInstance() {
    Platform_initEntries();
    return Platform_WASMJS_instance;
  }
  function Sextuple(a, b, c, d, e, f) {
    this.lu_1 = a;
    this.mu_1 = b;
    this.nu_1 = c;
    this.ou_1 = d;
    this.pu_1 = e;
    this.qu_1 = f;
  }
  protoOf(Sextuple).ye = function () {
    return this.lu_1;
  };
  protoOf(Sextuple).ze = function () {
    return this.mu_1;
  };
  protoOf(Sextuple).nm = function () {
    return this.nu_1;
  };
  protoOf(Sextuple).ru = function () {
    return this.ou_1;
  };
  protoOf(Sextuple).su = function () {
    return this.pu_1;
  };
  protoOf(Sextuple).tu = function () {
    return this.qu_1;
  };
  protoOf(Sextuple).toString = function () {
    return 'Sextuple(a=' + toString_0(this.lu_1) + ', b=' + toString_0(this.mu_1) + ', c=' + toString_0(this.nu_1) + ', d=' + toString_0(this.ou_1) + ', e=' + toString_0(this.pu_1) + ', f=' + toString_0(this.qu_1) + ')';
  };
  protoOf(Sextuple).hashCode = function () {
    var result = this.lu_1 == null ? 0 : hashCode(this.lu_1);
    result = imul(result, 31) + (this.mu_1 == null ? 0 : hashCode(this.mu_1)) | 0;
    result = imul(result, 31) + (this.nu_1 == null ? 0 : hashCode(this.nu_1)) | 0;
    result = imul(result, 31) + (this.ou_1 == null ? 0 : hashCode(this.ou_1)) | 0;
    result = imul(result, 31) + (this.pu_1 == null ? 0 : hashCode(this.pu_1)) | 0;
    result = imul(result, 31) + (this.qu_1 == null ? 0 : hashCode(this.qu_1)) | 0;
    return result;
  };
  protoOf(Sextuple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Sextuple))
      return false;
    var tmp0_other_with_cast = other instanceof Sextuple ? other : THROW_CCE();
    if (!equals(this.lu_1, tmp0_other_with_cast.lu_1))
      return false;
    if (!equals(this.mu_1, tmp0_other_with_cast.mu_1))
      return false;
    if (!equals(this.nu_1, tmp0_other_with_cast.nu_1))
      return false;
    if (!equals(this.ou_1, tmp0_other_with_cast.ou_1))
      return false;
    if (!equals(this.pu_1, tmp0_other_with_cast.pu_1))
      return false;
    if (!equals(this.qu_1, tmp0_other_with_cast.qu_1))
      return false;
    return true;
  };
  function Quadruple(a, b, c, d) {
    this.uu_1 = a;
    this.vu_1 = b;
    this.wu_1 = c;
    this.xu_1 = d;
  }
  protoOf(Quadruple).ye = function () {
    return this.uu_1;
  };
  protoOf(Quadruple).ze = function () {
    return this.vu_1;
  };
  protoOf(Quadruple).nm = function () {
    return this.wu_1;
  };
  protoOf(Quadruple).ru = function () {
    return this.xu_1;
  };
  protoOf(Quadruple).toString = function () {
    return 'Quadruple(a=' + toString_0(this.uu_1) + ', b=' + toString_0(this.vu_1) + ', c=' + toString_0(this.wu_1) + ', d=' + toString_0(this.xu_1) + ')';
  };
  protoOf(Quadruple).hashCode = function () {
    var result = this.uu_1 == null ? 0 : hashCode(this.uu_1);
    result = imul(result, 31) + (this.vu_1 == null ? 0 : hashCode(this.vu_1)) | 0;
    result = imul(result, 31) + (this.wu_1 == null ? 0 : hashCode(this.wu_1)) | 0;
    result = imul(result, 31) + (this.xu_1 == null ? 0 : hashCode(this.xu_1)) | 0;
    return result;
  };
  protoOf(Quadruple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Quadruple))
      return false;
    var tmp0_other_with_cast = other instanceof Quadruple ? other : THROW_CCE();
    if (!equals(this.uu_1, tmp0_other_with_cast.uu_1))
      return false;
    if (!equals(this.vu_1, tmp0_other_with_cast.vu_1))
      return false;
    if (!equals(this.wu_1, tmp0_other_with_cast.wu_1))
      return false;
    if (!equals(this.xu_1, tmp0_other_with_cast.xu_1))
      return false;
    return true;
  };
  function SignedUIntArray(unsignedValue, sign) {
    this.yu_1 = unsignedValue;
    this.zu_1 = sign;
  }
  protoOf(SignedUIntArray).toString = function () {
    return 'SignedUIntArray(unsignedValue=' + UIntArray__toString_impl_3zy802(this.yu_1) + ', sign=' + this.zu_1 + ')';
  };
  protoOf(SignedUIntArray).hashCode = function () {
    var result = UIntArray__hashCode_impl_hr7ost(this.yu_1);
    result = imul(result, 31) + getBooleanHashCode(this.zu_1) | 0;
    return result;
  };
  protoOf(SignedUIntArray).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SignedUIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof SignedUIntArray ? other : THROW_CCE();
    if (!equals(this.yu_1, tmp0_other_with_cast.yu_1))
      return false;
    if (!(this.zu_1 === tmp0_other_with_cast.zu_1))
      return false;
    return true;
  };
  function BigInteger32Arithmetic() {
    BigInteger32Arithmetic_instance = this;
    var tmp = this;
    // Inline function 'kotlin.intArrayOf' call
    tmp.av_1 = new Int32Array([]);
    this.bv_1 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    this.cv_1 = _UInt___init__impl__l7qpdl(-1);
    this.dv_1 = _ULong___init__impl__c78o9k(new Long(0, 1));
    this.ev_1 = _ULong___init__impl__c78o9k(new Long(65535, 0));
    this.fv_1 = _UInt___init__impl__l7qpdl(-1);
    this.gv_1 = 32;
    this.hv_1 = 32;
    this.iv_1 = _UIntArray___init__impl__ghjpc6(0);
    var tmp_0 = this;
    // Inline function 'kotlin.UIntArray' call
    var tmp_1 = 0;
    var tmp_2 = new Int32Array(1);
    while (tmp_1 < 1) {
      var tmp_3 = tmp_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.ONE.<anonymous>' call
      // Inline function 'kotlin.UInt.toInt' call
      var this_0 = _UInt___init__impl__l7qpdl(1);
      tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
      tmp_1 = tmp_1 + 1 | 0;
    }
    tmp_0.jv_1 = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var tmp_4 = this;
    // Inline function 'kotlin.UIntArray' call
    var tmp_5 = 0;
    var tmp_6 = new Int32Array(1);
    while (tmp_5 < 1) {
      var tmp_7 = tmp_5;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.TWO.<anonymous>' call
      // Inline function 'kotlin.UInt.toInt' call
      var this_1 = _UInt___init__impl__l7qpdl(2);
      tmp_6[tmp_7] = _UInt___get_data__impl__f0vqqw(this_1);
      tmp_5 = tmp_5 + 1 | 0;
    }
    tmp_4.kv_1 = _UIntArray___init__impl__ghjpc6_0(tmp_6);
    var tmp_8 = this;
    // Inline function 'kotlin.UIntArray' call
    var tmp_9 = 0;
    var tmp_10 = new Int32Array(1);
    while (tmp_9 < 1) {
      var tmp_11 = tmp_9;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.TEN.<anonymous>' call
      // Inline function 'kotlin.UInt.toInt' call
      var this_2 = _UInt___init__impl__l7qpdl(10);
      tmp_10[tmp_11] = _UInt___get_data__impl__f0vqqw(this_2);
      tmp_9 = tmp_9 + 1 | 0;
    }
    tmp_8.lv_1 = _UIntArray___init__impl__ghjpc6_0(tmp_10);
    this.mv_1 = 60;
    this.nv_1 = 15000;
    this.ov_1 = new SignedUIntArray(this.kv_1, true);
  }
  protoOf(BigInteger32Arithmetic).pv = function (value) {
    var x = value;
    var y;
    var n = this.gv_1;
    // Inline function 'kotlin.UInt.shr' call
    var this_0 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_0) >>> 16 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 16 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_1 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_1) >>> 8 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 8 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_2 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_2) >>> 4 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 4 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_3 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_3) >>> 2 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      n = n - 2 | 0;
      x = y;
    }
    // Inline function 'kotlin.UInt.shr' call
    var this_4 = x;
    y = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_4) >>> 1 | 0);
    if (!(y === _UInt___init__impl__l7qpdl(0))) {
      return n - 2 | 0;
    }
    var tmp = n;
    // Inline function 'kotlin.UInt.toInt' call
    var this_5 = x;
    return tmp - _UInt___get_data__impl__f0vqqw(this_5) | 0;
  };
  protoOf(BigInteger32Arithmetic).qv = function (value) {
    if (UIntArray__isEmpty_impl_vd8j4n(value)) {
      return 0;
    }
    var mostSignificant = UIntArray__get_impl_gp5kza(value, _UIntArray___get_size__impl__r6l8ci(value) - 1 | 0);
    return this.rv(mostSignificant) + imul(_UIntArray___get_size__impl__r6l8ci(value) - 1 | 0, this.gv_1) | 0;
  };
  protoOf(BigInteger32Arithmetic).rv = function (value) {
    return this.gv_1 - this.pv(value) | 0;
  };
  protoOf(BigInteger32Arithmetic).sv = function (bigInteger) {
    // Inline function 'kotlin.collections.indexOfLast' call
    var tmp0 = _UIntArray___get_storage__impl__92a0v0(bigInteger);
    var tmp$ret$3;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var inductionVariable = tmp0.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          // Inline function 'kotlin.toUInt' call
          var this_0 = tmp0[index];
          // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.removeLeadingZeros.<anonymous>' call
          if (!(_UInt___init__impl__l7qpdl(this_0) === _UInt___init__impl__l7qpdl(0))) {
            tmp$ret$3 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$3 = -1;
    }
    var firstEmpty = tmp$ret$3 + 1 | 0;
    if (firstEmpty === -1 || firstEmpty === 0) {
      return this.iv_1;
    }
    // Inline function 'kotlin.collections.copyOfRange' call
    return _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(bigInteger), 0, firstEmpty));
  };
  protoOf(BigInteger32Arithmetic).tv = function (bigInteger) {
    var lastNonEmptyIndex = _UIntArray___get_size__impl__r6l8ci(bigInteger) - 1 | 0;
    if (lastNonEmptyIndex <= 0) {
      return 0;
    }
    var element = UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex);
    while (element === _UInt___init__impl__l7qpdl(0) && lastNonEmptyIndex > 0) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
      element = UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex);
    }
    if (UIntArray__get_impl_gp5kza(bigInteger, lastNonEmptyIndex) === _UInt___init__impl__l7qpdl(0)) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
    }
    return (_UIntArray___get_size__impl__r6l8ci(bigInteger) - lastNonEmptyIndex | 0) - 1 | 0;
  };
  protoOf(BigInteger32Arithmetic).uv = function (operand, places) {
    if (UIntArray__isEmpty_impl_vd8j4n(operand) || places === 0) {
      return operand;
    }
    var originalSize = _UIntArray___get_size__impl__r6l8ci(operand);
    var leadingZeros = this.pv(UIntArray__get_impl_gp5kza(operand, _UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0));
    var shiftWords = places / this.gv_1 | 0;
    var shiftBits = places % this.gv_1 | 0;
    var tmp;
    if (shiftBits > leadingZeros) {
      tmp = shiftWords + 1 | 0;
    } else {
      tmp = shiftWords;
    }
    var wordsNeeded = tmp;
    if (shiftBits === 0) {
      // Inline function 'kotlin.UIntArray' call
      var tmp_0 = 0;
      var tmp_1 = _UIntArray___get_size__impl__r6l8ci(operand) + wordsNeeded | 0;
      var tmp_2 = new Int32Array(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftLeft.<anonymous>' call
        // Inline function 'kotlin.UInt.toInt' call
        var this_0 = (0 <= tmp_3 ? tmp_3 < shiftWords : false) ? _UInt___init__impl__l7qpdl(0) : UIntArray__get_impl_gp5kza(operand, tmp_3 - shiftWords | 0);
        tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      return _UIntArray___init__impl__ghjpc6_0(tmp_2);
    }
    // Inline function 'kotlin.UIntArray' call
    var tmp_4 = 0;
    var tmp_5 = _UIntArray___get_size__impl__r6l8ci(operand) + wordsNeeded | 0;
    var tmp_6 = new Int32Array(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftLeft.<anonymous>' call
      var tmp_8;
      if (0 <= tmp_7 ? tmp_7 < shiftWords : false) {
        tmp_8 = _UInt___init__impl__l7qpdl(0);
      } else {
        if (tmp_7 === shiftWords) {
          // Inline function 'kotlin.UInt.shl' call
          var this_1 = UIntArray__get_impl_gp5kza(operand, tmp_7 - shiftWords | 0);
          tmp_8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_1) << shiftBits);
        } else {
          var containsLower = shiftWords + 1 | 0;
          if (tmp_7 < (originalSize + shiftWords | 0) ? containsLower <= tmp_7 : false) {
            // Inline function 'kotlin.UInt.shl' call
            var this_2 = UIntArray__get_impl_gp5kza(operand, tmp_7 - shiftWords | 0);
            var tmp6 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_2) << shiftBits);
            var tmp4 = UIntArray__get_impl_gp5kza(operand, (tmp_7 - shiftWords | 0) - 1 | 0);
            // Inline function 'kotlin.UInt.shr' call
            var bitCount = BigInteger32Arithmetic_getInstance().gv_1 - shiftBits | 0;
            // Inline function 'kotlin.UInt.or' call
            var other = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp4) >>> bitCount | 0);
            tmp_8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp6) | _UInt___get_data__impl__f0vqqw(other));
          } else {
            if (tmp_7 === ((originalSize + wordsNeeded | 0) - 1 | 0)) {
              var tmp8 = UIntArray__get_impl_gp5kza(operand, tmp_7 - wordsNeeded | 0);
              // Inline function 'kotlin.UInt.shr' call
              var bitCount_0 = BigInteger32Arithmetic_getInstance().gv_1 - shiftBits | 0;
              tmp_8 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp8) >>> bitCount_0 | 0);
            } else {
              throw RuntimeException_init_$Create$('Invalid case ' + tmp_7);
            }
          }
        }
      }
      // Inline function 'kotlin.UInt.toInt' call
      var this_3 = tmp_8;
      tmp_6[tmp_7] = _UInt___get_data__impl__f0vqqw(this_3);
      tmp_4 = tmp_4 + 1 | 0;
    }
    return _UIntArray___init__impl__ghjpc6_0(tmp_6);
  };
  protoOf(BigInteger32Arithmetic).vv = function (operand, places) {
    if (UIntArray__isEmpty_impl_vd8j4n(operand) || places === 0) {
      return operand;
    }
    var shiftBits = places % this.gv_1 | 0;
    var wordsToDiscard = places / this.gv_1 | 0;
    if (wordsToDiscard >= _UIntArray___get_size__impl__r6l8ci(operand)) {
      return this.iv_1;
    }
    if (shiftBits === 0) {
      // Inline function 'kotlin.collections.copyOfRange' call
      var toIndex = _UIntArray___get_size__impl__r6l8ci(operand);
      return _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(operand), wordsToDiscard, toIndex));
    }
    if (_UIntArray___get_size__impl__r6l8ci(operand) > 1 && (_UIntArray___get_size__impl__r6l8ci(operand) - wordsToDiscard | 0) === 1) {
      // Inline function 'kotlin.UInt.shr' call
      var this_0 = UIntArray__get_impl_gp5kza(operand, _UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0);
      var tmp$ret$1 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_0) >>> shiftBits | 0);
      // Inline function 'kotlin.uintArrayOf' call
      return _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$1]));
    }
    // Inline function 'kotlin.UIntArray' call
    var tmp = 0;
    var tmp_0 = _UIntArray___get_size__impl__r6l8ci(operand) - wordsToDiscard | 0;
    var tmp_1 = new Int32Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.shiftRight.<anonymous>' call
      var tmp_3;
      if (0 <= tmp_2 ? tmp_2 < ((_UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0) - wordsToDiscard | 0) : false) {
        // Inline function 'kotlin.UInt.shr' call
        var this_1 = UIntArray__get_impl_gp5kza(operand, tmp_2 + wordsToDiscard | 0);
        var tmp4 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_1) >>> shiftBits | 0);
        var tmp2 = UIntArray__get_impl_gp5kza(operand, (tmp_2 + wordsToDiscard | 0) + 1 | 0);
        // Inline function 'kotlin.UInt.shl' call
        var bitCount = BigInteger32Arithmetic_getInstance().gv_1 - shiftBits | 0;
        // Inline function 'kotlin.UInt.or' call
        var other = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp2) << bitCount);
        tmp_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp4) | _UInt___get_data__impl__f0vqqw(other));
      } else if (tmp_2 === ((_UIntArray___get_size__impl__r6l8ci(operand) - 1 | 0) - wordsToDiscard | 0)) {
        // Inline function 'kotlin.UInt.shr' call
        var this_2 = UIntArray__get_impl_gp5kza(operand, tmp_2 + wordsToDiscard | 0);
        tmp_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(this_2) >>> shiftBits | 0);
      } else {
        throw RuntimeException_init_$Create$('Invalid case ' + tmp_2);
      }
      // Inline function 'kotlin.UInt.toInt' call
      var this_3 = tmp_3;
      tmp_1[tmp_2] = _UInt___get_data__impl__f0vqqw(this_3);
      tmp = tmp + 1 | 0;
    }
    var result = _UIntArray___init__impl__ghjpc6_0(tmp_1);
    return this.sv(result);
  };
  protoOf(BigInteger32Arithmetic).wv = function (dividend, divisor) {
    var divisorSize = _UIntArray___get_size__impl__r6l8ci(divisor);
    var normalizationShift = this.pv(UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0));
    var divisorNormalized = this.xv(divisor, normalizationShift);
    var dividendNormalized = this.xv(dividend, normalizationShift);
    return new Triple(new UIntArray(dividendNormalized), new UIntArray(divisorNormalized), normalizationShift);
  };
  protoOf(BigInteger32Arithmetic).yv = function (remainderNormalized, normalizationShift) {
    var remainder = this.zv(remainderNormalized, normalizationShift);
    return remainder;
  };
  protoOf(BigInteger32Arithmetic).aw = function (first, second) {
    var firstStart = _UIntArray___get_size__impl__r6l8ci(first) - this.tv(first) | 0;
    var secondStart = _UIntArray___get_size__impl__r6l8ci(second) - this.tv(second) | 0;
    if (firstStart > secondStart) {
      return 1;
    }
    if (secondStart > firstStart) {
      return -1;
    }
    var counter = firstStart - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    $l$loop_0: while (counter >= 0) {
      var tmp0 = UIntArray__get_impl_gp5kza(first, counter);
      // Inline function 'kotlin.UInt.compareTo' call
      var other = UIntArray__get_impl_gp5kza(second, counter);
      if (uintCompare(_UInt___get_data__impl__f0vqqw(tmp0), _UInt___get_data__impl__f0vqqw(other)) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break $l$loop_0;
      }
      var tmp2 = UIntArray__get_impl_gp5kza(first, counter);
      // Inline function 'kotlin.UInt.compareTo' call
      var other_0 = UIntArray__get_impl_gp5kza(second, counter);
      if (uintCompare(_UInt___get_data__impl__f0vqqw(tmp2), _UInt___get_data__impl__f0vqqw(other_0)) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break $l$loop_0;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    } else {
      return -1;
    }
  };
  protoOf(BigInteger32Arithmetic).bw = function (first, second) {
    if (_UIntArray___get_size__impl__r6l8ci(first) === 1 && UIntArray__get_impl_gp5kza(first, 0) === _UInt___init__impl__l7qpdl(0))
      return second;
    if (_UIntArray___get_size__impl__r6l8ci(second) === 1 && UIntArray__get_impl_gp5kza(second, 0) === _UInt___init__impl__l7qpdl(0))
      return first;
    var tmp;
    if (_UIntArray___get_size__impl__r6l8ci(first) > _UIntArray___get_size__impl__r6l8ci(second)) {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(first), _UIntArray___get_size__impl__r6l8ci(second), new UIntArray(first), new UIntArray(second));
    } else {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(second), _UIntArray___get_size__impl__r6l8ci(first), new UIntArray(second), new UIntArray(first));
    }
    var _destruct__k2r9zo = tmp;
    var maxLength = _destruct__k2r9zo.ye();
    var minLength = _destruct__k2r9zo.ze();
    var largerData = _destruct__k2r9zo.nm().xm_1;
    var smallerData = _destruct__k2r9zo.ru().xm_1;
    // Inline function 'kotlin.UIntArray' call
    var tmp_0 = 0;
    var tmp_1 = maxLength + 1 | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.add.<anonymous>' call
      // Inline function 'kotlin.UInt.toInt' call
      var this_0 = _UInt___init__impl__l7qpdl(0);
      tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var i = 0;
    var sum = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < minLength) {
      var tmp2 = sum;
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_1 = UIntArray__get_impl_gp5kza(largerData, i);
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value = _UInt___get_data__impl__f0vqqw(this_1);
      var tmp$ret$4 = toLong(value).i3(new Long(-1, 0));
      // Inline function 'kotlin.ULong.plus' call
      var other = _ULong___init__impl__c78o9k(tmp$ret$4);
      var tmp4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).w2(_ULong___get_data__impl__fggpzb(other)));
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_2 = UIntArray__get_impl_gp5kza(smallerData, i);
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value_0 = _UInt___get_data__impl__f0vqqw(this_2);
      var tmp$ret$9 = toLong(value_0).i3(new Long(-1, 0));
      // Inline function 'kotlin.ULong.plus' call
      var other_0 = _ULong___init__impl__c78o9k(tmp$ret$9);
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4).w2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_4 = i;
      var tmp6 = sum;
      // Inline function 'kotlin.ULong.and' call
      var other_1 = this.bv_1;
      // Inline function 'kotlin.ULong.toUInt' call
      var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).i3(_ULong___get_data__impl__fggpzb(other_1)));
      // Inline function 'kotlin.toUInt' call
      var this_4 = _ULong___get_data__impl__fggpzb(this_3);
      var tmp$ret$16 = _UInt___init__impl__l7qpdl(this_4.l3());
      UIntArray__set_impl_7f2zu2(result, tmp_4, tmp$ret$16);
      var tmp9 = sum;
      // Inline function 'kotlin.ULong.shr' call
      var bitCount = this.gv_1;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9).h3(bitCount));
      i = i + 1 | 0;
    }
    while (true) {
      if (equals(sum, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
        while (i < maxLength) {
          UIntArray__set_impl_7f2zu2(result, i, UIntArray__get_impl_gp5kza(largerData, i));
          i = i + 1 | 0;
        }
        var tmp_5;
        if (UIntArray__get_impl_gp5kza(result, _UIntArray___get_size__impl__r6l8ci(result) - 1 | 0) === _UInt___init__impl__l7qpdl(0)) {
          // Inline function 'kotlin.collections.copyOfRange' call
          var toIndex = _UIntArray___get_size__impl__r6l8ci(result) - 1 | 0;
          tmp_5 = _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(result), 0, toIndex));
        } else {
          tmp_5 = result;
        }
        return tmp_5;
      }
      if (i === maxLength) {
        // Inline function 'kotlin.ULong.toUInt' call
        var this_5 = sum;
        // Inline function 'kotlin.toUInt' call
        var this_6 = _ULong___get_data__impl__fggpzb(this_5);
        var tmp$ret$20 = _UInt___init__impl__l7qpdl(this_6.l3());
        UIntArray__set_impl_7f2zu2(result, maxLength, tmp$ret$20);
        return result;
      }
      var tmp15 = sum;
      // Inline function 'kotlin.ULong.plus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_7 = UIntArray__get_impl_gp5kza(largerData, i);
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value_1 = _UInt___get_data__impl__f0vqqw(this_7);
      var tmp$ret$21 = toLong(value_1).i3(new Long(-1, 0));
      // Inline function 'kotlin.ULong.plus' call
      var other_2 = _ULong___init__impl__c78o9k(tmp$ret$21);
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp15).w2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_6 = i;
      var tmp17 = sum;
      // Inline function 'kotlin.ULong.and' call
      var other_3 = this.bv_1;
      // Inline function 'kotlin.ULong.toUInt' call
      var this_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp17).i3(_ULong___get_data__impl__fggpzb(other_3)));
      // Inline function 'kotlin.toUInt' call
      var this_9 = _ULong___get_data__impl__fggpzb(this_8);
      var tmp$ret$28 = _UInt___init__impl__l7qpdl(this_9.l3());
      UIntArray__set_impl_7f2zu2(result, tmp_6, tmp$ret$28);
      var tmp20 = sum;
      // Inline function 'kotlin.ULong.shr' call
      var bitCount_0 = this.gv_1;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp20).h3(bitCount_0));
      i = i + 1 | 0;
    }
  };
  protoOf(BigInteger32Arithmetic).cw = function (first, second) {
    var firstWithoutLeadingZeroes = this.sv(first);
    var secondWithoutLeadingZeroes = this.sv(second);
    var firstIsLarger = this.aw(firstWithoutLeadingZeroes, secondWithoutLeadingZeroes) === 1;
    var tmp;
    if (firstIsLarger) {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(firstWithoutLeadingZeroes), _UIntArray___get_size__impl__r6l8ci(secondWithoutLeadingZeroes), new UIntArray(firstWithoutLeadingZeroes), new UIntArray(secondWithoutLeadingZeroes));
    } else {
      tmp = new Quadruple(_UIntArray___get_size__impl__r6l8ci(secondWithoutLeadingZeroes), _UIntArray___get_size__impl__r6l8ci(firstWithoutLeadingZeroes), new UIntArray(secondWithoutLeadingZeroes), new UIntArray(firstWithoutLeadingZeroes));
    }
    var _destruct__k2r9zo = tmp;
    var largerLength = _destruct__k2r9zo.ye();
    var smallerLength = _destruct__k2r9zo.ze();
    var largerData = _destruct__k2r9zo.nm().xm_1;
    var smallerData = _destruct__k2r9zo.ru().xm_1;
    // Inline function 'kotlin.UIntArray' call
    var tmp_0 = 0;
    var tmp_1 = largerLength + 1 | 0;
    var tmp_2 = new Int32Array(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
      // Inline function 'kotlin.UInt.toInt' call
      var this_0 = _UInt___init__impl__l7qpdl(0);
      tmp_2[tmp_3] = _UInt___get_data__impl__f0vqqw(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = _UIntArray___init__impl__ghjpc6_0(tmp_2);
    var i = 0;
    var diff = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerLength) {
      if (i >= _UIntArray___get_size__impl__r6l8ci(largerData)) {
        println('Breakpoint');
      }
      if (i >= _UIntArray___get_size__impl__r6l8ci(smallerData)) {
        println('Breakpoint');
      }
      // Inline function 'kotlin.UInt.toULong' call
      var this_1 = UIntArray__get_impl_gp5kza(largerData, i);
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value = _UInt___get_data__impl__f0vqqw(this_1);
      var tmp$ret$4 = toLong(value).i3(new Long(-1, 0));
      var tmp3 = _ULong___init__impl__c78o9k(tmp$ret$4);
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.UInt.toULong' call
      var this_2 = UIntArray__get_impl_gp5kza(smallerData, i);
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value_0 = _UInt___get_data__impl__f0vqqw(this_2);
      var tmp$ret$7 = toLong(value_0).i3(new Long(-1, 0));
      // Inline function 'kotlin.ULong.minus' call
      var other = _ULong___init__impl__c78o9k(tmp$ret$7);
      var tmp5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3).x2(_ULong___get_data__impl__fggpzb(other)));
      // Inline function 'kotlin.ULong.minus' call
      var other_0 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp5).x2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_4 = i;
      // Inline function 'kotlin.ULong.toUInt' call
      var this_3 = diff;
      // Inline function 'kotlin.toUInt' call
      var this_4 = _ULong___get_data__impl__fggpzb(this_3);
      var tmp$ret$14 = _UInt___init__impl__l7qpdl(this_4.l3());
      UIntArray__set_impl_7f2zu2(result, tmp_4, tmp$ret$14);
      var tmp8 = diff;
      // Inline function 'kotlin.ULong.and' call
      var other_1 = this.dv_1;
      var tmp10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8).i3(_ULong___get_data__impl__fggpzb(other_1)));
      // Inline function 'kotlin.ULong.shr' call
      var bitCount = this.hv_1;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10).h3(bitCount));
      i = i + 1 | 0;
    }
    while (!equals(diff, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      var tmp12 = UIntArray__get_impl_gp5kza(largerData, i);
      // Inline function 'kotlin.UInt.minus' call
      var other_2 = diff;
      // Inline function 'kotlin.UInt.toULong' call
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value_1 = _UInt___get_data__impl__f0vqqw(tmp12);
      var tmp$ret$17 = toLong(value_1).i3(new Long(-1, 0));
      // Inline function 'kotlin.ULong.minus' call
      var this_5 = _ULong___init__impl__c78o9k(tmp$ret$17);
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).x2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_5 = i;
      // Inline function 'kotlin.ULong.toUInt' call
      var this_6 = diff;
      // Inline function 'kotlin.toUInt' call
      var this_7 = _ULong___get_data__impl__fggpzb(this_6);
      var tmp15 = _UInt___init__impl__l7qpdl(this_7.l3());
      // Inline function 'kotlin.UInt.and' call
      var other_3 = this.cv_1;
      var tmp$ret$24 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp15) & _UInt___get_data__impl__f0vqqw(other_3));
      UIntArray__set_impl_7f2zu2(result, tmp_5, tmp$ret$24);
      var tmp17 = diff;
      // Inline function 'kotlin.ULong.and' call
      var other_4 = this.dv_1;
      var tmp19 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp17).i3(_ULong___get_data__impl__fggpzb(other_4)));
      // Inline function 'kotlin.ULong.shr' call
      var bitCount_0 = this.hv_1;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp19).h3(bitCount_0));
      i = i + 1 | 0;
    }
    while (i < largerLength) {
      UIntArray__set_impl_7f2zu2(result, i, UIntArray__get_impl_gp5kza(largerData, i));
      i = i + 1 | 0;
    }
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$();
    var _iterator__ex2g4s = UIntArray__iterator_impl_tkdv7k(result);
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j().sm_1;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
      if (element === _UInt___init__impl__l7qpdl(0)) {
        destination.e(new UInt(element));
      }
    }
    if (destination.r()) {
      return this.iv_1;
    }
    // Inline function 'kotlin.collections.indexOfLast' call
    var tmp0 = _UIntArray___get_storage__impl__92a0v0(result);
    var tmp$ret$33;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfLast' call
      var inductionVariable = tmp0.length - 1 | 0;
      if (0 <= inductionVariable)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + -1 | 0;
          // Inline function 'kotlin.collections.indexOfLast.<anonymous>' call
          // Inline function 'kotlin.toUInt' call
          var this_8 = tmp0[index];
          // Inline function 'com.ionspin.kotlin.bignum.integer.base32.BigInteger32Arithmetic.subtract.<anonymous>' call
          if (!(_UInt___init__impl__l7qpdl(this_8) === _UInt___init__impl__l7qpdl(0))) {
            tmp$ret$33 = index;
            break $l$block;
          }
        }
         while (0 <= inductionVariable);
      tmp$ret$33 = -1;
    }
    var firstEmpty = tmp$ret$33 + 1 | 0;
    // Inline function 'kotlin.collections.copyOfRange' call
    return _UIntArray___init__impl__ghjpc6_0(copyOfRange(_UIntArray___get_storage__impl__92a0v0(result), 0, firstEmpty));
  };
  protoOf(BigInteger32Arithmetic).dw = function (first, second) {
    var result = _UIntArray___init__impl__ghjpc6(_UIntArray___get_size__impl__r6l8ci(first) + 1 | 0);
    var product;
    var sum;
    var inductionVariable = 0;
    var last = _UIntArray___get_size__impl__r6l8ci(first);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.UInt.toULong' call
        var this_0 = UIntArray__get_impl_gp5kza(first, i);
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value = _UInt___get_data__impl__f0vqqw(this_0);
        var tmp$ret$0 = toLong(value).i3(new Long(-1, 0));
        // Inline function 'kotlin.ULong.times' call
        var tmp1 = _ULong___init__impl__c78o9k(tmp$ret$0);
        // Inline function 'kotlin.UInt.toULong' call
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value_0 = _UInt___get_data__impl__f0vqqw(second);
        var tmp$ret$3 = toLong(value_0).i3(new Long(-1, 0));
        // Inline function 'kotlin.ULong.times' call
        var other = _ULong___init__impl__c78o9k(tmp$ret$3);
        product = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1).y2(_ULong___get_data__impl__fggpzb(other)));
        // Inline function 'kotlin.UInt.toULong' call
        var this_1 = UIntArray__get_impl_gp5kza(result, i);
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value_1 = _UInt___get_data__impl__f0vqqw(this_1);
        var tmp$ret$8 = toLong(value_1).i3(new Long(-1, 0));
        var tmp7 = _ULong___init__impl__c78o9k(tmp$ret$8);
        // Inline function 'kotlin.ULong.and' call
        var other_0 = this.bv_1;
        // Inline function 'kotlin.ULong.toUInt' call
        var this_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(product).i3(_ULong___get_data__impl__fggpzb(other_0)));
        // Inline function 'kotlin.toUInt' call
        var this_3 = _ULong___get_data__impl__fggpzb(this_2);
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_4 = _UInt___init__impl__l7qpdl(this_3.l3());
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value_2 = _UInt___get_data__impl__f0vqqw(this_4);
        var tmp$ret$14 = toLong(value_2).i3(new Long(-1, 0));
        // Inline function 'kotlin.ULong.plus' call
        var other_1 = _ULong___init__impl__c78o9k(tmp$ret$14);
        sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7).w2(_ULong___get_data__impl__fggpzb(other_1)));
        var tmp9 = sum;
        // Inline function 'kotlin.ULong.and' call
        var other_2 = this.bv_1;
        // Inline function 'kotlin.ULong.toUInt' call
        var this_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9).i3(_ULong___get_data__impl__fggpzb(other_2)));
        // Inline function 'kotlin.toUInt' call
        var this_6 = _ULong___get_data__impl__fggpzb(this_5);
        var tmp$ret$21 = _UInt___init__impl__l7qpdl(this_6.l3());
        UIntArray__set_impl_7f2zu2(result, i, tmp$ret$21);
        var tmp12 = sum;
        // Inline function 'kotlin.ULong.shr' call
        var bitCount = this.gv_1;
        sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12).h3(bitCount));
        var tmp = i + 1 | 0;
        // Inline function 'kotlin.ULong.shr' call
        var bitCount_0 = this.gv_1;
        // Inline function 'kotlin.ULong.toUInt' call
        var this_7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(product).h3(bitCount_0));
        // Inline function 'kotlin.toUInt' call
        var this_8 = _ULong___get_data__impl__fggpzb(this_7);
        var tmp18 = _UInt___init__impl__l7qpdl(this_8.l3());
        // Inline function 'kotlin.ULong.toUInt' call
        var this_9 = sum;
        // Inline function 'kotlin.toUInt' call
        var this_10 = _ULong___get_data__impl__fggpzb(this_9);
        // Inline function 'kotlin.UInt.plus' call
        var other_3 = _UInt___init__impl__l7qpdl(this_10.l3());
        var tmp$ret$28 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp18) + _UInt___get_data__impl__f0vqqw(other_3) | 0);
        UIntArray__set_impl_7f2zu2(result, tmp, tmp$ret$28);
      }
       while (inductionVariable < last);
    return this.sv(result);
  };
  protoOf(BigInteger32Arithmetic).ew = function (first, second) {
    return this.fw(first, second);
  };
  protoOf(BigInteger32Arithmetic).fw = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.gw(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new UIntArray(this.iv_1), new UIntArray(unnormalizedDividend));
    }
    if (_UIntArray___get_size__impl__r6l8ci(unnormalizedDivisor) === 1 && _UIntArray___get_size__impl__r6l8ci(unnormalizedDividend) === 1) {
      var tmp0 = UIntArray__get_impl_gp5kza(unnormalizedDividend, 0);
      // Inline function 'kotlin.UInt.div' call
      var other = UIntArray__get_impl_gp5kza(unnormalizedDivisor, 0);
      var tmp$ret$0 = uintDivide(tmp0, other);
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$1 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$0]));
      var tmp = this.sv(tmp$ret$1);
      var tmp3 = UIntArray__get_impl_gp5kza(unnormalizedDividend, 0);
      // Inline function 'kotlin.UInt.rem' call
      var other_0 = UIntArray__get_impl_gp5kza(unnormalizedDivisor, 0);
      var tmp$ret$2 = uintRemainder(tmp3, other_0);
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$3 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([tmp$ret$2]));
      return new Pair(new UIntArray(tmp), new UIntArray(this.sv(tmp$ret$3)));
    }
    var bitPrecision = this.qv(unnormalizedDividend) - this.qv(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      // Inline function 'kotlin.uintArrayOf' call
      var tmp$ret$4 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([_UInt___init__impl__l7qpdl(1)]));
      return new Pair(new UIntArray(tmp$ret$4), new UIntArray(this.hw(unnormalizedDividend, unnormalizedDivisor)));
    }
    var _destruct__k2r9zo = this.wv(unnormalizedDividend, unnormalizedDivisor);
    var dividend = _destruct__k2r9zo.ye().xm_1;
    var divisor = _destruct__k2r9zo.ze().xm_1;
    var normalizationShift = _destruct__k2r9zo.nm();
    var dividendSize = _UIntArray___get_size__impl__r6l8ci(dividend);
    var divisorSize = _UIntArray___get_size__impl__r6l8ci(divisor);
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = _UIntArray___init__impl__ghjpc6(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.xv(divisor, imul(wordPrecision, this.gv_1));
    if (this.gw(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = _UIntArray___init__impl__ghjpc6(wordPrecision + 1 | 0);
      UIntArray__set_impl_7f2zu2(quotient, wordPrecision, _UInt___init__impl__l7qpdl(1));
      dividend = this.hw(dividend, divisorTimesBaseToPowerOfM);
    }
    var inductionVariable = wordPrecision - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0;
        if ((divisorSize + j | 0) < _UIntArray___get_size__impl__r6l8ci(dividend)) {
          // Inline function 'kotlin.UInt.toULong' call
          var this_0 = UIntArray__get_impl_gp5kza(dividend, divisorSize + j | 0);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value = _UInt___get_data__impl__f0vqqw(this_0);
          var tmp$ret$5 = toLong(value).i3(new Long(-1, 0));
          var tmp8 = _ULong___init__impl__c78o9k(tmp$ret$5);
          // Inline function 'kotlin.ULong.shl' call
          var bitCount = this.gv_1;
          var tmp10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8).f3(bitCount));
          // Inline function 'kotlin.ULong.plus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_1 = UIntArray__get_impl_gp5kza(dividend, (divisorSize + j | 0) - 1 | 0);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value_0 = _UInt___get_data__impl__f0vqqw(this_1);
          var tmp$ret$9 = toLong(value_0).i3(new Long(-1, 0));
          // Inline function 'kotlin.ULong.plus' call
          var other_1 = _ULong___init__impl__c78o9k(tmp$ret$9);
          var tmp12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10).w2(_ULong___get_data__impl__fggpzb(other_1)));
          // Inline function 'kotlin.ULong.div' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_2 = UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value_1 = _UInt___get_data__impl__f0vqqw(this_2);
          var tmp$ret$14 = toLong(value_1).i3(new Long(-1, 0));
          // Inline function 'kotlin.ULong.div' call
          var other_2 = _ULong___init__impl__c78o9k(tmp$ret$14);
          tmp_0 = ulongDivide(tmp12, other_2);
        } else {
          var tmp_1;
          if ((divisorSize + j | 0) === _UIntArray___get_size__impl__r6l8ci(dividend)) {
            var tmp14 = UIntArray__get_impl_gp5kza(dividend, (divisorSize + j | 0) - 1 | 0);
            // Inline function 'kotlin.UInt.div' call
            var other_3 = UIntArray__get_impl_gp5kza(divisor, divisorSize - 1 | 0);
            // Inline function 'kotlin.UInt.toULong' call
            var this_3 = uintDivide(tmp14, other_3);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_2 = _UInt___get_data__impl__f0vqqw(this_3);
            var tmp$ret$20 = toLong(value_2).i3(new Long(-1, 0));
            tmp_1 = _ULong___init__impl__c78o9k(tmp$ret$20);
          } else {
            tmp_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
          }
          tmp_0 = tmp_1;
        }
        qjhat = tmp_0;
        var tmp_2 = quotient;
        var tmp_3;
        var tmp17 = this.fv_1;
        // Inline function 'kotlin.UInt.minus' call
        var other_4 = _ULong___init__impl__c78o9k(new Long(1, 0));
        // Inline function 'kotlin.UInt.toULong' call
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value_3 = _UInt___get_data__impl__f0vqqw(tmp17);
        var tmp$ret$23 = toLong(value_3).i3(new Long(-1, 0));
        // Inline function 'kotlin.ULong.minus' call
        var this_4 = _ULong___init__impl__c78o9k(tmp$ret$23);
        // Inline function 'kotlin.ULong.compareTo' call
        var other_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).x2(_ULong___get_data__impl__fggpzb(other_4)));
        if (ulongCompare(_ULong___get_data__impl__fggpzb(qjhat), _ULong___get_data__impl__fggpzb(other_5)) < 0) {
          // Inline function 'kotlin.ULong.toUInt' call
          // Inline function 'kotlin.toUInt' call
          var this_5 = _ULong___get_data__impl__fggpzb(qjhat);
          tmp_3 = _UInt___init__impl__l7qpdl(this_5.l3());
        } else {
          var tmp22 = this.fv_1;
          // Inline function 'kotlin.UInt.minus' call
          var other_6 = _UInt___init__impl__l7qpdl(1);
          tmp_3 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp22) - _UInt___get_data__impl__f0vqqw(other_6) | 0);
        }
        UIntArray__set_impl_7f2zu2(tmp_2, j, tmp_3);
        reconstructedQuotient = this.xv(this.iw(divisor, UIntArray__get_impl_gp5kza(quotient, j)), imul(j, this.gv_1));
        while (this.gw(reconstructedQuotient, dividend) > 0) {
          var tmp_4 = quotient;
          var tmp24 = UIntArray__get_impl_gp5kza(quotient, j);
          // Inline function 'kotlin.UInt.minus' call
          var other_7 = _UInt___init__impl__l7qpdl(1);
          var tmp$ret$32 = _UInt___init__impl__l7qpdl(_UInt___get_data__impl__f0vqqw(tmp24) - _UInt___get_data__impl__f0vqqw(other_7) | 0);
          UIntArray__set_impl_7f2zu2(tmp_4, j, tmp$ret$32);
          reconstructedQuotient = this.xv(this.iw(divisor, UIntArray__get_impl_gp5kza(quotient, j)), imul(j, this.gv_1));
        }
        dividend = this.hw(dividend, reconstructedQuotient);
      }
       while (0 <= inductionVariable);
    while (this.gw(dividend, divisor) >= 0) {
      quotient = this.jw(quotient, _UInt___init__impl__l7qpdl(1));
      dividend = this.hw(dividend, divisor);
    }
    var denormRemainder = this.yv(dividend, normalizationShift);
    return new Pair(new UIntArray(this.sv(quotient)), new UIntArray(denormRemainder));
  };
  protoOf(BigInteger32Arithmetic).xv = function (_this__u8e3s4, places) {
    return this.uv(_this__u8e3s4, places);
  };
  protoOf(BigInteger32Arithmetic).zv = function (_this__u8e3s4, places) {
    return this.vv(_this__u8e3s4, places);
  };
  protoOf(BigInteger32Arithmetic).hw = function (_this__u8e3s4, other) {
    return this.cw(_this__u8e3s4, other);
  };
  protoOf(BigInteger32Arithmetic).jw = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.uintArrayOf' call
    var tmp$ret$0 = _UIntArray___init__impl__ghjpc6_0(new Int32Array([other]));
    return this.bw(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger32Arithmetic).iw = function (_this__u8e3s4, other) {
    return this.dw(_this__u8e3s4, other);
  };
  protoOf(BigInteger32Arithmetic).gw = function (_this__u8e3s4, other) {
    return this.aw(_this__u8e3s4, other);
  };
  var BigInteger32Arithmetic_instance;
  function BigInteger32Arithmetic_getInstance() {
    if (BigInteger32Arithmetic_instance == null)
      new BigInteger32Arithmetic();
    return BigInteger32Arithmetic_instance;
  }
  function multiplyWithCorrectedSize($this, first, second, firstCorrectedSize, secondCorrectedSize) {
    if (isZero(first, $this) || isZero(second, $this)) {
      return $this.qs_1;
    }
    if ((firstCorrectedSize >= 120 || secondCorrectedSize >= 120) && (firstCorrectedSize <= 15000 || secondCorrectedSize < 15000)) {
      return karatsubaMultiplyWithCorrectedSizes($this, first, second, firstCorrectedSize, secondCorrectedSize);
    }
    if (firstCorrectedSize >= 15000 && secondCorrectedSize >= 15000) {
      return $this.kw(first, second);
    }
    return basecaseMultiplyWithCorrectedSize($this, first, second, firstCorrectedSize, secondCorrectedSize);
  }
  function basecaseMultiplyWithCorrectedSize($this, first, second, firstCorrectedSizeStart, secondCorrectedSizeStart) {
    var resultArray = $this.qs_1;
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = ULongArray__iterator_impl_cq4d2h(second);
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j().s1_1;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.basecaseMultiplyWithCorrectedSize.<anonymous>' call
      if (_unary__edvuaz > secondCorrectedSizeStart) {
        new ULongArray(resultArray);
      } else {
        resultArray = BigInteger63Arithmetic_getInstance().nw(resultArray, BigInteger63Arithmetic_getInstance().mw(BigInteger63Arithmetic_getInstance().lw(first, item), imul(_unary__edvuaz, BigInteger63Arithmetic_getInstance().vs_1)));
      }
    }
    return resultArray;
  }
  function karatsubaMultiplyWithCorrectedSizes($this, firstUnsigned, secondUnsigned, firstCorrectedSize, secondCorrectedSize) {
    var first = new SignedULongArray(firstUnsigned, true);
    var second = new SignedULongArray(secondUnsigned, true);
    // Inline function 'kotlin.math.max' call
    var halfLength = (Math.max(firstCorrectedSize, secondCorrectedSize) + 1 | 0) / 2 | 0;
    var mask = $this.ow($this.mw($this.rs_1, imul(halfLength, $this.ws_1)), _ULong___init__impl__c78o9k(new Long(1, 0)));
    var firstLower = $this.pw(first, mask);
    var firstHigher = $this.qw(first, imul(halfLength, $this.ws_1));
    var secondLower = $this.pw(second, mask);
    var secondHigher = $this.qw(second, imul(halfLength, $this.ws_1));
    var higherProduct = $this.rw(firstHigher, secondHigher);
    var lowerProduct = $this.rw(firstLower, secondLower);
    var middleProduct = $this.rw($this.sw(firstHigher, firstLower), $this.sw(secondHigher, secondLower));
    var result = $this.sw($this.sw($this.tw(higherProduct, imul(imul(2, $this.ws_1), halfLength)), $this.tw($this.uw($this.uw(middleProduct, higherProduct), lowerProduct), imul($this.ws_1, halfLength))), lowerProduct);
    return result.vw_1;
  }
  function isZero(_this__u8e3s4, $this) {
    if (equals(_this__u8e3s4, $this.qs_1))
      return true;
    if (_ULongArray___get_size__impl__ju6dtr(_this__u8e3s4) === 1 && equals(ULongArray__get_impl_pr71q9(_this__u8e3s4, 0), _ULong___init__impl__c78o9k(new Long(0, 0))))
      return true;
    if ((_ULongArray___get_size__impl__ju6dtr(_this__u8e3s4) - $this.xw(_this__u8e3s4) | 0) === 0)
      return true;
    return false;
  }
  function SignedULongArray(unsignedValue, sign) {
    this.vw_1 = unsignedValue;
    this.ww_1 = sign;
  }
  protoOf(SignedULongArray).yw = function (unsignedValue, sign) {
    return new SignedULongArray(unsignedValue, sign);
  };
  protoOf(SignedULongArray).zw = function (unsignedValue, sign, $super) {
    unsignedValue = unsignedValue === VOID ? this.vw_1 : unsignedValue;
    sign = sign === VOID ? this.ww_1 : sign;
    return $super === VOID ? this.yw(unsignedValue, sign) : $super.yw.call(this, new ULongArray(unsignedValue), sign);
  };
  protoOf(SignedULongArray).toString = function () {
    return 'SignedULongArray(unsignedValue=' + ULongArray__toString_impl_wqk1p5(this.vw_1) + ', sign=' + this.ww_1 + ')';
  };
  protoOf(SignedULongArray).hashCode = function () {
    var result = ULongArray__hashCode_impl_aze4wa(this.vw_1);
    result = imul(result, 31) + getBooleanHashCode(this.ww_1) | 0;
    return result;
  };
  protoOf(SignedULongArray).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof SignedULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof SignedULongArray ? other : THROW_CCE();
    if (!equals(this.vw_1, tmp0_other_with_cast.vw_1))
      return false;
    if (!(this.ww_1 === tmp0_other_with_cast.ww_1))
      return false;
    return true;
  };
  function signedAdd($this, first, second) {
    var tmp;
    if (!!(first.ww_1 ^ second.ww_1)) {
      var tmp_0;
      if ($this.bu(first.vw_1, second.vw_1) > 0) {
        tmp_0 = new SignedULongArray($this.ax(first.vw_1, second.vw_1), first.ww_1);
      } else {
        tmp_0 = new SignedULongArray($this.ax(second.vw_1, first.vw_1), second.ww_1);
      }
      tmp = tmp_0;
    } else {
      tmp = new SignedULongArray($this.nw(first.vw_1, second.vw_1), first.ww_1);
    }
    return tmp;
  }
  function signedSubtract($this, first, second) {
    return signedAdd($this, first, second.zw(VOID, !second.ww_1));
  }
  function signedMultiply($this, first, second) {
    return new SignedULongArray($this.bx(first.vw_1, second.vw_1), !!!(first.ww_1 ^ second.ww_1));
  }
  function signedDivide($this, first, second) {
    return new SignedULongArray($this.cx(first.vw_1, second.vw_1), !!!(first.ww_1 ^ second.ww_1));
  }
  function BigInteger63Arithmetic() {
    BigInteger63Arithmetic_instance = this;
    var tmp = this;
    // Inline function 'kotlin.longArrayOf' call
    tmp.ps_1 = longArrayOf([]);
    var tmp_0 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_0.qs_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0))]));
    var tmp_1 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_1.rs_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1, 0))]));
    var tmp_2 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_2.ss_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(2, 0))]));
    var tmp_3 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_3.ts_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10, 0))]));
    var tmp_4 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_4.us_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1431655765, 715827882))]));
    this.vs_1 = 63;
    this.ws_1 = 63;
    this.xs_1 = _ULong___init__impl__c78o9k(new Long(-1, 2147483647));
    var tmp_5 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    tmp_5.ys_1 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1, 2147483647))]));
    this.zs_1 = _ULong___init__impl__c78o9k(new Long(-1, 0));
    this.at_1 = _ULong___init__impl__c78o9k(new Long(0, 2147483647));
    this.bt_1 = _ULong___init__impl__c78o9k(new Long(0, -2147483648));
    this.ct_1 = 120;
    this.dt_1 = 15000;
    this.et_1 = false;
    this.ft_1 = new SignedULongArray(BigInteger63Arithmetic_getInstance().ss_1, true);
    var tmp_6 = this;
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_7 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_8 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_9 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_10 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_11 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_12 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_13 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_14 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(10000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_15 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(100000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_16 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1000000000, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_17 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1410065408, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_18 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1215752192, 23))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_19 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-727379968, 232))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_20 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1316134912, 2328))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_21 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(276447232, 23283))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_22 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1530494976, 232830))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_23 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1874919424, 2328306))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_24 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1569325056, 23283064))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_25 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1486618624, 232830643))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_26 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1981284352, 180822788)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_27 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1661992960, 1808227885)), _ULong___init__impl__c78o9k(new Long(10, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_28 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-559939584, 902409669)), _ULong___init__impl__c78o9k(new Long(108, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_29 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1304428544, 434162106)), _ULong___init__impl__c78o9k(new Long(1084, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_30 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-159383552, 46653770)), _ULong___init__impl__c78o9k(new Long(10842, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_31 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1593835520, 466537709)), _ULong___init__impl__c78o9k(new Long(108420, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_32 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1241513984, 370409800)), _ULong___init__impl__c78o9k(new Long(1084202, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_33 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-469762048, 1556614354)), _ULong___init__impl__c78o9k(new Long(10842021, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_34 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-402653184, 533758012)), _ULong___init__impl__c78o9k(new Long(108420217, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_35 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(268435456, 1042612833)), _ULong___init__impl__c78o9k(new Long(1084202172, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_36 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-1610612736, 1836193738)), _ULong___init__impl__c78o9k(new Long(-2042880164, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_37 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(1073741824, 1182068202)), _ULong___init__impl__c78o9k(new Long(1046034848, 25))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_38 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(-2147483648, 1083263782)), _ULong___init__impl__c78o9k(new Long(1870413893, 252))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_39 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 95219585)), _ULong___init__impl__c78o9k(new Long(1524269751, 2524))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_40 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 952195850)), _ULong___init__impl__c78o9k(new Long(-1937171674, 25243))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_41 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 932023908)), _ULong___init__impl__c78o9k(new Long(2103119744, 252435))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_42 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 730304488)), _ULong___init__impl__c78o9k(new Long(-443639036, 2524354))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_43 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 860593936)), _ULong___init__impl__c78o9k(new Long(-141423061, 25243548))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_44 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 16004768)), _ULong___init__impl__c78o9k(new Long(-1414230606, 252435489))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_45 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 160047680)), _ULong___init__impl__c78o9k(new Long(-1257404172, 376871248)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_46 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1600476800)), _ULong___init__impl__c78o9k(new Long(310860168, 1621228839)), _ULong___init__impl__c78o9k(new Long(11, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_47 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 972382464)), _ULong___init__impl__c78o9k(new Long(-1186365609, 1179902854)), _ULong___init__impl__c78o9k(new Long(117, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_48 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1133890048)), _ULong___init__impl__c78o9k(new Long(1021245802, 1061610307)), _ULong___init__impl__c78o9k(new Long(1175, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_49 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 601482240)), _ULong___init__impl__c78o9k(new Long(1622523433, 2026168480)), _ULong___init__impl__c78o9k(new Long(11754, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_50 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1719855104)), _ULong___init__impl__c78o9k(new Long(-954634852, 934331971)), _ULong___init__impl__c78o9k(new Long(117549, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_51 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 18681856)), _ULong___init__impl__c78o9k(new Long(-956413920, 753385125)), _ULong___init__impl__c78o9k(new Long(1175494, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_52 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 186818560)), _ULong___init__impl__c78o9k(new Long(-974204608, 1091400313)), _ULong___init__impl__c78o9k(new Long(11754943, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_53 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1868185600)), _ULong___init__impl__c78o9k(new Long(-1152111488, 176584897)), _ULong___init__impl__c78o9k(new Long(117549435, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_54 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1501986816)), _ULong___init__impl__c78o9k(new Long(1363787016, 1765848977)), _ULong___init__impl__c78o9k(new Long(1175494350, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_55 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 2134966272)), _ULong___init__impl__c78o9k(new Long(752968278, 478620589)), _ULong___init__impl__c78o9k(new Long(-1129958380, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_56 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 2022309888)), _ULong___init__impl__c78o9k(new Long(-1060251803, 491238595)), _ULong___init__impl__c78o9k(new Long(1585318090, 27))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_57 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 895746048)), _ULong___init__impl__c78o9k(new Long(-2012583429, 617418661)), _ULong___init__impl__c78o9k(new Long(-1326688282, 273))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_58 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 367525888)), _ULong___init__impl__c78o9k(new Long(1349002194, 1879219319)), _ULong___init__impl__c78o9k(new Long(-381980930, 2736))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_59 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1527775232)), _ULong___init__impl__c78o9k(new Long(605120053, 1612324009)), _ULong___init__impl__c78o9k(new Long(475158004, 27369))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_60 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 245366784)), _ULong___init__impl__c78o9k(new Long(1756233241, 1090854555)), _ULong___init__impl__c78o9k(new Long(456612751, 273691))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_61 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 306184192)), _ULong___init__impl__c78o9k(new Long(382463227, 171127314)), _ULong___init__impl__c78o9k(new Long(271160219, 2736911))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_62 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 914358272)), _ULong___init__impl__c78o9k(new Long(-470335025, 1711273140)), _ULong___init__impl__c78o9k(new Long(-1583365106, 27369110))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_63 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 553648128)), _ULong___init__impl__c78o9k(new Long(-408382950, 2080345872)), _ULong___init__impl__c78o9k(new Long(1346218131, 273691106))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_64 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1241513984)), _ULong___init__impl__c78o9k(new Long(211137798, 1476105897)), _ULong___init__impl__c78o9k(new Long(577279431, 589427415)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_65 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1677721600)), _ULong___init__impl__c78o9k(new Long(2111377985, 1876157082)), _ULong___init__impl__c78o9k(new Long(1477827020, 1599306855)), _ULong___init__impl__c78o9k(new Long(12, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_66 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1744830464)), _ULong___init__impl__c78o9k(new Long(-361056623, 1581701640)), _ULong___init__impl__c78o9k(new Long(1893368320, 960683017)), _ULong___init__impl__c78o9k(new Long(127, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_67 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 268435456)), _ULong___init__impl__c78o9k(new Long(684401074, 784630873)), _ULong___init__impl__c78o9k(new Long(1753814023, 1016895582)), _ULong___init__impl__c78o9k(new Long(1274, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_68 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 536870912)), _ULong___init__impl__c78o9k(new Long(-1745923851, 1403857787)), _ULong___init__impl__c78o9k(new Long(358271049, 1579021232)), _ULong___init__impl__c78o9k(new Long(12744, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_69 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 1073741824)), _ULong___init__impl__c78o9k(new Long(-279369324, 1153675987)), _ULong___init__impl__c78o9k(new Long(-712256800, 757826784)), _ULong___init__impl__c78o9k(new Long(127447, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_70 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1501274061, 799341639)), _ULong___init__impl__c78o9k(new Long(1467366597, 1135816904)), _ULong___init__impl__c78o9k(new Long(1274473, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_71 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2127838722, 1550965449)), _ULong___init__impl__c78o9k(new Long(1788764085, 620750803)), _ULong___init__impl__c78o9k(new Long(12744735, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_72 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-196449260, 477268958)), _ULong___init__impl__c78o9k(new Long(707771673, 1912540738)), _ULong___init__impl__c78o9k(new Long(127447352, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_73 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1964492600, 477722293)), _ULong___init__impl__c78o9k(new Long(-1512217860, 1945538197)), _ULong___init__impl__c78o9k(new Long(1274473528, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_74 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1829910480, 482255639)), _ULong___init__impl__c78o9k(new Long(2057690586, 128029144)), _ULong___init__impl__c78o9k(new Long(-140166599, 2))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_75 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1119235616, 527589098)), _ULong___init__impl__c78o9k(new Long(-897930618, 1280291444)), _ULong___init__impl__c78o9k(new Long(-1401665990, 29))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_76 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1692545728, 980923686)), _ULong___init__impl__c78o9k(new Long(-389371586, 2065496207)), _ULong___init__impl__c78o9k(new Long(-1131758007, 296))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_77 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(254411904, 1219302274)), _ULong___init__impl__c78o9k(new Long(401251440, 1327609247)), _ULong___init__impl__c78o9k(new Long(1567321827, 2967))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_78 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1750848256, 1455604500)), _ULong___init__impl__c78o9k(new Long(-282452891, 391190582)), _ULong___init__impl__c78o9k(new Long(-1506650908, 29673))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_79 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-328613376, 1671143117)), _ULong___init__impl__c78o9k(new Long(1470438392, 1764422181)), _ULong___init__impl__c78o9k(new Long(2113360105, 296736))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_80 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1008833536, 1679045643)), _ULong___init__impl__c78o9k(new Long(1819482039, 464352629)), _ULong___init__impl__c78o9k(new Long(-341235422, 2967364))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_81 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1498400768, 1758070896)), _ULong___init__impl__c78o9k(new Long(1014951213, 348558998)), _ULong___init__impl__c78o9k(new Long(882613078, 29673649))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_82 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2099105792, 400839779)), _ULong___init__impl__c78o9k(new Long(1559577546, 1338106334)), _ULong___init__impl__c78o9k(new Long(236196189, 296736492))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_83 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-483778560, 1860914146)), _ULong___init__impl__c78o9k(new Long(-1584093723, 496161455)), _ULong___init__impl__c78o9k(new Long(-1933005400, 819881272)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_84 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-542818304, 1429272284)), _ULong___init__impl__c78o9k(new Long(1338931962, 666647260)), _ULong___init__impl__c78o9k(new Long(2144782482, 1756361781)), _ULong___init__impl__c78o9k(new Long(13, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_85 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1133215744, 1407820960)), _ULong___init__impl__c78o9k(new Long(504417738, 224021659)), _ULong___init__impl__c78o9k(new Long(-27011657, 383748630)), _ULong___init__impl__c78o9k(new Long(138, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_86 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1552744448, 1193307719)), _ULong___init__impl__c78o9k(new Long(749210090, 92732943)), _ULong___init__impl__c78o9k(new Long(-270116569, 1690002661)), _ULong___init__impl__c78o9k(new Long(1381, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_87 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1652424704, 1195658953)), _ULong___init__impl__c78o9k(new Long(-1097833687, 927329431)), _ULong___init__impl__c78o9k(new Long(1593801606, 1867641083)), _ULong___init__impl__c78o9k(new Long(13817, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_88 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(655622144, 1219171296)), _ULong___init__impl__c78o9k(new Long(1906565023, 683359725)), _ULong___init__impl__c78o9k(new Long(-1241853120, 1496541649)), _ULong___init__impl__c78o9k(new Long(138178, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_89 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-2033713152, 1454294721)), _ULong___init__impl__c78o9k(new Long(1885781051, 391146310)), _ULong___init__impl__c78o9k(new Long(466370691, 2080514609)), _ULong___init__impl__c78o9k(new Long(1381786, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_90 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1137704960, 1658045327)), _ULong___init__impl__c78o9k(new Long(1677941332, 1763979456)), _ULong___init__impl__c78o9k(new Long(368739615, 1477793259)), _ULong___init__impl__c78o9k(new Long(13817869, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_91 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1507852288, 1548067736)), _ULong___init__impl__c78o9k(new Long(-400455857, 459925379)), _ULong___init__impl__c78o9k(new Long(-607571138, 1893030702)), _ULong___init__impl__c78o9k(new Long(138178696, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_92 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(2101346304, 448291830)), _ULong___init__impl__c78o9k(new Long(290408733, 304286503)), _ULong___init__impl__c78o9k(new Long(-1780744082, 1750437844)), _ULong___init__impl__c78o9k(new Long(1381786968, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_93 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-461373440, 187951008)), _ULong___init__impl__c78o9k(new Long(-1390879964, 895381382)), _ULong___init__impl__c78o9k(new Long(-627571635, 324509261)), _ULong___init__impl__c78o9k(new Long(932967800, 3))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_94 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-318767104, 1879510088)), _ULong___init__impl__c78o9k(new Long(-1023897752, 363879234)), _ULong___init__impl__c78o9k(new Long(-1980749050, 1097608970)), _ULong___init__impl__c78o9k(new Long(739743409, 32))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_95 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1107296256, 1615231705)), _ULong___init__impl__c78o9k(new Long(-1649042920, 1491308699)), _ULong___init__impl__c78o9k(new Long(1667345981, 238671465)), _ULong___init__impl__c78o9k(new Long(-1192500497, 321))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_96 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-1811939328, 1119931516)), _ULong___init__impl__c78o9k(new Long(689439991, 2028185108)), _ULong___init__impl__c78o9k(new Long(-506409368, 239231005)), _ULong___init__impl__c78o9k(new Long(959896919, 3217))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_97 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-939524096, 461896925)), _ULong___init__impl__c78o9k(new Long(-1695534677, 954498249)), _ULong___init__impl__c78o9k(new Long(-769126375, 244826410)), _ULong___init__impl__c78o9k(new Long(1009034599, 32172))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_98 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-805306368, 324001961)), _ULong___init__impl__c78o9k(new Long(224522416, 955047904)), _ULong___init__impl__c78o9k(new Long(898670846, 300780460)), _ULong___init__impl__c78o9k(new Long(1500411399, 321722))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_99 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(536870912, 1092535970)), _ULong___init__impl__c78o9k(new Long(-2049743135, 960544448)), _ULong___init__impl__c78o9k(new Long(396773872, 860320954)), _ULong___init__impl__c78o9k(new Long(2119212103, 3217223))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_100 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1073741824, 187941461)), _ULong___init__impl__c78o9k(new Long(977405135, 1015509893)), _ULong___init__impl__c78o9k(new Long(-327228572, 13274948)), _ULong___init__impl__c78o9k(new Long(-282715446, 32172234))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_101 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(-2147483648, 1879414612)), _ULong___init__impl__c78o9k(new Long(1184116758, 1565164340)), _ULong___init__impl__c78o9k(new Long(1022681580, 132749489)), _ULong___init__impl__c78o9k(new Long(1467812836, 321722349))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_102 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1614276941)), _ULong___init__impl__c78o9k(new Long(-1043734300, 619257866)), _ULong___init__impl__c78o9k(new Long(1636881215, 1327494892)), _ULong___init__impl__c78o9k(new Long(1793226472, 1069739845)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_103 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1110383874)), _ULong___init__impl__c78o9k(new Long(-1847408401, 1897611371)), _ULong___init__impl__c78o9k(new Long(-811057032, 390047035)), _ULong___init__impl__c78o9k(new Long(752395542, 2107463862)), _ULong___init__impl__c78o9k(new Long(14, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_104 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 366420500)), _ULong___init__impl__c78o9k(new Long(-1294214821, 1796244531)), _ULong___init__impl__c78o9k(new Long(479364280, 1752986710)), _ULong___init__impl__c78o9k(new Long(-1065979171, 1747285789)), _ULong___init__impl__c78o9k(new Long(149, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_105 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1516721352)), _ULong___init__impl__c78o9k(new Long(-57246321, 782576132)), _ULong___init__impl__c78o9k(new Long(498675512, 349997917)), _ULong___init__impl__c78o9k(new Long(-2069857110, 292988713)), _ULong___init__impl__c78o9k(new Long(1498, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp_106 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 134827984)), _ULong___init__impl__c78o9k(new Long(-572463203, 1383310385)), _ULong___init__impl__c78o9k(new Long(691787827, 1352495523)), _ULong___init__impl__c78o9k(new Long(776265381, 782403487)), _ULong___init__impl__c78o9k(new Long(14981, 0))]));
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$107 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(0, 1348279840)), _ULong___init__impl__c78o9k(new Long(-1429664734, 948201970)), _ULong___init__impl__c78o9k(new Long(-1672056316, 640053343)), _ULong___init__impl__c78o9k(new Long(-827280776, 1381583927)), _ULong___init__impl__c78o9k(new Long(149813, 0))]));
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp_6.gt_1 = [new ULongArray(tmp_7), new ULongArray(tmp_8), new ULongArray(tmp_9), new ULongArray(tmp_10), new ULongArray(tmp_11), new ULongArray(tmp_12), new ULongArray(tmp_13), new ULongArray(tmp_14), new ULongArray(tmp_15), new ULongArray(tmp_16), new ULongArray(tmp_17), new ULongArray(tmp_18), new ULongArray(tmp_19), new ULongArray(tmp_20), new ULongArray(tmp_21), new ULongArray(tmp_22), new ULongArray(tmp_23), new ULongArray(tmp_24), new ULongArray(tmp_25), new ULongArray(tmp_26), new ULongArray(tmp_27), new ULongArray(tmp_28), new ULongArray(tmp_29), new ULongArray(tmp_30), new ULongArray(tmp_31), new ULongArray(tmp_32), new ULongArray(tmp_33), new ULongArray(tmp_34), new ULongArray(tmp_35), new ULongArray(tmp_36), new ULongArray(tmp_37), new ULongArray(tmp_38), new ULongArray(tmp_39), new ULongArray(tmp_40), new ULongArray(tmp_41), new ULongArray(tmp_42), new ULongArray(tmp_43), new ULongArray(tmp_44), new ULongArray(tmp_45), new ULongArray(tmp_46), new ULongArray(tmp_47), new ULongArray(tmp_48), new ULongArray(tmp_49), new ULongArray(tmp_50), new ULongArray(tmp_51), new ULongArray(tmp_52), new ULongArray(tmp_53), new ULongArray(tmp_54), new ULongArray(tmp_55), new ULongArray(tmp_56), new ULongArray(tmp_57), new ULongArray(tmp_58), new ULongArray(tmp_59), new ULongArray(tmp_60), new ULongArray(tmp_61), new ULongArray(tmp_62), new ULongArray(tmp_63), new ULongArray(tmp_64), new ULongArray(tmp_65), new ULongArray(tmp_66), new ULongArray(tmp_67), new ULongArray(tmp_68), new ULongArray(tmp_69), new ULongArray(tmp_70), new ULongArray(tmp_71), new ULongArray(tmp_72), new ULongArray(tmp_73), new ULongArray(tmp_74), new ULongArray(tmp_75), new ULongArray(tmp_76), new ULongArray(tmp_77), new ULongArray(tmp_78), new ULongArray(tmp_79), new ULongArray(tmp_80), new ULongArray(tmp_81), new ULongArray(tmp_82), new ULongArray(tmp_83), new ULongArray(tmp_84), new ULongArray(tmp_85), new ULongArray(tmp_86), new ULongArray(tmp_87), new ULongArray(tmp_88), new ULongArray(tmp_89), new ULongArray(tmp_90), new ULongArray(tmp_91), new ULongArray(tmp_92), new ULongArray(tmp_93), new ULongArray(tmp_94), new ULongArray(tmp_95), new ULongArray(tmp_96), new ULongArray(tmp_97), new ULongArray(tmp_98), new ULongArray(tmp_99), new ULongArray(tmp_100), new ULongArray(tmp_101), new ULongArray(tmp_102), new ULongArray(tmp_103), new ULongArray(tmp_104), new ULongArray(tmp_105), new ULongArray(tmp_106), new ULongArray(tmp$ret$107)];
  }
  protoOf(BigInteger63Arithmetic).as = function () {
    return this.qs_1;
  };
  protoOf(BigInteger63Arithmetic).bs = function () {
    return this.rs_1;
  };
  protoOf(BigInteger63Arithmetic).cs = function () {
    return this.ss_1;
  };
  protoOf(BigInteger63Arithmetic).ds = function () {
    return this.ts_1;
  };
  protoOf(BigInteger63Arithmetic).dx = function (value) {
    var x = value;
    var y;
    var n = 63;
    // Inline function 'kotlin.ULong.shr' call
    var this_0 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(32));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 32 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_1 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(16));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 16 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_2 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(8));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 8 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_3 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).h3(4));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 4 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_4 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).h3(2));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      n = n - 2 | 0;
      x = y;
    }
    // Inline function 'kotlin.ULong.shr' call
    var this_5 = x;
    y = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).h3(1));
    if (!equals(y, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      return n - 2 | 0;
    }
    var tmp = n;
    // Inline function 'kotlin.ULong.toInt' call
    var this_6 = x;
    return tmp - _ULong___get_data__impl__fggpzb(this_6).l3() | 0;
  };
  protoOf(BigInteger63Arithmetic).au = function (value) {
    if (isZero(value, this)) {
      return 0;
    }
    var start = (_ULongArray___get_size__impl__ju6dtr(value) - this.xw(value) | 0) - 1 | 0;
    var mostSignificant = ULongArray__get_impl_pr71q9(value, start);
    return this.ex(mostSignificant) + imul(start, 63) | 0;
  };
  protoOf(BigInteger63Arithmetic).ex = function (value) {
    return 63 - this.dx(value) | 0;
  };
  protoOf(BigInteger63Arithmetic).ht = function (bigInteger) {
    var correctedSize = _ULongArray___get_size__impl__ju6dtr(bigInteger) - this.xw(bigInteger) | 0;
    if (correctedSize === 0) {
      return this.qs_1;
    }
    if (_ULongArray___get_size__impl__ju6dtr(bigInteger) === correctedSize) {
      return bigInteger;
    }
    if (false) {}
    // Inline function 'kotlin.collections.copyOfRange' call
    return _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(bigInteger), 0, correctedSize));
  };
  protoOf(BigInteger63Arithmetic).xw = function (bigInteger) {
    var lastNonEmptyIndex = _ULongArray___get_size__impl__ju6dtr(bigInteger) - 1 | 0;
    if (lastNonEmptyIndex <= 0) {
      return 0;
    }
    var element = ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex);
    while (equals(element, _ULong___init__impl__c78o9k(new Long(0, 0))) && lastNonEmptyIndex > 0) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
      element = ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex);
    }
    if (equals(ULongArray__get_impl_pr71q9(bigInteger, lastNonEmptyIndex), _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      lastNonEmptyIndex = lastNonEmptyIndex - 1 | 0;
    }
    return (_ULongArray___get_size__impl__ju6dtr(bigInteger) - lastNonEmptyIndex | 0) - 1 | 0;
  };
  protoOf(BigInteger63Arithmetic).fx = function (operand, places) {
    if (isZero(operand, this)) {
      return operand;
    }
    if (places === 0) {
      return operand;
    }
    if (ULongArray__isEmpty_impl_c3yngu(operand)) {
      return this.qs_1;
    }
    var leadingZeroWords = this.xw(operand);
    if (_ULongArray___get_size__impl__ju6dtr(operand) === leadingZeroWords) {
      return this.qs_1;
    }
    var originalSize = _ULongArray___get_size__impl__ju6dtr(operand) - leadingZeroWords | 0;
    var leadingZeros = this.dx(ULongArray__get_impl_pr71q9(operand, originalSize - 1 | 0));
    var shiftWords = places / this.vs_1 | 0;
    var shiftBits = places % this.vs_1 | 0;
    var tmp;
    if (shiftBits > leadingZeros) {
      tmp = shiftWords + 1 | 0;
    } else {
      tmp = shiftWords;
    }
    var wordsNeeded = tmp;
    if (shiftBits === 0) {
      // Inline function 'kotlin.ULongArray' call
      var tmp_0 = 0;
      var tmp_1 = originalSize + wordsNeeded | 0;
      var tmp_2 = longArray(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftLeft.<anonymous>' call
        // Inline function 'kotlin.ULong.toLong' call
        var this_0 = (0 <= tmp_3 ? tmp_3 < shiftWords : false) ? _ULong___init__impl__c78o9k(new Long(0, 0)) : ULongArray__get_impl_pr71q9(operand, tmp_3 - shiftWords | 0);
        tmp_2[tmp_3] = _ULong___get_data__impl__fggpzb(this_0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      return _ULongArray___init__impl__twm1l3(tmp_2);
    }
    // Inline function 'kotlin.ULongArray' call
    var tmp_4 = 0;
    var tmp_5 = originalSize + wordsNeeded | 0;
    var tmp_6 = longArray(tmp_5);
    while (tmp_4 < tmp_5) {
      var tmp_7 = tmp_4;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftLeft.<anonymous>' call
      var tmp_8;
      if (0 <= tmp_7 ? tmp_7 < shiftWords : false) {
        tmp_8 = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        if (tmp_7 === shiftWords) {
          // Inline function 'kotlin.ULong.shl' call
          var this_1 = ULongArray__get_impl_pr71q9(operand, tmp_7 - shiftWords | 0);
          var tmp2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).f3(shiftBits));
          // Inline function 'kotlin.ULong.and' call
          var other = BigInteger63Arithmetic_getInstance().xs_1;
          tmp_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).i3(_ULong___get_data__impl__fggpzb(other)));
        } else {
          var containsLower = shiftWords + 1 | 0;
          if (tmp_7 < (originalSize + shiftWords | 0) ? containsLower <= tmp_7 : false) {
            // Inline function 'kotlin.ULong.shl' call
            var this_2 = ULongArray__get_impl_pr71q9(operand, tmp_7 - shiftWords | 0);
            var tmp6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).f3(shiftBits));
            // Inline function 'kotlin.ULong.and' call
            var other_0 = BigInteger63Arithmetic_getInstance().xs_1;
            var tmp10 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).i3(_ULong___get_data__impl__fggpzb(other_0)));
            var tmp8 = ULongArray__get_impl_pr71q9(operand, (tmp_7 - shiftWords | 0) - 1 | 0);
            // Inline function 'kotlin.ULong.shr' call
            var bitCount = BigInteger63Arithmetic_getInstance().vs_1 - shiftBits | 0;
            // Inline function 'kotlin.ULong.or' call
            var other_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8).h3(bitCount));
            tmp_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10).j3(_ULong___get_data__impl__fggpzb(other_1)));
          } else {
            if (tmp_7 === ((originalSize + wordsNeeded | 0) - 1 | 0)) {
              var tmp12 = ULongArray__get_impl_pr71q9(operand, tmp_7 - wordsNeeded | 0);
              // Inline function 'kotlin.ULong.shr' call
              var bitCount_0 = BigInteger63Arithmetic_getInstance().vs_1 - shiftBits | 0;
              tmp_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12).h3(bitCount_0));
            } else {
              throw RuntimeException_init_$Create$('Invalid case ' + tmp_7);
            }
          }
        }
      }
      // Inline function 'kotlin.ULong.toLong' call
      var this_3 = tmp_8;
      tmp_6[tmp_7] = _ULong___get_data__impl__fggpzb(this_3);
      tmp_4 = tmp_4 + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_6);
  };
  protoOf(BigInteger63Arithmetic).cu = function (operand, places) {
    if (ULongArray__isEmpty_impl_c3yngu(operand) || places === 0) {
      return operand;
    }
    var leadingZeroWords = this.xw(operand);
    var realOperandSize = _ULongArray___get_size__impl__ju6dtr(operand) - leadingZeroWords | 0;
    var shiftBits = places % this.vs_1 | 0;
    var wordsToDiscard = places / this.vs_1 | 0;
    if (wordsToDiscard >= realOperandSize) {
      return this.qs_1;
    }
    if (shiftBits === 0) {
      // Inline function 'kotlin.collections.copyOfRange' call
      var fromIndex = realOperandSize - wordsToDiscard | 0;
      _ULongArray___init__impl__twm1l3(copyOfRange_0(_ULongArray___get_storage__impl__28e64j(operand), fromIndex, realOperandSize));
    }
    if (realOperandSize > 1 && (realOperandSize - wordsToDiscard | 0) === 1) {
      // Inline function 'kotlin.ULong.shr' call
      var this_0 = ULongArray__get_impl_pr71q9(operand, realOperandSize - 1 | 0);
      var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(shiftBits));
      // Inline function 'kotlin.ulongArrayOf' call
      return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    }
    var newLength = realOperandSize - wordsToDiscard | 0;
    if (newLength === 0) {
      return this.qs_1;
    }
    // Inline function 'kotlin.ULongArray' call
    var tmp = 0;
    var tmp_0 = realOperandSize - wordsToDiscard | 0;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.shiftRight.<anonymous>' call
      var tmp_3;
      if (0 <= tmp_2 ? tmp_2 < ((realOperandSize - 1 | 0) - wordsToDiscard | 0) : false) {
        // Inline function 'kotlin.ULong.shr' call
        var this_1 = ULongArray__get_impl_pr71q9(operand, tmp_2 + wordsToDiscard | 0);
        var tmp6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(shiftBits));
        var tmp2 = ULongArray__get_impl_pr71q9(operand, (tmp_2 + wordsToDiscard | 0) + 1 | 0);
        // Inline function 'kotlin.ULong.shl' call
        var bitCount = BigInteger63Arithmetic_getInstance().vs_1 - shiftBits | 0;
        var tmp4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).f3(bitCount));
        // Inline function 'kotlin.ULong.and' call
        var other = BigInteger63Arithmetic_getInstance().xs_1;
        // Inline function 'kotlin.ULong.or' call
        var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4).i3(_ULong___get_data__impl__fggpzb(other)));
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).j3(_ULong___get_data__impl__fggpzb(other_0)));
      } else if (tmp_2 === ((realOperandSize - 1 | 0) - wordsToDiscard | 0)) {
        // Inline function 'kotlin.ULong.shr' call
        var this_2 = ULongArray__get_impl_pr71q9(operand, tmp_2 + wordsToDiscard | 0);
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(shiftBits));
      } else {
        throw RuntimeException_init_$Create$('Invalid case ' + tmp_2);
      }
      // Inline function 'kotlin.ULong.toLong' call
      var this_3 = tmp_3;
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_3);
      tmp = tmp + 1 | 0;
    }
    var result = _ULongArray___init__impl__twm1l3(tmp_1);
    return result;
  };
  protoOf(BigInteger63Arithmetic).gx = function (first, second, firstStart, secondStart) {
    if (firstStart > secondStart) {
      return 1;
    }
    if (secondStart > firstStart) {
      return -1;
    }
    var counter = firstStart - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    $l$loop_0: while (counter >= 0) {
      var tmp0 = ULongArray__get_impl_pr71q9(first, counter);
      // Inline function 'kotlin.ULong.compareTo' call
      var other = ULongArray__get_impl_pr71q9(second, counter);
      if (ulongCompare(_ULong___get_data__impl__fggpzb(tmp0), _ULong___get_data__impl__fggpzb(other)) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break $l$loop_0;
      }
      var tmp2 = ULongArray__get_impl_pr71q9(first, counter);
      // Inline function 'kotlin.ULong.compareTo' call
      var other_0 = ULongArray__get_impl_pr71q9(second, counter);
      if (ulongCompare(_ULong___get_data__impl__fggpzb(tmp2), _ULong___get_data__impl__fggpzb(other_0)) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break $l$loop_0;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    } else {
      return -1;
    }
  };
  protoOf(BigInteger63Arithmetic).ns = function (first, second) {
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.xw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.xw(second) | 0;
    return this.gx(first, second, firstStart, secondStart);
  };
  protoOf(BigInteger63Arithmetic).hx = function (resultArray, resultArrayStart, first, second) {
    if (isZero(first, this)) {
      // Inline function 'kotlin.collections.copyInto' call
      var endIndex = _ULongArray___get_size__impl__ju6dtr(first);
      var tmp0 = _ULongArray___get_storage__impl__28e64j(first);
      // Inline function 'kotlin.collections.copyInto' call
      var destination = _ULongArray___get_storage__impl__28e64j(resultArray);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp = tmp0;
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      arrayCopy(tmp, destination, resultArrayStart, 0, endIndex);
      return Unit_instance;
    }
    if (isZero(second, this)) {
      // Inline function 'kotlin.collections.copyInto' call
      var endIndex_0 = _ULongArray___get_size__impl__ju6dtr(second);
      var tmp0_0 = _ULongArray___get_storage__impl__28e64j(second);
      // Inline function 'kotlin.collections.copyInto' call
      var destination_0 = _ULongArray___get_storage__impl__28e64j(resultArray);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp_0 = tmp0_0;
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      arrayCopy(tmp_0, destination_0, resultArrayStart, 0, endIndex_0);
      return Unit_instance;
    }
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.xw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.xw(second) | 0;
    var tmp_1;
    if (firstStart > secondStart) {
      tmp_1 = new Sextuple(_ULongArray___get_size__impl__ju6dtr(first), _ULongArray___get_size__impl__ju6dtr(second), new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp_1 = new Sextuple(_ULongArray___get_size__impl__ju6dtr(second), _ULongArray___get_size__impl__ju6dtr(first), new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var _destruct__k2r9zo = tmp_1;
    var largerLength = _destruct__k2r9zo.ye();
    var smallerLength = _destruct__k2r9zo.ze();
    var largerData = _destruct__k2r9zo.nm().hn_1;
    var smallerData = _destruct__k2r9zo.ru().hn_1;
    var largerStart = _destruct__k2r9zo.su();
    var smallerStart = _destruct__k2r9zo.tu();
    var i = 0;
    var sum = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerStart) {
      var tmp10 = sum;
      // Inline function 'kotlin.ULong.plus' call
      var other = ULongArray__get_impl_pr71q9(largerData, i);
      var tmp12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10).w2(_ULong___get_data__impl__fggpzb(other)));
      // Inline function 'kotlin.ULong.plus' call
      var other_0 = ULongArray__get_impl_pr71q9(smallerData, i);
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12).w2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_2 = i + resultArrayStart | 0;
      var tmp14 = sum;
      // Inline function 'kotlin.ULong.and' call
      var other_1 = this.xs_1;
      var tmp$ret$14 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp14).i3(_ULong___get_data__impl__fggpzb(other_1)));
      ULongArray__set_impl_z19mvh(resultArray, tmp_2, tmp$ret$14);
      // Inline function 'kotlin.ULong.shr' call
      var this_0 = sum;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(63));
      i = i + 1 | 0;
    }
    while (true) {
      if (equals(sum, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
        while (i < largerStart) {
          ULongArray__set_impl_z19mvh(resultArray, i + resultArrayStart | 0, ULongArray__get_impl_pr71q9(largerData, i));
          i = i + 1 | 0;
        }
        return Unit_instance;
      }
      if (i === largerLength) {
        ULongArray__set_impl_z19mvh(resultArray, largerLength + resultArrayStart | 0, sum);
        return Unit_instance;
      }
      var tmp18 = sum;
      // Inline function 'kotlin.ULong.plus' call
      var other_2 = ULongArray__get_impl_pr71q9(largerData, i);
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp18).w2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_3 = i;
      var tmp20 = sum;
      // Inline function 'kotlin.ULong.and' call
      var other_3 = this.xs_1;
      var tmp$ret$17 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp20).i3(_ULong___get_data__impl__fggpzb(other_3)));
      ULongArray__set_impl_z19mvh(resultArray, tmp_3, tmp$ret$17);
      // Inline function 'kotlin.ULong.shr' call
      var this_1 = sum;
      sum = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(63));
      i = i + 1 | 0;
    }
  };
  protoOf(BigInteger63Arithmetic).kt = function (first, second) {
    if (isZero(first, this))
      return second;
    if (isZero(second, this))
      return first;
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.xw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.xw(second) | 0;
    var tmp;
    if (firstStart > secondStart) {
      tmp = new Sextuple(_ULongArray___get_size__impl__ju6dtr(first), _ULongArray___get_size__impl__ju6dtr(second), new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp = new Sextuple(_ULongArray___get_size__impl__ju6dtr(second), _ULongArray___get_size__impl__ju6dtr(first), new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var _destruct__k2r9zo = tmp;
    var largerLength = _destruct__k2r9zo.ye();
    var smallerLength = _destruct__k2r9zo.ze();
    var largerData = _destruct__k2r9zo.nm().hn_1;
    var smallerData = _destruct__k2r9zo.ru().hn_1;
    var largerStart = _destruct__k2r9zo.su();
    var smallerStart = _destruct__k2r9zo.tu();
    // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.possibleAdditionOverflow' call
    var firstMostSignificant = ULongArray__get_impl_pr71q9(largerData, largerStart - 1 | 0);
    var secondMostSignificant = ULongArray__get_impl_pr71q9(smallerData, smallerStart - 1 | 0);
    var tmp_0;
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(new Long(0, 1610612736));
    var tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstMostSignificant).i3(_ULong___get_data__impl__fggpzb(other)));
    if (!equals(tmp$ret$0, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      tmp_0 = true;
    } else {
      // Inline function 'kotlin.ULong.and' call
      var other_0 = _ULong___init__impl__c78o9k(new Long(0, 1610612736));
      var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(secondMostSignificant).i3(_ULong___get_data__impl__fggpzb(other_0)));
      tmp_0 = !equals(tmp$ret$1, _ULong___init__impl__c78o9k(new Long(0, 0)));
    }
    var possibleOverflow = tmp_0;
    var possibleOverflow_0 = possibleOverflow;
    var tmp_1;
    if (possibleOverflow_0) {
      // Inline function 'kotlin.ULongArray' call
      var tmp_2 = 0;
      var tmp_3 = largerLength + 1 | 0;
      var tmp_4 = longArray(tmp_3);
      while (tmp_2 < tmp_3) {
        var tmp_5 = tmp_2;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.add.<anonymous>' call
        // Inline function 'kotlin.ULong.toLong' call
        var this_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_4[tmp_5] = _ULong___get_data__impl__fggpzb(this_0);
        tmp_2 = tmp_2 + 1 | 0;
      }
      tmp_1 = _ULongArray___init__impl__twm1l3(tmp_4);
    } else {
      // Inline function 'kotlin.ULongArray' call
      var tmp_6 = 0;
      var tmp_7 = longArray(largerLength);
      while (tmp_6 < largerLength) {
        var tmp_8 = tmp_6;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.add.<anonymous>' call
        // Inline function 'kotlin.ULong.toLong' call
        var this_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_7[tmp_8] = _ULong___get_data__impl__fggpzb(this_1);
        tmp_6 = tmp_6 + 1 | 0;
      }
      tmp_1 = _ULongArray___init__impl__twm1l3(tmp_7);
    }
    var result = tmp_1;
    this.hx(result, 0, first, second);
    var tmp_9;
    if (possibleOverflow_0) {
      tmp_9 = this.ht(result);
    } else {
      tmp_9 = result;
    }
    return tmp_9;
  };
  protoOf(BigInteger63Arithmetic).ix = function (first, second, firstStart, secondStart) {
    var comparison = this.gx(first, second, firstStart, secondStart);
    var firstSize = firstStart + 1 | 0;
    var secondSize = secondStart + 1 | 0;
    var firstIsLarger = comparison === 1;
    if (comparison === 0)
      return this.qs_1;
    if (secondSize === 1 && equals(ULongArray__get_impl_pr71q9(second, 0), _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      return first;
    }
    if (!firstIsLarger) {
      throw RuntimeException_init_$Create$('subtract result less than zero');
    }
    var tmp;
    if (firstIsLarger) {
      tmp = new Quadruple(new ULongArray(first), new ULongArray(second), firstStart, secondStart);
    } else {
      tmp = new Quadruple(new ULongArray(second), new ULongArray(first), secondStart, firstStart);
    }
    var _destruct__k2r9zo = tmp;
    var largerData = _destruct__k2r9zo.ye().hn_1;
    var smallerData = _destruct__k2r9zo.ze().hn_1;
    var largerStart = _destruct__k2r9zo.nm();
    var smallerStart = _destruct__k2r9zo.ru();
    // Inline function 'kotlin.ULongArray' call
    var tmp_0 = 0;
    var tmp_1 = longArray(largerStart);
    while (tmp_0 < largerStart) {
      var tmp_2 = tmp_0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.subtractWithStartIndexes.<anonymous>' call
      // Inline function 'kotlin.ULong.toLong' call
      var this_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    var result = _ULongArray___init__impl__twm1l3(tmp_1);
    var i = 0;
    var diff = _ULong___init__impl__c78o9k(new Long(0, 0));
    while (i < smallerStart) {
      var tmp2 = ULongArray__get_impl_pr71q9(largerData, i);
      // Inline function 'kotlin.ULong.minus' call
      var other = ULongArray__get_impl_pr71q9(smallerData, i);
      var tmp4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).x2(_ULong___get_data__impl__fggpzb(other)));
      // Inline function 'kotlin.ULong.minus' call
      var other_0 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4).x2(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp_3 = i;
      var tmp6 = diff;
      // Inline function 'kotlin.ULong.and' call
      var other_1 = this.xs_1;
      var tmp$ret$6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).i3(_ULong___get_data__impl__fggpzb(other_1)));
      ULongArray__set_impl_z19mvh(result, tmp_3, tmp$ret$6);
      // Inline function 'kotlin.ULong.shr' call
      var this_1 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(63));
      i = i + 1 | 0;
    }
    while (!equals(diff, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      var tmp10 = ULongArray__get_impl_pr71q9(largerData, i);
      // Inline function 'kotlin.ULong.minus' call
      var other_2 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp10).x2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp_4 = i;
      var tmp12 = diff;
      // Inline function 'kotlin.ULong.and' call
      var other_3 = this.xs_1;
      var tmp$ret$9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp12).i3(_ULong___get_data__impl__fggpzb(other_3)));
      ULongArray__set_impl_z19mvh(result, tmp_4, tmp$ret$9);
      // Inline function 'kotlin.ULong.shr' call
      var this_2 = diff;
      diff = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(63));
      i = i + 1 | 0;
    }
    while (i < largerStart) {
      ULongArray__set_impl_z19mvh(result, i, ULongArray__get_impl_pr71q9(largerData, i));
      i = i + 1 | 0;
    }
    if (this.xw(result) === (_ULongArray___get_size__impl__ju6dtr(result) - 1 | 0) && equals(ULongArray__get_impl_pr71q9(result, 0), _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      return this.qs_1;
    }
    return this.ht(result);
  };
  protoOf(BigInteger63Arithmetic).jt = function (first, second) {
    var firstStart = _ULongArray___get_size__impl__ju6dtr(first) - this.xw(first) | 0;
    var secondStart = _ULongArray___get_size__impl__ju6dtr(second) - this.xw(second) | 0;
    return this.ix(first, second, firstStart, secondStart);
  };
  protoOf(BigInteger63Arithmetic).qt = function (first, second) {
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(first) - this.xw(first) | 0;
    var secondCorrectedSize = _ULongArray___get_size__impl__ju6dtr(second) - this.xw(second) | 0;
    return multiplyWithCorrectedSize(this, first, second, firstCorrectedSize, secondCorrectedSize);
  };
  protoOf(BigInteger63Arithmetic).jx = function (original, numberOfWords, value) {
    // Inline function 'kotlin.ULongArray' call
    var tmp = 0;
    var tmp_0 = _ULongArray___get_size__impl__ju6dtr(original) + numberOfWords | 0;
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.extendULongArray.<anonymous>' call
      // Inline function 'kotlin.ULong.toLong' call
      var this_0 = tmp_2 < _ULongArray___get_size__impl__ju6dtr(original) ? ULongArray__get_impl_pr71q9(original, tmp_2) : value;
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_0);
      tmp = tmp + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_1);
  };
  protoOf(BigInteger63Arithmetic).kw = function (firstUnchecked, secondUnchecked) {
    var tmp;
    if (!((_ULongArray___get_size__impl__ju6dtr(firstUnchecked) % 3 | 0) === 0)) {
      // Inline function 'kotlin.ULongArray' call
      var tmp_0 = 0;
      var tmp_1 = imul((_ULongArray___get_size__impl__ju6dtr(firstUnchecked) + 2 | 0) / 3 | 0, 3) - _ULongArray___get_size__impl__ju6dtr(firstUnchecked) | 0;
      var tmp_2 = longArray(tmp_1);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.toomCook3Multiply.<anonymous>' call
        // Inline function 'kotlin.ULong.toLong' call
        var this_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_2[tmp_3] = _ULong___get_data__impl__fggpzb(this_0);
        tmp_0 = tmp_0 + 1 | 0;
      }
      var tmp$ret$3 = _ULongArray___init__impl__twm1l3(tmp_2);
      // Inline function 'kotlin.collections.asIterable' call
      var tmp$ret$4 = new ULongArray(tmp$ret$3);
      tmp = plus(new ULongArray(firstUnchecked), tmp$ret$4);
    } else {
      tmp = new ULongArray(firstUnchecked);
    }
    var first = toULongArray(tmp);
    var tmp_4;
    if (!((_ULongArray___get_size__impl__ju6dtr(secondUnchecked) % 3 | 0) === 0)) {
      // Inline function 'kotlin.ULongArray' call
      var tmp_5 = 0;
      var tmp_6 = imul((_ULongArray___get_size__impl__ju6dtr(secondUnchecked) + 2 | 0) / 3 | 0, 3) - _ULongArray___get_size__impl__ju6dtr(secondUnchecked) | 0;
      var tmp_7 = longArray(tmp_6);
      while (tmp_5 < tmp_6) {
        var tmp_8 = tmp_5;
        // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.toomCook3Multiply.<anonymous>' call
        // Inline function 'kotlin.ULong.toLong' call
        var this_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_7[tmp_8] = _ULong___get_data__impl__fggpzb(this_1);
        tmp_5 = tmp_5 + 1 | 0;
      }
      var tmp$ret$8 = _ULongArray___init__impl__twm1l3(tmp_7);
      // Inline function 'kotlin.collections.asIterable' call
      var tmp$ret$9 = new ULongArray(tmp$ret$8);
      tmp_4 = plus(new ULongArray(secondUnchecked), tmp$ret$9);
    } else {
      tmp_4 = new ULongArray(secondUnchecked);
    }
    var second = toULongArray(tmp_4);
    var firstLength = _ULongArray___get_size__impl__ju6dtr(first);
    var secondLength = _ULongArray___get_size__impl__ju6dtr(second);
    var tmp_9;
    if (firstLength > secondLength) {
      var prepared = this.jx(second, firstLength - secondLength | 0, _ULong___init__impl__c78o9k(new Long(0, 0)));
      tmp_9 = new Pair(new ULongArray(first), new ULongArray(prepared));
    } else if (firstLength < secondLength) {
      var prepared_0 = this.jx(first, secondLength - firstLength | 0, _ULong___init__impl__c78o9k(new Long(0, 0)));
      tmp_9 = new Pair(new ULongArray(prepared_0), new ULongArray(second));
    } else {
      tmp_9 = new Pair(new ULongArray(first), new ULongArray(second));
    }
    var _destruct__k2r9zo = tmp_9;
    var firstPrepared = _destruct__k2r9zo.ye().hn_1;
    var secondPrepared = _destruct__k2r9zo.ze().hn_1;
    var tmp6 = _ULongArray___get_size__impl__ju6dtr(first);
    // Inline function 'kotlin.math.max' call
    var b = _ULongArray___get_size__impl__ju6dtr(second);
    var longestLength = Math.max(tmp6, b);
    var extendedDigit = (longestLength + 2 | 0) / 3 | 0;
    var m0 = new SignedULongArray(toULongArray(slice(firstPrepared, until(0, extendedDigit))), true);
    var m1 = new SignedULongArray(toULongArray(slice(firstPrepared, until(extendedDigit, imul(extendedDigit, 2)))), true);
    var m2 = new SignedULongArray(toULongArray(slice(firstPrepared, until(imul(extendedDigit, 2), imul(extendedDigit, 3)))), true);
    var n0 = new SignedULongArray(toULongArray(slice(secondPrepared, until(0, extendedDigit))), true);
    var n1 = new SignedULongArray(toULongArray(slice(secondPrepared, until(extendedDigit, imul(extendedDigit, 2)))), true);
    var n2 = new SignedULongArray(toULongArray(slice(secondPrepared, until(imul(extendedDigit, 2), imul(extendedDigit, 3)))), true);
    var p0 = this.sw(m0, m2);
    var pe0 = m0;
    var pe1 = this.sw(p0, m1);
    var pem1 = this.uw(p0, m1);
    var doublePemM2 = this.rw(this.sw(pem1, m2), this.ft_1);
    var pem2 = this.uw(doublePemM2, m0);
    var pinf = m2;
    var q0 = this.sw(n0, n2);
    var qe0 = n0;
    var qe1 = this.sw(q0, n1);
    var qem1 = this.uw(q0, n1);
    var doubleQemN2 = this.rw(this.sw(qem1, n2), this.ft_1);
    var qem2 = this.uw(doubleQemN2, n0);
    var qinf = n2;
    var re0 = this.rw(pe0, qe0);
    var re1 = this.rw(pe1, qe1);
    var rem1 = this.rw(pem1, qem1);
    var rem2 = this.rw(pem2, qem2);
    var rinf = this.rw(pinf, qinf);
    var r0 = re0;
    var r4 = rinf;
    var rem2re1diff = this.uw(rem2, re1);
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$11 = _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(3, 0))]));
    var r3 = this.kx(rem2re1diff, new SignedULongArray(tmp$ret$11, true));
    var r1 = this.qw(this.uw(re1, rem1), 1);
    var r2 = this.uw(rem1, r0);
    r3 = this.sw(this.qw(this.uw(r2, r3), 1), this.rw(this.ft_1, rinf));
    r2 = this.uw(this.sw(r2, r1), r4);
    r1 = this.uw(r1, r3);
    var bShiftAmount = imul(extendedDigit, 63);
    var rb0 = r0;
    var rb1 = this.tw(r1, bShiftAmount);
    var rb2 = this.tw(r2, imul(bShiftAmount, 2));
    var rb3 = this.tw(r3, imul(bShiftAmount, 3));
    var rb4 = this.tw(r4, imul(bShiftAmount, 4));
    var rb = this.sw(this.sw(this.sw(this.sw(rb0, rb1), rb2), rb3), rb4);
    return rb.vw_1;
  };
  protoOf(BigInteger63Arithmetic).lw = function (first, second) {
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(first) - this.xw(first) | 0;
    return this.lx(first, second, firstCorrectedSize);
  };
  protoOf(BigInteger63Arithmetic).lx = function (first, second, firstCorrectedSize) {
    // Inline function 'kotlin.ULong.and' call
    var other = this.zs_1;
    var secondLow = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(second).i3(_ULong___get_data__impl__fggpzb(other)));
    // Inline function 'kotlin.ULong.shr' call
    var secondHigh = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(second).h3(32));
    var requiredBits = this.au(first) + this.ex(second) | 0;
    var tmp;
    if (!((requiredBits % 63 | 0) === 0)) {
      tmp = (requiredBits / 63 | 0) + 1 | 0;
    } else {
      tmp = requiredBits / 63 | 0;
    }
    var requiredWords = tmp;
    var result = _ULongArray___init__impl__twm1l3_0(requiredWords);
    var carryIntoNextRound = _ULong___init__impl__c78o9k(new Long(0, 0));
    var i = 0;
    var j = 0;
    while (i < firstCorrectedSize) {
      var tmp4 = ULongArray__get_impl_pr71q9(first, i);
      // Inline function 'kotlin.ULong.and' call
      var other_0 = this.zs_1;
      var firstLow = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4).i3(_ULong___get_data__impl__fggpzb(other_0)));
      // Inline function 'kotlin.ULong.shr' call
      var this_0 = ULongArray__get_impl_pr71q9(first, i);
      var firstHigh = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(32));
      i = i + 1 | 0;
      // Inline function 'kotlin.ULong.times' call
      var lowerProduct = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstLow).y2(_ULong___get_data__impl__fggpzb(secondLow)));
      // Inline function 'kotlin.ULong.shr' call
      var lowerCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowerProduct).h3(63));
      var tmp14 = carryIntoNextRound;
      // Inline function 'kotlin.ULong.and' call
      var other_1 = this.xs_1;
      // Inline function 'kotlin.ULong.plus' call
      var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(lowerProduct).i3(_ULong___get_data__impl__fggpzb(other_1)));
      var lowResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp14).w2(_ULong___get_data__impl__fggpzb(other_2)));
      var tmp18 = lowerCarry;
      // Inline function 'kotlin.ULong.shr' call
      var this_1 = lowResult;
      // Inline function 'kotlin.ULong.plus' call
      var other_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(63));
      lowerCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp18).w2(_ULong___get_data__impl__fggpzb(other_3)));
      var tmp20 = lowResult;
      // Inline function 'kotlin.ULong.and' call
      var other_4 = this.xs_1;
      lowResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp20).i3(_ULong___get_data__impl__fggpzb(other_4)));
      // Inline function 'kotlin.ULong.times' call
      var tmp26 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstLow).y2(_ULong___get_data__impl__fggpzb(secondHigh)));
      // Inline function 'kotlin.ULong.times' call
      // Inline function 'kotlin.ULong.plus' call
      var other_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(secondLow).y2(_ULong___get_data__impl__fggpzb(firstHigh)));
      var middleProduct = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp26).w2(_ULong___get_data__impl__fggpzb(other_5)));
      var middleCarry = lowerCarry;
      var tmp30 = middleCarry;
      // Inline function 'kotlin.ULong.shr' call
      // Inline function 'kotlin.ULong.plus' call
      var other_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(middleProduct).h3(31));
      middleCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp30).w2(_ULong___get_data__impl__fggpzb(other_6)));
      var tmp36 = lowResult;
      // Inline function 'kotlin.ULong.shl' call
      var tmp34 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(middleProduct).f3(32));
      // Inline function 'kotlin.ULong.and' call
      var other_7 = this.xs_1;
      // Inline function 'kotlin.ULong.plus' call
      var other_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp34).i3(_ULong___get_data__impl__fggpzb(other_7)));
      lowResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp36).w2(_ULong___get_data__impl__fggpzb(other_8)));
      var tmp40 = middleCarry;
      // Inline function 'kotlin.ULong.shr' call
      var this_2 = lowResult;
      // Inline function 'kotlin.ULong.plus' call
      var other_9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(63));
      middleCarry = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp40).w2(_ULong___get_data__impl__fggpzb(other_9)));
      var tmp_0 = j;
      var tmp42 = lowResult;
      // Inline function 'kotlin.ULong.and' call
      var other_10 = this.xs_1;
      var tmp$ret$21 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp42).i3(_ULong___get_data__impl__fggpzb(other_10)));
      ULongArray__set_impl_z19mvh(result, tmp_0, tmp$ret$21);
      var highResult = middleCarry;
      // Inline function 'kotlin.ULong.times' call
      // Inline function 'kotlin.ULong.shl' call
      var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(firstHigh).y2(_ULong___get_data__impl__fggpzb(secondHigh)));
      var higherProduct = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).f3(1));
      // Inline function 'kotlin.ULong.plus' call
      var this_4 = highResult;
      highResult = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_4).w2(_ULong___get_data__impl__fggpzb(higherProduct)));
      carryIntoNextRound = highResult;
      j = j + 1 | 0;
    }
    if (!equals(carryIntoNextRound, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      ULongArray__set_impl_z19mvh(result, j, carryIntoNextRound);
    }
    return result;
  };
  protoOf(BigInteger63Arithmetic).vt = function (base, exponent) {
    if (exponent.equals(new Long(0, 0))) {
      return this.rs_1;
    }
    if (exponent.equals(new Long(1, 0))) {
      return base;
    }
    if (_ULongArray___get_size__impl__ju6dtr(base) === 1 && equals(ULongArray__get_impl_pr71q9(base, 0), _ULong___init__impl__c78o9k(new Long(10, 0))) && exponent.d1(toLong(this.gt_1.length)) < 0) {
      return this.gt_1[exponent.l3()].hn_1;
    }
    var firstCorrectedSize = _ULongArray___get_size__impl__ju6dtr(base) - this.xw(base) | 0;
    var helperVar = this.rs_1;
    var exponentVar = exponent;
    var baseVar = base;
    while (exponentVar.d1(new Long(1, 0)) > 0) {
      // Inline function 'kotlin.Long.rem' call
      if (exponentVar.a3(toLong(2)).equals(new Long(0, 0))) {
        baseVar = this.bx(baseVar, baseVar);
        // Inline function 'kotlin.Long.div' call
        exponentVar = exponentVar.z2(toLong(2));
      } else {
        helperVar = this.bx(baseVar, helperVar);
        baseVar = this.bx(baseVar, baseVar);
        // Inline function 'kotlin.Long.minus' call
        // Inline function 'kotlin.Long.div' call
        exponentVar = exponentVar.x2(toLong(1)).z2(toLong(2));
      }
    }
    return this.bx(helperVar, baseVar);
  };
  protoOf(BigInteger63Arithmetic).mx = function (dividend, divisor) {
    var divisorSize = _ULongArray___get_size__impl__ju6dtr(divisor);
    var normalizationShift = this.dx(ULongArray__get_impl_pr71q9(divisor, divisorSize - 1 | 0));
    var divisorNormalized = this.mw(divisor, normalizationShift);
    var dividendNormalized = this.mw(dividend, normalizationShift);
    return new Triple(new ULongArray(dividendNormalized), new ULongArray(divisorNormalized), normalizationShift);
  };
  protoOf(BigInteger63Arithmetic).nx = function (remainderNormalized, normalizationShift) {
    var remainder = this.ox(remainderNormalized, normalizationShift);
    return remainder;
  };
  protoOf(BigInteger63Arithmetic).px = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.bu(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new ULongArray(this.qs_1), new ULongArray(unnormalizedDividend));
    }
    if (_ULongArray___get_size__impl__ju6dtr(unnormalizedDivisor) === 1 && _ULongArray___get_size__impl__ju6dtr(unnormalizedDividend) === 1) {
      var tmp0 = ULongArray__get_impl_pr71q9(unnormalizedDividend, 0);
      // Inline function 'kotlin.ULong.div' call
      var other = ULongArray__get_impl_pr71q9(unnormalizedDivisor, 0);
      var tmp$ret$0 = ulongDivide(tmp0, other);
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$1 = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
      var tmp = this.ht(tmp$ret$1);
      var tmp3 = ULongArray__get_impl_pr71q9(unnormalizedDividend, 0);
      // Inline function 'kotlin.ULong.rem' call
      var other_0 = ULongArray__get_impl_pr71q9(unnormalizedDivisor, 0);
      var tmp$ret$2 = ulongRemainder(tmp3, other_0);
      // Inline function 'kotlin.ulongArrayOf' call
      var tmp$ret$3 = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$2]));
      return new Pair(new ULongArray(tmp), new ULongArray(this.ht(tmp$ret$3)));
    }
    var bitPrecision = this.au(unnormalizedDividend) - this.au(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      return new Pair(new ULongArray(this.rs_1), new ULongArray(this.ax(unnormalizedDividend, unnormalizedDivisor)));
    }
    var _destruct__k2r9zo = this.mx(unnormalizedDividend, unnormalizedDivisor);
    var dividend = _destruct__k2r9zo.ye().hn_1;
    var divisor = _destruct__k2r9zo.ze().hn_1;
    var normalizationShift = _destruct__k2r9zo.nm();
    var dividendSize = _ULongArray___get_size__impl__ju6dtr(dividend);
    var divisorSize = _ULongArray___get_size__impl__ju6dtr(divisor);
    var divisorCorrectedSize = _ULongArray___get_size__impl__ju6dtr(divisor) - this.xw(divisor) | 0;
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = _ULongArray___init__impl__twm1l3_0(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.mw(divisor, imul(wordPrecision, this.vs_1));
    if (this.bu(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = _ULongArray___init__impl__twm1l3_0(wordPrecision + 1 | 0);
      ULongArray__set_impl_z19mvh(quotient, wordPrecision, _ULong___init__impl__c78o9k(new Long(1, 0)));
      dividend = this.ax(dividend, divisorTimesBaseToPowerOfM);
    }
    var inductionVariable = wordPrecision - 1 | 0;
    if (0 <= inductionVariable)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var tmp_0;
        if ((divisorSize + j | 0) < _ULongArray___get_size__impl__ju6dtr(dividend)) {
          // Inline function 'kotlin.ulongArrayOf' call
          var tmp$ret$4 = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(dividend, divisorSize + j | 0)]));
          tmp_0 = this.qx(this.mw(tmp$ret$4, this.vs_1), ULongArray__get_impl_pr71q9(dividend, (divisorSize + j | 0) - 1 | 0));
        } else {
          var tmp_1;
          if ((divisorSize + j | 0) === _ULongArray___get_size__impl__ju6dtr(dividend)) {
            // Inline function 'kotlin.ulongArrayOf' call
            tmp_1 = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(dividend, (divisorSize + j | 0) - 1 | 0)]));
          } else {
            tmp_1 = this.qs_1;
          }
          tmp_0 = tmp_1;
        }
        var twoDigit = tmp_0;
        var tmp_2 = BigInteger32Arithmetic_getInstance();
        var tmp_3 = this.rx(twoDigit);
        // Inline function 'kotlin.ulongArrayOf' call
        var tmp$ret$6 = _ULongArray___init__impl__twm1l3(longArrayOf([ULongArray__get_impl_pr71q9(divisor, divisorSize - 1 | 0)]));
        var convertedResult = tmp_2.ew(tmp_3, this.rx(tmp$ret$6));
        qjhat = this.sx(convertedResult.we_1.xm_1);
        var tmp_4 = quotient;
        var tmp_5;
        var tmp_6 = qjhat;
        var tmp9 = this.xs_1;
        // Inline function 'kotlin.ULong.minus' call
        var other_1 = _ULong___init__impl__c78o9k(new Long(1, 0));
        var tmp$ret$7 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp9).x2(_ULong___get_data__impl__fggpzb(other_1)));
        if (this.tx(tmp_6, tmp$ret$7) < 0) {
          tmp_5 = ULongArray__get_impl_pr71q9(qjhat, 0);
        } else {
          tmp_5 = this.xs_1;
        }
        ULongArray__set_impl_z19mvh(tmp_4, j, tmp_5);
        reconstructedQuotient = this.mw(this.lx(divisor, ULongArray__get_impl_pr71q9(quotient, j), divisorCorrectedSize), imul(j, this.vs_1));
        while (this.bu(reconstructedQuotient, dividend) > 0) {
          var tmp_7 = quotient;
          var tmp11 = ULongArray__get_impl_pr71q9(quotient, j);
          // Inline function 'kotlin.ULong.minus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_0 = _UInt___init__impl__l7qpdl(1);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value = _UInt___get_data__impl__f0vqqw(this_0);
          var tmp$ret$8 = toLong(value).i3(new Long(-1, 0));
          // Inline function 'kotlin.ULong.minus' call
          var other_2 = _ULong___init__impl__c78o9k(tmp$ret$8);
          var tmp$ret$12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp11).x2(_ULong___get_data__impl__fggpzb(other_2)));
          ULongArray__set_impl_z19mvh(tmp_7, j, tmp$ret$12);
          reconstructedQuotient = this.mw(this.lx(divisor, ULongArray__get_impl_pr71q9(quotient, j), divisorCorrectedSize), imul(j, this.vs_1));
        }
        dividend = this.ax(dividend, reconstructedQuotient);
      }
       while (0 <= inductionVariable);
    while (this.bu(dividend, divisor) >= 0) {
      quotient = this.qx(quotient, _ULong___init__impl__c78o9k(new Long(1, 0)));
      dividend = this.ax(dividend, divisor);
    }
    var denormRemainder = this.nx(dividend, normalizationShift);
    return new Pair(new ULongArray(this.ht(quotient)), new ULongArray(denormRemainder));
  };
  protoOf(BigInteger63Arithmetic).ux = function (operand) {
    if (isZero(operand, this))
      return this.qs_1;
    var length = this.au(operand);
    var tmp;
    if ((length % 64 | 0) === 0) {
      tmp = length / 64 | 0;
    } else {
      tmp = (length / 64 | 0) + 1 | 0;
    }
    var requiredLength = tmp;
    var wordStep;
    var shiftAmount;
    var result = _ULongArray___init__impl__twm1l3_0(requiredLength);
    var inductionVariable = 0;
    if (inductionVariable < requiredLength)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        wordStep = i / 63 | 0;
        shiftAmount = i % 63 | 0;
        if (((i + wordStep | 0) + 1 | 0) < _ULongArray___get_size__impl__ju6dtr(operand)) {
          // Inline function 'kotlin.ULong.shr' call
          var this_0 = ULongArray__get_impl_pr71q9(operand, i + wordStep | 0);
          var tmp4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(shiftAmount));
          var tmp2 = ULongArray__get_impl_pr71q9(operand, (i + wordStep | 0) + 1 | 0);
          // Inline function 'kotlin.ULong.shl' call
          var bitCount = 63 - shiftAmount | 0;
          // Inline function 'kotlin.ULong.or' call
          var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).f3(bitCount));
          var tmp$ret$2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp4).j3(_ULong___get_data__impl__fggpzb(other)));
          ULongArray__set_impl_z19mvh(result, i, tmp$ret$2);
        } else {
          // Inline function 'kotlin.ULong.shr' call
          var this_1 = ULongArray__get_impl_pr71q9(operand, i + wordStep | 0);
          var tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(shiftAmount));
          ULongArray__set_impl_z19mvh(result, i, tmp$ret$3);
        }
      }
       while (inductionVariable < requiredLength);
    return this.ht(result);
  };
  protoOf(BigInteger63Arithmetic).vx = function (operand) {
    var power64Representation = this.ux(operand);
    var result = _UIntArray___init__impl__ghjpc6(imul(_ULongArray___get_size__impl__ju6dtr(power64Representation), 2));
    var inductionVariable = 0;
    var last = _ULongArray___get_size__impl__ju6dtr(power64Representation);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = imul(2, i);
        var tmp1 = ULongArray__get_impl_pr71q9(power64Representation, i);
        // Inline function 'kotlin.UInt.toULong' call
        var this_0 = BigInteger32Arithmetic_getInstance().fv_1;
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value = _UInt___get_data__impl__f0vqqw(this_0);
        var tmp$ret$0 = toLong(value).i3(new Long(-1, 0));
        // Inline function 'kotlin.ULong.and' call
        var other = _ULong___init__impl__c78o9k(tmp$ret$0);
        // Inline function 'kotlin.ULong.toUInt' call
        var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp1).i3(_ULong___get_data__impl__fggpzb(other)));
        // Inline function 'kotlin.toUInt' call
        var this_2 = _ULong___get_data__impl__fggpzb(this_1);
        var tmp$ret$5 = _UInt___init__impl__l7qpdl(this_2.l3());
        UIntArray__set_impl_7f2zu2(result, tmp, tmp$ret$5);
        var tmp_0 = imul(2, i) + 1 | 0;
        // Inline function 'kotlin.ULong.shr' call
        var this_3 = ULongArray__get_impl_pr71q9(power64Representation, i);
        // Inline function 'kotlin.ULong.toUInt' call
        var this_4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).h3(32));
        // Inline function 'kotlin.toUInt' call
        var this_5 = _ULong___get_data__impl__fggpzb(this_4);
        var tmp$ret$8 = _UInt___init__impl__l7qpdl(this_5.l3());
        UIntArray__set_impl_7f2zu2(result, tmp_0, tmp$ret$8);
      }
       while (inductionVariable < last);
    return BigInteger32Arithmetic_getInstance().sv(result);
  };
  protoOf(BigInteger63Arithmetic).wx = function (operand) {
    if (_UIntArray___get_size__impl__r6l8ci(operand) === 0) {
      return this.qs_1;
    }
    if (_UIntArray___get_size__impl__r6l8ci(operand) === 1) {
      // Inline function 'kotlin.UInt.toULong' call
      var this_0 = UIntArray__get_impl_gp5kza(operand, 0);
      // Inline function 'kotlin.uintToULong' call
      // Inline function 'kotlin.uintToLong' call
      var value = _UInt___get_data__impl__f0vqqw(this_0);
      var tmp$ret$0 = toLong(value).i3(new Long(-1, 0));
      var tmp$ret$2 = _ULong___init__impl__c78o9k(tmp$ret$0);
      // Inline function 'kotlin.ulongArrayOf' call
      return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$2]));
    }
    var length = BigInteger32Arithmetic_getInstance().qv(operand);
    var tmp;
    if ((length % 63 | 0) === 0) {
      tmp = length / 63 | 0;
    } else {
      tmp = (length / 63 | 0) + 1 | 0;
    }
    var requiredLength = tmp;
    var result = _ULongArray___init__impl__twm1l3_0(requiredLength);
    var skipWordCount;
    var inductionVariable = 0;
    if (inductionVariable < requiredLength)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        skipWordCount = i / 32 | 0;
        var shiftAmount = i % 32 | 0;
        var position = imul(i, 2) - skipWordCount | 0;
        if (requiredLength === 2) {
          // Inline function 'kotlin.UInt.toULong' call
          var this_1 = UIntArray__get_impl_gp5kza(operand, 0);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value_0 = _UInt___get_data__impl__f0vqqw(this_1);
          var tmp$ret$4 = toLong(value_0).i3(new Long(-1, 0));
          var tmp8 = _ULong___init__impl__c78o9k(tmp$ret$4);
          // Inline function 'kotlin.UInt.toULong' call
          var this_2 = UIntArray__get_impl_gp5kza(operand, 1);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value_1 = _UInt___get_data__impl__f0vqqw(this_2);
          var tmp$ret$7 = toLong(value_1).i3(new Long(-1, 0));
          // Inline function 'kotlin.ULong.shl' call
          var this_3 = _ULong___init__impl__c78o9k(tmp$ret$7);
          var tmp6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_3).f3(32));
          // Inline function 'kotlin.ULong.and' call
          var other = this.at_1;
          // Inline function 'kotlin.ULong.or' call
          var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).i3(_ULong___get_data__impl__fggpzb(other)));
          var tmp$ret$12 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8).j3(_ULong___get_data__impl__fggpzb(other_0)));
          ULongArray__set_impl_z19mvh(result, 0, tmp$ret$12);
          if (_UIntArray___get_size__impl__r6l8ci(operand) === 4) {
            // Inline function 'kotlin.UInt.toULong' call
            var this_4 = UIntArray__get_impl_gp5kza(operand, 1);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_2 = _UInt___get_data__impl__f0vqqw(this_4);
            var tmp$ret$13 = toLong(value_2).i3(new Long(-1, 0));
            // Inline function 'kotlin.ULong.shr' call
            var this_5 = _ULong___init__impl__c78o9k(tmp$ret$13);
            var tmp16 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_5).h3(31));
            // Inline function 'kotlin.UInt.toULong' call
            var this_6 = UIntArray__get_impl_gp5kza(operand, 2);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_3 = _UInt___get_data__impl__f0vqqw(this_6);
            var tmp$ret$17 = toLong(value_3).i3(new Long(-1, 0));
            // Inline function 'kotlin.ULong.shl' call
            var this_7 = _ULong___init__impl__c78o9k(tmp$ret$17);
            // Inline function 'kotlin.ULong.or' call
            var other_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_7).f3(1));
            var tmp21 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp16).j3(_ULong___get_data__impl__fggpzb(other_1)));
            // Inline function 'kotlin.UInt.toULong' call
            var this_8 = UIntArray__get_impl_gp5kza(operand, 3);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_4 = _UInt___get_data__impl__f0vqqw(this_8);
            var tmp$ret$22 = toLong(value_4).i3(new Long(-1, 0));
            // Inline function 'kotlin.ULong.shl' call
            var this_9 = _ULong___init__impl__c78o9k(tmp$ret$22);
            // Inline function 'kotlin.ULong.or' call
            var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_9).f3(33));
            var tmp$ret$26 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp21).j3(_ULong___get_data__impl__fggpzb(other_2)));
            ULongArray__set_impl_z19mvh(result, 1, tmp$ret$26);
          } else {
            if (_UIntArray___get_size__impl__r6l8ci(operand) > 2) {
              // Inline function 'kotlin.UInt.toULong' call
              var this_10 = UIntArray__get_impl_gp5kza(operand, 1);
              // Inline function 'kotlin.uintToULong' call
              // Inline function 'kotlin.uintToLong' call
              var value_5 = _UInt___get_data__impl__f0vqqw(this_10);
              var tmp$ret$27 = toLong(value_5).i3(new Long(-1, 0));
              // Inline function 'kotlin.ULong.shr' call
              var this_11 = _ULong___init__impl__c78o9k(tmp$ret$27);
              var tmp29 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_11).h3(31));
              // Inline function 'kotlin.UInt.toULong' call
              var this_12 = UIntArray__get_impl_gp5kza(operand, 2);
              // Inline function 'kotlin.uintToULong' call
              // Inline function 'kotlin.uintToLong' call
              var value_6 = _UInt___get_data__impl__f0vqqw(this_12);
              var tmp$ret$31 = toLong(value_6).i3(new Long(-1, 0));
              // Inline function 'kotlin.ULong.shl' call
              var this_13 = _ULong___init__impl__c78o9k(tmp$ret$31);
              // Inline function 'kotlin.ULong.or' call
              var other_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_13).f3(1));
              var tmp$ret$35 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp29).j3(_ULong___get_data__impl__fggpzb(other_3)));
              ULongArray__set_impl_z19mvh(result, 1, tmp$ret$35);
            } else {
              // Inline function 'kotlin.UInt.toULong' call
              var this_14 = UIntArray__get_impl_gp5kza(operand, 1);
              // Inline function 'kotlin.uintToULong' call
              // Inline function 'kotlin.uintToLong' call
              var value_7 = _UInt___get_data__impl__f0vqqw(this_14);
              var tmp$ret$36 = toLong(value_7).i3(new Long(-1, 0));
              // Inline function 'kotlin.ULong.shr' call
              var this_15 = _ULong___init__impl__c78o9k(tmp$ret$36);
              var tmp$ret$39 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_15).h3(31));
              ULongArray__set_impl_z19mvh(result, 1, tmp$ret$39);
            }
          }
        } else {
          if (i === 0) {
            // Inline function 'kotlin.UInt.toULong' call
            var this_16 = UIntArray__get_impl_gp5kza(operand, 0);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_8 = _UInt___get_data__impl__f0vqqw(this_16);
            var tmp$ret$40 = toLong(value_8).i3(new Long(-1, 0));
            var tmp40 = _ULong___init__impl__c78o9k(tmp$ret$40);
            // Inline function 'kotlin.UInt.toULong' call
            var this_17 = UIntArray__get_impl_gp5kza(operand, 1);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_9 = _UInt___get_data__impl__f0vqqw(this_17);
            var tmp$ret$43 = toLong(value_9).i3(new Long(-1, 0));
            // Inline function 'kotlin.ULong.shl' call
            var this_18 = _ULong___init__impl__c78o9k(tmp$ret$43);
            var tmp38 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_18).f3(32));
            // Inline function 'kotlin.ULong.and' call
            var other_4 = this.at_1;
            // Inline function 'kotlin.ULong.or' call
            var other_5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp38).i3(_ULong___get_data__impl__fggpzb(other_4)));
            var tmp$ret$48 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp40).j3(_ULong___get_data__impl__fggpzb(other_5)));
            ULongArray__set_impl_z19mvh(result, i, tmp$ret$48);
          } else if (1 <= i ? i < (requiredLength - 1 | 0) : false) {
            // Inline function 'kotlin.UInt.toULong' call
            var this_19 = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_10 = _UInt___get_data__impl__f0vqqw(this_19);
            var tmp$ret$49 = toLong(value_10).i3(new Long(-1, 0));
            var tmp43 = _ULong___init__impl__c78o9k(tmp$ret$49);
            // Inline function 'kotlin.ULong.shr' call
            var bitCount = 32 - shiftAmount | 0;
            var tmp48 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp43).h3(bitCount));
            // Inline function 'kotlin.UInt.toULong' call
            var this_20 = UIntArray__get_impl_gp5kza(operand, position);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_11 = _UInt___get_data__impl__f0vqqw(this_20);
            var tmp$ret$53 = toLong(value_11).i3(new Long(-1, 0));
            // Inline function 'kotlin.ULong.shl' call
            var this_21 = _ULong___init__impl__c78o9k(tmp$ret$53);
            // Inline function 'kotlin.ULong.or' call
            var other_6 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_21).f3(shiftAmount));
            var tmp55 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp48).j3(_ULong___get_data__impl__fggpzb(other_6)));
            // Inline function 'kotlin.UInt.toULong' call
            var this_22 = UIntArray__get_impl_gp5kza(operand, position + 1 | 0);
            // Inline function 'kotlin.uintToULong' call
            // Inline function 'kotlin.uintToLong' call
            var value_12 = _UInt___get_data__impl__f0vqqw(this_22);
            var tmp$ret$58 = toLong(value_12).i3(new Long(-1, 0));
            var tmp51 = _ULong___init__impl__c78o9k(tmp$ret$58);
            // Inline function 'kotlin.ULong.shl' call
            var bitCount_0 = 32 + shiftAmount | 0;
            var tmp53 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp51).f3(bitCount_0));
            // Inline function 'kotlin.ULong.and' call
            var other_7 = this.at_1;
            // Inline function 'kotlin.ULong.or' call
            var other_8 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp53).i3(_ULong___get_data__impl__fggpzb(other_7)));
            var tmp$ret$63 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp55).j3(_ULong___get_data__impl__fggpzb(other_8)));
            ULongArray__set_impl_z19mvh(result, i, tmp$ret$63);
          } else if (i === (requiredLength - 1 | 0)) {
            if (position < _UIntArray___get_size__impl__r6l8ci(operand)) {
              // Inline function 'kotlin.UInt.toULong' call
              var this_23 = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
              // Inline function 'kotlin.uintToULong' call
              // Inline function 'kotlin.uintToLong' call
              var value_13 = _UInt___get_data__impl__f0vqqw(this_23);
              var tmp$ret$64 = toLong(value_13).i3(new Long(-1, 0));
              var tmp58 = _ULong___init__impl__c78o9k(tmp$ret$64);
              // Inline function 'kotlin.ULong.shr' call
              var bitCount_1 = 32 - shiftAmount | 0;
              var tmp63 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp58).h3(bitCount_1));
              // Inline function 'kotlin.UInt.toULong' call
              var this_24 = UIntArray__get_impl_gp5kza(operand, position);
              // Inline function 'kotlin.uintToULong' call
              // Inline function 'kotlin.uintToLong' call
              var value_14 = _UInt___get_data__impl__f0vqqw(this_24);
              var tmp$ret$68 = toLong(value_14).i3(new Long(-1, 0));
              // Inline function 'kotlin.ULong.shl' call
              var this_25 = _ULong___init__impl__c78o9k(tmp$ret$68);
              // Inline function 'kotlin.ULong.or' call
              var other_9 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_25).f3(shiftAmount));
              var tmp$ret$72 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp63).j3(_ULong___get_data__impl__fggpzb(other_9)));
              ULongArray__set_impl_z19mvh(result, i, tmp$ret$72);
            } else {
              // Inline function 'kotlin.UInt.toULong' call
              var this_26 = UIntArray__get_impl_gp5kza(operand, position - 1 | 0);
              // Inline function 'kotlin.uintToULong' call
              // Inline function 'kotlin.uintToLong' call
              var value_15 = _UInt___get_data__impl__f0vqqw(this_26);
              var tmp$ret$73 = toLong(value_15).i3(new Long(-1, 0));
              var tmp66 = _ULong___init__impl__c78o9k(tmp$ret$73);
              // Inline function 'kotlin.ULong.shr' call
              var bitCount_2 = 32 - shiftAmount | 0;
              var tmp$ret$76 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp66).h3(bitCount_2));
              ULongArray__set_impl_z19mvh(result, i, tmp$ret$76);
            }
          }
        }
      }
       while (inductionVariable < requiredLength);
    return result;
  };
  protoOf(BigInteger63Arithmetic).st = function (first, second) {
    return this.px(first, second);
  };
  protoOf(BigInteger63Arithmetic).sw = function (_this__u8e3s4, other) {
    return signedAdd(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).uw = function (_this__u8e3s4, other) {
    return signedSubtract(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).rw = function (_this__u8e3s4, other) {
    return signedMultiply(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).kx = function (_this__u8e3s4, other) {
    return signedDivide(this, _this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).qw = function (_this__u8e3s4, places) {
    return new SignedULongArray(this.ox(_this__u8e3s4.vw_1, places), _this__u8e3s4.ww_1);
  };
  protoOf(BigInteger63Arithmetic).tw = function (_this__u8e3s4, places) {
    return new SignedULongArray(this.mw(_this__u8e3s4.vw_1, places), _this__u8e3s4.ww_1);
  };
  protoOf(BigInteger63Arithmetic).pw = function (_this__u8e3s4, operand) {
    return new SignedULongArray(this.xx(_this__u8e3s4.vw_1, operand), _this__u8e3s4.ww_1);
  };
  protoOf(BigInteger63Arithmetic).es = function (number, base) {
    var parsed = this.qs_1;
    // Inline function 'kotlin.text.toLowerCase' call
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'kotlin.text.forEach' call
    var indexedObject = number.toLowerCase();
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(indexedObject)) {
      var element = charSequenceGet(indexedObject, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.parseForBase.<anonymous>' call
      var tmp = BigInteger63Arithmetic_getInstance();
      var tmp_0 = BigInteger63Arithmetic_getInstance();
      var tmp_1 = parsed;
      // Inline function 'kotlin.toULong' call
      var tmp$ret$2 = _ULong___init__impl__c78o9k(toLong(base));
      var tmp_2 = tmp_0.yx(tmp_1, tmp$ret$2);
      // Inline function 'kotlin.toULong' call
      var this_0 = toDigit(element, base);
      var tmp$ret$3 = _ULong___init__impl__c78o9k(toLong(this_0));
      parsed = tmp.qx(tmp_2, tmp$ret$3);
    }
    return this.ht(parsed);
  };
  protoOf(BigInteger63Arithmetic).ku = function (operand, base) {
    // Inline function 'kotlin.collections.copyOf' call
    var copy = _ULongArray___init__impl__twm1l3(copyOf(_ULongArray___get_storage__impl__28e64j(operand)));
    // Inline function 'kotlin.toULong' call
    var tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(base));
    // Inline function 'kotlin.ulongArrayOf' call
    var baseArray = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
    var stringBuilder = StringBuilder_init_$Create$();
    while (!equals(copy, this.qs_1)) {
      var divremResult = this.zx(copy, baseArray);
      if (ULongArray__isEmpty_impl_c3yngu(divremResult.xe_1.hn_1)) {
        stringBuilder.eb(0);
      } else {
        stringBuilder.d8(toString_1(ULongArray__get_impl_pr71q9(divremResult.xe_1.hn_1, 0), base));
      }
      copy = divremResult.we_1.hn_1;
    }
    // Inline function 'kotlin.text.reversed' call
    var this_0 = stringBuilder.toString();
    return toString(reversed(isCharSequence(this_0) ? this_0 : THROW_CCE()));
  };
  protoOf(BigInteger63Arithmetic).xx = function (operand, mask) {
    var tmp;
    if (_ULongArray___get_size__impl__ju6dtr(operand) > _ULongArray___get_size__impl__ju6dtr(mask)) {
      tmp = new Pair(new ULongArray(operand), new ULongArray(mask));
    } else {
      tmp = new Pair(new ULongArray(mask), new ULongArray(operand));
    }
    var _destruct__k2r9zo = tmp;
    var bigger = _destruct__k2r9zo.ye().hn_1;
    var smaller = _destruct__k2r9zo.ze().hn_1;
    // Inline function 'kotlin.ULongArray' call
    var tmp_0 = 0;
    var tmp_1 = _ULongArray___get_size__impl__ju6dtr(smaller);
    var tmp_2 = longArray(tmp_1);
    while (tmp_0 < tmp_1) {
      var tmp_3 = tmp_0;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.and.<anonymous>' call
      var tmp0 = ULongArray__get_impl_pr71q9(operand, tmp_3);
      // Inline function 'kotlin.ULong.and' call
      var other = ULongArray__get_impl_pr71q9(mask, tmp_3);
      // Inline function 'kotlin.ULong.toLong' call
      var this_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0).i3(_ULong___get_data__impl__fggpzb(other)));
      tmp_2[tmp_3] = _ULong___get_data__impl__fggpzb(this_0);
      tmp_0 = tmp_0 + 1 | 0;
    }
    return _ULongArray___init__impl__twm1l3(tmp_2);
  };
  protoOf(BigInteger63Arithmetic).eu = function (operand, mask) {
    if (_ULongArray___get_size__impl__ju6dtr(operand) < _ULongArray___get_size__impl__ju6dtr(mask))
      return this.eu(mask, operand);
    // Inline function 'kotlin.ULongArray' call
    var tmp = 0;
    var tmp_0 = _ULongArray___get_size__impl__ju6dtr(operand);
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.or.<anonymous>' call
      var tmp_3;
      if (tmp_2 < _ULongArray___get_size__impl__ju6dtr(mask)) {
        var tmp0 = ULongArray__get_impl_pr71q9(operand, tmp_2);
        // Inline function 'kotlin.ULong.or' call
        var other = ULongArray__get_impl_pr71q9(mask, tmp_2);
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0).j3(_ULong___get_data__impl__fggpzb(other)));
      } else {
        tmp_3 = ULongArray__get_impl_pr71q9(operand, tmp_2);
      }
      // Inline function 'kotlin.ULong.toLong' call
      var this_0 = tmp_3;
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_0);
      tmp = tmp + 1 | 0;
    }
    var tmp$ret$4 = _ULongArray___init__impl__twm1l3(tmp_1);
    return this.ht(tmp$ret$4);
  };
  protoOf(BigInteger63Arithmetic).gu = function (operand, mask) {
    if (_ULongArray___get_size__impl__ju6dtr(operand) < _ULongArray___get_size__impl__ju6dtr(mask))
      return this.gu(mask, operand);
    // Inline function 'kotlin.ULongArray' call
    var tmp = 0;
    var tmp_0 = _ULongArray___get_size__impl__ju6dtr(operand);
    var tmp_1 = longArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      // Inline function 'com.ionspin.kotlin.bignum.integer.base63.array.BigInteger63Arithmetic.xor.<anonymous>' call
      var tmp_3;
      if (tmp_2 < _ULongArray___get_size__impl__ju6dtr(mask)) {
        var tmp0 = ULongArray__get_impl_pr71q9(operand, tmp_2);
        // Inline function 'kotlin.ULong.xor' call
        var other = ULongArray__get_impl_pr71q9(mask, tmp_2);
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0).k3(_ULong___get_data__impl__fggpzb(other)));
      } else {
        var tmp2 = ULongArray__get_impl_pr71q9(operand, tmp_2);
        // Inline function 'kotlin.ULong.xor' call
        var other_0 = _ULong___init__impl__c78o9k(new Long(0, 0));
        tmp_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).k3(_ULong___get_data__impl__fggpzb(other_0)));
      }
      // Inline function 'kotlin.ULong.toLong' call
      var this_0 = tmp_3;
      tmp_1[tmp_2] = _ULong___get_data__impl__fggpzb(this_0);
      tmp = tmp + 1 | 0;
    }
    var tmp$ret$5 = _ULongArray___init__impl__twm1l3(tmp_1);
    return this.ht(tmp$ret$5);
  };
  protoOf(BigInteger63Arithmetic).mw = function (_this__u8e3s4, places) {
    return this.fx(_this__u8e3s4, places);
  };
  protoOf(BigInteger63Arithmetic).ox = function (_this__u8e3s4, places) {
    return this.cu(_this__u8e3s4, places);
  };
  protoOf(BigInteger63Arithmetic).yt = function (operand, position) {
    // Inline function 'kotlin.Long.div' call
    if (position.z2(toLong(63)).d1(new Long(2147483647, 0)) > 0) {
      throw RuntimeException_init_$Create$('Invalid bit index, too large, cannot access word (Word position > Int.MAX_VALUE');
    }
    // Inline function 'kotlin.Long.div' call
    var wordPosition = position.z2(toLong(63));
    if (wordPosition.d1(toLong(_ULongArray___get_size__impl__ju6dtr(operand))) >= 0) {
      return false;
    }
    // Inline function 'kotlin.Long.rem' call
    var bitPosition = position.a3(toLong(63));
    var word = ULongArray__get_impl_pr71q9(operand, wordPosition.l3());
    var tmp6 = _ULong___init__impl__c78o9k(new Long(1, 0));
    // Inline function 'kotlin.ULong.shl' call
    var bitCount = bitPosition.l3();
    // Inline function 'kotlin.ULong.and' call
    var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).f3(bitCount));
    var tmp$ret$4 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(word).i3(_ULong___get_data__impl__fggpzb(other)));
    return !equals(tmp$ret$4, _ULong___init__impl__c78o9k(new Long(0, 0)));
  };
  protoOf(BigInteger63Arithmetic).nw = function (_this__u8e3s4, other) {
    return this.kt(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).ax = function (_this__u8e3s4, other) {
    return this.jt(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).bx = function (_this__u8e3s4, other) {
    return this.qt(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).qx = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.kt(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger63Arithmetic).ow = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.jt(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger63Arithmetic).yx = function (_this__u8e3s4, other) {
    return this.lw(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).cx = function (_this__u8e3s4, other) {
    return this.st(_this__u8e3s4, other).we_1.hn_1;
  };
  protoOf(BigInteger63Arithmetic).zx = function (_this__u8e3s4, other) {
    return this.st(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).bu = function (_this__u8e3s4, other) {
    return this.ns(_this__u8e3s4, other);
  };
  protoOf(BigInteger63Arithmetic).tx = function (_this__u8e3s4, other) {
    // Inline function 'kotlin.ulongArrayOf' call
    var tmp$ret$0 = _ULongArray___init__impl__twm1l3(longArrayOf([other]));
    return this.ns(_this__u8e3s4, tmp$ret$0);
  };
  protoOf(BigInteger63Arithmetic).rx = function (_this__u8e3s4) {
    return this.vx(_this__u8e3s4);
  };
  protoOf(BigInteger63Arithmetic).sx = function (_this__u8e3s4) {
    return this.wx(_this__u8e3s4);
  };
  protoOf(BigInteger63Arithmetic).gs = function (uLong) {
    var tmp;
    // Inline function 'kotlin.ULong.and' call
    var other = this.bt_1;
    var tmp$ret$0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(uLong).i3(_ULong___get_data__impl__fggpzb(other)));
    if (!equals(tmp$ret$0, _ULong___init__impl__c78o9k(new Long(0, 0)))) {
      // Inline function 'kotlin.ULong.and' call
      var other_0 = this.xs_1;
      var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(uLong).i3(_ULong___get_data__impl__fggpzb(other_0)));
      // Inline function 'kotlin.ulongArrayOf' call
      tmp = _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1, _ULong___init__impl__c78o9k(new Long(1, 0))]));
    } else {
      // Inline function 'kotlin.ulongArrayOf' call
      tmp = _ULongArray___init__impl__twm1l3(longArrayOf([uLong]));
    }
    return tmp;
  };
  protoOf(BigInteger63Arithmetic).is = function (uInt) {
    // Inline function 'kotlin.UInt.toULong' call
    // Inline function 'kotlin.uintToULong' call
    // Inline function 'kotlin.uintToLong' call
    var value = _UInt___get_data__impl__f0vqqw(uInt);
    var tmp$ret$0 = toLong(value).i3(new Long(-1, 0));
    var tmp$ret$2 = _ULong___init__impl__c78o9k(tmp$ret$0);
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$2]));
  };
  protoOf(BigInteger63Arithmetic).ks = function (uShort) {
    // Inline function 'kotlin.UShort.toULong' call
    var tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UShort___get_data__impl__g0245(uShort)).i3(new Long(65535, 0)));
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
  };
  protoOf(BigInteger63Arithmetic).ms = function (uByte) {
    // Inline function 'kotlin.UByte.toULong' call
    var tmp$ret$0 = _ULong___init__impl__c78o9k(toLong(_UByte___get_data__impl__jof9qr(uByte)).i3(new Long(255, 0)));
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$0]));
  };
  protoOf(BigInteger63Arithmetic).wr = function (long) {
    if (long.equals(new Long(0, -2147483648))) {
      // Inline function 'kotlin.ulongArrayOf' call
      return _ULongArray___init__impl__twm1l3(longArrayOf([_ULong___init__impl__c78o9k(new Long(0, 0)), _ULong___init__impl__c78o9k(new Long(1, 0))]));
    }
    // Inline function 'kotlin.math.absoluteValue' call
    // Inline function 'kotlin.toULong' call
    var this_0 = abs(long);
    var tmp3 = _ULong___init__impl__c78o9k(this_0);
    // Inline function 'kotlin.ULong.and' call
    var other = this.xs_1;
    var tmp$ret$3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp3).i3(_ULong___get_data__impl__fggpzb(other)));
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$3]));
  };
  protoOf(BigInteger63Arithmetic).xr = function (int) {
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = toLong(int);
    // Inline function 'kotlin.toULong' call
    var this_1 = abs(this_0);
    var tmp$ret$1 = _ULong___init__impl__c78o9k(this_1);
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
  };
  protoOf(BigInteger63Arithmetic).yr = function (short) {
    // Inline function 'kotlin.math.absoluteValue' call
    // Inline function 'kotlin.toULong' call
    var this_0 = abs_0(short);
    var tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(this_0));
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
  };
  protoOf(BigInteger63Arithmetic).zr = function (byte) {
    // Inline function 'kotlin.math.absoluteValue' call
    // Inline function 'kotlin.toULong' call
    var this_0 = abs_0(byte);
    var tmp$ret$1 = _ULong___init__impl__c78o9k(toLong(this_0));
    // Inline function 'kotlin.ulongArrayOf' call
    return _ULongArray___init__impl__twm1l3(longArrayOf([tmp$ret$1]));
  };
  var BigInteger63Arithmetic_instance;
  function BigInteger63Arithmetic_getInstance() {
    if (BigInteger63Arithmetic_instance == null)
      new BigInteger63Arithmetic();
    return BigInteger63Arithmetic_instance;
  }
  function toDigit(_this__u8e3s4, base) {
    base = base === VOID ? 10 : base;
    var tmp;
    if (_Char___init__impl__6a9atx(48) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57) : false) {
      tmp = Char__toInt_impl_vasixd(Char__minus_impl_a2frrh_0(_this__u8e3s4, 48));
    } else if (_Char___init__impl__6a9atx(97) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(122) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(97)) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(90) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65)) + 10 | 0;
    } else if (_Char___init__impl__6a9atx(65313) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(65338) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65313)) - 10 | 0;
    } else if (_Char___init__impl__6a9atx(65345) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(65370) : false) {
      tmp = Char__minus_impl_a2frrh(_this__u8e3s4, _Char___init__impl__6a9atx(65345)) - 10 | 0;
    } else if (_this__u8e3s4 === _Char___init__impl__6a9atx(46)) {
      throw NumberFormatException_init_$Create$('Invalid digit for radix ' + toString_2(_this__u8e3s4) + ' (Possibly a decimal value, which is not supported by BigInteger parser');
    } else {
      throw NumberFormatException_init_$Create$('Invalid digit for radix ' + toString_2(_this__u8e3s4));
    }
    var digit = tmp;
    if (digit < 0 || digit >= base) {
      throw NumberFormatException_init_$Create$(toString_2(_this__u8e3s4) + ' is not a valid digit for number system with base ' + base);
    }
    return digit;
  }
  function RuntimePlatform() {
  }
  protoOf(RuntimePlatform).qr = function () {
    return Platform_JS_getInstance();
  };
  var RuntimePlatform_instance;
  function RuntimePlatform_getInstance() {
    return RuntimePlatform_instance;
  }
  //region block: post-declaration
  protoOf(Companion).rn = tryFromFloat$default;
  protoOf(Companion).tn = tryFromDouble$default;
  protoOf(Companion).on = parseString$default;
  protoOf(BigDecimal).ho = plus_1;
  protoOf(BigDecimal).jo = minus_0;
  protoOf(Companion_1).on = parseString$default;
  protoOf(Companion_1).rn = tryFromFloat$default;
  protoOf(Companion_1).tn = tryFromDouble$default;
  protoOf(BigInteger).ao = get_isNegative;
  protoOf(BigInteger).do = plus_0;
  protoOf(BigInteger).ho = plus_1;
  protoOf(BigInteger).eo = minus;
  protoOf(BigInteger).jo = minus_0;
  protoOf(BigInteger).fo = times;
  protoOf(BigInteger).io = times_0;
  protoOf(BigInteger).go = div;
  protoOf(BigInteger).ko = div_0;
  protoOf(BigInteger).lo = rem;
  //endregion
  //region block: init
  RuntimePlatform_instance = new RuntimePlatform();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = toBigInteger;
  _.$_$.b = BigInteger_init_$Create$_0;
  _.$_$.c = Companion_getInstance_1;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/Tidyparse-tidyparse-core.js":
/*!********************************************!*\
  !*** ./kotlin/Tidyparse-tidyparse-core.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./galoisenne.js */ "./kotlin/galoisenne.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(function (_, kotlin_kotlin, kotlin_ai_hypergraph_galoisenne) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var emptySet = kotlin_kotlin.$_$.i3;
  var VOID = kotlin_kotlin.$_$.c;
  var get_originalForm = kotlin_ai_hypergraph_galoisenne.$_$.m;
  var listOf = kotlin_kotlin.$_$.v3;
  var get_nonparametricForm = kotlin_ai_hypergraph_galoisenne.$_$.k;
  var emptyList = kotlin_kotlin.$_$.g3;
  var equals = kotlin_kotlin.$_$.c6;
  var plus = kotlin_kotlin.$_$.j4;
  var joinToString = kotlin_kotlin.$_$.r3;
  var lines = kotlin_kotlin.$_$.r8;
  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.r;
  var compareTo = kotlin_kotlin.$_$.b6;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.f;
  var Unit_instance = kotlin_kotlin.$_$.j2;
  var get_nonterminals = kotlin_ai_hypergraph_galoisenne.$_$.l;
  var get_terminals = kotlin_ai_hypergraph_galoisenne.$_$.s;
  var ValueTimeMark__elapsedNow_impl_eonqvs = kotlin_kotlin.$_$.y;
  var _Duration___get_inWholeMilliseconds__impl__msfiry = kotlin_kotlin.$_$.v;
  var get_TIMEOUT_MS = kotlin_ai_hypergraph_galoisenne.$_$.t;
  var toLong = kotlin_kotlin.$_$.b7;
  var prettyPrint = kotlin_ai_hypergraph_galoisenne.$_$.q;
  var carveSeams = kotlin_ai_hypergraph_galoisenne.$_$.w;
  var escapeHTML = kotlin_ai_hypergraph_galoisenne.$_$.a;
  var KProperty1 = kotlin_kotlin.$_$.q7;
  var getPropertyCallableRef = kotlin_kotlin.$_$.g6;
  var cache = kotlin_ai_hypergraph_galoisenne.$_$.v;
  var println = kotlin_kotlin.$_$.u5;
  var levenshtein = kotlin_ai_hypergraph_galoisenne.$_$.i;
  var abs = kotlin_kotlin.$_$.d7;
  var DurationUnit_SECONDS_getInstance = kotlin_kotlin.$_$.d;
  var Duration__toDouble_impl_a56y2b = kotlin_kotlin.$_$.w;
  var round = kotlin_ai_hypergraph_galoisenne.$_$.c1;
  var charSequenceLength = kotlin_kotlin.$_$.a6;
  var tokenizeByWhitespace = kotlin_ai_hypergraph_galoisenne.$_$.z;
  var levenshteinAlign = kotlin_ai_hypergraph_galoisenne.$_$.h;
  var paintDiffs = kotlin_ai_hypergraph_galoisenne.$_$.x;
  var binarySearch = kotlin_kotlin.$_$.t2;
  var to = kotlin_kotlin.$_$.ia;
  var removeLast = kotlin_kotlin.$_$.m4;
  var last = kotlin_kotlin.$_$.u3;
  var padStart = kotlin_kotlin.$_$.t8;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.i;
  var protoOf = kotlin_kotlin.$_$.a7;
  var parseCFG = kotlin_ai_hypergraph_galoisenne.$_$.n;
  var get_noNonterminalStubs = kotlin_ai_hypergraph_galoisenne.$_$.j;
  var ensureNotNull = kotlin_kotlin.$_$.da;
  var Exception = kotlin_kotlin.$_$.r9;
  var Monotonic_instance = kotlin_kotlin.$_$.i2;
  var isBlank = kotlin_kotlin.$_$.m8;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.g;
  var setOf = kotlin_kotlin.$_$.q4;
  var toSet = kotlin_kotlin.$_$.h5;
  var CFGCFG = kotlin_ai_hypergraph_galoisenne.$_$.b;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.x2;
  var hashCode = kotlin_kotlin.$_$.i6;
  var THROW_CCE = kotlin_kotlin.$_$.v9;
  var KtMap = kotlin_kotlin.$_$.m2;
  var isInterface = kotlin_kotlin.$_$.p6;
  var Companion_instance = kotlin_ai_hypergraph_galoisenne.$_$.a1;
  var parse = kotlin_ai_hypergraph_galoisenne.$_$.o;
  var get_language = kotlin_ai_hypergraph_galoisenne.$_$.g;
  var contains = kotlin_ai_hypergraph_galoisenne.$_$.d;
  var enumSeqSmart = kotlin_ai_hypergraph_galoisenne.$_$.e;
  var get_HOLE_MARKER = kotlin_ai_hypergraph_galoisenne.$_$.c;
  var indexOf = kotlin_kotlin.$_$.l8;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.k;
  var substringBefore = kotlin_kotlin.$_$.d9;
  var substringAfter = kotlin_kotlin.$_$.c9;
  var initMetadataForClass = kotlin_kotlin.$_$.j6;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(TidyEditor, 'TidyEditor');
  //endregion
  var renderedHTML$delegate;
  function get_prettyHTML(_this__u8e3s4) {
    _init_properties_TidyCommon_kt__pskpf9();
    return prettyHTML$delegate.uj(_this__u8e3s4, prettyHTML$factory());
  }
  var prettyHTML$delegate;
  var la;
  var ra;
  function renderCFGToHTML(_this__u8e3s4, tokens) {
    tokens = tokens === VOID ? emptySet() : tokens;
    _init_properties_TidyCommon_kt__pskpf9();
    var tmp = listOf(summarize(get_originalForm(_this__u8e3s4), 'Original form'));
    var tmp_0;
    if (equals(get_originalForm(_this__u8e3s4), get_nonparametricForm(_this__u8e3s4))) {
      // Inline function 'kotlin.collections.listOf' call
      tmp_0 = emptyList();
    } else {
      tmp_0 = listOf(summarize(get_nonparametricForm(_this__u8e3s4), 'Nonparametric form'));
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.tidyparse.renderCFGToHTML.<anonymous>' call
    var rewriteSummary = plus(plus(tmp, tmp_0), listOf(summarize(_this__u8e3s4, 'Normal form')));
    // Inline function 'kotlin.collections.maxOf' call
    var iterator = lines(joinToString(rewriteSummary, '\n')).h();
    if (!iterator.i())
      throw NoSuchElementException_init_$Create$();
    // Inline function 'ai.hypergraph.tidyparse.renderCFGToHTML.<anonymous>.<anonymous>' call
    var maxValue = iterator.j().length;
    while (iterator.i()) {
      // Inline function 'ai.hypergraph.tidyparse.renderCFGToHTML.<anonymous>.<anonymous>' call
      var v = iterator.j().length;
      if (compareTo(maxValue, v) < 0) {
        maxValue = v;
      }
    }
    var maxLen = maxValue;
    return joinToString(rewriteSummary, delim(maxLen), '<pre>' + delim(maxLen), '<\/pre>');
  }
  function delim(len) {
    len = len === VOID ? 120 : len;
    _init_properties_TidyCommon_kt__pskpf9();
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(len);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < len)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.tidyparse.delim.<anonymous>' call
        list.e('\u2500');
      }
       while (inductionVariable < len);
    return joinToString(list, '', '\n', '\n');
  }
  function summarize(_this__u8e3s4, name) {
    _init_properties_TidyCommon_kt__pskpf9();
    return '<b>' + name + '<\/b> (' + ('' + get_nonterminals(_this__u8e3s4).k() + ' nonterminal' + (1 < get_nonterminals(_this__u8e3s4).k() ? 's' : '') + ' / ') + ('' + get_terminals(_this__u8e3s4).k() + ' terminal' + (1 < get_terminals(_this__u8e3s4).k() ? 's' : '') + ' / ') + ('' + _this__u8e3s4.k() + ' production' + (1 < _this__u8e3s4.k() ? 's' : '') + ')\n' + get_prettyHTML(_this__u8e3s4));
  }
  function hasTimeLeft(_this__u8e3s4) {
    _init_properties_TidyCommon_kt__pskpf9();
    return _Duration___get_inWholeMilliseconds__impl__msfiry(ValueTimeMark__elapsedNow_impl_eonqvs(_this__u8e3s4)).d1(toLong(get_TIMEOUT_MS())) < 0;
  }
  function renderedHTML$delegate$lambda($this$cache) {
    _init_properties_TidyCommon_kt__pskpf9();
    return renderCFGToHTML($this$cache);
  }
  function prettyHTML$delegate$lambda($this$cache) {
    _init_properties_TidyCommon_kt__pskpf9();
    return escapeHTML(carveSeams(prettyPrint($this$cache)));
  }
  function prettyHTML$factory() {
    return getPropertyCallableRef('prettyHTML', 1, KProperty1, function (receiver) {
      return get_prettyHTML(receiver);
    }, null);
  }
  var properties_initialized_TidyCommon_kt_piwign;
  function _init_properties_TidyCommon_kt__pskpf9() {
    if (!properties_initialized_TidyCommon_kt_piwign) {
      properties_initialized_TidyCommon_kt_piwign = true;
      renderedHTML$delegate = cache(VOID, renderedHTML$delegate$lambda);
      prettyHTML$delegate = cache(VOID, prettyHTML$delegate$lambda);
      la = escapeHTML('<');
      ra = escapeHTML('>');
    }
  }
  function handleInput$finally(this$0, workHash, timer, it, action) {
    if (this$0.o1g_1 === workHash) {
      // Inline function 'kotlin.also' call
      var this_0 = '\u274C Current line invalid, possible fixes:\n\n' + it;
      // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.finally.<anonymous>' call
      // Inline function 'kotlin.collections.set' call
      this$0.n1g_1.b5(workHash, this_0);
      this$0.s1g(this_0);
    }
    println(action + ' in ' + _Duration___get_inWholeMilliseconds__impl__msfiry(ValueTimeMark__elapsedNow_impl_eonqvs(timer)).toString() + 'ms');
  }
  function handleInput$finally$default(this$0, workHash, timer, it, action, $super) {
    action = action === VOID ? 'Completed' : action;
    return handleInput$finally(this$0, workHash, timer, it, action);
  }
  function handleInput$shouldContinue(this$0, workHash, timer) {
    return this$0.o1g_1 === workHash && hasTimeLeft(timer);
  }
  function handleInput$rankingFun(tokens, l) {
    var tmp = imul(levenshtein(tokens, l), 7919);
    // Inline function 'kotlin.collections.sumOf' call
    var sum = 0;
    var _iterator__ex2g4s = tokens.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      var tmp_0 = sum;
      // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.rankingFun.<anonymous>' call
      sum = tmp_0 + element.length | 0;
    }
    var tmp_1 = sum;
    // Inline function 'kotlin.collections.sumOf' call
    var sum_0 = 0;
    var _iterator__ex2g4s_0 = l.h();
    while (_iterator__ex2g4s_0.i()) {
      var element_0 = _iterator__ex2g4s_0.j();
      var tmp_2 = sum_0;
      // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.rankingFun.<anonymous>' call
      sum_0 = tmp_2 + element_0.length | 0;
    }
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = tmp_1 - sum_0 | 0;
    return tmp + abs(this_0) | 0;
  }
  function handleInput$finally_0(this$0, $workHash, $timer, p0) {
    handleInput$finally$default(this$0, $workHash, $timer, p0);
  }
  function handleInput$finally_1(this$0, $workHash, $timer, p0) {
    handleInput$finally$default(this$0, $workHash, $timer, p0);
  }
  function enumerateCompletionsInteractively$findNextCompletion(iter, $shouldContinue, results, startTime, totalResults, topNResults, $finally, $metric, $resultsToPost, this$0, $postResults, $localContinuation) {
    var i = {_v: 0};
    if (!iter.i() || !$shouldContinue()) {
      var throughput = round(results.k() / Duration__toDouble_impl_a56y2b(ValueTimeMark__elapsedNow_impl_eonqvs(startTime), DurationUnit_SECONDS_getInstance()), 3);
      var throughputTot = round(totalResults._v / Duration__toDouble_impl_a56y2b(ValueTimeMark__elapsedNow_impl_eonqvs(startTime), DurationUnit_SECONDS_getInstance()), 3);
      var summary = !(throughput === throughputTot) ? '~' + throughput + ' unique res/s, ~' + throughputTot + ' total res/s' : '~' + throughput + ' res/s';
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.tidyparse.TidyEditor.enumerateCompletionsInteractively.findNextCompletion.<anonymous>' call
      var it = results.k() - topNResults.k() | 0;
      var moreResults = it === 0 ? '\n\n' : '\n\n...' + it + ' more';
      var statistics = moreResults + ' ' + summary + '.';
      return $finally(joinToString(topNResults, '\n', '', statistics, VOID, VOID, TidyEditor$enumerateCompletionsInteractively$findNextCompletion$lambda(i)));
    }
    var next = iter.j();
    totalResults._v = totalResults._v + 1 | 0;
    var tmp;
    // Inline function 'kotlin.text.isNotEmpty' call
    if (charSequenceLength(next) > 0) {
      tmp = !results.j1(next);
    } else {
      tmp = false;
    }
    if (tmp) {
      println('Found: ' + next);
      results.e(next);
      var score = $metric(tokenizeByWhitespace(next));
      if (topNResults.k() < $resultsToPost || score < last(topNResults).xe_1) {
        var currentLine = this$0.t1g();
        var html = paintDiffs(levenshteinAlign(currentLine, next));
        var loc = binarySearch(topNResults, VOID, VOID, TidyEditor$enumerateCompletionsInteractively$findNextCompletion$lambda_0(score));
        var tmp_0;
        if (loc < 0) {
          tmp_0 = (-loc | 0) - 1 | 0;
        } else {
          tmp_0 = loc;
        }
        var idx = tmp_0;
        topNResults.r4(idx, to(html, score));
        if (topNResults.k() > $resultsToPost) {
          removeLast(topNResults);
        }
        $postResults(joinToString(topNResults, '\n', VOID, VOID, VOID, VOID, TidyEditor$enumerateCompletionsInteractively$findNextCompletion$lambda_1(i)));
      }
    }
    $localContinuation(TidyEditor$enumerateCompletionsInteractively$findNextCompletion$ref(iter, $shouldContinue, results, startTime, totalResults, topNResults, $finally, $metric, $resultsToPost, this$0, $postResults, $localContinuation));
  }
  function TidyEditor$handleInput$rankingFun$ref($tokens) {
    var l = function (p0) {
      return handleInput$rankingFun($tokens, p0);
    };
    l.callableName = 'rankingFun';
    return l;
  }
  function TidyEditor$handleInput$shouldContinue$ref(this$0, $workHash, $timer) {
    var l = function () {
      return handleInput$shouldContinue(this$0, $workHash, $timer);
    };
    l.callableName = 'shouldContinue';
    return l;
  }
  function TidyEditor$handleInput$finally$ref(this$0, $workHash, $timer) {
    return function (p0) {
      handleInput$finally_0(this$0, $workHash, $timer, p0);
      return Unit_instance;
    };
  }
  function TidyEditor$continuation$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.u1g(p0);
    };
    l.callableName = 'continuation';
    return l;
  }
  function TidyEditor$handleInput$rankingFun$ref_0($tokens) {
    var l = function (p0) {
      return handleInput$rankingFun($tokens, p0);
    };
    l.callableName = 'rankingFun';
    return l;
  }
  function TidyEditor$handleInput$shouldContinue$ref_0(this$0, $workHash, $timer) {
    var l = function () {
      return handleInput$shouldContinue(this$0, $workHash, $timer);
    };
    l.callableName = 'shouldContinue';
    return l;
  }
  function TidyEditor$handleInput$finally$ref_0(this$0, $workHash, $timer) {
    return function (p0) {
      handleInput$finally_1(this$0, $workHash, $timer, p0);
      return Unit_instance;
    };
  }
  function TidyEditor$continuation$ref_0($boundThis) {
    var l = function (p0) {
      return $boundThis.u1g(p0);
    };
    l.callableName = 'continuation';
    return l;
  }
  function TidyEditor$enumerateCompletionsInteractively$lambda(this$0) {
    return function (it) {
      this$0.s1g('\u274C Current line invalid, possible fixes:\n\n' + it);
      return Unit_instance;
    };
  }
  function TidyEditor$enumerateCompletionsInteractively$lambda_0($postResults) {
    return function (it) {
      $postResults(it);
      return Unit_instance;
    };
  }
  function TidyEditor$enumerateCompletionsInteractively$lambda_1(it) {
    it();
    return Unit_instance;
  }
  function TidyEditor$continuation$lambda($f) {
    return function () {
      $f();
      return Unit_instance;
    };
  }
  function TidyEditor$enumerateCompletionsInteractively$findNextCompletion$lambda($i) {
    return function (it) {
      var _unary__edvuaz = $i._v;
      $i._v = _unary__edvuaz + 1 | 0;
      return '<span style="color: gray" class="noselect">' + padStart(_unary__edvuaz.toString(), 2) + '.) <\/span>' + it.we_1;
    };
  }
  function TidyEditor$enumerateCompletionsInteractively$findNextCompletion$lambda_0($score) {
    return function (it) {
      return compareTo(it.xe_1, $score);
    };
  }
  function TidyEditor$enumerateCompletionsInteractively$findNextCompletion$lambda_1($i) {
    return function (it) {
      var _unary__edvuaz = $i._v;
      $i._v = _unary__edvuaz + 1 | 0;
      return '<span style="color: gray" class="noselect">' + padStart(_unary__edvuaz.toString(), 2) + '.) <\/span>' + it.we_1;
    };
  }
  function TidyEditor$enumerateCompletionsInteractively$findNextCompletion$ref($iter, $shouldContinue, $results, $startTime, $totalResults, $topNResults, $finally, $metric, $resultsToPost, this$0, $postResults, $localContinuation) {
    var l = function () {
      enumerateCompletionsInteractively$findNextCompletion($iter, $shouldContinue, $results, $startTime, $totalResults, $topNResults, $finally, $metric, $resultsToPost, this$0, $postResults, $localContinuation);
      return Unit_instance;
    };
    l.callableName = 'findNextCompletion';
    return l;
  }
  function TidyEditor() {
    var tmp = this;
    // Inline function 'kotlin.collections.setOf' call
    tmp.l1g_1 = emptySet();
    this.m1g_1 = '';
    var tmp_0 = this;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp_0.n1g_1 = LinkedHashMap_init_$Create$();
    this.o1g_1 = 0;
    this.p1g_1 = false;
    this.q1g_1 = true;
    this.r1g_1 = 27;
  }
  protoOf(TidyEditor).x1g = function () {
    var grammar = this.y1g();
    var tmp;
    try {
      var tmp_0;
      var tmp_1;
      if (!(grammar === this.m1g_1)) {
        tmp_1 = true;
      } else {
        // Inline function 'kotlin.collections.isNotEmpty' call
        tmp_1 = !this.l1g_1.r();
      }
      if (tmp_1) {
        // Inline function 'kotlin.also' call
        // Inline function 'ai.hypergraph.tidyparse.TidyEditor.getLatestCFG.<anonymous>' call
        this.m1g_1 = grammar;
        // Inline function 'kotlin.let' call
        // Inline function 'ai.hypergraph.tidyparse.TidyEditor.getLatestCFG.<anonymous>' call
        var it = parseCFG(grammar, VOID, true);
        // Inline function 'kotlin.also' call
        var this_0 = this.q1g_1 ? it : get_noNonterminalStubs(it);
        // Inline function 'ai.hypergraph.tidyparse.TidyEditor.getLatestCFG.<anonymous>' call
        this.l1g_1 = this_0;
        tmp_0 = this_0;
      } else {
        tmp_0 = this.l1g_1;
      }
      tmp = tmp_0;
    } catch ($p) {
      var tmp_2;
      if ($p instanceof Exception) {
        var e = $p;
        this.s1g('<html><body><pre>' + ensureNotNull(e.message) + '<\/pre><\/body><\/html>');
        tmp_2 = emptySet();
      } else {
        throw $p;
      }
      tmp = tmp_2;
    }
    return tmp;
  };
  protoOf(TidyEditor).z1g = function () {
    var timer = Monotonic_instance.yc();
    // Inline function 'kotlin.also' call
    var this_0 = this.t1g();
    // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.<anonymous>' call
    println('Current line is: ' + this_0);
    var currentLine = this_0;
    if (isBlank(currentLine))
      return Unit_instance;
    var caretInGrammar = this.a1h();
    var tokens = tokenizeByWhitespace(currentLine);
    var tmp;
    if (caretInGrammar) {
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var destination = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s = tokens.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.<anonymous>' call
        if (!setOf(['->', '|']).j1(element)) {
          destination.e(element);
        }
      }
      tmp = CFGCFG(toSet(destination));
    } else {
      tmp = this.x1g();
    }
    var cfg = tmp;
    if (cfg.r())
      return Unit_instance;
    var containsUnk = false;
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var _iterator__ex2g4s_0 = tokens.h();
    while (_iterator__ex2g4s_0.i()) {
      var item = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.<anonymous>' call
      var tmp_0;
      if (get_terminals(cfg).j1(item)) {
        tmp_0 = item;
      } else {
        containsUnk = true;
        tmp_0 = '_';
      }
      var tmp$ret$4 = tmp_0;
      destination_0.e(tmp$ret$4);
    }
    var abstractUnk = destination_0;
    var workHash = hashCode(abstractUnk) + hashCode(cfg) | 0;
    if (workHash === this.o1g_1)
      return Unit_instance;
    this.o1g_1 = workHash;
    // Inline function 'kotlin.collections.contains' call
    // Inline function 'kotlin.collections.containsKey' call
    var this_1 = this.n1g_1;
    if ((isInterface(this_1, KtMap) ? this_1 : THROW_CCE()).j2(workHash))
      return this.s1g(ensureNotNull(this.n1g_1.l2(workHash)));
    var tmp_1;
    if (tokens.j1(get_HOLE_MARKER())) {
      var tmp_2 = enumSeqSmart(cfg, tokens);
      var tmp_3 = TidyEditor$handleInput$rankingFun$ref(tokens);
      var tmp_4 = TidyEditor$handleInput$shouldContinue$ref(this, workHash, timer);
      var tmp_5 = TidyEditor$handleInput$finally$ref(this, workHash, timer);
      this.b1h(tmp_2, VOID, tmp_3, tmp_4, VOID, tmp_5, TidyEditor$continuation$ref(this));
      tmp_1 = Unit_instance;
    } else if (!containsUnk && contains(get_language(cfg), tokens)) {
      var tmp0_safe_receiver = parse(cfg, joinToString(tokens, ' '));
      var parseTree = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.t1b();
      // Inline function 'kotlin.also' call
      var this_2 = '\u2705 Current line parses! Tree:\n\n' + parseTree;
      // Inline function 'ai.hypergraph.tidyparse.TidyEditor.handleInput.<anonymous>' call
      // Inline function 'kotlin.collections.set' call
      this.n1g_1.b5(workHash, this_2);
      this.s1g(this_2);
      tmp_1 = Unit_instance;
    } else {
      var tmp1_safe_receiver = Companion_instance.i10(currentLine, cfg, Companion_instance.h10(cfg, currentLine));
      var tmp2_safe_receiver = tmp1_safe_receiver == null ? null : tmp1_safe_receiver.a1b();
      var tmp_6;
      if (tmp2_safe_receiver == null) {
        tmp_6 = null;
      } else {
        var tmp_7 = TidyEditor$handleInput$rankingFun$ref_0(tokens);
        var tmp_8 = TidyEditor$handleInput$shouldContinue$ref_0(this, workHash, timer);
        var tmp_9 = TidyEditor$handleInput$finally$ref_0(this, workHash, timer);
        this.b1h(tmp2_safe_receiver, VOID, tmp_7, tmp_8, VOID, tmp_9, TidyEditor$continuation$ref_0(this));
        tmp_6 = Unit_instance;
      }
      var tmp3_elvis_lhs = tmp_6;
      tmp_1 = tmp3_elvis_lhs == null ? Unit_instance : tmp3_elvis_lhs;
    }
    return tmp_1;
  };
  protoOf(TidyEditor).a1h = function () {
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.tidyparse.TidyEditor.caretInGrammar.<anonymous>' call
    var it = indexOf(this.v1g(), '---');
    return it === -1 || this.w1g() < it;
  };
  protoOf(TidyEditor).c1h = function (cfg) {
  };
  protoOf(TidyEditor).d1h = function (cfg, $super) {
    var tmp;
    if (cfg === VOID) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else {
      tmp = cfg;
    }
    cfg = tmp;
    var tmp_0;
    if ($super === VOID) {
      this.c1h(cfg);
      tmp_0 = Unit_instance;
    } else {
      tmp_0 = $super.c1h.call(this, cfg);
    }
    return tmp_0;
  };
  protoOf(TidyEditor).e1h = function (_this__u8e3s4, resultsToPost, metric, shouldContinue, postResults, finally_0, localContinuation) {
    // Inline function 'kotlin.collections.mutableSetOf' call
    var results = LinkedHashSet_init_$Create$();
    // Inline function 'kotlin.collections.mutableListOf' call
    var topNResults = ArrayList_init_$Create$_0();
    var iter = _this__u8e3s4.h();
    var startTime = Monotonic_instance.yc();
    var totalResults = {_v: 0};
    enumerateCompletionsInteractively$findNextCompletion(iter, shouldContinue, results, startTime, totalResults, topNResults, finally_0, metric, resultsToPost, this, postResults, localContinuation);
  };
  protoOf(TidyEditor).b1h = function (_this__u8e3s4, resultsToPost, metric, shouldContinue, postResults, finally_0, localContinuation, $super) {
    resultsToPost = resultsToPost === VOID ? this.r1g_1 : resultsToPost;
    var tmp;
    if (postResults === VOID) {
      tmp = TidyEditor$enumerateCompletionsInteractively$lambda(this);
    } else {
      tmp = postResults;
    }
    postResults = tmp;
    var tmp_0;
    if (finally_0 === VOID) {
      tmp_0 = TidyEditor$enumerateCompletionsInteractively$lambda_0(postResults);
    } else {
      tmp_0 = finally_0;
    }
    finally_0 = tmp_0;
    var tmp_1;
    if (localContinuation === VOID) {
      tmp_1 = TidyEditor$enumerateCompletionsInteractively$lambda_1;
    } else {
      tmp_1 = localContinuation;
    }
    localContinuation = tmp_1;
    var tmp_2;
    if ($super === VOID) {
      this.e1h(_this__u8e3s4, resultsToPost, metric, shouldContinue, postResults, finally_0, localContinuation);
      tmp_2 = Unit_instance;
    } else {
      tmp_2 = $super.e1h.call(this, _this__u8e3s4, resultsToPost, metric, shouldContinue, postResults, finally_0, localContinuation);
    }
    return tmp_2;
  };
  protoOf(TidyEditor).u1g = function (f) {
    return TidyEditor$continuation$lambda(f);
  };
  protoOf(TidyEditor).y1g = function () {
    return substringBefore(this.v1g(), '---');
  };
  protoOf(TidyEditor).f1h = function () {
    return substringAfter(this.v1g(), '---');
  };
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = TidyEditor;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/Tidyparse-tidyparse-web.js":
/*!*******************************************!*\
  !*** ./kotlin/Tidyparse-tidyparse-web.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./galoisenne.js */ "./kotlin/galoisenne.js"), __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./Tidyparse-tidyparse-core.js */ "./kotlin/Tidyparse-tidyparse-core.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(function (_, kotlin_ai_hypergraph_galoisenne, kotlin_kotlin, kotlin_ai_hypergraph_tidyparse_core) {
  'use strict';
  //region block: imports
  var PlatformVars_instance = kotlin_ai_hypergraph_galoisenne.$_$.b1;
  var indexOf = kotlin_kotlin.$_$.l8;
  var set_TIMEOUT_MS = kotlin_ai_hypergraph_galoisenne.$_$.u;
  var Unit_instance = kotlin_kotlin.$_$.j2;
  var THROW_CCE = kotlin_kotlin.$_$.v9;
  var VOID = kotlin_kotlin.$_$.c;
  var parseCFG = kotlin_ai_hypergraph_galoisenne.$_$.n;
  var get_noNonterminalStubs = kotlin_ai_hypergraph_galoisenne.$_$.j;
  var Exception = kotlin_kotlin.$_$.r9;
  var KProperty0 = kotlin_kotlin.$_$.p7;
  var getPropertyCallableRef = kotlin_kotlin.$_$.g6;
  var to = kotlin_kotlin.$_$.ia;
  var lazy = kotlin_kotlin.$_$.ea;
  var ensureNotNull = kotlin_kotlin.$_$.da;
  var substringAfterLast = kotlin_kotlin.$_$.a9;
  var protoOf = kotlin_kotlin.$_$.a7;
  var initMetadataForCompanion = kotlin_kotlin.$_$.k6;
  var preparseParseableLines = kotlin_ai_hypergraph_galoisenne.$_$.p;
  var TidyEditor = kotlin_ai_hypergraph_tidyparse_core.$_$.a;
  var isValidProd = kotlin_ai_hypergraph_galoisenne.$_$.f;
  var initMetadataForClass = kotlin_kotlin.$_$.j6;
  var mapCapacity = kotlin_kotlin.$_$.x3;
  var coerceAtLeast = kotlin_kotlin.$_$.k7;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.h;
  var Regex_init_$Create$ = kotlin_kotlin.$_$.l;
  var objectCreate = kotlin_kotlin.$_$.z6;
  var joinToString = kotlin_kotlin.$_$.r3;
  var tokenizeByWhitespaceAndKeepDelimiters = kotlin_ai_hypergraph_galoisenne.$_$.y;
  var escapeHTML = kotlin_ai_hypergraph_galoisenne.$_$.a;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.m;
  var lines = kotlin_kotlin.$_$.r8;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.z;
  var get_segmentationCacheHTML = kotlin_ai_hypergraph_galoisenne.$_$.r;
  var hashCode = kotlin_kotlin.$_$.i6;
  var getStringHashCode = kotlin_kotlin.$_$.h6;
  //endregion
  //region block: pre-declaration
  initMetadataForCompanion(Companion);
  initMetadataForClass(JSTidyEditor, 'JSTidyEditor', VOID, TidyEditor);
  initMetadataForClass(Parser, 'Parser');
  initMetadataForClass(TextareaDecorator, 'TextareaDecorator');
  //endregion
  function get_parser() {
    _init_properties_Client_kt__a2ryqz();
    return parser;
  }
  var parser;
  function get_decorator() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0 = decorator$delegate;
    // Inline function 'kotlin.getValue' call
    decorator$factory();
    return tmp0.i2();
  }
  var decorator$delegate;
  function get_jsEditor() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0 = jsEditor$delegate;
    // Inline function 'kotlin.getValue' call
    jsEditor$factory();
    return tmp0.i2();
  }
  var jsEditor$delegate;
  function get_inputField() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0 = inputField$delegate;
    // Inline function 'kotlin.getValue' call
    inputField$factory();
    return tmp0.i2();
  }
  var inputField$delegate;
  function get_outputField() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0 = outputField$delegate;
    // Inline function 'kotlin.getValue' call
    outputField$factory();
    return tmp0.i2();
  }
  var outputField$delegate;
  function get_mincheck() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0 = mincheck$delegate;
    // Inline function 'kotlin.getValue' call
    mincheck$factory();
    return tmp0.i2();
  }
  var mincheck$delegate;
  function get_ntscheck() {
    _init_properties_Client_kt__a2ryqz();
    var tmp0 = ntscheck$delegate;
    // Inline function 'kotlin.getValue' call
    ntscheck$factory();
    return tmp0.i2();
  }
  var ntscheck$delegate;
  function main() {
    _init_properties_Client_kt__a2ryqz();
    if (!(indexOf(window.navigator.userAgent, 'hrome') === -1)) {
      PlatformVars_instance.y1f_1 = 4;
    }
    set_TIMEOUT_MS(10000);
    get_jsEditor().x1g();
    var tmp = window;
    tmp.onload = main$lambda;
    var tmp_0 = get_inputField();
    tmp_0.addEventListener('input', main$lambda_0);
    var tmp_1 = get_inputField();
    tmp_1.addEventListener('input', main$lambda_1);
    var tmp_2 = get_mincheck();
    tmp_2.addEventListener('change', main$lambda_2);
    var tmp_3 = get_ntscheck();
    tmp_3.addEventListener('change', main$lambda_3);
  }
  function decorator$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    return new TextareaDecorator(get_inputField(), get_parser());
  }
  function jsEditor$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    return new JSTidyEditor(get_inputField(), get_outputField());
  }
  function inputField$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = document.getElementById('tidyparse-input');
    return tmp instanceof HTMLTextAreaElement ? tmp : THROW_CCE();
  }
  function outputField$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = document.getElementById('tidyparse-output');
    return tmp instanceof Node ? tmp : THROW_CCE();
  }
  function mincheck$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = document.getElementById('minimize-checkbox');
    return tmp instanceof HTMLInputElement ? tmp : THROW_CCE();
  }
  function ntscheck$delegate$lambda() {
    _init_properties_Client_kt__a2ryqz();
    var tmp = document.getElementById('ntstubs-checkbox');
    return tmp instanceof HTMLInputElement ? tmp : THROW_CCE();
  }
  function main$lambda(it) {
    _init_properties_Client_kt__a2ryqz();
    get_jsEditor().d1h();
    return Unit_instance;
  }
  function main$lambda_0(it) {
    _init_properties_Client_kt__a2ryqz();
    // Inline function 'kotlin.run' call
    // Inline function 'main.<anonymous>.<anonymous>' call
    var $this$run = get_jsEditor();
    $this$run.u1g(main$lambda$lambda($this$run));
    return Unit_instance;
  }
  function main$lambda$lambda($$this$run) {
    return function () {
      $$this$run.z1g();
      return Unit_instance;
    };
  }
  function main$lambda_1(it) {
    _init_properties_Client_kt__a2ryqz();
    get_jsEditor().d1h();
    return Unit_instance;
  }
  function main$lambda_2(it) {
    _init_properties_Client_kt__a2ryqz();
    get_jsEditor().p1g_1 = get_mincheck().checked;
    return Unit_instance;
  }
  function main$lambda_3(it) {
    _init_properties_Client_kt__a2ryqz();
    get_jsEditor().q1g_1 = get_ntscheck().checked;
    try {
      var tmp = get_jsEditor();
      // Inline function 'kotlin.let' call
      // Inline function 'main.<anonymous>.<anonymous>' call
      var it_0 = parseCFG(get_jsEditor().y1g(), VOID, true);
      tmp.l1g_1 = get_ntscheck().checked ? it_0 : get_noNonterminalStubs(it_0);
    } catch ($p) {
      if ($p instanceof Exception) {
        var e = $p;
      } else {
        throw $p;
      }
    }
    get_jsEditor().d1h();
    return Unit_instance;
  }
  function decorator$factory() {
    return getPropertyCallableRef('decorator', 0, KProperty0, function () {
      return get_decorator();
    }, null);
  }
  function jsEditor$factory() {
    return getPropertyCallableRef('jsEditor', 0, KProperty0, function () {
      return get_jsEditor();
    }, null);
  }
  function inputField$factory() {
    return getPropertyCallableRef('inputField', 0, KProperty0, function () {
      return get_inputField();
    }, null);
  }
  function outputField$factory() {
    return getPropertyCallableRef('outputField', 0, KProperty0, function () {
      return get_outputField();
    }, null);
  }
  function mincheck$factory() {
    return getPropertyCallableRef('mincheck', 0, KProperty0, function () {
      return get_mincheck();
    }, null);
  }
  function ntscheck$factory() {
    return getPropertyCallableRef('ntscheck', 0, KProperty0, function () {
      return get_ntscheck();
    }, null);
  }
  var properties_initialized_Client_kt_4npn83;
  function _init_properties_Client_kt__a2ryqz() {
    if (!properties_initialized_Client_kt_4npn83) {
      properties_initialized_Client_kt_4npn83 = true;
      parser = Parser_init_$Create$([to('whitespace', '\\s+'), to('blue', '---'), to('gray', '->|_|\\|'), to('green', 'START'), to('other', '\\S')]);
      decorator$delegate = lazy(decorator$delegate$lambda);
      jsEditor$delegate = lazy(jsEditor$delegate$lambda);
      inputField$delegate = lazy(inputField$delegate$lambda);
      outputField$delegate = lazy(outputField$delegate$lambda);
      mincheck$delegate = lazy(mincheck$delegate$lambda);
      ntscheck$delegate = lazy(ntscheck$delegate$lambda);
    }
  }
  function mainWrapper() {
    main();
  }
  function getEndOfLineIdx(_this__u8e3s4, $this) {
    // Inline function 'kotlin.takeIf' call
    var this_0 = indexOf(_this__u8e3s4.value, '\n', ensureNotNull(_this__u8e3s4.selectionStart));
    var tmp;
    // Inline function 'Companion.getEndOfLineIdx.<anonymous>' call
    if (!(this_0 === -1)) {
      tmp = this_0;
    } else {
      tmp = null;
    }
    var tmp0_elvis_lhs = tmp;
    return tmp0_elvis_lhs == null ? _this__u8e3s4.value.length : tmp0_elvis_lhs;
  }
  function getCurrentLine(_this__u8e3s4, $this) {
    var tmp0 = _this__u8e3s4.value;
    // Inline function 'kotlin.text.substring' call
    var endIndex = getEndOfLineIdx(_this__u8e3s4, $this);
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = tmp0.substring(0, endIndex);
    return substringAfterLast(tmp$ret$1, '\n');
  }
  function Companion() {
  }
  var Companion_instance;
  function Companion_getInstance() {
    return Companion_instance;
  }
  function redecorateLines$decorate(currentHash, this$0) {
    if (!(currentHash === this$0.p1h_1))
      return Unit_instance;
    var decCFG = this$0.x1g();
    // Inline function 'kotlin.apply' call
    var this_0 = get_jsEditor();
    // Inline function 'JSTidyEditor.redecorateLines.decorate.<anonymous>' call
    preparseParseableLines(decCFG, this_0.f1h());
    if (currentHash === this$0.p1h_1) {
      get_decorator().t1h(decCFG);
    }
  }
  function JSTidyEditor$redecorateLines$lambda($currentHash, this$0) {
    return function () {
      redecorateLines$decorate($currentHash, this$0);
      return Unit_instance;
    };
  }
  function JSTidyEditor$redecorateLines$lambda_0($currentHash, this$0) {
    return function () {
      redecorateLines$decorate($currentHash, this$0);
      return Unit_instance;
    };
  }
  function JSTidyEditor(editor, output) {
    TidyEditor.call(this);
    this.n1h_1 = editor;
    this.o1h_1 = output;
    this.p1h_1 = 0;
  }
  protoOf(JSTidyEditor).v1g = function () {
    return this.n1h_1.value;
  };
  protoOf(JSTidyEditor).w1g = function () {
    return ensureNotNull(this.n1h_1.selectionStart);
  };
  protoOf(JSTidyEditor).u1g = function (f) {
    return window.setTimeout(f, 0);
  };
  protoOf(JSTidyEditor).t1g = function () {
    return getCurrentLine(this.n1h_1, Companion_instance);
  };
  protoOf(JSTidyEditor).s1g = function (s) {
    var tmp = get_outputField();
    (tmp instanceof HTMLDivElement ? tmp : THROW_CCE()).innerHTML = s;
  };
  protoOf(JSTidyEditor).c1h = function (cfg) {
    this.p1h_1 = this.p1h_1 + 1 | 0;
    var currentHash = this.p1h_1;
    if (this.a1h()) {
      get_decorator().u1h();
    }
    if (!this.a1h()) {
      this.u1g(JSTidyEditor$redecorateLines$lambda(currentHash, this));
    } else if (isValidProd(this.t1g())) {
      var tmp = window;
      tmp.setTimeout(JSTidyEditor$redecorateLines$lambda_0(currentHash, this), 100);
    }
  };
  function Parser_init_$Init$(rules, $this) {
    // Inline function 'kotlin.collections.associate' call
    var capacity = coerceAtLeast(mapCapacity(rules.length), 16);
    // Inline function 'kotlin.collections.associateTo' call
    var destination = LinkedHashMap_init_$Create$(capacity);
    var inductionVariable = 0;
    var last = rules.length;
    while (inductionVariable < last) {
      var element = rules[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'Parser.<init>.<anonymous>' call
      var color = element.ye();
      var regex = element.ze();
      // Inline function 'kotlin.collections.plusAssign' call
      var pair = to(color, Regex_init_$Create$(regex));
      destination.b5(pair.we_1, pair.xe_1);
    }
    Parser.call($this, destination);
    return $this;
  }
  function Parser_init_$Create$(rules) {
    return Parser_init_$Init$(rules, objectCreate(protoOf(Parser)));
  }
  function Parser$parseRE$lambda(it) {
    return it.ob_1;
  }
  function Parser(ruleMap) {
    this.v1h_1 = ruleMap;
    var tmp = this;
    var tmp_0 = this.v1h_1.n2();
    // Inline function 'kotlin.text.toRegex' call
    var this_0 = joinToString(tmp_0, '|', VOID, VOID, VOID, VOID, Parser$parseRE$lambda);
    tmp.w1h_1 = Regex_init_$Create$(this_0);
  }
  protoOf(Parser).x1h = function (token) {
    var tmp0 = this.v1h_1.o2();
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'Parser.identify.<anonymous>' call
        if (element.i2().ub(token)) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    var tmp0_safe_receiver = tmp$ret$1;
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.h2();
  };
  function toColorfulHTML(_this__u8e3s4, $this) {
    var tmp = tokenizeByWhitespaceAndKeepDelimiters(_this__u8e3s4);
    return joinToString(tmp, '', VOID, VOID, VOID, VOID, TextareaDecorator$toColorfulHTML$lambda($this));
  }
  function TextareaDecorator$toColorfulHTML$lambda(this$0) {
    return function (token) {
      var escapedToken = escapeHTML(token);
      var tmp0_safe_receiver = this$0.r1h_1.x1h(token);
      var tmp;
      if (tmp0_safe_receiver == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'TextareaDecorator.toColorfulHTML.<anonymous>.<anonymous>' call
        tmp = '<span class="' + tmp0_safe_receiver + '">' + escapedToken + '<\/span>';
      }
      var tmp1_elvis_lhs = tmp;
      return tmp1_elvis_lhs == null ? escapedToken : tmp1_elvis_lhs;
    };
  }
  function TextareaDecorator(inputField, parser) {
    this.q1h_1 = inputField;
    this.r1h_1 = parser;
    var tmp = this;
    var tmp_0 = document.createElement('pre');
    tmp.s1h_1 = tmp_0 instanceof HTMLPreElement ? tmp_0 : THROW_CCE();
    var tmp_1 = document.createElement('div');
    var parent = tmp_1 instanceof HTMLDivElement ? tmp_1 : THROW_CCE();
    // Inline function 'kotlin.apply' call
    // Inline function 'TextareaDecorator.<anonymous>' call
    parent.className = 'ldt ' + parent.className;
    parent.appendChild(this.s1h_1);
    var tmp_2 = document.createElement('label');
    var label = tmp_2 instanceof HTMLLabelElement ? tmp_2 : THROW_CCE();
    parent.appendChild(label);
    // Inline function 'kotlin.apply' call
    var this_0 = this.q1h_1;
    // Inline function 'TextareaDecorator.<anonymous>' call
    var tmp0_safe_receiver = this_0.parentNode;
    if (tmp0_safe_receiver == null)
      null;
    else
      tmp0_safe_receiver.replaceChild(parent, this_0);
    label.appendChild(this_0);
    this_0.className = '';
    this_0.spellcheck = false;
    this_0.wrap = 'off';
  }
  protoOf(TextareaDecorator).u1h = function () {
    var sb = StringBuilder_init_$Create$();
    var lines_0;
    var maxLen = 0;
    // Inline function 'kotlin.also' call
    var this_0 = lines(this.q1h_1.value);
    // Inline function 'TextareaDecorator.quickDecorate.<anonymous>' call
    lines_0 = this_0.k();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'TextareaDecorator.quickDecorate.<anonymous>' call
      if (element.length > maxLen)
        maxLen = element.length;
      // Inline function 'kotlin.text.appendLine' call
      var value = toColorfulHTML(element, this);
      // Inline function 'kotlin.text.appendLine' call
      sb.d8(value).e8(_Char___init__impl__6a9atx(10));
    }
    this.s1h_1.innerHTML = sb.toString();
    this.q1h_1.cols = maxLen + 1 | 0;
    this.q1h_1.rows = lines_0 + 2 | 0;
  };
  protoOf(TextareaDecorator).t1h = function (cfg) {
    var sb = StringBuilder_init_$Create$();
    var lines_0;
    var maxLen = 0;
    // Inline function 'kotlin.also' call
    var this_0 = lines(this.q1h_1.value);
    // Inline function 'TextareaDecorator.fullDecorate.<anonymous>' call
    lines_0 = this_0.k();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'TextareaDecorator.fullDecorate.<anonymous>' call
      if (element.length > maxLen)
        maxLen = element.length;
      var tmp0 = get_segmentationCacheHTML();
      // Inline function 'kotlin.collections.getOrElse' call
      var key = hashCode(cfg) + getStringHashCode(element) | 0;
      var tmp0_elvis_lhs = tmp0.l2(key);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'TextareaDecorator.fullDecorate.<anonymous>.<anonymous>' call
        tmp = toColorfulHTML(element, this);
      } else {
        tmp = tmp0_elvis_lhs;
      }
      // Inline function 'kotlin.text.appendLine' call
      var value = tmp;
      // Inline function 'kotlin.text.appendLine' call
      sb.d8(value).e8(_Char___init__impl__6a9atx(10));
    }
    this.s1h_1.innerHTML = sb.toString();
    this.q1h_1.cols = maxLen + 1 | 0;
    this.q1h_1.rows = lines_0 + 2 | 0;
  };
  //region block: init
  Companion_instance = new Companion();
  //endregion
  mainWrapper();
  return _;
}));



/***/ }),

/***/ "./kotlin/galoisenne.js":
/*!******************************!*\
  !*** ./kotlin/galoisenne.js ***!
  \******************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./kotlin-kotlin-stdlib.js */ "./kotlin/kotlin-kotlin-stdlib.js"), __webpack_require__(/*! ./KotlinBigInteger-bignum.js */ "./kotlin/KotlinBigInteger-bignum.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(function (_, kotlin_kotlin, kotlin_com_ionspin_kotlin_bignum) {
  'use strict';
  //region block: imports
  var tanh = Math.tanh;
  var imul = Math.imul;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.x2;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.f;
  var Unit_instance = kotlin_kotlin.$_$.j2;
  var VOID = kotlin_kotlin.$_$.c;
  var getStringHashCode = kotlin_kotlin.$_$.h6;
  var Random = kotlin_kotlin.$_$.h7;
  var Collection = kotlin_kotlin.$_$.k2;
  var isInterface = kotlin_kotlin.$_$.p6;
  var KClass = kotlin_kotlin.$_$.o7;
  var NotImplementedError = kotlin_kotlin.$_$.t9;
  var getKClassFromExpression = kotlin_kotlin.$_$.a;
  var Char__toInt_impl_vasixd = kotlin_kotlin.$_$.d1;
  var toString = kotlin_kotlin.$_$.i9;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.z;
  var padStart = kotlin_kotlin.$_$.t8;
  var LinkedHashMap_init_$Create$ = kotlin_kotlin.$_$.i;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.g;
  var Regex_init_$Create$ = kotlin_kotlin.$_$.l;
  var isBlank = kotlin_kotlin.$_$.m8;
  var replaceFirst = kotlin_kotlin.$_$.u8;
  var charArrayOf = kotlin_kotlin.$_$.y5;
  var split = kotlin_kotlin.$_$.y8;
  var THROW_CCE = kotlin_kotlin.$_$.v9;
  var isCharSequence = kotlin_kotlin.$_$.o6;
  var trim = kotlin_kotlin.$_$.l9;
  var toString_0 = kotlin_kotlin.$_$.c7;
  var replace = kotlin_kotlin.$_$.v8;
  var lines = kotlin_kotlin.$_$.r8;
  var NoSuchElementException_init_$Create$ = kotlin_kotlin.$_$.r;
  var compareTo = kotlin_kotlin.$_$.b6;
  var until = kotlin_kotlin.$_$.n7;
  var ensureNotNull = kotlin_kotlin.$_$.da;
  var joinToString = kotlin_kotlin.$_$.r3;
  var compareBy = kotlin_kotlin.$_$.q5;
  var sortedWith = kotlin_kotlin.$_$.t4;
  var numberToInt = kotlin_kotlin.$_$.x6;
  var to = kotlin_kotlin.$_$.ia;
  var plus = kotlin_kotlin.$_$.j4;
  var numberRangeToNumber = kotlin_kotlin.$_$.u6;
  var checkIndexOverflow = kotlin_kotlin.$_$.v2;
  var drop = kotlin_kotlin.$_$.j8;
  var dropLast = kotlin_kotlin.$_$.i8;
  var equals = kotlin_kotlin.$_$.c6;
  var toString_1 = kotlin_kotlin.$_$.ha;
  var charSequenceLength = kotlin_kotlin.$_$.a6;
  var substringBefore = kotlin_kotlin.$_$.d9;
  var substringAfter = kotlin_kotlin.$_$.c9;
  var padEnd = kotlin_kotlin.$_$.s8;
  var toCharArray = kotlin_kotlin.$_$.f9;
  var toSet = kotlin_kotlin.$_$.j5;
  var fillArrayVal = kotlin_kotlin.$_$.d6;
  var booleanArray = kotlin_kotlin.$_$.x5;
  var emptySet = kotlin_kotlin.$_$.i3;
  var protoOf = kotlin_kotlin.$_$.a7;
  var listOf = kotlin_kotlin.$_$.v3;
  var addAll = kotlin_kotlin.$_$.o2;
  var initMetadataForCompanion = kotlin_kotlin.$_$.k6;
  var toSet_0 = kotlin_kotlin.$_$.h5;
  var startsWith = kotlin_kotlin.$_$.z8;
  var mapCapacity = kotlin_kotlin.$_$.x3;
  var LinkedHashMap_init_$Create$_0 = kotlin_kotlin.$_$.h;
  var toList = kotlin_kotlin.$_$.b5;
  var withIndex = kotlin_kotlin.$_$.o5;
  var coerceAtLeast = kotlin_kotlin.$_$.k7;
  var Pair = kotlin_kotlin.$_$.u9;
  var toMap = kotlin_kotlin.$_$.d5;
  var Triple = kotlin_kotlin.$_$.w9;
  var asSequence = kotlin_kotlin.$_$.s2;
  var filter = kotlin_kotlin.$_$.u7;
  var toList_0 = kotlin_kotlin.$_$.e8;
  var toSet_1 = kotlin_kotlin.$_$.f8;
  var lazy = kotlin_kotlin.$_$.ea;
  var emptyList = kotlin_kotlin.$_$.g3;
  var toMutableSet = kotlin_kotlin.$_$.g5;
  var retainAll = kotlin_kotlin.$_$.n4;
  var initMetadataForClass = kotlin_kotlin.$_$.j6;
  var toInt = kotlin_kotlin.$_$.g9;
  var listOf_0 = kotlin_kotlin.$_$.w3;
  var KProperty1 = kotlin_kotlin.$_$.q7;
  var getPropertyCallableRef = kotlin_kotlin.$_$.g6;
  var Exception = kotlin_kotlin.$_$.r9;
  var LinkedHashMap_init_$Create$_1 = kotlin_kotlin.$_$.j;
  var objectCreate = kotlin_kotlin.$_$.z6;
  var LinkedHashSet_init_$Create$ = kotlin_kotlin.$_$.k;
  var plus_0 = kotlin_kotlin.$_$.e4;
  var plus_1 = kotlin_kotlin.$_$.h4;
  var initMetadataForInterface = kotlin_kotlin.$_$.l6;
  var charSequenceGet = kotlin_kotlin.$_$.z5;
  var Char = kotlin_kotlin.$_$.n9;
  var flatten = kotlin_kotlin.$_$.n3;
  var get_indices = kotlin_kotlin.$_$.p3;
  var zip = kotlin_kotlin.$_$.p5;
  var println = kotlin_kotlin.$_$.u5;
  var KtList = kotlin_kotlin.$_$.l2;
  var minus = kotlin_kotlin.$_$.c4;
  var setOf = kotlin_kotlin.$_$.p4;
  var intersect = kotlin_kotlin.$_$.q3;
  var plus_2 = kotlin_kotlin.$_$.g4;
  var contains = kotlin_kotlin.$_$.g8;
  var toMutableMap = kotlin_kotlin.$_$.f5;
  var emptyMap = kotlin_kotlin.$_$.h3;
  var hashCode = kotlin_kotlin.$_$.i6;
  var KtSet = kotlin_kotlin.$_$.n2;
  var numberToChar = kotlin_kotlin.$_$.v6;
  var KtMap = kotlin_kotlin.$_$.m2;
  var plus_3 = kotlin_kotlin.$_$.f4;
  var copyToArray = kotlin_kotlin.$_$.c3;
  var FunctionAdapter = kotlin_kotlin.$_$.v5;
  var Comparator = kotlin_kotlin.$_$.p9;
  var compareValues = kotlin_kotlin.$_$.r5;
  var minus_0 = kotlin_kotlin.$_$.b4;
  var toIntArray = kotlin_kotlin.$_$.a5;
  var toSet_2 = kotlin_kotlin.$_$.i5;
  var reversed = kotlin_kotlin.$_$.o4;
  var substringAfter_0 = kotlin_kotlin.$_$.b9;
  var abs = kotlin_kotlin.$_$.d7;
  var dropLast_0 = kotlin_kotlin.$_$.e3;
  var last = kotlin_kotlin.$_$.u3;
  var plus_4 = kotlin_kotlin.$_$.k4;
  var toMutableList = kotlin_kotlin.$_$.e5;
  var takeLast = kotlin_kotlin.$_$.w4;
  var firstOrNull = kotlin_kotlin.$_$.k3;
  var drop_0 = kotlin_kotlin.$_$.f3;
  var first = kotlin_kotlin.$_$.m3;
  var mutableSetOf = kotlin_kotlin.$_$.d4;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.m;
  var substring = kotlin_kotlin.$_$.e9;
  var get_lastIndex = kotlin_kotlin.$_$.t3;
  var first_0 = kotlin_kotlin.$_$.l3;
  var coerceAtMost = kotlin_kotlin.$_$.l7;
  var lineSequence = kotlin_kotlin.$_$.q8;
  var isWhitespace = kotlin_kotlin.$_$.n8;
  var get_lastIndex_0 = kotlin_kotlin.$_$.o8;
  var Monotonic_instance = kotlin_kotlin.$_$.i2;
  var toBigInteger = kotlin_com_ionspin_kotlin_bignum.$_$.a;
  var ValueTimeMark__elapsedNow_impl_eonqvs = kotlin_kotlin.$_$.y;
  var TimedValue = kotlin_kotlin.$_$.m9;
  var Duration__toString_impl_8d916b = kotlin_kotlin.$_$.x;
  var shuffled = kotlin_kotlin.$_$.r4;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.u;
  var Companion_getInstance = kotlin_com_ionspin_kotlin_bignum.$_$.c;
  var windowed = kotlin_kotlin.$_$.m5;
  var map = kotlin_kotlin.$_$.y7;
  var addAll_0 = kotlin_kotlin.$_$.p2;
  var distinct = kotlin_kotlin.$_$.d3;
  var mapOf = kotlin_kotlin.$_$.y3;
  var CoroutineImpl = kotlin_kotlin.$_$.t5;
  var SequenceScope = kotlin_kotlin.$_$.r7;
  var get_COROUTINE_SUSPENDED = kotlin_kotlin.$_$.s5;
  var initMetadataForLambda = kotlin_kotlin.$_$.m6;
  var contains_0 = kotlin_kotlin.$_$.h8;
  var sequence = kotlin_kotlin.$_$.b8;
  var mapIndexedNotNull = kotlin_kotlin.$_$.x7;
  var generateSequence = kotlin_kotlin.$_$.w7;
  var Default_getInstance = kotlin_kotlin.$_$.g2;
  var random = kotlin_kotlin.$_$.l4;
  var BigInteger_init_$Create$ = kotlin_com_ionspin_kotlin_bignum.$_$.b;
  var sequenceOf = kotlin_kotlin.$_$.a8;
  var Exception_init_$Create$ = kotlin_kotlin.$_$.o;
  var first_1 = kotlin_kotlin.$_$.k8;
  var last_0 = kotlin_kotlin.$_$.p8;
  var booleanArrayOf = kotlin_kotlin.$_$.w5;
  var asReversed = kotlin_kotlin.$_$.r2;
  var toBooleanArray = kotlin_kotlin.$_$.x4;
  var takeWhile = kotlin_kotlin.$_$.d8;
  var checkCountOverflow = kotlin_kotlin.$_$.u2;
  var toString_2 = kotlin_kotlin.$_$.e1;
  var union = kotlin_kotlin.$_$.l5;
  var Char__rangeTo_impl_tkncvp = kotlin_kotlin.$_$.c1;
  var plus_5 = kotlin_kotlin.$_$.z7;
  var replace_0 = kotlin_kotlin.$_$.w8;
  var toLong = kotlin_kotlin.$_$.b7;
  var mapOf_0 = kotlin_kotlin.$_$.z3;
  var Long = kotlin_kotlin.$_$.s9;
  var initMetadataForObject = kotlin_kotlin.$_$.n6;
  var plus_6 = kotlin_kotlin.$_$.i4;
  var flatMap = kotlin_kotlin.$_$.v7;
  var distinct_0 = kotlin_kotlin.$_$.s7;
  var joinToString_0 = kotlin_kotlin.$_$.s3;
  var toDoubleArray = kotlin_kotlin.$_$.z4;
  var sum = kotlin_kotlin.$_$.v4;
  var filterIndexed = kotlin_kotlin.$_$.t7;
  var shuffled_0 = kotlin_kotlin.$_$.c8;
  var _ULong___init__impl__c78o9k = kotlin_kotlin.$_$.s1;
  var _ULong___get_data__impl__fggpzb = kotlin_kotlin.$_$.t1;
  var toString_3 = kotlin_kotlin.$_$.j9;
  var ULongRange = kotlin_kotlin.$_$.j7;
  var nextULong = kotlin_kotlin.$_$.i7;
  var ULong = kotlin_kotlin.$_$.ba;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.p;
  var firstOrNull_0 = kotlin_kotlin.$_$.j3;
  var getOrNull = kotlin_kotlin.$_$.o3;
  var toList_1 = kotlin_kotlin.$_$.c5;
  var downTo = kotlin_kotlin.$_$.m7;
  var windowed_0 = kotlin_kotlin.$_$.n5;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.q;
  var getObjectHashCode = kotlin_kotlin.$_$.f6;
  var chunked = kotlin_kotlin.$_$.w2;
  var sorted = kotlin_kotlin.$_$.u4;
  var minus_1 = kotlin_kotlin.$_$.a4;
  var toDoubleArray_0 = kotlin_kotlin.$_$.y4;
  var contentEquals = kotlin_kotlin.$_$.y2;
  var newThrowable = kotlin_kotlin.$_$.t6;
  var stackTraceToString = kotlin_kotlin.$_$.ga;
  var ReadOnlyProperty = kotlin_kotlin.$_$.g7;
  var ArrayDeque_init_$Create$ = kotlin_kotlin.$_$.e;
  var round = kotlin_kotlin.$_$.f7;
  //endregion
  //region block: pre-declaration
  initMetadataForCompanion(Companion);
  initMetadataForClass(FSA, 'FSA');
  initMetadataForClass(ACYC_FSA, 'ACYC_FSA', VOID, FSA);
  initMetadataForClass(NOM, 'NOM', VOID, FSA);
  initMetadataForClass(LRUCache, 'LRUCache', LRUCache);
  function G1() {
    var tmp = this.n16();
    // Inline function 'kotlin.collections.setOf' call
    return tmp(emptySet());
  }
  function G2(graphs) {
    return this.G4(toList_1(graphs));
  }
  function G3(vertices) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(vertices.length);
    var inductionVariable = 0;
    var last = vertices.length;
    while (inductionVariable < last) {
      var item = vertices[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
      var tmp$ret$0 = get_graph(item);
      destination.e(tmp$ret$0);
    }
    return this.G4(destination);
  }
  function G4(list) {
    var tmp;
    if (list.r()) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else if (allAre(list, this.G1())) {
      // Inline function 'kotlin.collections.fold' call
      var accumulator = this.G1();
      var _iterator__ex2g4s = list.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
        accumulator = accumulator.r16(isInterface(element, IGraph) ? element : THROW_CCE());
      }
      tmp = accumulator;
    } else if (allAre(list, first_0(list))) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(list, 10));
      var _iterator__ex2g4s_0 = list.h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
        var tmp$ret$3 = isInterface(item, IVertex) ? item : THROW_CCE();
        destination.e(tmp$ret$3);
      }
      tmp = toSet_0(destination);
    } else {
      throw Exception_init_$Create$('Unsupported constructor: G(' + joinToString(list, ',', VOID, VOID, VOID, VOID, IGF$G$lambda) + ')');
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGF.G.<anonymous>' call
    var it = tmp;
    return this.n16()(it);
  }
  initMetadataForInterface(IGF, 'IGF');
  initMetadataForClass(AGF, 'AGF', VOID, VOID, [IGF]);
  function get_index() {
    return new VIndex(this.f16());
  }
  function get(vertexIdx) {
    return this.q16().q(vertexIdx);
  }
  function plus_7(that) {
    return this.n16()(plus_2(plus_2(this.s16(that), this.t16(that)), minus_0(that, this)));
  }
  function minus_2(graph) {
    return this.n16()(minus_0(this.f16(), graph.f16()));
  }
  function join(that) {
    // Inline function 'kotlin.collections.sortedBy' call
    var this_0 = intersect(this.f16(), that.f16());
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = IGraph$join$lambda;
    var tmp$ret$0 = new sam$kotlin_Comparator$0_5(tmp);
    var tmp$ret$1 = sortedWith(this_0, tmp$ret$0);
    var tmp_0 = toSet_0(tmp$ret$1);
    // Inline function 'kotlin.collections.sortedBy' call
    var this_1 = intersect(that.f16(), this.f16());
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp_1 = IGraph$join$lambda_0;
    var tmp$ret$2 = new sam$kotlin_Comparator$0_5(tmp_1);
    var tmp$ret$3 = sortedWith(this_1, tmp$ret$2);
    // Inline function 'kotlin.collections.map' call
    var this_2 = zip(tmp_0, toSet_0(tmp$ret$3));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
    var _iterator__ex2g4s = this_2.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
      var left = item.ye();
      var right = item.ze();
      var tmp_2 = this.p16();
      var tmp$ret$4 = tmp_2(left, IGraph$join$lambda_1(left, right));
      destination.e(tmp$ret$4);
    }
    return toSet_0(destination);
  }
  function reversed_0() {
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = this.f16();
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.setOf' call
      var tmp$ret$1 = emptySet();
      result.b5(element, tmp$ret$1);
    }
    var tmp = result;
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = this.f16();
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_0 = tmp0.h();
    while (_iterator__ex2g4s_0.i()) {
      var element_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = get_outgoing(element_0);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var _iterator__ex2g4s_1 = this_1.h();
      while (_iterator__ex2g4s_1.i()) {
        var item = _iterator__ex2g4s_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>.<anonymous>' call
        var tmp$ret$4 = to(item.e17(), this.o16()(item.e17(), element_0));
        destination_0.e(tmp$ret$4);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_1 = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s_2 = destination.h();
    while (_iterator__ex2g4s_2.i()) {
      var element_1 = _iterator__ex2g4s_2.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      var key = element_1.we_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_1.l2(key);
      var tmp_0;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_1.b5(key, answer);
        tmp_0 = answer;
      } else {
        tmp_0 = value;
      }
      var list_0 = tmp_0;
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      var tmp$ret$13 = element_1.xe_1;
      list_0.e(tmp$ret$13);
    }
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_2 = LinkedHashMap_init_$Create$_0(mapCapacity(destination_1.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var _iterator__ex2g4s_3 = destination_1.o2().h();
    while (_iterator__ex2g4s_3.i()) {
      var element_2 = _iterator__ex2g4s_3.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_1 = element_2.h2();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.component2' call
      var v = element_2.i2();
      var tmp$ret$18 = toSet_0(v);
      destination_2.b5(tmp_1, tmp$ret$18);
    }
    // Inline function 'kotlin.collections.map' call
    var this_2 = plus_0(tmp, destination_2);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_3 = ArrayList_init_$Create$(this_2.k());
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_4 = this_2.o2().h();
    while (_iterator__ex2g4s_4.i()) {
      var item_0 = _iterator__ex2g4s_4.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var k = item_0.h2();
      // Inline function 'kotlin.collections.component2' call
      var v_0 = item_0.i2();
      var tmp_2 = this.p16();
      var tmp$ret$25 = tmp_2(k, IGraph$reversed$lambda(v_0));
      destination_3.e(tmp$ret$25);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.reversed.<anonymous>' call
    var it = toSet_0(destination_3);
    return this.n16()(it);
  }
  function isomorphicTo(that) {
    return this.k() === that.k() && get_edges(this).k() === get_edges(that).k() && contentEquals(this.i16(), that.i16());
  }
  function vwise(lf) {
    var tmp = this.k();
    return DoubleMatrix_init_$Create$(tmp, VOID, IGraph$vwise$lambda(this, lf));
  }
  function transitiveClosure(vtxs) {
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = get_edgList(this);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.transitiveClosure.<anonymous>' call
      if (vtxs.j1(element.we_1)) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.transitiveClosure.<anonymous>' call
      var tmp$ret$3 = item.xe_1.e17();
      destination_0.e(tmp$ret$3);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.transitiveClosure.<anonymous>' call
    var it = minus_0(toSet_0(destination_0), vtxs);
    return it.r() ? vtxs : this.w16(plus_2(vtxs, it));
  }
  function asString() {
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_edgList(this);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.asString.<anonymous>' call
      var tmp$ret$0 = toString_0(item.we_1) + ' -> ' + toString_0(item.xe_1.e17());
      destination.e(tmp$ret$0);
    }
    return formatAsGrid(destination).toString();
  }
  initMetadataForInterface(IGraph, 'IGraph', VOID, VOID, [IGF, KtSet]);
  initMetadataForClass(Graph, 'Graph', VOID, AGF, [AGF, IGraph, KtSet]);
  function get_E0() {
    return LGFamily$_get_E_$lambda_nhvv0c;
  }
  function get_G0() {
    return LGFamily$_get_G_$lambda_c8zum2;
  }
  function get_V0() {
    return LGFamily$_get_V_$lambda_yfzuln;
  }
  initMetadataForInterface(LGFamily, 'LGFamily', VOID, VOID, [IGF]);
  initMetadataForClass(LabeledGraph, 'LabeledGraph', LabeledGraph, Graph, [Graph, LGFamily]);
  initMetadataForCompanion(Companion_0, LabeledGraph);
  initMetadataForClass(ProtoEdge, 'ProtoEdge');
  initMetadataForClass(LGBuilder, 'LGBuilder');
  function neighbors(k, vertices) {
    var tmp;
    if (k === 0 || equals(neighbors_0(vertices, this), vertices)) {
      tmp = vertices;
    } else {
      var tmp_0 = k - 1 | 0;
      var tmp_1 = plus_2(vertices, neighbors_0(vertices, this));
      tmp = this.r17(tmp_0, plus_1(tmp_1, isInterface(this, IVertex) ? this : THROW_CCE()));
    }
    return tmp;
  }
  function neighbors$default(k, vertices, $super) {
    k = k === VOID ? 0 : k;
    var tmp;
    if (vertices === VOID) {
      var tmp_0 = get_neighbors(this);
      tmp = plus_1(tmp_0, isInterface(this, IVertex) ? this : THROW_CCE());
    } else {
      tmp = vertices;
    }
    vertices = tmp;
    return $super === VOID ? this.r17(k, vertices) : neighbors(k, vertices);
  }
  initMetadataForInterface(IVertex, 'IVertex', VOID, VOID, [IGF]);
  initMetadataForClass(Vertex, 'Vertex', VOID, AGF, [AGF, IVertex]);
  initMetadataForClass(LGVertex, 'LGVertex', LGVertex_init_$Create$, Vertex, [Vertex, LGFamily]);
  function component2() {
    return this.e17();
  }
  initMetadataForInterface(IEdge, 'IEdge', VOID, VOID, [IGF]);
  initMetadataForClass(Edge, 'Edge', VOID, AGF, [AGF, IEdge]);
  initMetadataForClass(LabeledEdge, 'LabeledEdge', VOID, Edge, [Edge, LGFamily]);
  initMetadataForClass(BiMap, 'BiMap');
  initMetadataForClass(Bindex, 'Bindex', VOID, VOID, [KtList]);
  initMetadataForClass(JoinMap, 'JoinMap');
  initMetadataForClass(FrozenCFG, 'FrozenCFG', VOID, VOID, [KtSet]);
  initMetadataForClass(TermDict, 'TermDict', VOID, VOID, [KtMap]);
  initMetadataForClass(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(CFL, 'CFL');
  initMetadataForClass(REL, 'REL');
  initMetadataForClass(CJL, 'CJL');
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(sam$kotlin_Comparator$0_1, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(Segmentation, 'Segmentation', Segmentation);
  initMetadataForClass(sam$kotlin_Comparator$0_2, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(sam$kotlin_Comparator$0_3, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForLambda(PTree$sampleStrWithoutReplacement$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(PTree, 'PTree', PTree);
  initMetadataForClass(sam$kotlin_Comparator$0_4, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(Tree, 'Tree');
  initMetadataForObject(Polynomials, 'Polynomials');
  initMetadataForLambda(BigLFSR$sequence$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(BigLFSR, 'BigLFSR');
  initMetadataForLambda(LFSR$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForCompanion(Companion_2);
  function shape() {
    return cc(this.wy(), this.xy());
  }
  function plus_8(t) {
    var tmp = equals(this.t1d(), t.t1d());
    return this.v1d(t, VOID, tmp, Matrix$plus$lambda(this, t));
  }
  function new$default(rows, cols, data, alg, $super) {
    rows = rows === VOID ? this.wy() : rows;
    cols = cols === VOID ? this.xy() : cols;
    alg = alg === VOID ? this.i1d() : alg;
    return $super === VOID ? this.m1d(rows, cols, data, alg) : $super.m1d.call(this, rows, cols, data, alg);
  }
  function safeJoin(that, ids, criteria, op) {
    // Inline function 'kotlin.require' call
    if (!criteria) {
      // Inline function 'ai.hypergraph.kaliningraph.tensor.Matrix.safeJoin.<anonymous>' call
      var message = 'Dimension mismatch: ' + this.wy() + ',' + this.xy() + ' . ' + that.wy() + ',' + that.xy();
      throw IllegalArgumentException_init_$Create$(toString_0(message));
    }
    // Inline function 'kotlin.run' call
    // Inline function 'ai.hypergraph.kaliningraph.tensor.Matrix.safeJoin.<anonymous>' call
    var tmp = this.wy();
    var tmp_0 = that.xy();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(ids, 10));
    var _iterator__ex2g4s = ids.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.Matrix.safeJoin.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var i = item.q(0);
      // Inline function 'kotlin.collections.component2' call
      var j = item.q(1);
      var tmp$ret$3 = op(this.i1d(), i, j);
      destination.e(tmp$ret$3);
    }
    return this.by(tmp, tmp_0, destination);
  }
  function safeJoin$default(that, ids, criteria, op, $super) {
    ids = ids === VOID ? allPairs(this.wy(), that.xy()) : ids;
    return $super === VOID ? this.u1d(that, ids, criteria, op) : safeJoin(that, ids, criteria, op);
  }
  function get_0(r, c) {
    return this.ay().q(imul(r, this.xy()) + c | 0);
  }
  function get_1(r) {
    return toList(this.ay()).f2(imul(r, this.xy()), imul(r, this.xy()) + this.xy() | 0);
  }
  initMetadataForInterface(Matrix, 'Matrix');
  initMetadataForClass(AbstractMatrix, 'AbstractMatrix', VOID, VOID, [Matrix]);
  initMetadataForClass(DoubleMatrix, 'DoubleMatrix', VOID, AbstractMatrix);
  initMetadataForClass(FreeMatrix, 'FreeMatrix', VOID, AbstractMatrix);
  initMetadataForCompanion(Companion_3);
  initMetadataForClass(UTMatrix, 'UTMatrix', VOID, AbstractMatrix);
  initMetadataForCompanion(Companion_4);
  initMetadataForClass(BooleanMatrix, 'BooleanMatrix', VOID, AbstractMatrix);
  initMetadataForInterface(VT, 'VT', VOID, VOID, [KtList]);
  initMetadataForClass(of, 'of', VOID, VOID, [VT, KtList]);
  initMetadataForClass(Π4, '\u03A04');
  initMetadataForClass(Π5, '\u03A05');
  initMetadataForLambda(powerset$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForClass(S, 'S');
  initMetadataForObject(O, 'O', VOID, S);
  initMetadataForClass(VIndex, 'VIndex');
  initMetadataForClass(sam$kotlin_Comparator$0_5, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForObject(PlatformVars, 'PlatformVars');
  initMetadataForClass(sam$kotlin_properties_ReadOnlyProperty$0, 'sam$kotlin_properties_ReadOnlyProperty$0', VOID, VOID, [ReadOnlyProperty, FunctionAdapter]);
  function dot(l1, l2) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = zip(l1, l2);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.Ring.dot.<anonymous>' call
      var l = item.ye();
      var r = item.ze();
      var tmp$ret$0 = this.g1g(l, r);
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.fold' call
    var accumulator = this.y1d();
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var element = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.Ring.dot.<anonymous>' call
      var acc = accumulator;
      accumulator = this.w1d(acc, element);
    }
    return accumulator;
  }
  initMetadataForInterface(Ring, 'Ring');
  initMetadataForInterface(Field, 'Field', VOID, VOID, [Ring]);
  initMetadataForClass(of_0, 'of', VOID, VOID, [Field]);
  initMetadataForClass(of_1, 'of', VOID, VOID, [Ring]);
  //endregion
  var ACT_TANH;
  var NORM_AVG;
  function elwise(_this__u8e3s4, op) {
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.collections.map' call
    var this_0 = _this__u8e3s4.ay();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.elwise.<anonymous>' call
      var tmp$ret$0 = op(item);
      destination.e(tmp$ret$0);
    }
    return _this__u8e3s4.by(VOID, VOID, destination);
  }
  function meanNorm(_this__u8e3s4) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp0 = _this__u8e3s4.ay();
    // Inline function 'kotlin.collections.fold' call
    var accumulator = VT_0(0.0, 0.0, 0.0);
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.meanNorm.<anonymous>' call
      var destruct = accumulator;
      // Inline function 'kotlin.collections.component1' call
      var a = destruct.q(0);
      // Inline function 'kotlin.collections.component2' call
      var b = destruct.q(1);
      // Inline function 'kotlin.collections.component3' call
      var c = destruct.q(2);
      var tmp = a + element / _this__u8e3s4.ay().k();
      // Inline function 'kotlin.math.min' call
      var tmp_0 = Math.min(b, element);
      // Inline function 'kotlin.math.max' call
      var tmp$ret$4 = Math.max(c, element);
      accumulator = VT_0(tmp, tmp_0, tmp$ret$4);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.meanNorm.<anonymous>' call
    var destruct_0 = accumulator;
    // Inline function 'kotlin.collections.component1' call
    var μ = destruct_0.q(0);
    // Inline function 'kotlin.collections.component2' call
    var min = destruct_0.q(1);
    // Inline function 'kotlin.collections.component3' call
    var max = destruct_0.q(2);
    return elwise(_this__u8e3s4, meanNorm$lambda(μ, max, min));
  }
  function kroneckerDelta(i, j) {
    _init_properties_CommonUtils_kt__3s0my4();
    return i === j ? 1.0 : 0.0;
  }
  function toDoubleMatrix(_this__u8e3s4) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp = _this__u8e3s4.length;
    var tmp_0 = _this__u8e3s4[0].length;
    return DoubleMatrix_init_$Create$(tmp, tmp_0, toDoubleMatrix$lambda(_this__u8e3s4));
  }
  function vectorize(_this__u8e3s4, len) {
    len = len === VOID ? 20 : len;
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.vectorize.<anonymous>' call
    var it = Random(getStringHashCode(_this__u8e3s4));
    return randomVector(len, vectorize$lambda(it));
  }
  function allAre(_this__u8e3s4, that) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(_this__u8e3s4, Collection)) {
        tmp = _this__u8e3s4.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var _iterator__ex2g4s = _this__u8e3s4.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.allAre.<anonymous>' call
        if (!isA(element, that)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  function isA(_this__u8e3s4, that) {
    _init_properties_CommonUtils_kt__3s0my4();
    var tmp;
    var tmp_0;
    if (!isInterface(_this__u8e3s4, KClass)) {
      tmp_0 = !isInterface(that, KClass);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = getKClassFromExpression(_this__u8e3s4).z9(that);
    } else {
      var tmp_1;
      if (!isInterface(_this__u8e3s4, KClass)) {
        tmp_1 = isInterface(that, KClass);
      } else {
        tmp_1 = false;
      }
      if (tmp_1) {
        tmp = getKClassFromExpression(_this__u8e3s4).z9(that);
      } else {
        var tmp_2;
        if (isInterface(_this__u8e3s4, KClass)) {
          tmp_2 = isInterface(that, KClass);
        } else {
          tmp_2 = false;
        }
        if (tmp_2) {
          tmp = _this__u8e3s4.z9(that);
        } else {
          var tmp_3;
          if (isInterface(_this__u8e3s4, KClass)) {
            tmp_3 = !isInterface(that, KClass);
          } else {
            tmp_3 = false;
          }
          if (tmp_3) {
            tmp = _this__u8e3s4.z9(that);
          } else {
            throw new NotImplementedError();
          }
        }
      }
    }
    return tmp;
  }
  function ACT_TANH$lambda(it) {
    _init_properties_CommonUtils_kt__3s0my4();
    return elwise(it, ACT_TANH$lambda$lambda);
  }
  function ACT_TANH$lambda$lambda(it) {
    _init_properties_CommonUtils_kt__3s0my4();
    // Inline function 'kotlin.math.tanh' call
    return tanh(it);
  }
  function NORM_AVG$lambda(it) {
    _init_properties_CommonUtils_kt__3s0my4();
    return meanNorm(it);
  }
  function meanNorm$lambda($μ, $max, $min) {
    return function (e) {
      return (e - $μ) / ($max - $min);
    };
  }
  function toDoubleMatrix$lambda($this_toDoubleMatrix) {
    return function (i, j) {
      return $this_toDoubleMatrix[i][j];
    };
  }
  function vectorize$lambda($it) {
    return function () {
      return $it.bk();
    };
  }
  var properties_initialized_CommonUtils_kt_cxugc6;
  function _init_properties_CommonUtils_kt__3s0my4() {
    if (!properties_initialized_CommonUtils_kt_cxugc6) {
      properties_initialized_CommonUtils_kt_cxugc6 = true;
      ACT_TANH = ACT_TANH$lambda;
      NORM_AVG = NORM_AVG$lambda;
    }
  }
  var BRACKETS;
  var JUST_PARENS;
  function toUnicodeEscaped(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.code' call
    var tmp$ret$0 = Char__toInt_impl_vasixd(_this__u8e3s4);
    return '\\u' + padStart(toString(tmp$ret$0, 16), 4, _Char___init__impl__6a9atx(48));
  }
  function formatAsGrid(_this__u8e3s4, cols) {
    cols = cols === VOID ? -1 : cols;
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.groupByTo' call
    var destination = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.<anonymous>' call
      var key = formatAsGrid$LHS(element);
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination.l2(key);
      var tmp;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination.b5(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.e(element);
    }
    var groups = destination;
    return formatAsGrid$rec(_this__u8e3s4, cols, groups);
  }
  function tokenizeByWhitespace(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.text.split' call
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = Regex_init_$Create$('\\s+').yb(_this__u8e3s4, 0);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.tokenizeByWhitespace.<anonymous>' call
      // Inline function 'kotlin.text.isNotBlank' call
      if (!isBlank(element)) {
        destination.e(element);
      }
    }
    return destination;
  }
  function splitProd(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.map' call
    var this_0 = split(replaceFirst(_this__u8e3s4, '->', '\u2192'), charArrayOf([_Char___init__impl__6a9atx(8594)]));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.splitProd.<anonymous>' call
      // Inline function 'kotlin.text.trim' call
      var tmp$ret$1 = toString_0(trim(isCharSequence(item) ? item : THROW_CCE()));
      destination.e(tmp$ret$1);
    }
    return destination;
  }
  function carveSeams(_this__u8e3s4, toRemove) {
    toRemove = toRemove === VOID ? Regex_init_$Create$('\\s{2,}') : toRemove;
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = lines(replace(_this__u8e3s4, '  |  ', '    '));
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>' call
      // Inline function 'kotlin.text.isNotBlank' call
      if (!isBlank(element)) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>' call
      var tmp$ret$4 = split(item, charArrayOf([_Char___init__impl__6a9atx(8594)]));
      destination_0.e(tmp$ret$4);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>' call
    // Inline function 'kotlin.collections.minOf' call
    var iterator = destination_0.h();
    if (!iterator.i())
      throw NoSuchElementException_init_$Create$();
    // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>' call
    var minValue = iterator.j().k();
    while (iterator.i()) {
      // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>' call
      var v = iterator.j().k();
      if (compareTo(minValue, v) > 0) {
        minValue = v;
      }
    }
    var minCols = minValue;
    // Inline function 'kotlin.collections.map' call
    var this_0 = until(0, minCols);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var inductionVariable = this_0.pk_1;
    var last = this_0.qk_1;
    if (inductionVariable <= last)
      do {
        var item_0 = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>' call
        var it = item_0;
        // Inline function 'kotlin.collections.minOf' call
        var iterator_0 = col(destination_0, it).h();
        if (!iterator_0.i())
          throw NoSuchElementException_init_$Create$();
        // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>.<anonymous>' call
        var it_0 = iterator_0.j();
        var minValue_0 = ensureNotNull(toRemove.vb(it_0)).i2().length;
        while (iterator_0.i()) {
          // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>.<anonymous>' call
          var it_1 = iterator_0.j();
          var v_0 = ensureNotNull(toRemove.vb(it_1)).i2().length;
          if (compareTo(minValue_0, v_0) > 0) {
            minValue_0 = v_0;
          }
        }
        var tmp$ret$13 = minValue_0;
        destination_1.e(tmp$ret$13);
      }
       while (!(item_0 === last));
    var takeAway = destination_1;
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(takeAway, 10));
    var _iterator__ex2g4s_1 = takeAway.h();
    while (_iterator__ex2g4s_1.i()) {
      var item_1 = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.List' call
      // Inline function 'kotlin.collections.MutableList' call
      var list = ArrayList_init_$Create$(item_1);
      // Inline function 'kotlin.repeat' call
      var inductionVariable_0 = 0;
      if (inductionVariable_0 < item_1)
        do {
          var index = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          // Inline function 'kotlin.collections.MutableList.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>.<anonymous>' call
          list.e(' ');
        }
         while (inductionVariable_0 < item_1);
      var tmp$ret$19 = joinToString(list, '');
      destination_2.e(tmp$ret$19);
    }
    var subs = destination_2;
    return joinToString(destination_0, '\n', '\n', VOID, VOID, VOID, carveSeams$lambda(minCols, subs));
  }
  function tokenizeByWhitespaceAndKeepDelimiters(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.text.split' call
    return Regex_init_$Create$('(?<=\\s)|(?=\\s)').yb(_this__u8e3s4, 0);
  }
  function col(_this__u8e3s4, i) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.col.<anonymous>' call
      var tmp$ret$0 = item.q(i);
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function paintDiffs(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    return joinToString(_this__u8e3s4, ' ', VOID, VOID, VOID, VOID, paintDiffs$lambda);
  }
  function removeEpsilon(_this__u8e3s4) {
    _init_properties_StringUtils_kt__hudgtq();
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = tokenizeByWhitespace(_this__u8e3s4);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.removeEpsilon.<anonymous>' call
      if (!(element === '\u03B5')) {
        destination.e(element);
      }
    }
    return joinToString(destination, ' ');
  }
  function formatAsGrid$tok(_this__u8e3s4) {
    return splitProd(_this__u8e3s4);
  }
  function formatAsGrid$LHS(_this__u8e3s4) {
    return formatAsGrid$tok(_this__u8e3s4).q(0);
  }
  function formatAsGrid$rec(_this__u8e3s4, $cols, groups) {
    var tmp;
    if ($cols === -1) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = numberRangeToNumber(3, 5);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var inductionVariable = this_0.pk_1;
      var last = this_0.qk_1;
      if (inductionVariable <= last)
        do {
          var item = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
          var it = item;
          var tmp$ret$0 = formatAsGrid(_this__u8e3s4, it);
          destination.e(tmp$ret$0);
        }
         while (!(item === last));
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.collections.minBy' call
        var iterator = destination.h();
        if (!iterator.i())
          throw NoSuchElementException_init_$Create$();
        var minElem = iterator.j();
        if (!iterator.i()) {
          tmp$ret$3 = minElem;
          break $l$block;
        }
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
        var minValue = minElem.toString().length;
        do {
          var e = iterator.j();
          // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
          var v = e.toString().length;
          if (compareTo(minValue, v) > 0) {
            minElem = e;
            minValue = v;
          }
        }
         while (iterator.i());
        tmp$ret$3 = minElem;
      }
      tmp = tmp$ret$3;
    } else {
      var tmp_0 = formatAsGrid$rec$lambda(groups);
      var tmp_1 = formatAsGrid$rec$lambda_0(groups);
      var tmp_2 = formatAsGrid$rec$lambda_1;
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
      var productions = sortedWith(_this__u8e3s4, compareBy([tmp_0, tmp_1, tmp_2, formatAsGrid$rec$lambda_2]));
      // Inline function 'kotlin.math.ceil' call
      var x = productions.k() / $cols;
      var tmp$ret$6 = Math.ceil(x);
      var _destruct__k2r9zo = to($cols, numberToInt(tmp$ret$6));
      var cols = _destruct__k2r9zo.ye();
      var rows = _destruct__k2r9zo.ze();
      // Inline function 'kotlin.collections.List' call
      // Inline function 'kotlin.collections.MutableList' call
      var size = imul(cols, rows) - productions.k() | 0;
      var list = ArrayList_init_$Create$(size);
      // Inline function 'kotlin.repeat' call
      var inductionVariable_0 = 0;
      if (inductionVariable_0 < size)
        do {
          var index = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          // Inline function 'kotlin.collections.MutableList.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>' call
          list.e('');
        }
         while (inductionVariable_0 < size);
      var padded = plus(productions, list);
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>' call
      var up = get_transpose(new FreeMatrix(cols, rows, padded));
      var tmp_3 = up.wy();
      var tmp_4 = up.xy();
      tmp = FreeMatrix_init_$Create$(tmp_3, tmp_4, formatAsGrid$rec$lambda_3(up));
    }
    return tmp;
  }
  function carveSeams$lambda($minCols, $subs) {
    return function (it) {
      // Inline function 'kotlin.collections.mapIndexed' call
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(it, 10));
      var index = 0;
      var _iterator__ex2g4s = it.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.carveSeams.<anonymous>.<anonymous>.<anonymous>' call
        var i = checkIndexOverflow(_unary__edvuaz);
        var tmp$ret$0 = i < $minCols ? replaceFirst(item, $subs.q(i), '   ') : item;
        destination.e(tmp$ret$0);
      }
      return dropLast(drop(joinToString(destination, '\u2192'), 4), 3);
    };
  }
  function paintDiffs$lambda(_destruct__k2r9zo) {
    _init_properties_StringUtils_kt__hudgtq();
    var a = _destruct__k2r9zo.ye();
    var b = _destruct__k2r9zo.ze();
    var tmp;
    if (a == null) {
      tmp = '<span style="color: green">' + escapeHTML(toString_1(b)) + '<\/span>';
    } else if (b == null) {
      // Inline function 'kotlin.collections.List' call
      // Inline function 'kotlin.collections.MutableList' call
      var size = toString_0(a).length;
      var list = ArrayList_init_$Create$(size);
      // Inline function 'kotlin.repeat' call
      var inductionVariable = 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlin.collections.MutableList.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.paintDiffs.<anonymous>.<anonymous>' call
          list.e(' ');
        }
         while (inductionVariable < size);
      tmp = '<span style="background-color: gray"><span class="noselect">' + joinToString(list, '') + '<\/span><\/span>';
    } else if (equals(a, '_')) {
      tmp = '<span style="color: green">' + escapeHTML(toString_0(b)) + '<\/span>';
    } else if (!equals(a, b)) {
      tmp = '<span style="color: orange">' + escapeHTML(toString_0(b)) + '<\/span>';
    } else {
      tmp = escapeHTML(toString_0(b));
    }
    return tmp;
  }
  function formatAsGrid$rec$lambda($groups) {
    return function (it) {
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = ensureNotNull($groups.l2(formatAsGrid$LHS(it))).h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>' call
      var maxValue = iterator.j().length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>' call
        var v = iterator.j().length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      return maxValue;
    };
  }
  function formatAsGrid$rec$lambda_0($groups) {
    return function (it) {
      return -ensureNotNull($groups.l2(formatAsGrid$LHS(it))).k() | 0;
    };
  }
  function formatAsGrid$rec$lambda_1(it) {
    _init_properties_StringUtils_kt__hudgtq();
    return formatAsGrid$LHS(it);
  }
  function formatAsGrid$rec$lambda_2(it) {
    _init_properties_StringUtils_kt__hudgtq();
    return it.length;
  }
  function formatAsGrid$rec$lambda_3($up) {
    return function (r, c) {
      var tmp;
      // Inline function 'kotlin.text.isEmpty' call
      var this_0 = $up.yy(r, c);
      if (charSequenceLength(this_0) === 0) {
        return '';
      }
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
      var it = splitProd($up.yy(r, c));
      var _destruct__k2r9zo = to(it.q(0), it.q(1));
      var lhs = _destruct__k2r9zo.ye();
      var rhs = _destruct__k2r9zo.ze();
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = get_transpose($up).q(c).h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
      var it_0 = iterator.j();
      var maxValue = substringBefore(it_0, ' -> ').length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
        var it_1 = iterator.j();
        var v = substringBefore(it_1, ' -> ').length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      var tmp$ret$5 = maxValue;
      var lp = padStart(lhs, tmp$ret$5);
      // Inline function 'kotlin.collections.maxOf' call
      var iterator_0 = get_transpose($up).q(c).h();
      if (!iterator_0.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
      var it_2 = iterator_0.j();
      var maxValue_0 = substringAfter(it_2, ' -> ').length;
      while (iterator_0.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.formatAsGrid.rec.<anonymous>.<anonymous>.<anonymous>' call
        var it_3 = iterator_0.j();
        var v_0 = substringAfter(it_3, ' -> ').length;
        if (compareTo(maxValue_0, v_0) < 0) {
          maxValue_0 = v_0;
        }
      }
      var tmp$ret$8 = maxValue_0;
      var rp = padEnd(rhs, tmp$ret$8);
      return lp + ' \u2192 ' + rp;
    };
  }
  var properties_initialized_StringUtils_kt_t01dyo;
  function _init_properties_StringUtils_kt__hudgtq() {
    if (!properties_initialized_StringUtils_kt_t01dyo) {
      properties_initialized_StringUtils_kt_t01dyo = true;
      BRACKETS = toSet(toCharArray('()[]{}<>'));
      JUST_PARENS = toSet(toCharArray('()[]{}'));
    }
  }
  function get_states(_this__u8e3s4) {
    _init_properties_FSA_kt__3gyuma();
    return states$delegate.uj(_this__u8e3s4, states$factory());
  }
  var states$delegate;
  function dominates(_this__u8e3s4, $this, other) {
    return _this__u8e3s4.we_1 <= other.we_1 && _this__u8e3s4.xe_1 <= other.xe_1 && (_this__u8e3s4.we_1 < other.we_1 || _this__u8e3s4.xe_1 < other.xe_1);
  }
  function Companion() {
  }
  protoOf(Companion).zy = function (str, cfg, radius) {
    var levFSA = makeLevFSA(str, radius);
    var tmp = 0;
    var tmp_0 = levFSA.zz();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(tmp_0), null);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp_3 = 0;
      var tmp_4 = levFSA.zz();
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_5 = fillArrayVal(Array(tmp_4), null);
      while (tmp_3 < tmp_4) {
        var tmp_6 = tmp_3;
        var tmp_7 = 0;
        var tmp_8 = get_nonterminals(cfg).k();
        var tmp_9 = booleanArray(tmp_8);
        while (tmp_7 < tmp_8) {
          tmp_9[tmp_7] = false;
          tmp_7 = tmp_7 + 1 | 0;
        }
        tmp_5[tmp_6] = tmp_9;
        tmp_3 = tmp_3 + 1 | 0;
      }
      tmp_1[tmp_2] = tmp_5;
      tmp = tmp + 1 | 0;
    }
    var dp = tmp_1;
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = levFSA.a10(cfg).h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.automata.Companion.nonemptyLevInt.<anonymous>' call
      var q0 = element.ye();
      var nt = element.ze();
      var q1 = element.nm();
      dp[q0][q1][nt] = true;
    }
    var startIdx = get_bindex(cfg).e10(get_START_SYMBOL());
    var inductionVariable = 1;
    var last = levFSA.zz() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var dist = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var inductionVariable_0 = 0;
        var last_0 = levFSA.zz() - dist | 0;
        if (inductionVariable_0 < last_0)
          do {
            var iP = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var p = iP;
            var q = iP + dist | 0;
            var _iterator__ex2g4s_0 = get_tripleIntProds(cfg).h();
            while (_iterator__ex2g4s_0.i()) {
              var _destruct__k2r9zo = _iterator__ex2g4s_0.j();
              var A = _destruct__k2r9zo.ye();
              var B = _destruct__k2r9zo.ze();
              var C = _destruct__k2r9zo.nm();
              if (!dp[p][q][A]) {
                var tmp0_elvis_lhs = levFSA.f10().l2(to(p, q));
                var _iterator__ex2g4s_1 = (tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs).h();
                $l$loop: while (_iterator__ex2g4s_1.i()) {
                  var r = _iterator__ex2g4s_1.j();
                  if (dp[p][r][B] && dp[r][q][C]) {
                    if (p === 0 && A === startIdx && levFSA.g10().j1(q))
                      return true;
                    dp[p][q][A] = true;
                    break $l$loop;
                  }
                }
              }
            }
          }
           while (inductionVariable_0 < last_0);
      }
       while (!(dist === last));
    return false;
  };
  protoOf(Companion).h10 = function (cfg, brokeToks) {
    var tmp0 = until(1, get_MAX_RADIUS());
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var inductionVariable = tmp0.pk_1;
      var last = tmp0.qk_1;
      if (inductionVariable <= last)
        do {
          var element = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'ai.hypergraph.kaliningraph.automata.Companion.LED.<anonymous>' call
          var it = element;
          if (Companion_instance.zy(brokeToks, cfg, it)) {
            tmp$ret$1 = element;
            break $l$block;
          }
        }
         while (!(element === last));
      tmp$ret$1 = null;
    }
    var tmp0_elvis_lhs = tmp$ret$1;
    return tmp0_elvis_lhs == null ? get_MAX_RADIUS() : tmp0_elvis_lhs;
  };
  protoOf(Companion).i10 = function (str, cfg, radius) {
    var levFSA = makeLevFSA(str, radius);
    var nStates = levFSA.zz();
    var startIdx = get_bindex(cfg).e10(get_START_SYMBOL());
    var tmp = 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_0 = fillArrayVal(Array(nStates), null);
    while (tmp < nStates) {
      var tmp_1 = tmp;
      var tmp_2 = 0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_3 = fillArrayVal(Array(nStates), null);
      while (tmp_2 < nStates) {
        var tmp_4 = tmp_2;
        var tmp_5 = 0;
        var tmp_6 = get_nonterminals(cfg).k();
        // Inline function 'kotlin.arrayOfNulls' call
        var tmp_7 = fillArrayVal(Array(tmp_6), null);
        while (tmp_5 < tmp_6) {
          tmp_7[tmp_5] = null;
          tmp_5 = tmp_5 + 1 | 0;
        }
        tmp_3[tmp_4] = tmp_7;
        tmp_2 = tmp_2 + 1 | 0;
      }
      tmp_0[tmp_1] = tmp_3;
      tmp = tmp + 1 | 0;
    }
    var dp = tmp_0;
    var _iterator__ex2g4s = levFSA.a10(cfg).h();
    while (_iterator__ex2g4s.i()) {
      var _destruct__k2r9zo = _iterator__ex2g4s.j();
      var p = _destruct__k2r9zo.ye();
      var Aidx = _destruct__k2r9zo.ze();
      var q = _destruct__k2r9zo.nm();
      var _iterator__ex2g4s_0 = ensureNotNull(get_bimap(cfg).r10().l2(get_bindex(cfg).q(Aidx))).h();
      while (_iterator__ex2g4s_0.i()) {
        var t = _iterator__ex2g4s_0.j();
        var Aname = get_bindex(cfg).q(Aidx);
        var newLeaf = new PTree(Aname, PSingleton(t));
        dp[p][q][Aidx] = dp[p][q][Aidx] == null ? newLeaf : ensureNotNull(dp[p][q][Aidx]).n11(newLeaf);
      }
    }
    var inductionVariable = 1;
    if (inductionVariable < nStates)
      do {
        var dist = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var inductionVariable_0 = 0;
        var last = nStates - dist | 0;
        if (inductionVariable_0 < last)
          do {
            var p_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var q_0 = p_0 + dist | 0;
            var _iterator__ex2g4s_1 = get_tripleIntProds(cfg).h();
            while (_iterator__ex2g4s_1.i()) {
              var _destruct__k2r9zo_0 = _iterator__ex2g4s_1.j();
              var Aidx_0 = _destruct__k2r9zo_0.ye();
              var Bidx = _destruct__k2r9zo_0.ze();
              var Cidx = _destruct__k2r9zo_0.nm();
              var Aname_0 = get_bindex(cfg).q(Aidx_0);
              var tmp0_elvis_lhs = levFSA.f10().l2(to(p_0, q_0));
              var _iterator__ex2g4s_2 = (tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs).h();
              while (_iterator__ex2g4s_2.i()) {
                var r = _iterator__ex2g4s_2.j();
                var left = dp[p_0][r][Bidx];
                var right = dp[r][q_0][Cidx];
                if (!(left == null) && !(right == null)) {
                  var newBranch = to(left, right);
                  var newTree = new PTree(Aname_0, listOf(newBranch));
                  if (dp[p_0][q_0][Aidx_0] == null) {
                    dp[p_0][q_0][Aidx_0] = newTree;
                  } else {
                    dp[p_0][q_0][Aidx_0] = ensureNotNull(dp[p_0][q_0][Aidx_0]).n11(newTree);
                  }
                }
              }
            }
          }
           while (inductionVariable_0 < last);
      }
       while (inductionVariable < nStates);
    // Inline function 'kotlin.collections.mapNotNull' call
    var tmp0 = levFSA.g10();
    // Inline function 'kotlin.collections.mapNotNullTo' call
    var destination = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s_3 = tmp0.h();
    while (_iterator__ex2g4s_3.i()) {
      var element = _iterator__ex2g4s_3.j();
      // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
      // Inline function 'ai.hypergraph.kaliningraph.automata.Companion.intersectPTree.<anonymous>' call
      var tmp0_safe_receiver = dp[0][element][startIdx];
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>.<anonymous>' call
        destination.e(tmp0_safe_receiver);
      }
    }
    var allParses = destination;
    var tmp_8;
    if (allParses.r()) {
      tmp_8 = null;
    } else {
      var tmp_9 = get_START_SYMBOL();
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination_0 = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s_4 = allParses.h();
      while (_iterator__ex2g4s_4.i()) {
        var element_0 = _iterator__ex2g4s_4.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.Companion.intersectPTree.<anonymous>' call
        var list = element_0.t10_1;
        addAll(destination_0, list);
      }
      tmp_8 = new PTree(tmp_9, destination_0);
    }
    return tmp_8;
  };
  var Companion_instance;
  function Companion_getInstance_0() {
    return Companion_instance;
  }
  function FSA$alphabet$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.o11();
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.alphabet$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = get_π2(item);
        destination.e(tmp$ret$0);
      }
      return toSet_0(destination);
    };
  }
  function FSA$isNominalizable$delegate$lambda(this$0) {
    return function () {
      var tmp0 = this$0.p11();
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var tmp;
        if (isInterface(tmp0, Collection)) {
          tmp = tmp0.r();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.isNominalizable$delegate.<anonymous>.<anonymous>' call
          if (startsWith(element, '[!=]')) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
        }
        tmp$ret$0 = false;
      }
      return tmp$ret$0;
    };
  }
  function FSA$nominalForm$delegate$lambda(this$0) {
    return function () {
      return nominalize(this$0);
    };
  }
  function FSA$transit$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.o11();
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.transit$delegate.<anonymous>.<anonymous>' call
        var key = get_π1(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        list.e(element);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.transit$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(v, 10));
        var _iterator__ex2g4s_1 = v.h();
        while (_iterator__ex2g4s_1.i()) {
          var item = _iterator__ex2g4s_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.transit$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$7 = to(get_π2(item), get_π3(item));
          destination_1.e(tmp$ret$7);
        }
        destination_0.b5(tmp_0, destination_1);
      }
      return destination_0;
    };
  }
  function FSA$revtransit$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.o11();
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.revtransit$delegate.<anonymous>.<anonymous>' call
        var key = get_π3(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        list.e(element);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.revtransit$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(v, 10));
        var _iterator__ex2g4s_1 = v.h();
        while (_iterator__ex2g4s_1.i()) {
          var item = _iterator__ex2g4s_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.revtransit$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$7 = to(get_π2(item), get_π1(item));
          destination_1.e(tmp$ret$7);
        }
        destination_0.b5(tmp_0, destination_1);
      }
      return destination_0;
    };
  }
  function FSA$states$delegate$lambda(this$0) {
    return function () {
      return get_states(this$0.o11());
    };
  }
  function FSA$stateLst$delegate$lambda(this$0) {
    return function () {
      return toList(this$0.q11());
    };
  }
  function FSA$allIndexedTxs$lambda(_destruct__k2r9zo) {
    var σ = _destruct__k2r9zo.ze();
    var arc = _destruct__k2r9zo.nm();
    return get_π2(arc)(σ);
  }
  function FSA$numStates$delegate$lambda(this$0) {
    return function () {
      return this$0.q11().k();
    };
  }
  function FSA$stateMap$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.associate' call
      var this_0 = withIndex(this$0.r11());
      var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16);
      // Inline function 'kotlin.collections.associateTo' call
      var destination = LinkedHashMap_init_$Create$_0(capacity);
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.stateMap$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.plusAssign' call
        var pair = to(element.i1_1, element.h1_1);
        destination.b5(pair.we_1, pair.xe_1);
      }
      return destination;
    };
  }
  function FSA$APSP$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_APSP(this$0.s11());
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.k());
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s = this_0.o2().h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.APSP$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var k = item.h2();
        // Inline function 'kotlin.collections.component2' call
        var v = item.i2();
        var tmp$ret$3 = new Pair(to(ensureNotNull(this$0.t11().l2(k.we_1.b12())), ensureNotNull(this$0.t11().l2(k.xe_1.b12()))), v);
        destination.e(tmp$ret$3);
      }
      return toMap(destination);
    };
  }
  function FSA$allPairs$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.associate' call
      var this_0 = get_allPairs(this$0.s11()).o2();
      var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16);
      // Inline function 'kotlin.collections.associateTo' call
      var destination = LinkedHashMap_init_$Create$_0(capacity);
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.allPairs$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var a = element.h2();
        // Inline function 'kotlin.collections.component2' call
        var b = element.i2();
        var tmp = new Pair(ensureNotNull(this$0.t11().l2(a.we_1.b12())), ensureNotNull(this$0.t11().l2(a.xe_1.b12())));
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(b, 10));
        var _iterator__ex2g4s_0 = b.h();
        while (_iterator__ex2g4s_0.i()) {
          var item = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.allPairs$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$2 = ensureNotNull(this$0.t11().l2(item.b12()));
          destination_0.e(tmp$ret$2);
        }
        // Inline function 'kotlin.collections.plusAssign' call
        var pair = new Pair(tmp, toSet_0(destination_0));
        destination.b5(pair.we_1, pair.xe_1);
      }
      return destination;
    };
  }
  function FSA$finalIdxs$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.c12();
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.finalIdxs$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = ensureNotNull(this$0.t11().l2(item));
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function FSA$stateCoords$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.q11();
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.stateCoords$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.let' call
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.stateCoords$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var destruct = coords(item);
        var i = destruct.ye();
        var j = destruct.ze();
        var tmp$ret$2 = new Triple(ensureNotNull(this$0.t11().l2(item)), i, j);
        destination.e(tmp$ret$2);
      }
      return asSequence(destination);
    };
  }
  function FSA$validTriples$delegate$lambda$lambda(this$0) {
    return function (it) {
      return this$0.d12(it);
    };
  }
  function FSA$validTriples$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.validTriples$delegate.<anonymous>.<anonymous>' call
      var it = this$0.e12();
      var tmp = times_6(times_2(it, it), it);
      return toList_0(filter(tmp, FSA$validTriples$delegate$lambda$lambda(this$0)));
    };
  }
  function FSA$validPairs$delegate$lambda$lambda(this$0) {
    return function (it) {
      return this$0.f12(it);
    };
  }
  function FSA$validPairs$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.validPairs$delegate.<anonymous>.<anonymous>' call
      var it = this$0.e12();
      var tmp = times_2(it, it);
      return toSet_1(filter(tmp, FSA$validPairs$delegate$lambda$lambda(this$0)));
    };
  }
  function FSA$edgeLabels$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.o11();
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.edgeLabels$delegate.<anonymous>.<anonymous>' call
        var a = element.ye();
        var b = element.ze();
        var c = element.nm();
        var key = to(a, c);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        list.e(element);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.edgeLabels$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(v, 10));
        var _iterator__ex2g4s_1 = v.h();
        while (_iterator__ex2g4s_1.i()) {
          var item = _iterator__ex2g4s_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.edgeLabels$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$7 = get_π2(item);
          destination_1.e(tmp$ret$7);
        }
        var tmp$ret$10 = joinToString(toSet_0(destination_1), ',');
        destination_0.b5(tmp_0, tmp$ret$10);
      }
      return destination_0;
    };
  }
  function FSA$map$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.o11();
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.map$delegate.<anonymous>.<anonymous>' call
        var a = element.ye();
        var b = element.ze();
        var key = to(a, b);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.map$delegate.<anonymous>.<anonymous>' call
        var c = element.nm();
        list.e(c);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.map$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        var tmp$ret$8 = toSet_0(v);
        destination_0.b5(tmp_0, tmp$ret$8);
      }
      return destination_0;
    };
  }
  function FSA$graph$delegate$lambda$lambda(this$0) {
    return function ($this$LabeledGraph) {
      var _iterator__ex2g4s = this$0.o11().h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.graph$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var a = element.ye();
        var b = element.ze();
        var c = element.nm();
        $this$LabeledGraph.h13(a, b, c);
      }
      return Unit_instance;
    };
  }
  function FSA$graph$delegate$lambda(this$0) {
    return function () {
      return LabeledGraph_init_$Create$(FSA$graph$delegate$lambda$lambda(this$0));
    };
  }
  function FSA(Q, init, final) {
    this.az_1 = Q;
    this.bz_1 = init;
    this.cz_1 = final;
    var tmp = this;
    tmp.dz_1 = lazy(FSA$alphabet$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.ez_1 = lazy(FSA$isNominalizable$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.fz_1 = lazy(FSA$nominalForm$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.gz_1 = lazy(FSA$transit$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.hz_1 = lazy(FSA$revtransit$delegate$lambda(this));
    var tmp_4 = this;
    tmp_4.iz_1 = lazy(FSA$states$delegate$lambda(this));
    var tmp_5 = this;
    tmp_5.jz_1 = lazy(FSA$stateLst$delegate$lambda(this));
    var tmp_6 = this;
    tmp_6.kz_1 = lazy(FSA$numStates$delegate$lambda(this));
    var tmp_7 = this;
    tmp_7.lz_1 = lazy(FSA$stateMap$delegate$lambda(this));
    var tmp_8 = this;
    tmp_8.mz_1 = lazy(FSA$APSP$delegate$lambda(this));
    var tmp_9 = this;
    tmp_9.nz_1 = lazy(FSA$allPairs$delegate$lambda(this));
    var tmp_10 = this;
    tmp_10.oz_1 = lazy(FSA$finalIdxs$delegate$lambda(this));
    var tmp_11 = this;
    tmp_11.pz_1 = lazy(FSA$stateCoords$delegate$lambda(this));
    this.qz_1 = 0;
    this.rz_1 = 0;
    var tmp_12 = this;
    tmp_12.sz_1 = lazy(FSA$validTriples$delegate$lambda(this));
    var tmp_13 = this;
    tmp_13.tz_1 = lazy(FSA$validPairs$delegate$lambda(this));
    var tmp_14 = this;
    tmp_14.uz_1 = lazy(FSA$edgeLabels$delegate$lambda(this));
    var tmp_15 = this;
    tmp_15.vz_1 = lazy(FSA$map$delegate$lambda(this));
    var tmp_16 = this;
    tmp_16.wz_1 = lazy(FSA$graph$delegate$lambda(this));
    var tmp_17 = this;
    // Inline function 'kotlin.collections.mutableMapOf' call
    tmp_17.xz_1 = LinkedHashMap_init_$Create$();
    this.yz_1 = emptyList();
  }
  protoOf(FSA).o11 = function () {
    return this.az_1;
  };
  protoOf(FSA).i13 = function () {
    return this.bz_1;
  };
  protoOf(FSA).c12 = function () {
    return this.cz_1;
  };
  protoOf(FSA).p11 = function () {
    var tmp0 = this.dz_1;
    // Inline function 'kotlin.getValue' call
    alphabet$factory();
    return tmp0.i2();
  };
  protoOf(FSA).j13 = function () {
    var tmp0 = this.fz_1;
    // Inline function 'kotlin.getValue' call
    nominalForm$factory();
    return tmp0.i2();
  };
  protoOf(FSA).q11 = function () {
    var tmp0 = this.iz_1;
    // Inline function 'kotlin.getValue' call
    states$factory_0();
    return tmp0.i2();
  };
  protoOf(FSA).r11 = function () {
    var tmp0 = this.jz_1;
    // Inline function 'kotlin.getValue' call
    stateLst$factory();
    return tmp0.i2();
  };
  protoOf(FSA).a10 = function (cfg) {
    var tmp0 = times_5(get_unitProductions(cfg), this.j13().p14());
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = FSA$allIndexedTxs$lambda;
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(tmp0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.automata.FSA.allIndexedTxs.<anonymous>' call
      var A = item.ye();
      var arc = item.nm();
      var tmp$ret$2 = new Triple(ensureNotNull(this.t11().l2(get_π1(arc))), get_bindex(cfg).e10(A), ensureNotNull(this.t11().l2(get_π3(arc))));
      destination.e(tmp$ret$2);
    }
    return destination;
  };
  protoOf(FSA).zz = function () {
    var tmp0 = this.kz_1;
    // Inline function 'kotlin.getValue' call
    numStates$factory();
    return tmp0.i2();
  };
  protoOf(FSA).t11 = function () {
    var tmp0 = this.lz_1;
    // Inline function 'kotlin.getValue' call
    stateMap$factory();
    return tmp0.i2();
  };
  protoOf(FSA).f10 = function () {
    var tmp0 = this.nz_1;
    // Inline function 'kotlin.getValue' call
    allPairs$factory();
    return tmp0.i2();
  };
  protoOf(FSA).g10 = function () {
    var tmp0 = this.oz_1;
    // Inline function 'kotlin.getValue' call
    finalIdxs$factory();
    return tmp0.i2();
  };
  protoOf(FSA).e12 = function () {
    var tmp0 = this.pz_1;
    // Inline function 'kotlin.getValue' call
    stateCoords$factory();
    return tmp0.i2();
  };
  protoOf(FSA).f12 = function (_this__u8e3s4) {
    return dominates(coords_0(_this__u8e3s4.we_1), this, coords_0(_this__u8e3s4.xe_1));
  };
  protoOf(FSA).d12 = function (_this__u8e3s4) {
    return dominates(coords_0(_this__u8e3s4.km_1), this, coords_0(_this__u8e3s4.lm_1)) && dominates(coords_0(_this__u8e3s4.lm_1), this, coords_0(_this__u8e3s4.mm_1));
  };
  protoOf(FSA).s11 = function () {
    var tmp0 = this.wz_1;
    // Inline function 'kotlin.getValue' call
    graph$factory();
    return tmp0.i2();
  };
  function coords(_this__u8e3s4) {
    _init_properties_FSA_kt__3gyuma();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.automata.coords.<anonymous>' call
    var it = (_this__u8e3s4.length / 2 | 0) - 1 | 0;
    // Inline function 'kotlin.text.substring' call
    var endIndex = it + 2 | 0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = _this__u8e3s4.substring(2, endIndex);
    var tmp = toInt(tmp$ret$1);
    // Inline function 'kotlin.text.substring' call
    var startIndex = it + 3 | 0;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$3 = _this__u8e3s4.substring(startIndex);
    return to(tmp, toInt(tmp$ret$3));
  }
  function coords_0(_this__u8e3s4) {
    _init_properties_FSA_kt__3gyuma();
    return to(get_π2(_this__u8e3s4), get_π3(_this__u8e3s4));
  }
  function ACYC_FSA$stateLst$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_topSort(this$0.s11());
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.ACYC_FSA.stateLst$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = item.b12();
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function ACYC_FSA(Q, init, final) {
    FSA.call(this, Q, init, final);
    this.p15_1 = Q;
    this.q15_1 = init;
    this.r15_1 = final;
    var tmp = this;
    tmp.s15_1 = lazy(ACYC_FSA$stateLst$delegate$lambda(this));
  }
  protoOf(ACYC_FSA).o11 = function () {
    return this.p15_1;
  };
  protoOf(ACYC_FSA).i13 = function () {
    return this.q15_1;
  };
  protoOf(ACYC_FSA).c12 = function () {
    return this.r15_1;
  };
  protoOf(ACYC_FSA).r11 = function () {
    var tmp0 = this.s15_1;
    // Inline function 'kotlin.getValue' call
    stateLst$factory_0();
    return tmp0.i2();
  };
  function states$delegate$lambda($this$cache) {
    _init_properties_FSA_kt__3gyuma();
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.automata.states$delegate.<anonymous>.<anonymous>' call
      var list = listOf_0([get_π1(element), get_π3(element)]);
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function states$factory() {
    return getPropertyCallableRef('states', 1, KProperty1, function (receiver) {
      return get_states(receiver);
    }, null);
  }
  function alphabet$factory() {
    return getPropertyCallableRef('alphabet', 1, KProperty1, function (receiver) {
      return receiver.p11();
    }, null);
  }
  function nominalForm$factory() {
    return getPropertyCallableRef('nominalForm', 1, KProperty1, function (receiver) {
      return receiver.j13();
    }, null);
  }
  function states$factory_0() {
    return getPropertyCallableRef('states', 1, KProperty1, function (receiver) {
      return receiver.q11();
    }, null);
  }
  function stateLst$factory() {
    return getPropertyCallableRef('stateLst', 1, KProperty1, function (receiver) {
      return receiver.r11();
    }, null);
  }
  function numStates$factory() {
    return getPropertyCallableRef('numStates', 1, KProperty1, function (receiver) {
      return receiver.zz();
    }, null);
  }
  function stateMap$factory() {
    return getPropertyCallableRef('stateMap', 1, KProperty1, function (receiver) {
      return receiver.t11();
    }, null);
  }
  function allPairs$factory() {
    return getPropertyCallableRef('allPairs', 1, KProperty1, function (receiver) {
      return receiver.f10();
    }, null);
  }
  function finalIdxs$factory() {
    return getPropertyCallableRef('finalIdxs', 1, KProperty1, function (receiver) {
      return receiver.g10();
    }, null);
  }
  function stateCoords$factory() {
    return getPropertyCallableRef('stateCoords', 1, KProperty1, function (receiver) {
      return receiver.e12();
    }, null);
  }
  function graph$factory() {
    return getPropertyCallableRef('graph', 1, KProperty1, function (receiver) {
      return receiver.s11();
    }, null);
  }
  function stateLst$factory_0() {
    return getPropertyCallableRef('stateLst', 1, KProperty1, function (receiver) {
      return receiver.r11();
    }, null);
  }
  var properties_initialized_FSA_kt_m71h0c;
  function _init_properties_FSA_kt__3gyuma() {
    if (!properties_initialized_FSA_kt_m71h0c) {
      properties_initialized_FSA_kt_m71h0c = true;
      states$delegate = cache_0(VOID, states$delegate$lambda);
    }
  }
  function NOM$alphabet$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.j14_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.alphabet$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = item.lm_1;
        destination.e(tmp$ret$0);
      }
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var destination_0 = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s_0 = destination.h();
      while (_iterator__ex2g4s_0.i()) {
        var element = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.alphabet$delegate.<anonymous>.<anonymous>' call
        if (startsWith(element, '[!=]')) {
          destination_0.e(element);
        }
      }
      return toSet_0(destination_0);
    };
  }
  function NOM$predicate$lambda(s) {
    return true;
  }
  function NOM$predicate$lambda_0($this_predicate) {
    return function (s) {
      return !(s === drop($this_predicate, 4));
    };
  }
  function NOM$predicate$lambda_1($this_predicate) {
    return function (s) {
      return s === $this_predicate;
    };
  }
  function NOM$mapF$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.j14_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.mapF$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to_1(to(item.km_1, this$0.t15(item.lm_1)), item.mm_1);
        destination.e(tmp$ret$0);
      }
      // Inline function 'kotlin.collections.groupBy' call
      // Inline function 'kotlin.collections.groupByTo' call
      var destination_0 = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s_0 = destination.h();
      while (_iterator__ex2g4s_0.i()) {
        var element = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.mapF$delegate.<anonymous>.<anonymous>' call
        var key = element.km_1;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination_0.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination_0.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        list.e(element);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_1 = LinkedHashMap_init_$Create$_0(mapCapacity(destination_0.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_1 = destination_0.o2().h();
      while (_iterator__ex2g4s_1.i()) {
        var element_0 = _iterator__ex2g4s_1.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.mapF$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(v, 10));
        var _iterator__ex2g4s_2 = v.h();
        while (_iterator__ex2g4s_2.i()) {
          var item_0 = _iterator__ex2g4s_2.j();
          // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.mapF$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$10 = to(item_0.lm_1, item_0.mm_1);
          destination_2.e(tmp$ret$10);
        }
        destination_1.b5(tmp_0, destination_2);
      }
      return destination_1;
    };
  }
  function NOM$flattenedTriples$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.j14_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.automata.NOM.flattenedTriples$delegate.<anonymous>.<anonymous>' call
        var a = item.ye();
        var b = item.ze();
        var c = item.nm();
        var tmp$ret$0 = to_1(to(a, this$0.t15(b)), c);
        destination.e(tmp$ret$0);
      }
      return toSet_0(destination);
    };
  }
  function NOM(Q, init, final) {
    FSA.call(this, Q, init, final);
    this.j14_1 = Q;
    this.k14_1 = init;
    this.l14_1 = final;
    var tmp = this;
    tmp.m14_1 = lazy(NOM$alphabet$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.n14_1 = lazy(NOM$mapF$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.o14_1 = lazy(NOM$flattenedTriples$delegate$lambda(this));
  }
  protoOf(NOM).o11 = function () {
    return this.j14_1;
  };
  protoOf(NOM).i13 = function () {
    return this.k14_1;
  };
  protoOf(NOM).c12 = function () {
    return this.l14_1;
  };
  protoOf(NOM).p11 = function () {
    var tmp0 = this.m14_1;
    // Inline function 'kotlin.getValue' call
    alphabet$factory_0();
    return tmp0.i2();
  };
  protoOf(NOM).t15 = function (_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 === '[.*]') {
      tmp = NOM$predicate$lambda;
    } else if (startsWith(_this__u8e3s4, '[!=]')) {
      tmp = NOM$predicate$lambda_0(_this__u8e3s4);
    } else {
      tmp = NOM$predicate$lambda_1(_this__u8e3s4);
    }
    return tmp;
  };
  protoOf(NOM).p14 = function () {
    var tmp0 = this.o14_1;
    // Inline function 'kotlin.getValue' call
    flattenedTriples$factory();
    return tmp0.i2();
  };
  function nominalize(_this__u8e3s4) {
    return new NOM(_this__u8e3s4.o11(), _this__u8e3s4.i13(), _this__u8e3s4.c12());
  }
  function alphabet$factory_0() {
    return getPropertyCallableRef('alphabet', 1, KProperty1, function (receiver) {
      return receiver.p11();
    }, null);
  }
  function flattenedTriples$factory() {
    return getPropertyCallableRef('flattenedTriples', 1, KProperty1, function (receiver) {
      return receiver.p14();
    }, null);
  }
  function trimToSize($this) {
    if ($this.x15_1 <= $this.u15_1 || $this.w15_1.r())
      return Unit_instance;
    try {
      var toEvict = $this.w15_1.o2().h().j();
      var key = toEvict.h2();
      var value = toEvict.i2();
      $this.w15_1.c5(key);
      $this.x15_1 = $this.x15_1 - $this.v15_1(key, value) | 0;
      trimToSize($this);
    } catch ($p) {
      if ($p instanceof Exception) {
        var _unused_var__etf5q3 = $p;
      } else {
        throw $p;
      }
    }
  }
  function LRUCache$_init_$lambda_wrqm0(_unused_var__etf5q3, _unused_var__etf5q3_0) {
    return 1;
  }
  function LRUCache(maxSize, sizeOf) {
    maxSize = maxSize === VOID ? 10000 : maxSize;
    var tmp;
    if (sizeOf === VOID) {
      tmp = LRUCache$_init_$lambda_wrqm0;
    } else {
      tmp = sizeOf;
    }
    sizeOf = tmp;
    this.u15_1 = maxSize;
    this.v15_1 = sizeOf;
    this.w15_1 = LinkedHashMap_init_$Create$_1(0, 0.75);
    this.x15_1 = 0;
  }
  protoOf(LRUCache).y15 = function (key, value) {
    var tmp0_elvis_lhs = this.w15_1.l2(key);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = value();
      // Inline function 'ai.hypergraph.kaliningraph.cache.LRUCache.getOrPut.<anonymous>' call
      this.b5(key, this_0);
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(LRUCache).l2 = function (key) {
    return this.w15_1.l2(key);
  };
  protoOf(LRUCache).b5 = function (key, value) {
    this.x15_1 = this.x15_1 + this.v15_1(key, value) | 0;
    var prev = this.w15_1.b5(key, value);
    if (prev == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.cache.LRUCache.put.<anonymous>' call
      this.x15_1 = this.x15_1 - this.v15_1(key, prev) | 0;
    }
    trimToSize(this);
    return prev;
  };
  protoOf(LRUCache).toString = function () {
    return '' + this.x15_1 + '/' + this.u15_1 + ' cached=' + this.w15_1.toString();
  };
  function LabeledGraph_init_$Init$(builder, $this) {
    // Inline function 'kotlin.also' call
    var this_0 = new LGBuilder();
    // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.<init>.<anonymous>' call
    builder(this_0);
    LabeledGraph.call($this, this_0.g12_1.e16());
    return $this;
  }
  function LabeledGraph_init_$Create$(builder) {
    return LabeledGraph_init_$Init$(builder, objectCreate(protoOf(LabeledGraph)));
  }
  function Companion_0() {
    Companion_instance_0 = this;
    LabeledGraph.call(this);
  }
  var Companion_instance_0;
  function Companion_getInstance_1() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function LabeledGraph$reversed$lambda($v) {
    return function (it) {
      return $v;
    };
  }
  function LabeledGraph(vertices) {
    Companion_getInstance_1();
    var tmp;
    if (vertices === VOID) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else {
      tmp = vertices;
    }
    vertices = tmp;
    Graph.call(this, vertices);
    this.b16_1 = vertices;
    var tmp_0 = this;
    // Inline function 'kotlin.collections.mutableSetOf' call
    tmp_0.c16_1 = LinkedHashSet_init_$Create$();
    this.d16_1 = '';
  }
  protoOf(LabeledGraph).f16 = function () {
    return this.b16_1;
  };
  protoOf(LabeledGraph).e16 = function () {
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = this.f16();
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.setOf' call
      var tmp$ret$1 = emptySet();
      result.b5(element, tmp$ret$1);
    }
    var tmp = result;
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = this.f16();
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_0 = tmp0.h();
    while (_iterator__ex2g4s_0.i()) {
      var element_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = get_outgoing(element_0);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var _iterator__ex2g4s_1 = this_1.h();
      while (_iterator__ex2g4s_1.i()) {
        var item = _iterator__ex2g4s_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>.<anonymous>' call
        var tmp$ret$4 = to(item.e17(), new LabeledEdge(item.e17(), element_0, item.d17_1));
        destination_0.e(tmp$ret$4);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_1 = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s_2 = destination.h();
    while (_iterator__ex2g4s_2.i()) {
      var element_1 = _iterator__ex2g4s_2.j();
      // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
      var key = element_1.we_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_1.l2(key);
      var tmp_0;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_1.b5(key, answer);
        tmp_0 = answer;
      } else {
        tmp_0 = value;
      }
      var list_0 = tmp_0;
      // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
      var tmp$ret$13 = element_1.xe_1;
      list_0.e(tmp$ret$13);
    }
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_2 = LinkedHashMap_init_$Create$_0(mapCapacity(destination_1.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var _iterator__ex2g4s_3 = destination_1.o2().h();
    while (_iterator__ex2g4s_3.i()) {
      var element_2 = _iterator__ex2g4s_3.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_1 = element_2.h2();
      // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.component2' call
      var v = element_2.i2();
      var tmp$ret$18 = toSet_0(v);
      destination_2.b5(tmp_1, tmp$ret$18);
    }
    // Inline function 'kotlin.collections.map' call
    var this_2 = plus_0(tmp, destination_2);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_3 = ArrayList_init_$Create$(this_2.k());
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_4 = this_2.o2().h();
    while (_iterator__ex2g4s_4.i()) {
      var item_0 = _iterator__ex2g4s_4.j();
      // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
      // Inline function 'kotlin.collections.component1' call
      var k = item_0.h2();
      // Inline function 'kotlin.collections.component2' call
      var v_0 = item_0.i2();
      var tmp_2 = this.p16();
      var tmp$ret$25 = tmp_2(k, LabeledGraph$reversed$lambda(v_0));
      destination_3.e(tmp$ret$25);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.graphs.LabeledGraph.reversed.<anonymous>' call
    var it = toSet_0(destination_3);
    return this.n16()(it);
  };
  function ProtoEdge(source, label) {
    this.f17_1 = source;
    this.g17_1 = label;
  }
  function LGBuilder$minus$lambda($v, $this_minus) {
    return function (it) {
      return plus_1(get_outgoing($v), LabeledEdge_init_$Create$($v, $this_minus));
    };
  }
  function LGBuilder$plus$lambda($this_plus, $edge) {
    return function (it) {
      return plus_1(get_outgoing($this_plus), $edge);
    };
  }
  function LGBuilder() {
    this.g12_1 = new LabeledGraph();
    this.h12_1 = LGVertex_init_$Create$();
    this.i12_1 = LGVertex_init_$Create$();
    this.j12_1 = LGVertex_init_$Create$();
    this.k12_1 = LGVertex_init_$Create$();
    this.l12_1 = LGVertex_init_$Create$();
    this.m12_1 = LGVertex_init_$Create$();
    this.n12_1 = LGVertex_init_$Create$();
    this.o12_1 = LGVertex_init_$Create$();
    this.p12_1 = LGVertex_init_$Create$();
    this.q12_1 = LGVertex_init_$Create$();
    this.r12_1 = LGVertex_init_$Create$();
    this.s12_1 = LGVertex_init_$Create$();
    this.t12_1 = LGVertex_init_$Create$();
    this.u12_1 = LGVertex_init_$Create$();
    this.v12_1 = LGVertex_init_$Create$();
    this.w12_1 = LGVertex_init_$Create$();
    this.x12_1 = LGVertex_init_$Create$();
    this.y12_1 = LGVertex_init_$Create$();
    this.z12_1 = LGVertex_init_$Create$();
    this.a13_1 = LGVertex_init_$Create$();
    this.b13_1 = LGVertex_init_$Create$();
    this.c13_1 = LGVertex_init_$Create$();
    this.d13_1 = LGVertex_init_$Create$();
    this.e13_1 = LGVertex_init_$Create$();
    this.f13_1 = LGVertex_init_$Create$();
    this.g13_1 = LGVertex_init_$Create$();
  }
  protoOf(LGBuilder).h17 = function (_this__u8e3s4, v) {
    var tmp = _this__u8e3s4.p16();
    // Inline function 'kotlin.also' call
    var this_0 = tmp(v, LGBuilder$minus$lambda(v, _this__u8e3s4));
    // Inline function 'ai.hypergraph.kaliningraph.graphs.LGBuilder.minus.<anonymous>' call
    this.g12_1 = this.g12_1.r16(get_graph(this_0));
    return this_0;
  };
  protoOf(LGBuilder).i17 = function (_this__u8e3s4, v) {
    return this.h17(LGVertex_init_$Create$(_this__u8e3s4), LGVertex_init_$Create$(v));
  };
  protoOf(LGBuilder).h13 = function (_this__u8e3s4, s, v) {
    return this.j17(new ProtoEdge(LGVertex_init_$Create$(_this__u8e3s4), s), LGVertex_init_$Create$(v));
  };
  protoOf(LGBuilder).k17 = function (_this__u8e3s4, edge) {
    var tmp = _this__u8e3s4.p16();
    // Inline function 'kotlin.also' call
    var this_0 = tmp(_this__u8e3s4, LGBuilder$plus$lambda(_this__u8e3s4, edge));
    // Inline function 'ai.hypergraph.kaliningraph.graphs.LGBuilder.plus.<anonymous>' call
    this.g12_1 = this.g12_1.r16(get_graph(this_0));
    return this_0;
  };
  protoOf(LGBuilder).j17 = function (_this__u8e3s4, target) {
    return this.k17(target, new LabeledEdge(target, _this__u8e3s4.f17_1, _this__u8e3s4.g17_1));
  };
  function LGVertex_init_$Init$(label, id, out, $this) {
    label = label === VOID ? '#RGEN_' + randomString() : label;
    id = id === VOID ? label : id;
    out = out === VOID ? emptySet() : out;
    LGVertex.call($this, label, id, LGVertex$_init_$lambda_777syc(out, label));
    return $this;
  }
  function LGVertex_init_$Create$(label, id, out) {
    return LGVertex_init_$Init$(label, id, out, objectCreate(protoOf(LGVertex)));
  }
  function LGVertex_init_$Init$_0(lgv, edgeMap, $this) {
    LGVertex.call($this, lgv.b12(), lgv.l17(), edgeMap);
    return $this;
  }
  function LGVertex_init_$Create$_0(lgv, edgeMap) {
    return LGVertex_init_$Init$_0(lgv, edgeMap, objectCreate(protoOf(LGVertex)));
  }
  function LGVertex$_init_$lambda_777syc($out, $label) {
    return function (s) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = $out;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.graphs.LGVertex.<init>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = new LabeledEdge(s, item, substringBefore($label, '#RGEN_'));
        destination.e(tmp$ret$0);
      }
      return toSet_0(destination);
    };
  }
  function LGVertex(label, id, edgeMap) {
    label = label === VOID ? '' : label;
    id = id === VOID ? label : id;
    Vertex.call(this, id);
    this.x11_1 = label;
    this.y11_1 = id;
    this.z11_1 = edgeMap;
    this.a12_1 = false;
  }
  protoOf(LGVertex).b12 = function () {
    return this.x11_1;
  };
  protoOf(LGVertex).l17 = function () {
    return this.y11_1;
  };
  protoOf(LGVertex).m17 = function () {
    return this.z11_1;
  };
  protoOf(LGVertex).i16 = function () {
    return vectorize(this.b12());
  };
  protoOf(LGVertex).toString = function () {
    return this.b12();
  };
  function LabeledEdge_init_$Init$(source, target, $this) {
    LabeledEdge.call($this, source, target, null);
    return $this;
  }
  function LabeledEdge_init_$Create$(source, target) {
    return LabeledEdge_init_$Init$(source, target, objectCreate(protoOf(LabeledEdge)));
  }
  function LabeledEdge(source, target, label) {
    label = label === VOID ? null : label;
    Edge.call(this, source, target);
    this.b17_1 = source;
    this.c17_1 = target;
    this.d17_1 = label;
  }
  protoOf(LabeledEdge).t17 = function () {
    return this.b17_1;
  };
  protoOf(LabeledEdge).e17 = function () {
    return this.c17_1;
  };
  function LGFamily$_get_E_$lambda_nhvv0c(s, t) {
    return LabeledEdge_init_$Create$(s, t);
  }
  function LGFamily$_get_G_$lambda_c8zum2(vertices) {
    return new LabeledGraph(vertices);
  }
  function LGFamily$_get_V_$lambda_yfzuln(old, edgeMap) {
    return LGVertex_init_$Create$_0(old, edgeMap);
  }
  function LGFamily() {
  }
  function escapeHTML(_this__u8e3s4) {
    // Inline function 'kotlin.text.map' call
    // Inline function 'kotlin.text.mapTo' call
    var destination = ArrayList_init_$Create$(charSequenceLength(_this__u8e3s4));
    var inductionVariable = 0;
    while (inductionVariable < charSequenceLength(_this__u8e3s4)) {
      var item = charSequenceGet(_this__u8e3s4, inductionVariable);
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.image.escapeHTML.<anonymous>' call
      var tmp$ret$0 = item === _Char___init__impl__6a9atx(39) ? '&apos;' : item === _Char___init__impl__6a9atx(34) ? '&quot' : item === _Char___init__impl__6a9atx(38) ? '&amp;' : item === _Char___init__impl__6a9atx(60) ? '&lt;' : item === _Char___init__impl__6a9atx(62) ? '&gt;' : new Char(item);
      destination.e(tmp$ret$0);
    }
    return joinToString(destination, '');
  }
  function get_language(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return language$delegate.uj(_this__u8e3s4, language$factory());
  }
  var language$delegate;
  var delimiters$delegate;
  function get_nonterminals(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return nonterminals$delegate.uj(_this__u8e3s4, nonterminals$factory());
  }
  var nonterminals$delegate;
  function get_symbols(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return symbols$delegate.uj(_this__u8e3s4, symbols$factory());
  }
  var symbols$delegate;
  function get_terminals(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return terminals$delegate.uj(_this__u8e3s4, terminals$factory());
  }
  var terminals$delegate;
  function get_terminalUnitProductions(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return terminalUnitProductions$delegate.uj(_this__u8e3s4, terminalUnitProductions$factory());
  }
  var terminalUnitProductions$delegate;
  function get_unitProductions(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return unitProductions$delegate.uj(_this__u8e3s4, unitProductions$factory());
  }
  var unitProductions$delegate;
  function get_nonterminalProductions(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return nonterminalProductions$delegate.uj(_this__u8e3s4, nonterminalProductions$factory());
  }
  var nonterminalProductions$delegate;
  function get_unitNonterminals(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return unitNonterminals$delegate.uj(_this__u8e3s4, unitNonterminals$factory());
  }
  var unitNonterminals$delegate;
  function get_bimap(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return bimap$delegate.uj(_this__u8e3s4, bimap$factory());
  }
  var bimap$delegate;
  var tmap$delegate;
  var unicodeMap$delegate;
  function get_ntLst(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return ntLst$delegate.uj(_this__u8e3s4, ntLst$factory());
  }
  var ntLst$delegate;
  var ntMap$delegate;
  function get_tripleIntProds(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return tripleIntProds$delegate.uj(_this__u8e3s4, tripleIntProds$factory());
  }
  var tripleIntProds$delegate;
  var revUnitProds$delegate;
  function get_vindex(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return vindex$delegate.uj(_this__u8e3s4, vindex$factory());
  }
  var vindex$delegate;
  var vindex2$delegate;
  function get_bindex(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return bindex$delegate.uj(_this__u8e3s4, bindex$factory());
  }
  var bindex$delegate;
  function get_normalForm(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return normalForm$delegate.uj(_this__u8e3s4, normalForm$factory());
  }
  var normalForm$delegate;
  function get_depGraph(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return depGraph$delegate.uj(_this__u8e3s4, depGraph$factory());
  }
  var depGraph$delegate;
  var revDepGraph$delegate;
  function get_blocked(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return blocked$delegate.uj(_this__u8e3s4, blocked$factory());
  }
  var blocked$delegate;
  function get_originalForm(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return originalForm$delegate.uj(_this__u8e3s4, originalForm$factory());
  }
  var originalForm$delegate;
  function get_nonparametricForm(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return nonparametricForm$delegate.uj(_this__u8e3s4, nonparametricForm$factory());
  }
  var nonparametricForm$delegate;
  function get_reachability(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return reachability$delegate.uj(_this__u8e3s4, reachability$factory());
  }
  var reachability$delegate;
  function get_unitReachability(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return unitReachability$delegate.uj(_this__u8e3s4, unitReachability$factory());
  }
  var unitReachability$delegate;
  function get_noNonterminalStubs(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return noNonterminalStubs$delegate.uj(_this__u8e3s4, noNonterminalStubs$factory());
  }
  var noNonterminalStubs$delegate;
  var noEpsilonOrNonterminalStubs$delegate;
  var parikhFPCache$delegate;
  var generators$delegate;
  var nonterminalFormulas$delegate;
  var pruneTreelikeNonterminals$delegate;
  var joinMap$delegate;
  var mustGenerate$delegate;
  function get_LHS(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return _this__u8e3s4.we_1;
  }
  function get_RHS(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return _this__u8e3s4.xe_1;
  }
  function BiMap$L2RHS$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.j10_1;
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.L2RHS$delegate.<anonymous>.<anonymous>' call
        var key = get_LHS(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.L2RHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$3 = get_RHS(element);
        list.e(tmp$ret$3);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.L2RHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$7 = toSet_0(element_0.i2());
        destination_0.b5(tmp_0, tmp$ret$7);
      }
      return destination_0;
    };
  }
  function BiMap$R2LHS$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.j10_1;
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.R2LHS$delegate.<anonymous>.<anonymous>' call
        var key = get_RHS(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.R2LHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$3 = get_LHS(element);
        list.e(tmp$ret$3);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.R2LHS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$7 = toSet_0(element_0.i2());
        destination_0.b5(tmp_0, tmp$ret$7);
      }
      return destination_0;
    };
  }
  function BiMap$TDEPS$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.mutableMapOf' call
      // Inline function 'kotlin.apply' call
      var this_0 = LinkedHashMap_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TDEPS$delegate.<anonymous>.<anonymous>' call
      var _iterator__ex2g4s = this$0.j10_1.h();
      while (_iterator__ex2g4s.i()) {
        var _destruct__k2r9zo = _iterator__ex2g4s.j();
        var l = _destruct__k2r9zo.ye();
        var r = _destruct__k2r9zo.ze();
        var _iterator__ex2g4s_0 = r.h();
        while (_iterator__ex2g4s_0.i()) {
          var symbol = _iterator__ex2g4s_0.j();
          // Inline function 'kotlin.collections.getOrPut' call
          var value = this_0.l2(symbol);
          var tmp;
          if (value == null) {
            // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TDEPS$delegate.<anonymous>.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.collections.mutableSetOf' call
            var answer = LinkedHashSet_init_$Create$();
            this_0.b5(symbol, answer);
            tmp = answer;
          } else {
            tmp = value;
          }
          tmp.e(l);
        }
      }
      return this_0;
    };
  }
  function BiMap$NDEPS$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.mutableMapOf' call
      // Inline function 'kotlin.apply' call
      var this_0 = LinkedHashMap_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.NDEPS$delegate.<anonymous>.<anonymous>' call
      var _iterator__ex2g4s = this$0.j10_1.h();
      while (_iterator__ex2g4s.i()) {
        var _destruct__k2r9zo = _iterator__ex2g4s.j();
        var l = _destruct__k2r9zo.ye();
        var r = _destruct__k2r9zo.ze();
        var _iterator__ex2g4s_0 = r.h();
        while (_iterator__ex2g4s_0.i()) {
          var symbol = _iterator__ex2g4s_0.j();
          // Inline function 'kotlin.collections.getOrPut' call
          var value = this_0.l2(l);
          var tmp;
          if (value == null) {
            // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.NDEPS$delegate.<anonymous>.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.collections.mutableSetOf' call
            var answer = LinkedHashSet_init_$Create$();
            this_0.b5(l, answer);
            tmp = answer;
          } else {
            tmp = value;
          }
          tmp.e(symbol);
        }
      }
      return this_0;
    };
  }
  function BiMap$TRIPL$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.filter' call
      var tmp0 = this$0.u17();
      // Inline function 'kotlin.collections.filterTo' call
      var destination = LinkedHashMap_init_$Create$();
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s = tmp0.o2().h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TRIPL$delegate.<anonymous>.<anonymous>' call
        if (element.h2().k() === 2) {
          destination.b5(element.h2(), element.i2());
        }
      }
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(destination.k());
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TRIPL$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.map' call
        var this_0 = item.i2();
        // Inline function 'kotlin.collections.mapTo' call
        var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s_1 = this_0.h();
        while (_iterator__ex2g4s_1.i()) {
          var item_0 = _iterator__ex2g4s_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.TRIPL$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$5 = to_1(to(item_0, item.h2().q(0)), item.h2().q(1));
          destination_1.e(tmp$ret$5);
        }
        destination_0.e(destination_1);
      }
      return flatten(destination_0);
    };
  }
  function BiMap$X2WZ$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.groupBy' call
      var tmp0 = this$0.v17();
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.X2WZ$delegate.<anonymous>.<anonymous>' call
        var key = element.lm_1;
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        list.e(element);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.X2WZ$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$6 = element_0.i2();
        destination_0.b5(tmp_0, tmp$ret$6);
      }
      return destination_0;
    };
  }
  function BiMap$UNITS$delegate$lambda$lambda(this$0) {
    return function (it) {
      return get_RHS(it).k() === 1 && !get_nonterminals(this$0.j10_1).j1(get_RHS(it).q(0));
    };
  }
  function BiMap$UNITS$delegate$lambda(this$0) {
    return function () {
      var tmp0 = this$0.j10_1;
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate = BiMap$UNITS$delegate$lambda$lambda(this$0);
      // Inline function 'kotlin.apply' call
      var this_0 = toMutableSet(tmp0);
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_0, predicate);
      // Inline function 'kotlin.collections.groupBy' call
      // Inline function 'kotlin.collections.groupByTo' call
      var destination = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.UNITS$delegate.<anonymous>.<anonymous>' call
        var key = get_LHS(element);
        // Inline function 'kotlin.collections.getOrPut' call
        var value = destination.l2(key);
        var tmp;
        if (value == null) {
          // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
          var answer = ArrayList_init_$Create$_0();
          destination.b5(key, answer);
          tmp = answer;
        } else {
          tmp = value;
        }
        var list = tmp;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.UNITS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$5 = get_RHS(element).q(0);
        list.e(tmp$ret$5);
      }
      // Inline function 'kotlin.collections.mapValues' call
      // Inline function 'kotlin.collections.mapValuesTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(mapCapacity(destination.k()));
      // Inline function 'kotlin.collections.associateByTo' call
      var _iterator__ex2g4s_0 = destination.o2().h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
        var tmp_0 = element_0.h2();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.BiMap.UNITS$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$9 = toSet_0(element_0.i2());
        destination_0.b5(tmp_0, tmp$ret$9);
      }
      return destination_0;
    };
  }
  function BiMap(cfg) {
    this.j10_1 = cfg;
    var tmp = this;
    tmp.k10_1 = lazy(BiMap$L2RHS$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.l10_1 = lazy(BiMap$R2LHS$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.m10_1 = lazy(BiMap$TDEPS$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.n10_1 = lazy(BiMap$NDEPS$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.o10_1 = lazy(BiMap$TRIPL$delegate$lambda(this));
    var tmp_4 = this;
    tmp_4.p10_1 = lazy(BiMap$X2WZ$delegate$lambda(this));
    var tmp_5 = this;
    tmp_5.q10_1 = lazy(BiMap$UNITS$delegate$lambda(this));
  }
  protoOf(BiMap).w17 = function () {
    var tmp0 = this.k10_1;
    // Inline function 'kotlin.getValue' call
    L2RHS$factory();
    return tmp0.i2();
  };
  protoOf(BiMap).u17 = function () {
    var tmp0 = this.l10_1;
    // Inline function 'kotlin.getValue' call
    R2LHS$factory();
    return tmp0.i2();
  };
  protoOf(BiMap).x17 = function () {
    var tmp0 = this.m10_1;
    // Inline function 'kotlin.getValue' call
    TDEPS$factory();
    return tmp0.i2();
  };
  protoOf(BiMap).y17 = function () {
    var tmp0 = this.n10_1;
    // Inline function 'kotlin.getValue' call
    NDEPS$factory();
    return tmp0.i2();
  };
  protoOf(BiMap).v17 = function () {
    var tmp0 = this.o10_1;
    // Inline function 'kotlin.getValue' call
    TRIPL$factory();
    return tmp0.i2();
  };
  protoOf(BiMap).r10 = function () {
    var tmp0 = this.q10_1;
    // Inline function 'kotlin.getValue' call
    UNITS$factory();
    return tmp0.i2();
  };
  protoOf(BiMap).z17 = function (p) {
    var tmp0_elvis_lhs = this.u17().l2(p);
    return tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
  };
  protoOf(BiMap).a18 = function (p) {
    var tmp0_elvis_lhs = this.w17().l2(p);
    return tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
  };
  function Bindex(set, indexedNTs, ntIndices) {
    indexedNTs = indexedNTs === VOID ? toList(set) : indexedNTs;
    ntIndices = ntIndices === VOID ? toMap(zip(indexedNTs, get_indices(indexedNTs))) : ntIndices;
    this.b10_1 = set;
    this.c10_1 = indexedNTs;
    this.d10_1 = ntIndices;
  }
  protoOf(Bindex).e10 = function (s) {
    var tmp0_elvis_lhs = this.d10_1.l2(s);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Bindex.get.<anonymous>' call
      println('Unknown nonterminal: ' + toString_1(s));
      ensureNotNull(null);
      tmp = 1;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(Bindex).toString = function () {
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = this.c10_1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Bindex.toString.<anonymous>' call
      var tmp$ret$0 = '' + checkIndexOverflow(_unary__edvuaz) + ': ' + toString_1(item);
      destination.e(tmp$ret$0);
    }
    return joinToString(destination, '\n', 'Bindex:\n', '\n');
  };
  protoOf(Bindex).r = function () {
    return this.c10_1.r();
  };
  protoOf(Bindex).pe = function (element) {
    return this.c10_1.j1(element);
  };
  protoOf(Bindex).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.pe((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(Bindex).h = function () {
    return this.c10_1.h();
  };
  protoOf(Bindex).q = function (index) {
    return this.c10_1.q(index);
  };
  protoOf(Bindex).p = function (index) {
    return this.c10_1.p(index);
  };
  protoOf(Bindex).f2 = function (fromIndex, toIndex) {
    return this.c10_1.f2(fromIndex, toIndex);
  };
  protoOf(Bindex).k = function () {
    return this.c10_1.k();
  };
  function dependencyGraph(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return LabeledGraph_init_$Create$(dependencyGraph$lambda(_this__u8e3s4));
  }
  function revDependencyGraph(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    return LabeledGraph_init_$Create$(revDependencyGraph$lambda(_this__u8e3s4));
  }
  function freeze(_this__u8e3s4) {
    _init_properties_CFG_kt__oelqcy();
    var tmp;
    if (_this__u8e3s4 instanceof FrozenCFG) {
      tmp = _this__u8e3s4;
    } else {
      tmp = new FrozenCFG(_this__u8e3s4);
    }
    return tmp;
  }
  function toFormula(_this__u8e3s4, nt) {
    _init_properties_CFG_kt__oelqcy();
    var tmp;
    if (get_terminals(_this__u8e3s4).j1(nt)) {
      tmp = nt;
    } else if (!get_nonterminals(_this__u8e3s4).j1(nt)) {
      tmp = 'false';
    } else {
      var tmp_0 = get_bimap(_this__u8e3s4).a18(nt);
      tmp = joinToString(tmp_0, ' or ', '( ', ' )', VOID, VOID, toFormula$lambda(_this__u8e3s4));
    }
    return tmp;
  }
  function isTreelikeNonterminalIn(_this__u8e3s4, cfg, reachables, nonTreeLike) {
    reachables = reachables === VOID ? minus(reachableSymbols(cfg, _this__u8e3s4), _this__u8e3s4) : reachables;
    nonTreeLike = nonTreeLike === VOID ? setOf(_this__u8e3s4) : nonTreeLike;
    _init_properties_CFG_kt__oelqcy();
    var tmp;
    if (contains(_this__u8e3s4, '\u03B5')) {
      tmp = true;
    } else {
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!intersect(reachables, nonTreeLike).r()) {
        tmp = false;
      } else {
        var tmp$ret$1;
        $l$block_0: {
          // Inline function 'kotlin.collections.all' call
          var tmp_0;
          if (isInterface(reachables, Collection)) {
            tmp_0 = reachables.r();
          } else {
            tmp_0 = false;
          }
          if (tmp_0) {
            tmp$ret$1 = true;
            break $l$block_0;
          }
          var _iterator__ex2g4s = reachables.h();
          while (_iterator__ex2g4s.i()) {
            var element = _iterator__ex2g4s.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.isTreelikeNonterminalIn.<anonymous>' call
            if (!(get_terminals(cfg).j1(element) || isTreelikeNonterminalIn(element, cfg, VOID, plus_2(nonTreeLike, reachables)))) {
              tmp$ret$1 = false;
              break $l$block_0;
            }
          }
          tmp$ret$1 = true;
        }
        tmp = tmp$ret$1;
      }
    }
    return tmp;
  }
  function JoinMap(CFG) {
    this.b18_1 = CFG;
    var tmp = this;
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>' call
    var it = choose(get_nonterminals(this.b18_1), numberRangeToNumber(1, 3));
    // Inline function 'kotlin.sequences.associateWith' call
    var this_0 = times_2(it, it);
    var result = LinkedHashMap_init_$Create$();
    // Inline function 'kotlin.sequences.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>' call
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>.<anonymous>' call
      var l = element.ye();
      var r = element.ze();
      var tmp$ret$4 = this.d18(l, r);
      result.b5(element, tmp$ret$4);
    }
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.precomputedJoins.<anonymous>' call
    println('Precomputed join map has ' + result.k() + ' entries.');
    tmp.c18_1 = toMutableMap(result);
  }
  protoOf(JoinMap).e18 = function (l, r, tryCache) {
    var tmp;
    if (tryCache) {
      var tmp0_elvis_lhs = this.c18_1.l2(to(l, r));
      var tmp_0;
      if (tmp0_elvis_lhs == null) {
        // Inline function 'kotlin.also' call
        var this_0 = this.e18(l, r, false);
        // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.join.<anonymous>' call
        var tmp0 = this.c18_1;
        // Inline function 'kotlin.collections.set' call
        var key = to(l, r);
        tmp0.b5(key, this_0);
        tmp_0 = this_0;
      } else {
        tmp_0 = tmp0_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      // Inline function 'kotlin.collections.flatMap' call
      var tmp0_0 = times_3(l, r);
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s = tmp0_0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.join.<anonymous>' call
        var l_0 = element.ye();
        var r_0 = element.ze();
        // Inline function 'kotlin.collections.map' call
        var this_1 = get_bimap(this.b18_1).z17(listOf_0([l_0, r_0]));
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
        var _iterator__ex2g4s_0 = this_1.h();
        while (_iterator__ex2g4s_0.i()) {
          var item = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.JoinMap.join.<anonymous>.<anonymous>' call
          var tmp$ret$1 = new Triple(item, l_0, r_0);
          destination_0.e(tmp$ret$1);
        }
        var list = destination_0;
        addAll(destination, list);
      }
      tmp = toSet_0(destination);
    }
    return tmp;
  };
  protoOf(JoinMap).d18 = function (l, r, tryCache, $super) {
    tryCache = tryCache === VOID ? false : tryCache;
    return $super === VOID ? this.e18(l, r, tryCache) : $super.e18.call(this, l, r, tryCache);
  };
  function inevitableSymbols(_this__u8e3s4, map) {
    map = map === VOID ? emptyMap() : map;
    _init_properties_CFG_kt__oelqcy();
    var newMap = toMutableMap(map);
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s = get_symbols(_this__u8e3s4).h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.inevitableSymbols.<anonymous>' call
      var tmp0_safe_receiver = get_bimap(_this__u8e3s4).x17().l2(element);
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s_0 = tmp0_safe_receiver.h();
        while (_iterator__ex2g4s_0.i()) {
          var element_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.inevitableSymbols.<anonymous>.<anonymous>' call
          var tmp0 = get_bimap(_this__u8e3s4).a18(element_0);
          var tmp$ret$0;
          $l$block_0: {
            // Inline function 'kotlin.collections.all' call
            var tmp;
            if (isInterface(tmp0, Collection)) {
              tmp = tmp0.r();
            } else {
              tmp = false;
            }
            if (tmp) {
              tmp$ret$0 = true;
              break $l$block_0;
            }
            var _iterator__ex2g4s_1 = tmp0.h();
            while (_iterator__ex2g4s_1.i()) {
              var element_1 = _iterator__ex2g4s_1.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.inevitableSymbols.<anonymous>.<anonymous>.<anonymous>' call
              if (!(element_1.j1(element) || element_1.j1(element_0))) {
                tmp$ret$0 = false;
                break $l$block_0;
              }
            }
            tmp$ret$0 = true;
          }
          if (tmp$ret$0) {
            // Inline function 'kotlin.collections.getOrPut' call
            var value = newMap.l2(element_0);
            var tmp_0;
            if (value == null) {
              // Inline function 'ai.hypergraph.kaliningraph.parsing.inevitableSymbols.<anonymous>.<anonymous>.<anonymous>' call
              var answer = setOf(element_0);
              newMap.b5(element_0, answer);
              tmp_0 = answer;
            } else {
              tmp_0 = value;
            }
            var tmp_1 = tmp_0;
            // Inline function 'kotlin.collections.getOrPut' call
            var value_0 = newMap.l2(element);
            var tmp_2;
            if (value_0 == null) {
              // Inline function 'ai.hypergraph.kaliningraph.parsing.inevitableSymbols.<anonymous>.<anonymous>.<anonymous>' call
              var answer_0 = setOf(element);
              newMap.b5(element, answer_0);
              tmp_2 = answer_0;
            } else {
              tmp_2 = value_0;
            }
            var tmp$ret$5 = tmp_2;
            // Inline function 'kotlin.collections.set' call
            var value_1 = plus_2(tmp_1, tmp$ret$5);
            newMap.b5(element_0, value_1);
          }
        }
      }
      // Inline function 'kotlin.collections.getOrPut' call
      var value_2 = newMap.l2(element);
      var tmp_3;
      if (value_2 == null) {
        // Inline function 'ai.hypergraph.kaliningraph.parsing.inevitableSymbols.<anonymous>.<anonymous>' call
        var answer_1 = setOf(element);
        newMap.b5(element, answer_1);
        tmp_3 = answer_1;
      } else {
        tmp_3 = value_2;
      }
      // Inline function 'kotlin.collections.set' call
      var value_3 = tmp_3;
      newMap.b5(element, value_3);
    }
    return equals(newMap, map) ? map : inevitableSymbols(_this__u8e3s4, newMap);
  }
  function FrozenCFG(cfg) {
    this.f18_1 = cfg;
    this.g18_1 = hashCode(this.f18_1);
  }
  protoOf(FrozenCFG).equals = function (other) {
    var tmp;
    var tmp0_safe_receiver = other instanceof FrozenCFG ? other : null;
    if ((tmp0_safe_receiver == null ? null : tmp0_safe_receiver.g18_1) === this.g18_1) {
      tmp = true;
    } else {
      tmp = equals((!(other == null) ? isInterface(other, KtSet) : false) ? other : null, this.f18_1);
    }
    return tmp;
  };
  protoOf(FrozenCFG).hashCode = function () {
    return this.g18_1;
  };
  protoOf(FrozenCFG).r = function () {
    return this.f18_1.r();
  };
  protoOf(FrozenCFG).h18 = function (element) {
    return this.f18_1.j1(element);
  };
  protoOf(FrozenCFG).j1 = function (element) {
    if (!(element instanceof Pair))
      return false;
    return this.h18(element instanceof Pair ? element : THROW_CCE());
  };
  protoOf(FrozenCFG).h = function () {
    return this.f18_1.h();
  };
  protoOf(FrozenCFG).i18 = function (elements) {
    return this.f18_1.g2(elements);
  };
  protoOf(FrozenCFG).g2 = function (elements) {
    return this.i18(elements);
  };
  protoOf(FrozenCFG).k = function () {
    return this.f18_1.k();
  };
  function TermDict(terms, dict, revDict) {
    var tmp;
    if (dict === VOID) {
      // Inline function 'kotlin.collections.associateBy' call
      var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(terms, 10)), 16);
      // Inline function 'kotlin.collections.associateByTo' call
      var destination = LinkedHashMap_init_$Create$_0(capacity);
      var _iterator__ex2g4s = terms.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.TermDict.<init>.<anonymous>' call
        var tmp$ret$0 = new Char(numberToChar(Random(getStringHashCode(element)).af()));
        destination.b5(tmp$ret$0, element);
      }
      tmp = destination;
    } else {
      tmp = dict;
    }
    dict = tmp;
    var tmp_0;
    if (revDict === VOID) {
      // Inline function 'kotlin.collections.associate' call
      var this_0 = dict.o2();
      var capacity_0 = coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16);
      // Inline function 'kotlin.collections.associateTo' call
      var destination_0 = LinkedHashMap_init_$Create$_0(capacity_0);
      var _iterator__ex2g4s_0 = this_0.h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.TermDict.<init>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var k = element_0.h2().t1_1;
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        // Inline function 'kotlin.collections.plusAssign' call
        var pair = to(v, new Char(k));
        destination_0.b5(pair.we_1, pair.xe_1);
      }
      tmp_0 = destination_0;
    } else {
      tmp_0 = revDict;
    }
    revDict = tmp_0;
    this.j18_1 = terms;
    this.k18_1 = dict;
    this.l18_1 = revDict;
  }
  protoOf(TermDict).r = function () {
    return this.k18_1.r();
  };
  protoOf(TermDict).m18 = function (key) {
    return this.k18_1.j2(new Char(key));
  };
  protoOf(TermDict).j2 = function (key) {
    if (!(key instanceof Char))
      return false;
    return this.m18(key instanceof Char ? key.t1_1 : THROW_CCE());
  };
  protoOf(TermDict).n18 = function (key) {
    return this.k18_1.l2(new Char(key));
  };
  protoOf(TermDict).l2 = function (key) {
    if (!(key instanceof Char))
      return null;
    return this.n18(key instanceof Char ? key.t1_1 : THROW_CCE());
  };
  protoOf(TermDict).k = function () {
    return this.k18_1.k();
  };
  protoOf(TermDict).m2 = function () {
    return this.k18_1.m2();
  };
  protoOf(TermDict).n2 = function () {
    return this.k18_1.n2();
  };
  protoOf(TermDict).o2 = function () {
    return this.k18_1.o2();
  };
  function language$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new CFL($this$cache);
  }
  function delimiters$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.sortedBy' call
    var this_0 = get_terminals($this$cache);
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = delimiters$delegate$lambda$lambda;
    var tmp$ret$0 = new sam$kotlin_Comparator$0(tmp);
    var tmp_0 = sortedWith(this_0, tmp$ret$0);
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$4 = [get_HOLE_MARKER(), ' '];
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_1 = plus_3(tmp_0, tmp$ret$4);
    return copyToArray(this_1);
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.o18_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).oc = function (a, b) {
    return this.o18_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).n3 = function () {
    return this.o18_1;
  };
  protoOf(sam$kotlin_Comparator$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0).hashCode = function () {
    return hashCode(this.n3());
  };
  function delimiters$delegate$lambda$lambda(a, b) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.delimiters$delegate.<anonymous>.<anonymous>' call
    var tmp = -a.length | 0;
    // Inline function 'ai.hypergraph.kaliningraph.parsing.delimiters$delegate.<anonymous>.<anonymous>' call
    var tmp$ret$1 = -b.length | 0;
    return compareValues(tmp, tmp$ret$1);
  }
  function nonterminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.nonterminals$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_LHS(item);
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function symbols$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp = get_nonterminals($this$cache);
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.symbols$delegate.<anonymous>.<anonymous>' call
      var list = get_RHS(element);
      addAll(destination, list);
    }
    return plus_2(tmp, destination);
  }
  function terminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return minus_0(get_symbols($this$cache), get_nonterminals($this$cache));
  }
  function terminalUnitProductions$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = terminalUnitProductions$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    return this_0;
  }
  function terminalUnitProductions$delegate$lambda$lambda($this_cache) {
    return function (it) {
      return get_RHS(it).k() === 1 && !get_nonterminals($this_cache).j1(get_RHS(it).q(0));
    };
  }
  function unitProductions$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = unitProductions$delegate$lambda$lambda;
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitProductions$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$2 = to(get_LHS(item), get_RHS(item).q(0));
      destination.e(tmp$ret$2);
    }
    return toSet_0(destination);
  }
  function unitProductions$delegate$lambda$lambda(it) {
    _init_properties_CFG_kt__oelqcy();
    return get_RHS(it).k() === 1;
  }
  function nonterminalProductions$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = nonterminalProductions$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    return this_0;
  }
  function nonterminalProductions$delegate$lambda$lambda($this_cache) {
    return function (it) {
      return !get_terminalUnitProductions($this_cache).j1(it);
    };
  }
  function unitNonterminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_terminalUnitProductions($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitNonterminals$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_LHS(item);
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function bimap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new BiMap($this$cache);
  }
  function tmap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_terminals($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = to(get_bimap($this$cache).z17(listOf(item)), item);
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.groupBy' call
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_0 = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var element = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>' call
      var key = element.we_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_0.l2(key);
      var tmp;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_0.b5(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.e(element);
    }
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_1 = LinkedHashMap_init_$Create$_0(mapCapacity(destination_0.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var _iterator__ex2g4s_1 = destination_0.o2().h();
    while (_iterator__ex2g4s_1.i()) {
      var element_0 = _iterator__ex2g4s_1.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_0 = element_0.h2();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = element_0.i2();
      // Inline function 'kotlin.collections.mapTo' call
      var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var _iterator__ex2g4s_2 = this_1.h();
      while (_iterator__ex2g4s_2.i()) {
        var item_0 = _iterator__ex2g4s_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.tmap$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$9 = item_0.xe_1;
        destination_2.e(tmp$ret$9);
      }
      var tmp$ret$12 = toSet_0(destination_2);
      destination_1.b5(tmp_0, tmp$ret$12);
    }
    return destination_1;
  }
  function unicodeMap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.associateBy' call
    var this_0 = get_terminals($this$cache);
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16);
    // Inline function 'kotlin.collections.associateByTo' call
    var destination = LinkedHashMap_init_$Create$_0(capacity);
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unicodeMap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = toUnicodeEscaped(numberToChar(Random(getStringHashCode(element)).af()));
      destination.b5(tmp$ret$0, element);
    }
    return destination;
  }
  function ntLst$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return toList(plus_1(get_symbols($this$cache), '\u03B5'));
  }
  function ntMap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = get_ntLst($this$cache);
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.ntMap$delegate.<anonymous>.<anonymous>' call
      var i = checkIndexOverflow(_unary__edvuaz);
      var tmp$ret$0 = to(item, i);
      destination.e(tmp$ret$0);
    }
    return toMap(destination);
  }
  function tripleIntProds$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_bimap($this$cache).v17();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.tripleIntProds$delegate.<anonymous>.<anonymous>' call
      var a = item.ye();
      var b = item.ze();
      var c = item.nm();
      var tmp$ret$0 = to_1(to(get_bindex($this$cache).e10(a), get_bindex($this$cache).e10(b)), get_bindex($this$cache).e10(c));
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function revUnitProds$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.associate' call
    var this_0 = get_terminals($this$cache);
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16);
    // Inline function 'kotlin.collections.associateTo' call
    var destination = LinkedHashMap_init_$Create$_0(capacity);
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.revUnitProds$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = get_bimap($this$cache).z17(listOf(element));
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var _iterator__ex2g4s_0 = this_1.h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.revUnitProds$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = get_bindex($this$cache).e10(item);
        destination_0.e(tmp$ret$0);
      }
      // Inline function 'kotlin.collections.plusAssign' call
      var pair = to(element, destination_0);
      destination.b5(pair.we_1, pair.xe_1);
    }
    return destination;
  }
  function vindex$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp = 0;
    var tmp_0 = get_bindex($this$cache).c10_1.k();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(tmp_0), null);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp1 = get_bimap($this$cache).a18(get_bindex($this$cache).q(tmp_2));
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate = vindex$delegate$lambda$lambda;
      // Inline function 'kotlin.apply' call
      var this_0 = toMutableSet(tmp1);
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_0, predicate);
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.vindex$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(item, 10));
        var _iterator__ex2g4s_0 = item.h();
        while (_iterator__ex2g4s_0.i()) {
          var item_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.vindex$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$3 = get_bindex($this$cache).e10(item_0);
          destination_0.e(tmp$ret$3);
        }
        destination.e(destination_0);
      }
      tmp_1[tmp_2] = toIntArray(flatten(destination));
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function vindex$delegate$lambda$lambda(it) {
    _init_properties_CFG_kt__oelqcy();
    return it.k() === 2;
  }
  function vindex2$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp = 0;
    var tmp_0 = get_bindex($this$cache).c10_1.k();
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(tmp_0), null);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      var tmp1 = get_bimap($this$cache).a18(get_bindex($this$cache).q(tmp_2));
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate = vindex2$delegate$lambda$lambda;
      // Inline function 'kotlin.apply' call
      var this_0 = toMutableSet(tmp1);
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_0, predicate);
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.vindex2$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$3 = listOf_0([get_bindex($this$cache).e10(item.q(0)), get_bindex($this$cache).e10(item.q(1))]);
        destination.e(tmp$ret$3);
      }
      tmp_1[tmp_2] = destination;
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function vindex2$delegate$lambda$lambda(it) {
    _init_properties_CFG_kt__oelqcy();
    return it.k() > 1;
  }
  function bindex$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new Bindex(get_nonterminals($this$cache));
  }
  function normalForm$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return normalize($this$cache);
  }
  function depGraph$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return dependencyGraph($this$cache);
  }
  function revDepGraph$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return revDependencyGraph($this$cache);
  }
  function blocked$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.mutableSetOf' call
    return LinkedHashSet_init_$Create$();
  }
  function originalForm$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    var tmp0_safe_receiver = get_rewriteHistory().l2($this$cache);
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q(0);
    return tmp1_elvis_lhs == null ? $this$cache : tmp1_elvis_lhs;
  }
  function nonparametricForm$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return ensureNotNull(get_rewriteHistory().l2($this$cache)).q(1);
  }
  function reachability$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.mutableMapOf' call
    return LinkedHashMap_init_$Create$();
  }
  function unitReachability$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = get_symbols($this$cache);
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var it = LabeledGraph_init_$Create$(unitReachability$delegate$lambda$lambda($this$cache));
      var tmp2 = plus_2(setOf(element), plus_2(transitiveClosure_0(it, setOf(element)), transitiveClosure_0(it.e16(), setOf(element))));
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate = unitReachability$delegate$lambda$lambda_0($this$cache);
      // Inline function 'kotlin.apply' call
      var this_1 = toMutableSet(tmp2);
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_1, predicate);
      result.b5(element, this_1);
    }
    return result;
  }
  function unitReachability$delegate$lambda$lambda($this_cache) {
    return function ($this$LabeledGraph) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_unitProductions($this_cache);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(item.we_1, item.xe_1);
        destination.e(tmp$ret$0);
      }
      var _iterator__ex2g4s_0 = destination.h();
      while (_iterator__ex2g4s_0.i()) {
        var element = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.unitReachability$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var a = element.ye();
        var b = element.ze();
        $this$LabeledGraph.i17(a, b);
      }
      return Unit_instance;
    };
  }
  function unitReachability$delegate$lambda$lambda_0($this_cache) {
    return function (it) {
      return get_nonterminals($this_cache).j1(it);
    };
  }
  function noNonterminalStubs$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    println('Disabling nonterminal stubs!');
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = noNonterminalStubs$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.also' call
    var this_1 = freeze(toSet_0(this_0));
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    var tmp = get_rewriteHistory();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
    var it = freeze($this$cache);
    var tmp$ret$3 = plus(ensureNotNull(get_rewriteHistory().l2(it)), listOf(it));
    tmp.b5(this_1, tmp$ret$3);
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    get_blocked(this_1).o(get_blocked($this$cache));
    return this_1;
  }
  function noNonterminalStubs$delegate$lambda$lambda($this_cache) {
    return function (it) {
      var tmp0 = get_RHS(it);
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.none' call
        var tmp;
        if (isInterface(tmp0, Collection)) {
          tmp = tmp0.r();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.noNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
          if (isNonterminalStubIn(element, $this_cache)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function noEpsilonOrNonterminalStubs$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    println('Disabling nonterminal stubs!');
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = noEpsilonOrNonterminalStubs$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_0 = noEpsilonOrNonterminalStubs$delegate$lambda$lambda_0;
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableSet(this_0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_1, predicate_0);
    // Inline function 'kotlin.also' call
    var this_2 = freeze(toSet_0(this_1));
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    var tmp = get_rewriteHistory();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
    var it = freeze($this$cache);
    var tmp$ret$5 = plus(ensureNotNull(get_rewriteHistory().l2(it)), listOf(it));
    tmp.b5(this_2, tmp$ret$5);
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>' call
    get_blocked(this_2).o(get_blocked($this$cache));
    return this_2;
  }
  function noEpsilonOrNonterminalStubs$delegate$lambda$lambda($this_cache) {
    return function (it) {
      var tmp0 = get_RHS(it);
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.none' call
        var tmp;
        if (isInterface(tmp0, Collection)) {
          tmp = tmp0.r();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.noEpsilonOrNonterminalStubs$delegate.<anonymous>.<anonymous>.<anonymous>' call
          if (isNonterminalStubIn(element, $this_cache)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function noEpsilonOrNonterminalStubs$delegate$lambda$lambda_0(it) {
    _init_properties_CFG_kt__oelqcy();
    return !contains(it.toString(), '\u03B5');
  }
  function parikhFPCache$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.TODO' call
    throw new NotImplementedError();
  }
  function generators$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_RHS(item);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s_0 = this_0.h();
      while (_iterator__ex2g4s_0.i()) {
        var item_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(item_0, get_LHS(item));
        destination_0.e(tmp$ret$0);
      }
      destination.e(destination_0);
    }
    // Inline function 'kotlin.collections.groupBy' call
    var tmp0 = flatten(destination);
    // Inline function 'kotlin.collections.groupByTo' call
    var destination_1 = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s_1 = tmp0.h();
    while (_iterator__ex2g4s_1.i()) {
      var element = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>' call
      var key = element.we_1;
      // Inline function 'kotlin.collections.getOrPut' call
      var value = destination_1.l2(key);
      var tmp;
      if (value == null) {
        // Inline function 'kotlin.collections.groupByTo.<anonymous>' call
        var answer = ArrayList_init_$Create$_0();
        destination_1.b5(key, answer);
        tmp = answer;
      } else {
        tmp = value;
      }
      var list = tmp;
      list.e(element);
    }
    // Inline function 'kotlin.collections.mapValues' call
    // Inline function 'kotlin.collections.mapValuesTo' call
    var destination_2 = LinkedHashMap_init_$Create$_0(mapCapacity(destination_1.k()));
    // Inline function 'kotlin.collections.associateByTo' call
    var _iterator__ex2g4s_2 = destination_1.o2().h();
    while (_iterator__ex2g4s_2.i()) {
      var element_0 = _iterator__ex2g4s_2.j();
      // Inline function 'kotlin.collections.mapValuesTo.<anonymous>' call
      var tmp_0 = element_0.h2();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_1 = element_0.i2();
      // Inline function 'kotlin.collections.mapTo' call
      var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var _iterator__ex2g4s_3 = this_1.h();
      while (_iterator__ex2g4s_3.i()) {
        var item_1 = _iterator__ex2g4s_3.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.generators$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$12 = item_1.xe_1;
        destination_3.e(tmp$ret$12);
      }
      var tmp$ret$15 = toSet_0(destination_3);
      destination_2.b5(tmp_0, tmp$ret$15);
    }
    return destination_2;
  }
  function nonterminalFormulas$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = get_nonterminals($this$cache);
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.nonterminalFormulas$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = toFormula($this$cache, element);
      result.b5(element, tmp$ret$0);
    }
    return result;
  }
  function pruneTreelikeNonterminals$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    println('Pruning treelike nonterminals!');
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = pruneTreelikeNonterminals$delegate$lambda$lambda($this$cache);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet($this$cache);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    var cfg = toSet_0(this_0);
    var brokenReferences = get_terminals(cfg);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_0 = pruneTreelikeNonterminals$delegate$lambda$lambda_0($this$cache);
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableSet(brokenReferences);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_1, predicate_0);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s = this_1.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp$ret$4 = to(item, listOf('<' + item + '>'));
      destination.e(tmp$ret$4);
    }
    var tmp = plus_2(cfg, destination);
    var tmp4 = get_nonterminals(cfg);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_1 = pruneTreelikeNonterminals$delegate$lambda$lambda_1;
    // Inline function 'kotlin.apply' call
    var this_2 = toMutableSet(tmp4);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_2, predicate_1);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
    var _iterator__ex2g4s_0 = this_2.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp$ret$9 = to(item_0, listOf('<' + item_0 + '>'));
      destination_0.e(tmp$ret$9);
    }
    var tmp_0 = plus_2(tmp, destination_0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_2 = pruneTreelikeNonterminals$delegate$lambda$lambda_2($this$cache);
    // Inline function 'kotlin.apply' call
    var this_3 = toMutableSet(brokenReferences);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_3, predicate_2);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
    var _iterator__ex2g4s_1 = this_3.h();
    while (_iterator__ex2g4s_1.i()) {
      var item_1 = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate_3 = pruneTreelikeNonterminals$delegate$lambda$lambda_3(item_1);
      // Inline function 'kotlin.apply' call
      var this_4 = toMutableSet($this$cache);
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_4, predicate_3);
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(this_4, 10));
      var _iterator__ex2g4s_2 = this_4.h();
      while (_iterator__ex2g4s_2.i()) {
        var item_2 = _iterator__ex2g4s_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$16 = to(item_1, get_RHS(item_2));
        destination_2.e(tmp$ret$16);
      }
      destination_1.e(destination_2);
    }
    // Inline function 'kotlin.also' call
    var this_5 = toSet_0(flatten(destination_1));
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
    println('Restored productions: ' + prettyPrint(this_5));
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    var it = plus_2(tmp_0, this_5);
    // Inline function 'kotlin.also' call
    var this_6 = transformIntoCNF(it);
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    var tmp_1 = get_rewriteHistory();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
    var it_0 = freeze($this$cache);
    var tmp$ret$28 = plus(listOf(ensureNotNull(get_rewriteHistory().l2(it_0)).q(0)), listOf(it_0));
    tmp_1.b5(this_6, tmp$ret$28);
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>' call
    get_blocked(this_6).o(get_blocked($this$cache));
    return this_6;
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda($this_cache) {
    return function (it) {
      var tmp;
      var tmp0 = get_RHS(it);
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var tmp_0;
        if (isInterface(tmp0, Collection)) {
          tmp_0 = tmp0.r();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.pruneTreelikeNonterminals$delegate.<anonymous>.<anonymous>.<anonymous>' call
          if (!isTreelikeNonterminalIn(element, $this_cache)) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
        }
        tmp$ret$0 = false;
      }
      if (tmp$ret$0) {
        tmp = true;
      } else {
        tmp = contains(get_LHS(it), '\u03B5');
      }
      return tmp;
    };
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_0($this_cache) {
    return function (it) {
      return get_terminals($this_cache).j1('<' + it + '>');
    };
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_1(it) {
    _init_properties_CFG_kt__oelqcy();
    return isOrganicNonterminal(it);
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_2($this_cache) {
    return function (it) {
      return isSyntheticNonterminal(it) && get_nonterminals($this_cache).j1(it);
    };
  }
  function pruneTreelikeNonterminals$delegate$lambda$lambda_3($l) {
    return function (it) {
      return get_LHS(it) === $l;
    };
  }
  function joinMap$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return new JoinMap($this$cache);
  }
  function mustGenerate$delegate$lambda($this$cache) {
    _init_properties_CFG_kt__oelqcy();
    return inevitableSymbols($this$cache);
  }
  function dependencyGraph$lambda($this_dependencyGraph) {
    return function ($this$LabeledGraph) {
      var _iterator__ex2g4s = $this_dependencyGraph.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.dependencyGraph.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s_0 = element.xe_1.h();
        while (_iterator__ex2g4s_0.i()) {
          var element_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.dependencyGraph.<anonymous>.<anonymous>.<anonymous>' call
          $this$LabeledGraph.i17(get_LHS(element), element_0);
        }
      }
      return Unit_instance;
    };
  }
  function revDependencyGraph$lambda($this_revDependencyGraph) {
    return function ($this$LabeledGraph) {
      var _iterator__ex2g4s = $this_revDependencyGraph.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.revDependencyGraph.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s_0 = element.xe_1.h();
        while (_iterator__ex2g4s_0.i()) {
          var element_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.revDependencyGraph.<anonymous>.<anonymous>.<anonymous>' call
          $this$LabeledGraph.i17(element_0, get_LHS(element));
        }
      }
      return Unit_instance;
    };
  }
  function toFormula$lambda$lambda($this_toFormula) {
    return function (it) {
      return toFormula($this_toFormula, it);
    };
  }
  function toFormula$lambda($this_toFormula) {
    return function (it) {
      return joinToString(it, ' and ', '( ', ' )', VOID, VOID, toFormula$lambda$lambda($this_toFormula));
    };
  }
  function language$factory() {
    return getPropertyCallableRef('language', 1, KProperty1, function (receiver) {
      return get_language(receiver);
    }, null);
  }
  function nonterminals$factory() {
    return getPropertyCallableRef('nonterminals', 1, KProperty1, function (receiver) {
      return get_nonterminals(receiver);
    }, null);
  }
  function symbols$factory() {
    return getPropertyCallableRef('symbols', 1, KProperty1, function (receiver) {
      return get_symbols(receiver);
    }, null);
  }
  function terminals$factory() {
    return getPropertyCallableRef('terminals', 1, KProperty1, function (receiver) {
      return get_terminals(receiver);
    }, null);
  }
  function terminalUnitProductions$factory() {
    return getPropertyCallableRef('terminalUnitProductions', 1, KProperty1, function (receiver) {
      return get_terminalUnitProductions(receiver);
    }, null);
  }
  function unitProductions$factory() {
    return getPropertyCallableRef('unitProductions', 1, KProperty1, function (receiver) {
      return get_unitProductions(receiver);
    }, null);
  }
  function nonterminalProductions$factory() {
    return getPropertyCallableRef('nonterminalProductions', 1, KProperty1, function (receiver) {
      return get_nonterminalProductions(receiver);
    }, null);
  }
  function unitNonterminals$factory() {
    return getPropertyCallableRef('unitNonterminals', 1, KProperty1, function (receiver) {
      return get_unitNonterminals(receiver);
    }, null);
  }
  function bimap$factory() {
    return getPropertyCallableRef('bimap', 1, KProperty1, function (receiver) {
      return get_bimap(receiver);
    }, null);
  }
  function ntLst$factory() {
    return getPropertyCallableRef('ntLst', 1, KProperty1, function (receiver) {
      return get_ntLst(receiver);
    }, null);
  }
  function tripleIntProds$factory() {
    return getPropertyCallableRef('tripleIntProds', 1, KProperty1, function (receiver) {
      return get_tripleIntProds(receiver);
    }, null);
  }
  function vindex$factory() {
    return getPropertyCallableRef('vindex', 1, KProperty1, function (receiver) {
      return get_vindex(receiver);
    }, null);
  }
  function bindex$factory() {
    return getPropertyCallableRef('bindex', 1, KProperty1, function (receiver) {
      return get_bindex(receiver);
    }, null);
  }
  function normalForm$factory() {
    return getPropertyCallableRef('normalForm', 1, KProperty1, function (receiver) {
      return get_normalForm(receiver);
    }, null);
  }
  function depGraph$factory() {
    return getPropertyCallableRef('depGraph', 1, KProperty1, function (receiver) {
      return get_depGraph(receiver);
    }, null);
  }
  function blocked$factory() {
    return getPropertyCallableRef('blocked', 1, KProperty1, function (receiver) {
      return get_blocked(receiver);
    }, null);
  }
  function originalForm$factory() {
    return getPropertyCallableRef('originalForm', 1, KProperty1, function (receiver) {
      return get_originalForm(receiver);
    }, null);
  }
  function nonparametricForm$factory() {
    return getPropertyCallableRef('nonparametricForm', 1, KProperty1, function (receiver) {
      return get_nonparametricForm(receiver);
    }, null);
  }
  function reachability$factory() {
    return getPropertyCallableRef('reachability', 1, KProperty1, function (receiver) {
      return get_reachability(receiver);
    }, null);
  }
  function unitReachability$factory() {
    return getPropertyCallableRef('unitReachability', 1, KProperty1, function (receiver) {
      return get_unitReachability(receiver);
    }, null);
  }
  function noNonterminalStubs$factory() {
    return getPropertyCallableRef('noNonterminalStubs', 1, KProperty1, function (receiver) {
      return get_noNonterminalStubs(receiver);
    }, null);
  }
  function L2RHS$factory() {
    return getPropertyCallableRef('L2RHS', 1, KProperty1, function (receiver) {
      return receiver.w17();
    }, null);
  }
  function R2LHS$factory() {
    return getPropertyCallableRef('R2LHS', 1, KProperty1, function (receiver) {
      return receiver.u17();
    }, null);
  }
  function TDEPS$factory() {
    return getPropertyCallableRef('TDEPS', 1, KProperty1, function (receiver) {
      return receiver.x17();
    }, null);
  }
  function NDEPS$factory() {
    return getPropertyCallableRef('NDEPS', 1, KProperty1, function (receiver) {
      return receiver.y17();
    }, null);
  }
  function TRIPL$factory() {
    return getPropertyCallableRef('TRIPL', 1, KProperty1, function (receiver) {
      return receiver.v17();
    }, null);
  }
  function UNITS$factory() {
    return getPropertyCallableRef('UNITS', 1, KProperty1, function (receiver) {
      return receiver.r10();
    }, null);
  }
  var properties_initialized_CFG_kt_kkv418;
  function _init_properties_CFG_kt__oelqcy() {
    if (!properties_initialized_CFG_kt_kkv418) {
      properties_initialized_CFG_kt_kkv418 = true;
      language$delegate = cache_0(VOID, language$delegate$lambda);
      delimiters$delegate = cache_0(VOID, delimiters$delegate$lambda);
      nonterminals$delegate = cache_0(VOID, nonterminals$delegate$lambda);
      symbols$delegate = cache_0(VOID, symbols$delegate$lambda);
      terminals$delegate = cache_0(VOID, terminals$delegate$lambda);
      terminalUnitProductions$delegate = cache_0(VOID, terminalUnitProductions$delegate$lambda);
      unitProductions$delegate = cache_0(VOID, unitProductions$delegate$lambda);
      nonterminalProductions$delegate = cache_0(VOID, nonterminalProductions$delegate$lambda);
      unitNonterminals$delegate = cache_0(VOID, unitNonterminals$delegate$lambda);
      bimap$delegate = cache_0(VOID, bimap$delegate$lambda);
      tmap$delegate = cache_0(VOID, tmap$delegate$lambda);
      unicodeMap$delegate = cache_0(VOID, unicodeMap$delegate$lambda);
      ntLst$delegate = cache_0(VOID, ntLst$delegate$lambda);
      ntMap$delegate = cache_0(VOID, ntMap$delegate$lambda);
      tripleIntProds$delegate = cache_0(VOID, tripleIntProds$delegate$lambda);
      revUnitProds$delegate = cache_0(VOID, revUnitProds$delegate$lambda);
      vindex$delegate = cache_0(VOID, vindex$delegate$lambda);
      vindex2$delegate = cache_0(VOID, vindex2$delegate$lambda);
      bindex$delegate = cache_0(VOID, bindex$delegate$lambda);
      normalForm$delegate = cache_0(VOID, normalForm$delegate$lambda);
      depGraph$delegate = cache_0(VOID, depGraph$delegate$lambda);
      revDepGraph$delegate = cache_0(VOID, revDepGraph$delegate$lambda);
      blocked$delegate = cache_0(VOID, blocked$delegate$lambda);
      originalForm$delegate = cache_0(VOID, originalForm$delegate$lambda);
      nonparametricForm$delegate = cache_0(VOID, nonparametricForm$delegate$lambda);
      reachability$delegate = cache_0(VOID, reachability$delegate$lambda);
      unitReachability$delegate = cache_0(VOID, unitReachability$delegate$lambda);
      noNonterminalStubs$delegate = cache_0(VOID, noNonterminalStubs$delegate$lambda);
      noEpsilonOrNonterminalStubs$delegate = cache_0(VOID, noEpsilonOrNonterminalStubs$delegate$lambda);
      parikhFPCache$delegate = cache_0(VOID, parikhFPCache$delegate$lambda);
      generators$delegate = cache_0(VOID, generators$delegate$lambda);
      nonterminalFormulas$delegate = cache_0(VOID, nonterminalFormulas$delegate$lambda);
      pruneTreelikeNonterminals$delegate = cache_0(VOID, pruneTreelikeNonterminals$delegate$lambda);
      joinMap$delegate = cache_0(VOID, joinMap$delegate$lambda);
      mustGenerate$delegate = cache_0(VOID, mustGenerate$delegate$lambda);
    }
  }
  function get_pretty(_this__u8e3s4) {
    _init_properties_Debugging_kt__gvw5j0();
    return pretty$delegate.uj(_this__u8e3s4, pretty$factory());
  }
  var pretty$delegate;
  function prettyPrint(_this__u8e3s4) {
    _init_properties_Debugging_kt__gvw5j0();
    return get_pretty(_this__u8e3s4).toString();
  }
  function pretty(_this__u8e3s4) {
    _init_properties_Debugging_kt__gvw5j0();
    return get_LHS(_this__u8e3s4) + ' -> ' + joinToString(get_RHS(_this__u8e3s4), ' ');
  }
  function pretty$delegate$lambda($this$cache) {
    _init_properties_Debugging_kt__gvw5j0();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.pretty$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = pretty(item);
      destination.e(tmp$ret$0);
    }
    return formatAsGrid(destination, 2);
  }
  function pretty$factory() {
    return getPropertyCallableRef('pretty', 1, KProperty1, function (receiver) {
      return get_pretty(receiver);
    }, null);
  }
  var properties_initialized_Debugging_kt_lkmgf6;
  function _init_properties_Debugging_kt__gvw5j0() {
    if (!properties_initialized_Debugging_kt_lkmgf6) {
      properties_initialized_Debugging_kt_lkmgf6 = true;
      pretty$delegate = cache_0(VOID, pretty$delegate$lambda);
    }
  }
  var language$delegate_0;
  var asCFG$delegate;
  var asCJL$delegate;
  function CFL(cfg) {
    this.p18_1 = cfg;
  }
  protoOf(CFL).toString = function () {
    return 'CFL(cfg=' + toString_0(this.p18_1) + ')';
  };
  protoOf(CFL).hashCode = function () {
    return hashCode(this.p18_1);
  };
  protoOf(CFL).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof CFL))
      return false;
    var tmp0_other_with_cast = other instanceof CFL ? other : THROW_CCE();
    if (!equals(this.p18_1, tmp0_other_with_cast.p18_1))
      return false;
    return true;
  };
  function REL(reg) {
    this.q18_1 = reg;
  }
  protoOf(REL).toString = function () {
    return 'REL(reg=' + toString_0(this.q18_1) + ')';
  };
  protoOf(REL).hashCode = function () {
    return hashCode(this.q18_1);
  };
  protoOf(REL).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof REL))
      return false;
    var tmp0_other_with_cast = other instanceof REL ? other : THROW_CCE();
    if (!equals(this.q18_1, tmp0_other_with_cast.q18_1))
      return false;
    return true;
  };
  function intersect_0($this, item) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = $this.w18();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item_0 = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.CJL.intersect.<anonymous>' call
      var tmp$ret$0 = item(item_0);
      destination.e(tmp$ret$0);
    }
    return intersect_1(destination);
  }
  function CJL$cfgs$delegate$lambda($cfls) {
    return function ($this$cache) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = $cfls;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.length);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var item = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.CJL.cfgs$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = item.p18_1;
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function CJL$nonterminals$delegate$lambda($this$cache) {
    return intersect_0($this$cache, CJL$nonterminals$delegate$lambda$lambda);
  }
  function CJL$nonterminals$delegate$lambda$lambda($this$intersect) {
    return get_nonterminals($this$intersect);
  }
  function CJL$terminals$delegate$lambda($this$cache) {
    return intersect_0($this$cache, CJL$terminals$delegate$lambda$lambda);
  }
  function CJL$terminals$delegate$lambda$lambda($this$intersect) {
    return get_terminals($this$intersect);
  }
  function CJL$symbols$delegate$lambda($this$cache) {
    return intersect_0($this$cache, CJL$symbols$delegate$lambda$lambda);
  }
  function CJL$symbols$delegate$lambda$lambda($this$intersect) {
    return get_symbols($this$intersect);
  }
  function CJL(cfls) {
    var tmp = this;
    // Inline function 'kotlin.collections.toTypedArray' call
    var this_0 = toSet_2(cfls);
    tmp.r18_1 = copyToArray(this_0);
    var tmp_0 = this;
    tmp_0.s18_1 = cache_0(VOID, CJL$cfgs$delegate$lambda(cfls));
    var tmp_1 = this;
    tmp_1.t18_1 = cache_0(VOID, CJL$nonterminals$delegate$lambda);
    var tmp_2 = this;
    tmp_2.u18_1 = cache_0(VOID, CJL$terminals$delegate$lambda);
    var tmp_3 = this;
    tmp_3.v18_1 = cache_0(VOID, CJL$symbols$delegate$lambda);
  }
  protoOf(CJL).w18 = function () {
    return this.s18_1.uj(this, cfgs$factory());
  };
  function contains_1(_this__u8e3s4, s) {
    _init_properties_FLTheory_kt__k6sxcb();
    return isValid(_this__u8e3s4.p18_1, s);
  }
  function contains_2(_this__u8e3s4, s) {
    _init_properties_FLTheory_kt__k6sxcb();
    return isValid_0(_this__u8e3s4.p18_1, s);
  }
  function language$delegate$lambda_0($this$cache) {
    _init_properties_FLTheory_kt__k6sxcb();
    return new REL($this$cache);
  }
  function asCFG$delegate$lambda($this$cache) {
    _init_properties_FLTheory_kt__k6sxcb();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault($this$cache, 10));
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.asCFG$delegate.<anonymous>.<anonymous>' call
      var a = item.ye();
      var b = item.ze();
      var tmp$ret$0 = to(a, listOf(b));
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function asCJL$delegate$lambda($this$cache) {
    _init_properties_FLTheory_kt__k6sxcb();
    return new CJL([get_language($this$cache)]);
  }
  function cfgs$factory() {
    return getPropertyCallableRef('cfgs', 1, KProperty1, function (receiver) {
      return receiver.w18();
    }, null);
  }
  var properties_initialized_FLTheory_kt_tf02wj;
  function _init_properties_FLTheory_kt__k6sxcb() {
    if (!properties_initialized_FLTheory_kt_tf02wj) {
      properties_initialized_FLTheory_kt_tf02wj = true;
      language$delegate_0 = cache_0(VOID, language$delegate$lambda_0);
      asCFG$delegate = cache_0(VOID, asCFG$delegate$lambda);
      asCJL$delegate = cache_0(VOID, asCJL$delegate$lambda);
    }
  }
  var hypothesis;
  function levenshtein(o1, o2) {
    var prev = new Int32Array(o2.k() + 1 | 0);
    var inductionVariable = 0;
    var last = o2.k() + 1 | 0;
    if (inductionVariable < last)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        prev[j] = j;
      }
       while (inductionVariable < last);
    var inductionVariable_0 = 1;
    var last_0 = o1.k() + 1 | 0;
    if (inductionVariable_0 < last_0)
      do {
        var i = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var curr = new Int32Array(o2.k() + 1 | 0);
        curr[0] = i;
        var inductionVariable_1 = 1;
        var last_1 = o2.k() + 1 | 0;
        if (inductionVariable_1 < last_1)
          do {
            var j_0 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var d1 = prev[j_0] + 1 | 0;
            var d2 = curr[j_0 - 1 | 0] + 1 | 0;
            var d3 = prev[j_0 - 1 | 0] + (equals(o1.q(i - 1 | 0), o2.q(j_0 - 1 | 0)) ? 0 : 1) | 0;
            // Inline function 'kotlin.math.min' call
            // Inline function 'kotlin.math.min' call
            var a = Math.min(d1, d2);
            curr[j_0] = Math.min(a, d3);
          }
           while (inductionVariable_1 < last_1);
        prev = curr;
      }
       while (inductionVariable_0 < last_0);
    return prev[o2.k()];
  }
  function levenshteinAlign(a, b) {
    return levenshteinAlign_0(tokenizeByWhitespace(a), tokenizeByWhitespace(b));
  }
  function levenshteinAlign_0(a, b) {
    var tmp = 0;
    var tmp_0 = a.k() + 1 | 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(tmp_0), null);
    while (tmp < tmp_0) {
      tmp_1[tmp] = new Int32Array(b.k() + 1 | 0);
      tmp = tmp + 1 | 0;
    }
    var costs = tmp_1;
    var inductionVariable = 0;
    var last = b.k();
    if (inductionVariable <= last)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        costs[0][j] = j;
      }
       while (!(j === last));
    var inductionVariable_0 = 1;
    var last_0 = a.k();
    if (inductionVariable_0 <= last_0)
      do {
        var i = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        costs[i][0] = i;
        var inductionVariable_1 = 1;
        var last_1 = b.k();
        if (inductionVariable_1 <= last_1)
          do {
            var j_0 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var temp = costs[i - 1 | 0][j_0 - 1 | 0] + (equals(a.q(i - 1 | 0), b.q(j_0 - 1 | 0)) ? 0 : 1) | 0;
            var tmp_2 = costs[i];
            var tmp1 = costs[i - 1 | 0][j_0];
            // Inline function 'kotlin.comparisons.minOf' call
            var b_0 = costs[i][j_0 - 1 | 0];
            // Inline function 'kotlin.comparisons.minOf' call
            var a_0 = 1 + Math.min(tmp1, b_0) | 0;
            tmp_2[j_0] = Math.min(a_0, temp);
          }
           while (!(j_0 === last_1));
      }
       while (!(i === last_0));
    // Inline function 'kotlin.collections.mutableListOf' call
    var aPathRev = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.mutableListOf' call
    var bPathRev = ArrayList_init_$Create$_0();
    var i_0 = a.k();
    var j_1 = b.k();
    while (i_0 > 0 && j_1 > 0) {
      var temp_0 = costs[i_0 - 1 | 0][j_1 - 1 | 0] + (equals(a.q(i_0 - 1 | 0), b.q(j_1 - 1 | 0)) ? 0 : 1) | 0;
      var tmp0_subject = costs[i_0][j_1];
      if (tmp0_subject === temp_0) {
        i_0 = i_0 - 1 | 0;
        aPathRev.e(a.q(i_0));
        j_1 = j_1 - 1 | 0;
        bPathRev.e(b.q(j_1));
      } else if (tmp0_subject === (1 + costs[i_0 - 1 | 0][j_1] | 0)) {
        i_0 = i_0 - 1 | 0;
        aPathRev.e(a.q(i_0));
        bPathRev.e(null);
      } else if (tmp0_subject === (1 + costs[i_0][j_1 - 1 | 0] | 0)) {
        aPathRev.e(null);
        j_1 = j_1 - 1 | 0;
        bPathRev.e(b.q(j_1));
      }
    }
    while (i_0 > 0) {
      i_0 = i_0 - 1 | 0;
      aPathRev.e(a.q(i_0));
      bPathRev.e(null);
    }
    while (j_1 > 0) {
      aPathRev.e(null);
      j_1 = j_1 - 1 | 0;
      bPathRev.e(b.q(j_1));
    }
    var revPathA = reversed(aPathRev);
    var revPathB = reversed(bPathRev);
    return zip(revPathA, revPathB);
  }
  function makeLevFSA(str, dist) {
    return makeLevFSA_0(tokenizeByWhitespace(str), dist);
  }
  function makeLevFSA_0(str, maxRad, monoEditBounds, multiEditBounds, digits) {
    monoEditBounds = monoEditBounds === VOID ? to(str.k(), 0) : monoEditBounds;
    multiEditBounds = multiEditBounds === VOID ? until(0, str.k()) : multiEditBounds;
    digits = digits === VOID ? imul(str.k(), maxRad).toString().length : digits;
    var tmp = plus_2(upArcs(str, maxRad, digits), diagArcs(str, maxRad, digits));
    // Inline function 'kotlin.collections.mapIndexed' call
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(str, 10));
    var index = 0;
    var _iterator__ex2g4s = str.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>' call
      var i = checkIndexOverflow(_unary__edvuaz);
      var tmp$ret$0 = rightArcs(i, maxRad, item, digits);
      destination.e(tmp$ret$0);
    }
    var tmp_0 = plus_2(tmp, flatten(destination));
    // Inline function 'kotlin.collections.mapIndexed' call
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(str, 10));
    var index_0 = 0;
    var _iterator__ex2g4s_0 = str.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      var _unary__edvuaz_0 = index_0;
      index_0 = _unary__edvuaz_0 + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>' call
      var i_0 = checkIndexOverflow(_unary__edvuaz_0);
      var tmp$ret$3 = knightArcs(i_0, maxRad, item_0, digits, str);
      destination_0.e(tmp$ret$3);
    }
    // Inline function 'kotlin.also' call
    var this_0 = plus_2(tmp_0, flatten(destination_0));
    // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>' call
    println('Levenshtein-' + str.k() + 'x' + maxRad + ' automaton had ' + this_0.k() + ' arcs initially!');
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = makeLevFSA$lambda(monoEditBounds, maxRad, multiEditBounds);
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableSet(this_0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_1, predicate);
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>' call
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>.<anonymous>' call
    var it = pd(0, digits);
    var tmp$ret$10 = it + '/' + it;
    var initialStates = setOf('q_' + tmp$ret$10);
    var tmp2 = get_states(this_1);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate_0 = makeLevFSA$lambda_0(str, maxRad);
    // Inline function 'kotlin.apply' call
    var this_2 = toMutableSet(tmp2);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_2, predicate_0);
    var finalStates = this_2;
    // Inline function 'kotlin.also' call
    var this_3 = new ACYC_FSA(this_1, initialStates, finalStates);
    // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>.<anonymous>' call
    this_3.qz_1 = maxRad;
    this_3.rz_1 = str.k();
    this_3.yz_1 = str;
    // Inline function 'kotlin.also' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>.<anonymous>' call
    println('Levenshtein-' + str.k() + 'x' + maxRad + ' automaton had ' + this_1.k() + ' arcs after pruning!');
    return this_3;
  }
  function pd(i, digits) {
    return padStart(i.toString(), digits, _Char___init__impl__6a9atx(48));
  }
  function unpackCoordinates(_this__u8e3s4) {
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.unpackCoordinates.<anonymous>' call
    var destruct = split(substringAfter_0(_this__u8e3s4, _Char___init__impl__6a9atx(95)), charArrayOf([_Char___init__impl__6a9atx(47)]));
    // Inline function 'kotlin.collections.component1' call
    var i = destruct.q(0);
    // Inline function 'kotlin.collections.component2' call
    var j = destruct.q(1);
    return to(toInt(i), toInt(j));
  }
  function knightArcs(idx, dist, letter, digits, str) {
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = numberRangeToNumber(1, dist);
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var inductionVariable = tmp0.pk_1;
    var last = tmp0.qk_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.knightArcs.<anonymous>' call
        var d = element;
        var tmp0_0 = times_3(setOf(idx), toSet_0(numberRangeToNumber(0, dist)));
        // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
        var predicate = knightArcs$lambda(d, str, dist);
        // Inline function 'kotlin.apply' call
        var this_0 = toMutableSet(tmp0_0);
        // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
        retainAll(this_0, predicate);
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s = this_0.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.knightArcs.<anonymous>.<anonymous>' call
          var i = item.ye();
          var j = item.ze();
          var tmp$ret$2 = to_2(to_0(to_1(to(i, j), str.q(i + d | 0)), (i + d | 0) + 1 | 0), j + d | 0);
          destination_0.e(tmp$ret$2);
        }
        var list = destination_0;
        addAll(destination, list);
      }
       while (!(element === last));
    return postProc(destination, digits);
  }
  function rightArcs(idx, dist, letter, digits) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = times_5(times_3(setOf(idx + 1 | 0), toSet_0(numberRangeToNumber(0, dist))), setOf(letter));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.rightArcs.<anonymous>' call
      var i = item.ye();
      var j = item.ze();
      var s = item.nm();
      var tmp$ret$0 = to_2(to_0(to_1(to(i - 1 | 0, j), s), i), j);
      destination.e(tmp$ret$0);
    }
    return postProc(destination, digits);
  }
  function diagArcs(str, dist, digits) {
    var tmp0 = times_3(toSet_0(numberRangeToNumber(1, str.k())), toSet_0(numberRangeToNumber(1, dist)));
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = diagArcs$lambda(str);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(tmp0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.diagArcs.<anonymous>' call
      var i = item.ye();
      var j = item.ze();
      var tmp$ret$2 = to_1(to(i, j), str.q(i - 1 | 0));
      destination.e(tmp$ret$2);
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.diagArcs.<anonymous>' call
      var i_0 = item_0.ye();
      var j_0 = item_0.ze();
      var s = item_0.nm();
      var tmp$ret$5 = to_2(to_0(to_1(to(i_0 - 1 | 0, j_0 - 1 | 0), '[!=]' + s), i_0), j_0);
      destination_0.e(tmp$ret$5);
    }
    return postProc(destination_0, digits);
  }
  function upArcs(str, dist, digits) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = times_3(toSet_0(numberRangeToNumber(0, str.k())), toSet_0(numberRangeToNumber(1, dist)));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.upArcs.<anonymous>' call
      var i = item.ye();
      var j = item.ze();
      var tmp$ret$0 = to_1(to(i, j), i < str.k() ? str.q(i) : '###');
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.upArcs.<anonymous>' call
      var i_0 = item_0.ye();
      var j_0 = item_0.ze();
      var s = item_0.nm();
      var tmp$ret$3 = to_2(to_0(to_1(to(i_0, j_0 - 1 | 0), '[!=]' + s), i_0), j_0);
      destination_0.e(tmp$ret$3);
    }
    return postProc(destination_0, digits);
  }
  function postProc(_this__u8e3s4, digits) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.postProc.<anonymous>' call
      var a = item.ye();
      var b = item.ze();
      var s = item.nm();
      var d = item.ru();
      var e = item.su();
      var tmp$ret$0 = to_2(to_0(to_1(to(pd(a, digits), pd(b, digits)), s), pd(d, digits)), pd(e, digits));
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.postProc.<anonymous>' call
      var a_0 = item_0.ye();
      var b_0 = item_0.ze();
      var s_0 = item_0.nm();
      var d_0 = item_0.ru();
      var e_0 = item_0.su();
      var tmp$ret$3 = to_1(to('q_' + a_0 + '/' + b_0, s_0), 'q_' + d_0 + '/' + e_0);
      destination_0.e(tmp$ret$3);
    }
    return toSet_0(destination_0);
  }
  function makeLevFSA$lambda($monoEditBounds, $maxRad, $multiEditBounds) {
    return function (arc) {
      var tmp0 = listOf_0([unpackCoordinates(arc.km_1), unpackCoordinates(arc.mm_1)]);
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp;
        if (isInterface(tmp0, Collection)) {
          tmp = tmp0.r();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>.<anonymous>' call
          var i = element.ye();
          var j = element.ze();
          if (!((0 < j || i <= $monoEditBounds.we_1) && (j < $maxRad || i >= ($monoEditBounds.xe_1 - 2 | 0)) && (1 < j || i <= ($multiEditBounds.qk_1 + 1 | 0) || $maxRad === 1) && (j < ($maxRad - 1 | 0) || i > ($multiEditBounds.pk_1 - 1 | 0) || $maxRad === 1))) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function makeLevFSA$lambda_0($str, $maxRad) {
    return function (it) {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.makeLevFSA.<anonymous>.<anonymous>.<anonymous>' call
      var destruct = unpackCoordinates(it);
      var i = destruct.ye();
      var j = destruct.ze();
      // Inline function 'kotlin.math.absoluteValue' call
      var this_0 = ($str.k() - i | 0) + j | 0;
      return abs(this_0) <= $maxRad;
    };
  }
  function knightArcs$lambda($d, $str, $dist) {
    return function (_destruct__k2r9zo) {
      var i = _destruct__k2r9zo.ye();
      var j = _destruct__k2r9zo.ze();
      return ((i + $d | 0) + 1 | 0) <= $str.k() && (j + $d | 0) <= $dist;
    };
  }
  function diagArcs$lambda($str) {
    return function (_destruct__k2r9zo) {
      var i = _destruct__k2r9zo.ye();
      var j = _destruct__k2r9zo.ze();
      return i <= $str.k() || (i - $str.k() | 0) <= j;
    };
  }
  function get_rewriteHistory() {
    _init_properties_Normalization_kt__nz9twr();
    return rewriteHistory;
  }
  var rewriteHistory;
  function get_START_SYMBOL() {
    _init_properties_Normalization_kt__nz9twr();
    return START_SYMBOL;
  }
  var START_SYMBOL;
  function normalize(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.mutableListOf' call
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>' call
    var rewrites = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.also' call
    var this_0 = unescape(expandOr(addGlobalStartSymbol(_this__u8e3s4)));
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>.<anonymous>' call
    rewrites.e(this_0);
    // Inline function 'kotlin.also' call
    var this_1 = eliminateParametricityFromLHS(this_0);
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>.<anonymous>' call
    rewrites.e(this_1);
    // Inline function 'kotlin.also' call
    var this_2 = freeze(transformIntoCNF(generateNonterminalStubs(this_1)));
    // Inline function 'ai.hypergraph.kaliningraph.parsing.normalize.<anonymous>.<anonymous>' call
    get_rewriteHistory().b5(this_2, rewrites);
    return this_2;
  }
  function transitiveClosure_0(_this__u8e3s4, from) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = transitiveClosure$lambda(from);
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(_this__u8e3s4);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.map' call
    var this_1 = _this__u8e3s4.w16(this_0);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s = this_1.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.transitiveClosure.<anonymous>' call
      var tmp$ret$2 = item.b12();
      destination.e(tmp$ret$2);
    }
    return toSet_0(destination);
  }
  function transformIntoCNF(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    return removeUselessSymbols(terminalsToUnitProds(binarizeRHSByRightmost(elimVarUnitProds(refactorEpsilonProds(addEpsilonProduction(_this__u8e3s4))))));
  }
  function isSyntheticNonterminal(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    return !(split(_this__u8e3s4, charArrayOf([_Char___init__impl__6a9atx(46)])).k() === 1) || contains(_this__u8e3s4, '\u03B5') || _this__u8e3s4 === 'START';
  }
  function isOrganicNonterminal(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    return split(_this__u8e3s4, charArrayOf([_Char___init__impl__6a9atx(46)])).k() === 1 && !contains(_this__u8e3s4, '\u03B5') && !(_this__u8e3s4 === 'START');
  }
  function reachableSymbols(_this__u8e3s4, from) {
    from = from === VOID ? get_START_SYMBOL() : from;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.getOrPut' call
    var this_0 = get_reachability(_this__u8e3s4);
    var value = this_0.l2(from);
    var tmp;
    if (value == null) {
      // Inline function 'ai.hypergraph.kaliningraph.parsing.reachableSymbols.<anonymous>' call
      var answer = transitiveClosure_0(get_depGraph(_this__u8e3s4), setOf(from));
      this_0.b5(from, answer);
      tmp = answer;
    } else {
      tmp = value;
    }
    return tmp;
  }
  function generateNonterminalStubs(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = generateNonterminalStubs$lambda;
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(_this__u8e3s4);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.generateNonterminalStubs.<anonymous>' call
      var tmp$ret$2 = to(get_LHS(item), listOf('<' + get_LHS(item) + '>'));
      destination.e(tmp$ret$2);
    }
    return plus_2(_this__u8e3s4, addEpsilonProduction(toSet_0(destination)));
  }
  function eliminateParametricityFromLHS(_this__u8e3s4, parameters) {
    var tmp;
    if (parameters === VOID) {
      // Inline function 'kotlin.collections.flatMap' call
      var tmp0 = get_nonterminals(_this__u8e3s4);
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>' call
        var list = getParametersIn(element, _this__u8e3s4);
        addAll(destination, list);
      }
      tmp = toSet_0(destination);
    } else {
      tmp = parameters;
    }
    parameters = tmp;
    _init_properties_Normalization_kt__nz9twr();
    var tmp_0;
    if (parameters.r()) {
      tmp_0 = _this__u8e3s4;
    } else {
      var i = false;
      // Inline function 'kotlin.collections.setOf' call
      var tmp$ret$3 = emptySet();
      var _destruct__k2r9zo = to('', tmp$ret$3);
      var ntReplaced = _destruct__k2r9zo.ye();
      var ntReplacements = _destruct__k2r9zo.ze();
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination_0 = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s_0 = _this__u8e3s4.h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        var tmp$ret$4;
        $l$block: {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>' call
          var params = getParametersIn(get_LHS(element_0), _this__u8e3s4);
          if (params.r() || i) {
            tmp$ret$4 = listOf(element_0);
            break $l$block;
          }
          i = true;
          ntReplaced = get_LHS(element_0);
          // Inline function 'kotlin.collections.associateWith' call
          var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(params, 10)), 16));
          // Inline function 'kotlin.collections.associateWithTo' call
          var _iterator__ex2g4s_1 = params.h();
          while (_iterator__ex2g4s_1.i()) {
            var element_1 = _iterator__ex2g4s_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.collections.map' call
            var this_0 = get_bimap(_this__u8e3s4).a18(element_1);
            // Inline function 'kotlin.collections.mapTo' call
            var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
            var _iterator__ex2g4s_2 = this_0.h();
            while (_iterator__ex2g4s_2.i()) {
              var item = _iterator__ex2g4s_2.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$5 = item.q(0);
              destination_1.e(tmp$ret$5);
            }
            var tmp$ret$8 = toSet_0(destination_1);
            result.b5(element_1, tmp$ret$8);
          }
          var map = result;
          var tmp2 = map.o2();
          var tmp$ret$11;
          $l$block_1: {
            // Inline function 'kotlin.collections.maxByOrNull' call
            var iterator = tmp2.h();
            if (!iterator.i()) {
              tmp$ret$11 = null;
              break $l$block_1;
            }
            var maxElem = iterator.j();
            if (!iterator.i()) {
              tmp$ret$11 = maxElem;
              break $l$block_1;
            }
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
            var maxValue = maxElem.i2().k();
            do {
              var e = iterator.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
              var v = e.i2().k();
              if (compareTo(maxValue, v) < 0) {
                maxElem = e;
                maxValue = v;
              }
            }
             while (iterator.i());
            tmp$ret$11 = maxElem;
          }
          var _destruct__k2r9zo_0 = ensureNotNull(tmp$ret$11);
          // Inline function 'kotlin.collections.component1' call
          var s = _destruct__k2r9zo_0.h2();
          // Inline function 'kotlin.collections.component2' call
          var r = _destruct__k2r9zo_0.i2();
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(r, 10));
          var _iterator__ex2g4s_3 = r.h();
          while (_iterator__ex2g4s_3.i()) {
            var item_0 = _iterator__ex2g4s_3.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>' call
            // Inline function 'kotlin.also' call
            var this_1 = replace(get_LHS(element_0), '<' + s + '>', '<' + item_0 + '>');
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>.<anonymous>' call
            ntReplacements = plus_1(ntReplacements, this_1);
            var tmp_1 = this_1;
            // Inline function 'kotlin.collections.map' call
            var this_2 = get_RHS(element_0);
            // Inline function 'kotlin.collections.mapTo' call
            var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
            var _iterator__ex2g4s_4 = this_2.h();
            while (_iterator__ex2g4s_4.i()) {
              var item_1 = _iterator__ex2g4s_4.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromLHS.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$17 = replace(item_1, '<' + s + '>', '<' + item_0 + '>');
              destination_3.e(tmp$ret$17);
            }
            var tmp$ret$20 = to(tmp_1, destination_3);
            destination_2.e(tmp$ret$20);
          }
          tmp$ret$4 = destination_2;
        }
        var list_0 = tmp$ret$4;
        addAll(destination_0, list_0);
      }
      tmp_0 = eliminateParametricityFromLHS(eliminateParametricityFromRHS(toSet_0(destination_0), ntReplaced, ntReplacements));
    }
    return tmp_0;
  }
  function unescape(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.unescape.<anonymous>' call
      var l = item.ye();
      var r = item.ze();
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(r, 10));
      var _iterator__ex2g4s_0 = r.h();
      while (_iterator__ex2g4s_0.i()) {
        var item_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.unescape.<anonymous>.<anonymous>' call
        var tmp$ret$0 = stripEscapeChars(item_0);
        destination_0.e(tmp$ret$0);
      }
      var tmp$ret$3 = to(l, destination_0);
      destination.e(tmp$ret$3);
    }
    return toSet_0(destination);
  }
  function expandOr(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.expandOr.<anonymous>' call
      var tmp0 = get_RHS(element);
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$0 = emptyList();
      // Inline function 'kotlin.collections.fold' call
      var accumulator = listOf(tmp$ret$0);
      var _iterator__ex2g4s_0 = tmp0.h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.expandOr.<anonymous>.<anonymous>' call
        var acc = accumulator;
        var tmp;
        if (element_0 === '|') {
          // Inline function 'kotlin.collections.listOf' call
          var tmp$ret$1 = emptyList();
          tmp = plus(acc, listOf(tmp$ret$1));
        } else {
          tmp = plus(dropLast_0(acc, 1), listOf(plus_4(last(acc), element_0)));
        }
        accumulator = tmp;
      }
      // Inline function 'kotlin.collections.map' call
      var this_0 = accumulator;
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s_1 = this_0.h();
      while (_iterator__ex2g4s_1.i()) {
        var item = _iterator__ex2g4s_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.expandOr.<anonymous>.<anonymous>' call
        var tmp$ret$4 = to(get_LHS(element), item);
        destination_0.e(tmp$ret$4);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function addGlobalStartSymbol(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    var tmp;
    if (get_nonterminals(_this__u8e3s4).j1(get_START_SYMBOL())) {
      tmp = emptySet();
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_nonterminals(_this__u8e3s4);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.addGlobalStartSymbol.<anonymous>' call
        var tmp$ret$0 = to(get_START_SYMBOL(), listOf(item));
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    }
    return plus_2(_this__u8e3s4, tmp);
  }
  function removeUselessSymbols(_this__u8e3s4, generating, reachable) {
    generating = generating === VOID ? genSym(_this__u8e3s4) : generating;
    reachable = reachable === VOID ? reachSym(_this__u8e3s4) : reachable;
    _init_properties_Normalization_kt__nz9twr();
    var tmp = asSequence(_this__u8e3s4);
    return toSet_1(filter(tmp, removeUselessSymbols$lambda(generating, reachable)));
  }
  function terminalsToUnitProds(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    $l$1: do {
      $l$0: do {
        var tmp0 = get_nonterminalProductions($this);
        var tmp$ret$3;
        $l$block_1: {
          // Inline function 'kotlin.collections.firstOrNull' call
          var _iterator__ex2g4s = tmp0.h();
          while (_iterator__ex2g4s.i()) {
            var element = _iterator__ex2g4s.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>' call
            var tmp0_0 = get_RHS(element);
            var tmp$ret$0;
            $l$block_0: {
              // Inline function 'kotlin.collections.any' call
              var tmp;
              if (isInterface(tmp0_0, Collection)) {
                tmp = tmp0_0.r();
              } else {
                tmp = false;
              }
              if (tmp) {
                tmp$ret$0 = false;
                break $l$block_0;
              }
              var _iterator__ex2g4s_0 = tmp0_0.h();
              while (_iterator__ex2g4s_0.i()) {
                var element_0 = _iterator__ex2g4s_0.j();
                // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>.<anonymous>' call
                if (!get_nonterminals($this).j1(element_0)) {
                  tmp$ret$0 = true;
                  break $l$block_0;
                }
              }
              tmp$ret$0 = false;
            }
            if (tmp$ret$0) {
              tmp$ret$3 = element;
              break $l$block_1;
            }
          }
          tmp$ret$3 = null;
        }
        var tmp0_elvis_lhs = tmp$ret$3;
        var tmp_0;
        if (tmp0_elvis_lhs == null) {
          return $this;
        } else {
          tmp_0 = tmp0_elvis_lhs;
        }
        var mixProd = tmp_0;
        var tmp2 = get_RHS(mixProd);
        var tmp$ret$5;
        $l$block_2: {
          // Inline function 'kotlin.collections.indexOfFirst' call
          var index = 0;
          var _iterator__ex2g4s_1 = tmp2.h();
          while (_iterator__ex2g4s_1.i()) {
            var item = _iterator__ex2g4s_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>' call
            if (!get_nonterminals($this).j1(item)) {
              tmp$ret$5 = index;
              break $l$block_2;
            }
            index = index + 1 | 0;
          }
          tmp$ret$5 = -1;
        }
        var termIdx = tmp$ret$5;
        var freshName = 'F.' + get_RHS(mixProd).q(termIdx);
        // Inline function 'kotlin.also' call
        var this_0 = toMutableList(get_RHS(mixProd));
        // Inline function 'ai.hypergraph.kaliningraph.parsing.terminalsToUnitProds.<anonymous>' call
        this_0.x(termIdx, freshName);
        var freshRHS = this_0;
        var newProd = to(freshName, listOf(get_RHS(mixProd).q(termIdx)));
        var newGrammar = plus_1(plus_1(minus($this, mixProd), to(get_LHS(mixProd), freshRHS)), newProd);
        var tmp_1;
        if (equals($this, newGrammar)) {
          tmp_1 = $this;
        } else {
          $this = freeze(newGrammar);
          continue $l$0;
        }
        return tmp_1;
      }
       while (false);
    }
     while (true);
  }
  function binarizeRHSByRightmost(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    $l$1: do {
      $l$0: do {
        var tmp0 = $this;
        var tmp$ret$1;
        $l$block: {
          // Inline function 'kotlin.collections.firstOrNull' call
          var _iterator__ex2g4s = tmp0.h();
          while (_iterator__ex2g4s.i()) {
            var element = _iterator__ex2g4s.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.binarizeRHSByRightmost.<anonymous>' call
            if (get_RHS(element).k() > 2) {
              tmp$ret$1 = element;
              break $l$block;
            }
          }
          tmp$ret$1 = null;
        }
        var tmp0_elvis_lhs = tmp$ret$1;
        var tmp;
        if (tmp0_elvis_lhs == null) {
          return $this;
        } else {
          tmp = tmp0_elvis_lhs;
        }
        var longProd = tmp;
        var freshName = joinToString(takeLast(get_RHS(longProd), 2), '.');
        var newProd = to(freshName, takeLast(get_RHS(longProd), 2));
        var shortProd = to(get_LHS(longProd), plus_4(dropLast_0(get_RHS(longProd), 2), freshName));
        var newGrammar = plus_1(plus_1(minus($this, longProd), shortProd), newProd);
        var tmp_0;
        if (equals($this, newGrammar)) {
          tmp_0 = $this;
        } else {
          $this = newGrammar;
          continue $l$0;
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function elimVarUnitProds(_this__u8e3s4, toVisit, vars, toElim) {
    toVisit = toVisit === VOID ? get_nonterminals(_this__u8e3s4) : toVisit;
    vars = vars === VOID ? get_nonterminals(_this__u8e3s4) : vars;
    toElim = toElim === VOID ? firstOrNull(toVisit) : toElim;
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    var toVisit_0 = toVisit;
    var vars_0 = vars;
    var toElim_0 = toElim;
    $l$1: do {
      $l$0: do {
        if (toElim_0 == null) {
          var tmp0 = $this;
          // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
          var predicate = elimVarUnitProds$lambda(vars_0);
          // Inline function 'kotlin.apply' call
          var this_0 = toMutableSet(tmp0);
          // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
          retainAll(this_0, predicate);
          return this_0;
        }
        var tmp2 = $this;
        // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
        var predicate_0 = elimVarUnitProds$lambda_0(toElim_0);
        // Inline function 'kotlin.apply' call
        var this_1 = toMutableSet(tmp2);
        // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
        retainAll(this_1, predicate_0);
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
        var _iterator__ex2g4s = this_1.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.elimVarUnitProds.<anonymous>' call
          var tmp$ret$4 = get_LHS(item);
          destination.e(tmp$ret$4);
        }
        var varsThatMapToMe = toSet_0(destination);
        var tmp6 = $this;
        // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
        var predicate_1 = elimVarUnitProds$lambda_1(toElim_0);
        // Inline function 'kotlin.apply' call
        var this_2 = toMutableSet(tmp6);
        // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
        retainAll(this_2, predicate_1);
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
        var _iterator__ex2g4s_0 = this_2.h();
        while (_iterator__ex2g4s_0.i()) {
          var item_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.elimVarUnitProds.<anonymous>' call
          var tmp$ret$9 = get_RHS(item_0);
          destination_0.e(tmp$ret$9);
        }
        var thingsIMapTo = toSet_0(destination_0);
        // Inline function 'kotlin.collections.fold' call
        var accumulator = $this;
        var _iterator__ex2g4s_1 = times_3(varsThatMapToMe, thingsIMapTo).h();
        while (_iterator__ex2g4s_1.i()) {
          var element = _iterator__ex2g4s_1.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.elimVarUnitProds.<anonymous>' call
          var g = accumulator;
          accumulator = plus_1(g, element);
        }
        var tmp0_0 = accumulator;
        var tmp1 = toSet_0(drop_0(toVisit_0, 1));
        var tmp2_0 = vars_0;
        var tmp4 = firstOrNull(tmp1);
        $this = tmp0_0;
        toVisit_0 = tmp1;
        vars_0 = tmp2_0;
        toElim_0 = tmp4;
        continue $l$0;
      }
       while (false);
    }
     while (true);
  }
  function refactorEpsilonProds(_this__u8e3s4, nlbls) {
    nlbls = nlbls === VOID ? nullableNonterminals(_this__u8e3s4) : nlbls;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = plus_2(_this__u8e3s4, setOf(to(get_START_SYMBOL(), listOf_0([get_START_SYMBOL(), '\u03B5']))));
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorEpsilonProds.<anonymous>' call
      var tmp;
      var tmp0_0 = get_RHS(element);
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var tmp_0;
        if (isInterface(tmp0_0, Collection)) {
          tmp_0 = tmp0_0.r();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
        var _iterator__ex2g4s_0 = tmp0_0.h();
        while (_iterator__ex2g4s_0.i()) {
          var element_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorEpsilonProds.<anonymous>.<anonymous>' call
          if (nlbls.j1(element_0)) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
        }
        tmp$ret$0 = false;
      }
      if (tmp$ret$0) {
        tmp = allSubSeq(element, nlbls);
      } else {
        tmp = listOf(element);
      }
      var list = tmp;
      addAll(destination, list);
    }
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination_0 = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_1 = destination.h();
    while (_iterator__ex2g4s_1.i()) {
      var element_1 = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.refactorEpsilonProds.<anonymous>' call
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!get_RHS(element_1).r()) {
        destination_0.e(element_1);
      }
    }
    return toSet_0(destination_0);
  }
  function addEpsilonProduction(_this__u8e3s4) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.filterNot' call
    var tmp0 = get_terminalUnitProductions(_this__u8e3s4);
    // Inline function 'kotlin.collections.filterNotTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.addEpsilonProduction.<anonymous>' call
      if (!contains(pretty(element), '\u03B5')) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.addEpsilonProduction.<anonymous>' call
      var tmp$ret$3 = get_LHS(item);
      destination_0.e(tmp$ret$3);
    }
    // Inline function 'kotlin.collections.fold' call
    var accumulator = _this__u8e3s4;
    var _iterator__ex2g4s_1 = toSet_0(destination_0).h();
    while (_iterator__ex2g4s_1.i()) {
      var element_0 = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.addEpsilonProduction.<anonymous>' call
      var acc = accumulator;
      accumulator = plus_1(plus_1(acc, to(element_0, listOf_0([element_0, '\u03B5+']))), to(element_0, listOf_0(['\u03B5+', element_0])));
    }
    var tmp$ret$7 = accumulator;
    return plus_1(plus_1(tmp$ret$7, to('\u03B5+', listOf_0(['\u03B5+', '\u03B5+']))), to('\u03B5+', listOf('\u03B5')));
  }
  function getParametersIn(_this__u8e3s4, cfg) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_unitProductions(cfg);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.getParametersIn.<anonymous>' call
      var tmp$ret$0 = item.we_1;
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination_0 = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var element = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.getParametersIn.<anonymous>' call
      if (contains(_this__u8e3s4, '<' + element + '>')) {
        destination_0.e(element);
      }
    }
    return destination_0;
  }
  function eliminateParametricityFromRHS(_this__u8e3s4, ntReplaced, ntReplacements) {
    _init_properties_Normalization_kt__nz9twr();
    var tmp;
    if (ntReplacements.r()) {
      tmp = _this__u8e3s4;
    } else {
      // Inline function 'kotlin.collections.flatMap' call
      // Inline function 'kotlin.collections.flatMapTo' call
      var destination = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s = _this__u8e3s4.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>' call
        var tmp_0;
        var tmp0 = get_RHS(element);
        var tmp$ret$0;
        $l$block_0: {
          // Inline function 'kotlin.collections.none' call
          var tmp_1;
          if (isInterface(tmp0, Collection)) {
            tmp_1 = tmp0.r();
          } else {
            tmp_1 = false;
          }
          if (tmp_1) {
            tmp$ret$0 = true;
            break $l$block_0;
          }
          var _iterator__ex2g4s_0 = tmp0.h();
          while (_iterator__ex2g4s_0.i()) {
            var element_0 = _iterator__ex2g4s_0.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>.<anonymous>' call
            if (contains(element_0, ntReplaced)) {
              tmp$ret$0 = false;
              break $l$block_0;
            }
          }
          tmp$ret$0 = true;
        }
        if (tmp$ret$0) {
          tmp_0 = listOf(element);
        } else {
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(ntReplacements, 10));
          var _iterator__ex2g4s_1 = ntReplacements.h();
          while (_iterator__ex2g4s_1.i()) {
            var item = _iterator__ex2g4s_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>.<anonymous>' call
            var tmp_2 = get_LHS(element);
            // Inline function 'kotlin.collections.map' call
            var this_0 = get_RHS(element);
            // Inline function 'kotlin.collections.mapTo' call
            var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
            var _iterator__ex2g4s_2 = this_0.h();
            while (_iterator__ex2g4s_2.i()) {
              var item_0 = _iterator__ex2g4s_2.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.eliminateParametricityFromRHS.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$2 = item_0 === ntReplaced ? item : item_0;
              destination_1.e(tmp$ret$2);
            }
            var tmp$ret$5 = to(tmp_2, destination_1);
            destination_0.e(tmp$ret$5);
          }
          tmp_0 = destination_0;
        }
        var list = tmp_0;
        addAll(destination, list);
      }
      tmp = toSet_0(destination);
    }
    return tmp;
  }
  function genSym(_this__u8e3s4, from) {
    var tmp;
    if (from === VOID) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_terminalUnitProductions(_this__u8e3s4);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.genSym.<anonymous>' call
        var tmp$ret$0 = get_LHS(item);
        destination.e(tmp$ret$0);
      }
      tmp = toSet_0(destination);
    } else {
      tmp = from;
    }
    from = tmp;
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.mutableSetOf' call
    var allGenerating = LinkedHashSet_init_$Create$();
    var nextGenerating = toMutableSet(from);
    $l$1: do {
      $l$0: do {
        var t = first(nextGenerating);
        nextGenerating.x3(t);
        // Inline function 'kotlin.collections.plusAssign' call
        allGenerating.e(t);
        var tmp0_elvis_lhs = get_bimap(_this__u8e3s4).x17().l2(t);
        // Inline function 'kotlin.collections.filter' call
        var tmp0 = tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
        // Inline function 'kotlin.collections.filterTo' call
        var destination_0 = ArrayList_init_$Create$_0();
        var _iterator__ex2g4s_0 = tmp0.h();
        while (_iterator__ex2g4s_0.i()) {
          var element = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.genSym.<anonymous>' call
          if (!allGenerating.j1(element) && !nextGenerating.j1(element)) {
            destination_0.e(element);
          }
        }
        // Inline function 'kotlin.collections.plusAssign' call
        addAll(nextGenerating, destination_0);
      }
       while (false);
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp$ret$7 = !nextGenerating.r();
    }
     while (tmp$ret$7);
    return allGenerating;
  }
  function reachSym(_this__u8e3s4, from) {
    from = from === VOID ? get_START_SYMBOL() : from;
    _init_properties_Normalization_kt__nz9twr();
    var allReachable = mutableSetOf([from]);
    var nextReachable = mutableSetOf([from]);
    $l$1: do {
      $l$0: do {
        var t = first(nextReachable);
        nextReachable.x3(t);
        // Inline function 'kotlin.collections.plusAssign' call
        allReachable.e(t);
        var tmp0_elvis_lhs = get_bimap(_this__u8e3s4).y17().l2(t);
        // Inline function 'kotlin.collections.filter' call
        var tmp0 = tmp0_elvis_lhs == null ? emptyList() : tmp0_elvis_lhs;
        // Inline function 'kotlin.collections.filterTo' call
        var destination = ArrayList_init_$Create$_0();
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.reachSym.<anonymous>' call
          if (!allReachable.j1(element) && !nextReachable.j1(element)) {
            destination.e(element);
          }
        }
        // Inline function 'kotlin.collections.plusAssign' call
        addAll(nextReachable, destination);
      }
       while (false);
      // Inline function 'kotlin.collections.isNotEmpty' call
      var tmp$ret$3 = !nextReachable.r();
    }
     while (tmp$ret$3);
    return allReachable;
  }
  function nullableNonterminals(_this__u8e3s4, nbls, nnts) {
    nbls = nbls === VOID ? setOf('\u03B5') : nbls;
    var tmp;
    if (nnts === VOID) {
      // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
      var predicate = nullableNonterminals$lambda(nbls);
      // Inline function 'kotlin.apply' call
      var this_0 = toMutableSet(_this__u8e3s4);
      // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
      retainAll(this_0, predicate);
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.nullableNonterminals.<anonymous>' call
        var tmp$ret$2 = get_LHS(item);
        destination.e(tmp$ret$2);
      }
      tmp = toSet_0(destination);
    } else {
      tmp = nnts;
    }
    nnts = tmp;
    _init_properties_Normalization_kt__nz9twr();
    var $this = _this__u8e3s4;
    var nbls_0 = nbls;
    var nnts_0 = nnts;
    $l$1: do {
      $l$0: do {
        var tmp_0;
        if (equals(nnts_0, minus(nbls_0, '\u03B5'))) {
          tmp_0 = nnts_0;
        } else {
          var tmp0 = $this;
          var tmp1 = plus_2(nnts_0, nbls_0);
          // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
          var predicate_0 = nullableNonterminals$lambda_0(tmp1);
          // Inline function 'kotlin.apply' call
          var this_1 = toMutableSet(tmp0);
          // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
          retainAll(this_1, predicate_0);
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
          var _iterator__ex2g4s_0 = this_1.h();
          while (_iterator__ex2g4s_0.i()) {
            var item_0 = _iterator__ex2g4s_0.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.nullableNonterminals.<anonymous>' call
            var tmp$ret$7 = get_LHS(item_0);
            destination_0.e(tmp$ret$7);
          }
          var tmp3 = toSet_0(destination_0);
          $this = tmp0;
          nbls_0 = tmp1;
          nnts_0 = tmp3;
          continue $l$0;
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function allSubSeq(_this__u8e3s4, nullables) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = get_indices(get_RHS(_this__u8e3s4));
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var inductionVariable = tmp0.pk_1;
    var last = tmp0.qk_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.allSubSeq.<anonymous>' call
        var it = element;
        if (nullables.j1(get_RHS(_this__u8e3s4).q(it))) {
          destination.e(element);
        }
      }
       while (!(element === last));
    // Inline function 'kotlin.collections.map' call
    var this_0 = toSet_1(powerset(destination));
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.allSubSeq.<anonymous>' call
      var tmp$ret$3 = to(get_LHS(_this__u8e3s4), drop_1(get_RHS(_this__u8e3s4), nullables, item));
      destination_0.e(tmp$ret$3);
    }
    return toSet_0(destination_0);
  }
  function drop_1(_this__u8e3s4, nullables, keep) {
    _init_properties_Normalization_kt__nz9twr();
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var destination = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.drop.<anonymous>' call
      var i = checkIndexOverflow(_unary__edvuaz);
      var tmp0_safe_receiver = nullables.j1(item) && !keep.j1(i) ? null : nullables.j1(item) && keep.j1(i) ? item : item;
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>.<anonymous>' call
        destination.e(tmp0_safe_receiver);
      }
    }
    return destination;
  }
  function elimVarUnitProds$isVariableUnitProd(_this__u8e3s4, vars) {
    return get_RHS(_this__u8e3s4).k() === 1 && vars.j1(get_RHS(_this__u8e3s4).q(0));
  }
  function transitiveClosure$lambda($from) {
    return function (it) {
      return $from.j1(it.b12());
    };
  }
  function generateNonterminalStubs$lambda(it) {
    _init_properties_Normalization_kt__nz9twr();
    return isOrganicNonterminal(get_LHS(it));
  }
  function removeUselessSymbols$lambda($generating, $reachable) {
    return function (_destruct__k2r9zo) {
      var s = _destruct__k2r9zo.ye();
      return $generating.j1(s) && $reachable.j1(s);
    };
  }
  function elimVarUnitProds$lambda($vars) {
    return function (it) {
      return !elimVarUnitProds$isVariableUnitProd(it, $vars);
    };
  }
  function elimVarUnitProds$lambda_0($toElim) {
    return function (it) {
      return get_RHS(it).k() === 1 && get_RHS(it).q(0) === $toElim;
    };
  }
  function elimVarUnitProds$lambda_1($toElim) {
    return function (it) {
      return get_LHS(it) === $toElim;
    };
  }
  function nullableNonterminals$lambda($nbls) {
    return function (it) {
      return $nbls.g2(get_RHS(it));
    };
  }
  function nullableNonterminals$lambda_0($tmp1) {
    return function (it) {
      return $tmp1.g2(get_RHS(it));
    };
  }
  var properties_initialized_Normalization_kt_pqmvir;
  function _init_properties_Normalization_kt__nz9twr() {
    if (!properties_initialized_Normalization_kt_pqmvir) {
      properties_initialized_Normalization_kt_pqmvir = true;
      rewriteHistory = new LRUCache();
      START_SYMBOL = 'START';
    }
  }
  function plus_9(_this__u8e3s4, other) {
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = plus_2(_this__u8e3s4.m2(), other.m2());
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.plus.<anonymous>' call
      var tmp0_elvis_lhs = _this__u8e3s4.l2(element);
      var tmp = tmp0_elvis_lhs == null ? numberRangeToNumber(0, 0) : tmp0_elvis_lhs;
      var tmp1_elvis_lhs = other.l2(element);
      var tmp$ret$0 = merge(tmp, tmp1_elvis_lhs == null ? numberRangeToNumber(0, 0) : tmp1_elvis_lhs);
      result.b5(element, tmp$ret$0);
    }
    return result;
  }
  function merge(_this__u8e3s4, other) {
    var tmp0 = _this__u8e3s4.q1();
    // Inline function 'kotlin.comparisons.minOf' call
    var b = other.pk_1;
    var tmp = Math.min(tmp0, b);
    var tmp2 = _this__u8e3s4.qk_1;
    // Inline function 'kotlin.comparisons.maxOf' call
    var b_0 = other.qk_1;
    var tmp$ret$1 = Math.max(tmp2, b_0);
    return numberRangeToNumber(tmp, tmp$ret$1);
  }
  function times(_this__u8e3s4, other) {
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = plus_2(_this__u8e3s4.m2(), other.m2());
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.times.<anonymous>' call
      var tmp0_elvis_lhs = _this__u8e3s4.l2(element);
      var tmp = tmp0_elvis_lhs == null ? numberRangeToNumber(0, 0) : tmp0_elvis_lhs;
      var tmp1_elvis_lhs = other.l2(element);
      var tmp$ret$0 = join_0(tmp, tmp1_elvis_lhs == null ? numberRangeToNumber(0, 0) : tmp1_elvis_lhs);
      result.b5(element, tmp$ret$0);
    }
    return result;
  }
  function join_0(_this__u8e3s4, other) {
    return numberRangeToNumber(_this__u8e3s4.pk_1 + other.pk_1 | 0, _this__u8e3s4.qk_1 + other.qk_1 | 0);
  }
  var segmentationCache;
  function get_segmentationCacheHTML() {
    _init_properties_Segmentation_kt__hkpjni();
    return segmentationCacheHTML;
  }
  var segmentationCacheHTML;
  function illegalWordIndices(_this__u8e3s4, $this, cfg) {
    // Inline function 'kotlin.collections.mapIndexedNotNull' call
    var tmp0 = tokenizeByWhitespace(_this__u8e3s4);
    // Inline function 'kotlin.collections.mapIndexedNotNullTo' call
    var destination = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Companion.illegalWordIndices.<anonymous>' call
      var idx = checkIndexOverflow(_unary__edvuaz);
      var tmp0_safe_receiver = !get_terminals(cfg).j1(item) ? idx : null;
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.collections.mapIndexedNotNullTo.<anonymous>.<anonymous>' call
        destination.e(tmp0_safe_receiver);
      }
    }
    return destination;
  }
  function Companion_1() {
  }
  protoOf(Companion_1).c19 = function (cfg, line) {
    var tokens = tokenizeByWhitespace(line);
    var tmp;
    if (tokens.j1('_')) {
      tmp = to(emptyList(), emptyList());
    } else if (contains_1(get_language(cfg), line)) {
      tmp = to(emptyList(), emptyList());
    } else if (tokens.k() < 4) {
      tmp = to(emptyList(), toList(get_indices(tokens)));
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = parseInvalidWithMaximalFragments(cfg, line);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Companion.build.<anonymous>' call
        var tmp$ret$0 = item.g19_1;
        destination.e(tmp$ret$0);
      }
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var destination_0 = ArrayList_init_$Create$_0();
      var _iterator__ex2g4s_0 = destination.h();
      while (_iterator__ex2g4s_0.i()) {
        var element = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Companion.build.<anonymous>' call
        if (2 < (element.qk_1 - element.pk_1 | 0)) {
          destination_0.e(element);
        }
      }
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Companion.build.<anonymous>' call
      var it = flatten(destination_0);
      // Inline function 'kotlin.collections.filterNot' call
      var tmp0 = get_indices(tokens);
      // Inline function 'kotlin.collections.filterNotTo' call
      var destination_1 = ArrayList_init_$Create$_0();
      var inductionVariable = tmp0.pk_1;
      var last = tmp0.qk_1;
      if (inductionVariable <= last)
        do {
          var element_0 = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.Companion.build.<anonymous>.<anonymous>' call
          var i = element_0;
          if (!it.j1(i)) {
            destination_1.e(element_0);
          }
        }
         while (!(element_0 === last));
      tmp = to(it, destination_1);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.Companion.build.<anonymous>' call
    var it_0 = tmp;
    return new Segmentation(it_0.we_1, it_0.xe_1, illegalWordIndices(line, Companion_instance_1, cfg), line);
  };
  var Companion_instance_1;
  function Companion_getInstance_2() {
    return Companion_instance_1;
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.k19_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).oc = function (a, b) {
    return this.k19_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).n3 = function () {
    return this.k19_1;
  };
  protoOf(sam$kotlin_Comparator$0_0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_0).hashCode = function () {
    return hashCode(this.n3());
  };
  function sam$kotlin_Comparator$0_1(function_0) {
    this.l19_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_1).oc = function (a, b) {
    return this.l19_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_1).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_1).n3 = function () {
    return this.l19_1;
  };
  protoOf(sam$kotlin_Comparator$0_1).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_1).hashCode = function () {
    return hashCode(this.n3());
  };
  function Segmentation$toColorfulHTMLString$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.toColorfulHTMLString.<anonymous>' call
    var tmp = a.we_1.pk_1;
    // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.toColorfulHTMLString.<anonymous>' call
    var tmp$ret$1 = b.we_1.pk_1;
    return compareValues(tmp, tmp$ret$1);
  }
  function Segmentation$mergeContiguousRanges$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.mergeContiguousRanges.<anonymous>' call
    var tmp = a.pk_1;
    // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.mergeContiguousRanges.<anonymous>' call
    var tmp$ret$1 = b.pk_1;
    return compareValues(tmp, tmp$ret$1);
  }
  function Segmentation(valid, invalid, illegal, line) {
    valid = valid === VOID ? emptyList() : valid;
    invalid = invalid === VOID ? emptyList() : invalid;
    illegal = illegal === VOID ? emptyList() : illegal;
    line = line === VOID ? '' : line;
    this.m19_1 = valid;
    this.n19_1 = invalid;
    this.o19_1 = illegal;
    this.p19_1 = line;
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.m19_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.parseableRegions.<anonymous>' call
      var tmp$ret$0 = numberRangeToNumber(item, item);
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.map' call
    var this_1 = this.t19(destination);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s_0 = this_1.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.parseableRegions.<anonymous>' call
      var tmp$ret$3 = this.u19(item_0, this.p19_1);
      destination_0.e(tmp$ret$3);
    }
    tmp.q19_1 = destination_0;
    var tmp_0 = this;
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = this.n19_1;
    // Inline function 'kotlin.collections.filterTo' call
    var destination_1 = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_1 = tmp0.h();
    while (_iterator__ex2g4s_1.i()) {
      var element = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.unparseableRegions.<anonymous>' call
      if (!this.o19_1.j1(element)) {
        destination_1.e(element);
      }
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(destination_1, 10));
    var _iterator__ex2g4s_2 = destination_1.h();
    while (_iterator__ex2g4s_2.i()) {
      var item_1 = _iterator__ex2g4s_2.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.unparseableRegions.<anonymous>' call
      var tmp$ret$9 = numberRangeToNumber(item_1, item_1);
      destination_2.e(tmp$ret$9);
    }
    // Inline function 'kotlin.collections.map' call
    var this_2 = this.t19(destination_2);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
    var _iterator__ex2g4s_3 = this_2.h();
    while (_iterator__ex2g4s_3.i()) {
      var item_2 = _iterator__ex2g4s_3.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.unparseableRegions.<anonymous>' call
      var tmp$ret$12 = this.u19(item_2, this.p19_1);
      destination_3.e(tmp$ret$12);
    }
    tmp_0.r19_1 = destination_3;
    var tmp_1 = this;
    // Inline function 'kotlin.collections.map' call
    var this_3 = this.o19_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination_4 = ArrayList_init_$Create$(collectionSizeOrDefault(this_3, 10));
    var _iterator__ex2g4s_4 = this_3.h();
    while (_iterator__ex2g4s_4.i()) {
      var item_3 = _iterator__ex2g4s_4.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.illegalRegions.<anonymous>' call
      var tmp$ret$15 = numberRangeToNumber(item_3, item_3);
      destination_4.e(tmp$ret$15);
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_5 = ArrayList_init_$Create$(collectionSizeOrDefault(destination_4, 10));
    var _iterator__ex2g4s_5 = destination_4.h();
    while (_iterator__ex2g4s_5.i()) {
      var item_4 = _iterator__ex2g4s_5.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.illegalRegions.<anonymous>' call
      var tmp$ret$18 = this.u19(item_4, this.p19_1);
      destination_5.e(tmp$ret$18);
    }
    tmp_1.s19_1 = destination_5;
  }
  protoOf(Segmentation).v19 = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.r19_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.toColorfulHTMLString.<anonymous>' call
      var tmp$ret$0 = to(item, 'orange');
      destination.e(tmp$ret$0);
    }
    var tmp = destination;
    // Inline function 'kotlin.collections.map' call
    var this_1 = this.s19_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s_0 = this_1.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.toColorfulHTMLString.<anonymous>' call
      var tmp$ret$3 = to(item_0, 'red');
      destination_0.e(tmp$ret$3);
    }
    var unsoundRegions = plus(tmp, destination_0);
    if (unsoundRegions.r())
      return escapeHTML(this.p19_1);
    // Inline function 'kotlin.collections.map' call
    var this_2 = this.q19_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
    var _iterator__ex2g4s_1 = this_2.h();
    while (_iterator__ex2g4s_1.i()) {
      var item_1 = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.toColorfulHTMLString.<anonymous>' call
      var tmp$ret$6 = to(item_1, 'other');
      destination_1.e(tmp$ret$6);
    }
    // Inline function 'kotlin.collections.sortedBy' call
    var this_3 = plus(destination_1, unsoundRegions);
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp_0 = Segmentation$toColorfulHTMLString$lambda;
    var tmp$ret$9 = new sam$kotlin_Comparator$0_0(tmp_0);
    var regions = sortedWith(this_3, tmp$ret$9);
    var coloredLine = StringBuilder_init_$Create$().d8('<u>');
    // Inline function 'kotlin.collections.forEach' call
    var _iterator__ex2g4s_2 = regions.h();
    while (_iterator__ex2g4s_2.i()) {
      var element = _iterator__ex2g4s_2.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.toColorfulHTMLString.<anonymous>' call
      var range = element.ye();
      var color = element.ze();
      coloredLine.d8('<span class="' + color + '">' + escapeHTML(substring(this.p19_1, range)) + '<\/span>');
    }
    coloredLine.d8('<\/u>');
    return coloredLine.toString();
  };
  protoOf(Segmentation).t19 = function (_this__u8e3s4) {
    // Inline function 'kotlin.collections.sortedBy' call
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = Segmentation$mergeContiguousRanges$lambda;
    var tmp$ret$0 = new sam$kotlin_Comparator$0_1(tmp);
    var tmp3 = sortedWith(_this__u8e3s4, tmp$ret$0);
    // Inline function 'kotlin.collections.mutableListOf' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp3.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.mergeContiguousRanges.<anonymous>' call
      var acc = accumulator;
      if (acc.r())
        acc.e(element);
      else if ((last(acc).qk_1 + 1 | 0) >= element.pk_1) {
        acc.x(get_lastIndex(acc), numberRangeToNumber(last(acc).pk_1, element.qk_1));
      } else
        acc.e(element);
      accumulator = acc;
    }
    return accumulator;
  };
  protoOf(Segmentation).u19 = function (_this__u8e3s4, str) {
    // Inline function 'kotlin.text.toRegex' call
    // Inline function 'kotlin.text.split' call
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = Regex_init_$Create$('\\s+').yb(str, 0);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.charIndicesOfWordsInString.<anonymous>' call
      // Inline function 'kotlin.text.isNotEmpty' call
      if (charSequenceLength(element) > 0) {
        destination.e(element);
      }
    }
    var wordTokens = destination;
    // Inline function 'kotlin.text.toRegex' call
    // Inline function 'kotlin.text.split' call
    var whitespaceTokens = Regex_init_$Create$('\\S+').yb(str, 0);
    var allTokens = zip(wordTokens, whitespaceTokens);
    var polarity = startsWith(str, first_0(wordTokens));
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination_0 = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_0 = allTokens.h();
    while (_iterator__ex2g4s_0.i()) {
      var element_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.charIndicesOfWordsInString.<anonymous>' call
      var list = polarity ? listOf_0([element_0.we_1, element_0.xe_1]) : listOf_0([element_0.xe_1, element_0.we_1]);
      addAll(destination_0, list);
    }
    var interwoven = destination_0;
    var s = imul(_this__u8e3s4.q1(), 2);
    var l = imul(_this__u8e3s4.qk_1, 2);
    var _destruct__k2r9zo = to(s, l + 1 | 0);
    var startIdx = _destruct__k2r9zo.ye();
    var endIdx = _destruct__k2r9zo.ze();
    var adjust = startIdx === 0 ? 0 : 1;
    // Inline function 'kotlin.collections.sumOf' call
    var sum = 0;
    var _iterator__ex2g4s_1 = interwoven.f2(0, startIdx).h();
    while (_iterator__ex2g4s_1.i()) {
      var element_1 = _iterator__ex2g4s_1.j();
      var tmp = sum;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.charIndicesOfWordsInString.<anonymous>' call
      sum = tmp + element_1.length | 0;
    }
    var startOffset = sum + adjust | 0;
    // Inline function 'kotlin.collections.sumOf' call
    var sum_0 = 0;
    var _iterator__ex2g4s_2 = interwoven.f2(0, endIdx + 1 | 0).h();
    while (_iterator__ex2g4s_2.i()) {
      var element_2 = _iterator__ex2g4s_2.j();
      var tmp_0 = sum_0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Segmentation.charIndicesOfWordsInString.<anonymous>' call
      sum_0 = tmp_0 + element_2.length | 0;
    }
    var endOffset = sum_0;
    return numberRangeToNumber(startOffset, coerceAtMost(endOffset, str.length - 1 | 0));
  };
  protoOf(Segmentation).toString = function () {
    return 'Segmentation(valid=' + toString_0(this.m19_1) + ', invalid=' + toString_0(this.n19_1) + ', illegal=' + toString_0(this.o19_1) + ', line=' + this.p19_1 + ')';
  };
  protoOf(Segmentation).hashCode = function () {
    var result = hashCode(this.m19_1);
    result = imul(result, 31) + hashCode(this.n19_1) | 0;
    result = imul(result, 31) + hashCode(this.o19_1) | 0;
    result = imul(result, 31) + getStringHashCode(this.p19_1) | 0;
    return result;
  };
  protoOf(Segmentation).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Segmentation))
      return false;
    var tmp0_other_with_cast = other instanceof Segmentation ? other : THROW_CCE();
    if (!equals(this.m19_1, tmp0_other_with_cast.m19_1))
      return false;
    if (!equals(this.n19_1, tmp0_other_with_cast.n19_1))
      return false;
    if (!equals(this.o19_1, tmp0_other_with_cast.o19_1))
      return false;
    if (!(this.p19_1 === tmp0_other_with_cast.p19_1))
      return false;
    return true;
  };
  function preparseParseableLines(cfg, editorText) {
    _init_properties_Segmentation_kt__hkpjni();
    var tmp = lineSequence(editorText);
    // Inline function 'kotlin.sequences.forEach' call
    var _iterator__ex2g4s = filter(tmp, preparseParseableLines$lambda).h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.preparseParseableLines.<anonymous>' call
      var tmp$ret$3;
      $l$block: {
        // Inline function 'kotlin.text.takeWhile' call
        var inductionVariable = 0;
        var last = element.length;
        if (inductionVariable < last)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'ai.hypergraph.kaliningraph.parsing.preparseParseableLines.<anonymous>.<anonymous>' call
            var it = charSequenceGet(element, index);
            if (!isWhitespace(it)) {
              // Inline function 'kotlin.text.substring' call
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$3 = element.substring(0, index);
              break $l$block;
            }
          }
           while (inductionVariable < last);
        tmp$ret$3 = element;
      }
      var leadingWhiteSpace = tmp$ret$3;
      var tmp$ret$7;
      $l$block_0: {
        // Inline function 'kotlin.text.takeLastWhile' call
        var inductionVariable_0 = get_lastIndex_0(element);
        if (0 <= inductionVariable_0)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + -1 | 0;
            // Inline function 'ai.hypergraph.kaliningraph.parsing.preparseParseableLines.<anonymous>.<anonymous>' call
            var it_0 = charSequenceGet(element, index_0);
            if (!isWhitespace(it_0)) {
              // Inline function 'kotlin.text.substring' call
              var startIndex = index_0 + 1 | 0;
              // Inline function 'kotlin.js.asDynamic' call
              tmp$ret$7 = element.substring(startIndex);
              break $l$block_0;
            }
          }
           while (0 <= inductionVariable_0);
        tmp$ret$7 = element;
      }
      var trailingWhiteSpace = tmp$ret$7;
      var tmp4 = get_segmentationCacheHTML();
      // Inline function 'kotlin.collections.getOrPut' call
      var key = hashCode(cfg) + getStringHashCode(element) | 0;
      var value = tmp4.l2(key);
      var tmp_0;
      if (value == null) {
        // Inline function 'ai.hypergraph.kaliningraph.parsing.preparseParseableLines.<anonymous>.<anonymous>' call
        var tmp_1 = Companion_instance_1;
        // Inline function 'kotlin.text.trim' call
        var tmp$ret$8 = toString_0(trim(isCharSequence(element) ? element : THROW_CCE()));
        // Inline function 'kotlin.let' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.preparseParseableLines.<anonymous>.<anonymous>.<anonymous>' call
        var answer = leadingWhiteSpace + tmp_1.c19(cfg, tmp$ret$8).v19() + trailingWhiteSpace;
        tmp4.b5(key, answer);
        tmp_0 = answer;
      } else {
        tmp_0 = value;
      }
    }
  }
  function preparseParseableLines$lambda(it) {
    _init_properties_Segmentation_kt__hkpjni();
    var tmp;
    // Inline function 'kotlin.text.isNotBlank' call
    if (!isBlank(it)) {
      tmp = !containsHole(it);
    } else {
      tmp = false;
    }
    return tmp;
  }
  var properties_initialized_Segmentation_kt_gsmdzw;
  function _init_properties_Segmentation_kt__hkpjni() {
    if (!properties_initialized_Segmentation_kt_gsmdzw) {
      properties_initialized_Segmentation_kt_gsmdzw = true;
      // Inline function 'kotlin.collections.mutableMapOf' call
      segmentationCache = LinkedHashMap_init_$Create$();
      // Inline function 'kotlin.collections.mutableMapOf' call
      segmentationCacheHTML = LinkedHashMap_init_$Create$();
    }
  }
  var maxTrees;
  function _get_choice__ksxcom($this) {
    var tmp0 = $this.g11_1;
    // Inline function 'kotlin.getValue' call
    choice$factory();
    return tmp0.i2();
  }
  function newDecoder($this, i) {
    if ($this.t10_1.r())
      return $this.w19();
    var tmp0 = $this.x19();
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var index = 0;
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.newDecoder.<anonymous>' call
        if (item.we_1.hr(i) <= 0 && i.hr(item.xe_1) <= 0) {
          tmp$ret$1 = index;
          break $l$block;
        }
        index = index + 1 | 0;
      }
      tmp$ret$1 = -1;
    }
    var t = tmp$ret$1;
    var _destruct__k2r9zo = $this.t10_1.q(t);
    var l = _destruct__k2r9zo.ye();
    var r = _destruct__k2r9zo.ze();
    var q = i.eo($this.x19().q(t).we_1);
    var _destruct__k2r9zo_0 = q.dp(r.y19());
    var iLeft = _destruct__k2r9zo_0.ye();
    var iRight = _destruct__k2r9zo_0.ze();
    var left = newDecoder(l, iLeft);
    var right = newDecoder(r, iRight);
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(left) === 0) {
      tmp = right;
    } else {
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(right) === 0) {
        tmp = left;
      } else {
        tmp = left + ' ' + right;
      }
    }
    return tmp;
  }
  function sam$kotlin_Comparator$0_2(function_0) {
    this.z19_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_2).oc = function (a, b) {
    return this.z19_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_2).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_2).n3 = function () {
    return this.z19_1;
  };
  protoOf(sam$kotlin_Comparator$0_2).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_2).hashCode = function () {
    return hashCode(this.n3());
  };
  function sam$kotlin_Comparator$0_3(function_0) {
    this.a1a_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_3).oc = function (a, b) {
    return this.a1a_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_3).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_3).n3 = function () {
    return this.a1a_1;
  };
  protoOf(sam$kotlin_Comparator$0_3).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_3).hashCode = function () {
    return hashCode(this.n3());
  };
  function PTree$branchRatio$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = to(0.0, 0.0);
      } else {
        var tmp_0 = this$0.t10_1.k();
        // Inline function 'kotlin.collections.sumOf' call
        var sum = 0;
        var _iterator__ex2g4s = this$0.t10_1.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          var tmp_1 = sum;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.branchRatio$delegate.<anonymous>.<anonymous>' call
          var l = element.ye();
          var r = element.ze();
          sum = tmp_1 + (l.b1a().we_1 + r.b1a().we_1);
        }
        var tmp_2 = tmp_0 + sum;
        // Inline function 'kotlin.collections.sumOf' call
        var sum_0 = 0;
        var _iterator__ex2g4s_0 = this$0.t10_1.h();
        while (_iterator__ex2g4s_0.i()) {
          var element_0 = _iterator__ex2g4s_0.j();
          var tmp_3 = sum_0;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.branchRatio$delegate.<anonymous>.<anonymous>' call
          var l_0 = element_0.ye();
          var r_0 = element_0.ze();
          sum_0 = tmp_3 + (l_0.b1a().xe_1 + r_0.b1a().xe_1);
        }
        var tmp$ret$3 = sum_0;
        tmp = to(tmp_2, 1 + tmp$ret$3);
      }
      return tmp;
    };
  }
  function PTree$allTerminals$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = setOf(this$0.s10_1);
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.t10_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s = this_0.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.allTerminals$delegate.<anonymous>.<anonymous>' call
          var l = item.ye();
          var r = item.ze();
          var tmp$ret$0 = plus_2(l.c1a(), r.c1a());
          destination.e(tmp$ret$0);
        }
        tmp = toSet_0(flatten(destination));
      }
      return tmp;
    };
  }
  function PTree$termDict$delegate$lambda(this$0) {
    return function () {
      return new TermDict(this$0.c1a());
    };
  }
  function PTree$inverseDensity$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.time.measureTimedValue' call
      // Inline function 'kotlin.time.measureTimedValue' call
      var mark = Monotonic_instance.yc();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.inverseDensity$delegate.<anonymous>.<anonymous>' call
      var result = toBigInteger(this$0.c1a().k()).wt(this$0.d1a()).go(this$0.y19());
      // Inline function 'kotlin.also' call
      var this_0 = new TimedValue(result, ValueTimeMark__elapsedNow_impl_eonqvs(mark));
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.inverseDensity$delegate.<anonymous>.<anonymous>' call
      println('Solution density was: 1/' + this_0.em_1.toString() + ' (' + Duration__toString_impl_8d916b(this_0.fm_1) + ')');
      return this_0.em_1;
    };
  }
  function PTree$shuffledBranches$delegate$lambda$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.shuffledBranches$delegate.<anonymous>.<anonymous>' call
    var tmp = !contains(a.we_1.s10_1 + a.xe_1.s10_1, '\u03B5');
    // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.shuffledBranches$delegate.<anonymous>.<anonymous>' call
    var tmp$ret$1 = !contains(b.we_1.s10_1 + b.xe_1.s10_1, '\u03B5');
    return compareValues(tmp, tmp$ret$1);
  }
  function PTree$shuffledBranches$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.sortedBy' call
      var this_0 = shuffled(this$0.t10_1);
      // Inline function 'kotlin.comparisons.compareBy' call
      var tmp = PTree$shuffledBranches$delegate$lambda$lambda;
      var tmp$ret$0 = new sam$kotlin_Comparator$0_2(tmp);
      return sortedWith(this_0, tmp$ret$0);
    };
  }
  function PTree$totalTreesStr$delegate$lambda(this$0) {
    return function () {
      return this$0.y19().toString();
    };
  }
  function PTree$totalTrees$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = Companion_getInstance().to_1;
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.t10_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s = this_0.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.totalTrees$delegate.<anonymous>.<anonymous>' call
          var l = item.ye();
          var r = item.ze();
          var tmp$ret$0 = l.y19().fo(r.y19());
          destination.e(tmp$ret$0);
        }
        // Inline function 'kotlin.collections.reduce' call
        var iterator = destination.h();
        if (!iterator.i())
          throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
        var accumulator = iterator.j();
        while (iterator.i()) {
          var tmp3 = accumulator;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.totalTrees$delegate.<anonymous>.<anonymous>' call
          var it = iterator.j();
          accumulator = tmp3.do(it);
        }
        tmp = accumulator;
      }
      return tmp;
    };
  }
  function PTree$ranges$delegate$lambda$lambda(_destruct__k2r9zo) {
    // Inline function 'kotlin.collections.component1' call
    var a = _destruct__k2r9zo.q(0);
    // Inline function 'kotlin.collections.component2' call
    var b = _destruct__k2r9zo.q(1);
    return to(a, b.jo(1));
  }
  function PTree$ranges$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = listOf(to(Companion_getInstance().so_1, Companion_getInstance().to_1));
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.t10_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s = this_0.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.ranges$delegate.<anonymous>.<anonymous>' call
          var l = item.ye();
          var r = item.ze();
          var tmp$ret$0 = l.y19().fo(r.y19());
          destination.e(tmp$ret$0);
        }
        // Inline function 'kotlin.collections.fold' call
        var accumulator = listOf(Companion_getInstance().so_1);
        var _iterator__ex2g4s_0 = destination.h();
        while (_iterator__ex2g4s_0.i()) {
          var element = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.ranges$delegate.<anonymous>.<anonymous>' call
          var acc = accumulator;
          accumulator = plus_4(acc, last(acc).do(element));
        }
        var tmp_0 = accumulator;
        tmp = windowed(tmp_0, 2, VOID, VOID, PTree$ranges$delegate$lambda$lambda);
      }
      return tmp;
    };
  }
  function PTree$numEpsilons$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = this$0.s10_1 === '\u03B5' ? Companion_getInstance().to_1 : Companion_getInstance().so_1;
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_0 = this$0.t10_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s = this_0.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.numEpsilons$delegate.<anonymous>.<anonymous>' call
          var l = item.ye();
          var r = item.ze();
          var tmp$ret$0 = l.y19().fo(r.y19());
          destination.e(tmp$ret$0);
        }
        // Inline function 'kotlin.collections.reduce' call
        var iterator = destination.h();
        if (!iterator.i())
          throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
        var accumulator = iterator.j();
        while (iterator.i()) {
          var tmp3 = accumulator;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.numEpsilons$delegate.<anonymous>.<anonymous>' call
          var it = iterator.j();
          accumulator = tmp3.do(it);
        }
        tmp = accumulator;
      }
      return tmp;
    };
  }
  function PTree$epsSortedBranches$delegate$lambda$lambda(this$0) {
    return function (a, b) {
      // Inline function 'kotlin.comparisons.compareValuesBy' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.epsSortedBranches$delegate.<anonymous>.<anonymous>' call
      var tmp = this$0.e1a(a).d3();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.epsSortedBranches$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$1 = this$0.e1a(b).d3();
      return compareValues(tmp, tmp$ret$1);
    };
  }
  function PTree$epsSortedBranches$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.sortedBy' call
      var this_0 = this$0.t10_1;
      // Inline function 'kotlin.comparisons.compareBy' call
      var tmp = PTree$epsSortedBranches$delegate$lambda$lambda(this$0);
      var tmp$ret$0 = new sam$kotlin_Comparator$0_3(tmp);
      return sortedWith(this_0, tmp$ret$0);
    };
  }
  function PTree$depth$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = 0;
      } else {
        // Inline function 'kotlin.collections.maxOf' call
        var iterator = this$0.t10_1.h();
        if (!iterator.i())
          throw NoSuchElementException_init_$Create$();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.depth$delegate.<anonymous>.<anonymous>' call
        var destruct = iterator.j();
        var l = destruct.ye();
        var r = destruct.ze();
        var tmp0 = l.d1a();
        // Inline function 'kotlin.comparisons.maxOf' call
        var b = r.d1a();
        var maxValue = Math.max(tmp0, b) + 1 | 0;
        while (iterator.i()) {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.depth$delegate.<anonymous>.<anonymous>' call
          var destruct_0 = iterator.j();
          var l_0 = destruct_0.ye();
          var r_0 = destruct_0.ze();
          var tmp0_0 = l_0.d1a();
          // Inline function 'kotlin.comparisons.maxOf' call
          var b_0 = r_0.d1a();
          var v = Math.max(tmp0_0, b_0) + 1 | 0;
          if (compareTo(maxValue, v) < 0) {
            maxValue = v;
          }
        }
        tmp = maxValue;
      }
      return tmp;
    };
  }
  function PTree$choice$delegate$lambda$lambda(_destruct__k2r9zo) {
    var a = _destruct__k2r9zo.ye();
    var b = _destruct__k2r9zo.ze();
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(a) === 0) {
      tmp = b;
    } else {
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(b) === 0) {
        tmp = a;
      } else {
        tmp = a + ' ' + b;
      }
    }
    return tmp;
  }
  function PTree$choice$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        tmp = listOf(this$0.w19());
      } else {
        // Inline function 'kotlin.collections.flatMap' call
        var tmp0 = this$0.f1a();
        // Inline function 'kotlin.collections.flatMapTo' call
        var destination = ArrayList_init_$Create$_0();
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.choice$delegate.<anonymous>.<anonymous>' call
          var l = element.ye();
          var r = element.ze();
          var tmp_0 = times_2(l.g1a(), r.g1a());
          var list = map(tmp_0, PTree$choice$delegate$lambda$lambda);
          addAll_0(destination, list);
        }
        tmp = distinct(destination);
      }
      return tmp;
    };
  }
  function PTree$parikhBounds$delegate$lambda(this$0) {
    return function () {
      var tmp;
      if (this$0.t10_1.r()) {
        var tmp_0;
        // Inline function 'kotlin.text.isEmpty' call
        var this_0 = this$0.w19();
        if (charSequenceLength(this_0) === 0) {
          // Inline function 'kotlin.collections.mapOf' call
          tmp_0 = emptyMap();
        } else {
          tmp_0 = mapOf(to(this$0.s10_1, numberRangeToNumber(1, 1)));
        }
        tmp = tmp_0;
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_1 = this$0.t10_1;
        // Inline function 'kotlin.collections.mapTo' call
        var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
        var _iterator__ex2g4s = this_1.h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.parikhBounds$delegate.<anonymous>.<anonymous>' call
          var tmp$ret$2 = times(item.we_1.h1a(), item.xe_1.h1a());
          destination.e(tmp$ret$2);
        }
        // Inline function 'kotlin.collections.reduce' call
        var iterator = destination.h();
        if (!iterator.i())
          throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
        var accumulator = iterator.j();
        while (iterator.i()) {
          var tmp4 = accumulator;
          // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.parikhBounds$delegate.<anonymous>.stub_for_inlining' call
          var p1 = iterator.j();
          accumulator = plus_9(tmp4, p1);
        }
        tmp = accumulator;
      }
      return tmp;
    };
  }
  function PTree$sampleStrWithoutReplacement$lambda($stride, $offset, this$0) {
    return function (index, i) {
      return (index % $stride | 0) === $offset ? newDecoder(this$0, i) : null;
    };
  }
  function PTree$sampleStrWithoutReplacement$slambda(this$0, resultContinuation) {
    this.q1a_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(PTree$sampleStrWithoutReplacement$slambda).t1a = function ($this$sequence, $completion) {
    var tmp = this.u1a($this$sequence, $completion);
    tmp.y8_1 = Unit_instance;
    tmp.z8_1 = null;
    return tmp.e9();
  };
  protoOf(PTree$sampleStrWithoutReplacement$slambda).v9 = function (p1, $completion) {
    return this.t1a(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(PTree$sampleStrWithoutReplacement$slambda).e9 = function () {
    var suspendResult = this.y8_1;
    $sm: do
      try {
        var tmp = this.w8_1;
        switch (tmp) {
          case 0:
            this.x8_1 = 4;
            this.s1a_1 = Companion_getInstance().so_1;
            this.w8_1 = 1;
            continue $sm;
          case 1:
            if (!(this.s1a_1.hr(this.q1a_1.y19()) < 0)) {
              this.w8_1 = 3;
              continue $sm;
            }

            this.w8_1 = 2;
            suspendResult = this.r1a_1.gf(newDecoder(this.q1a_1, this.s1a_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.s1a_1 = this.s1a_1.b3();
            this.w8_1 = 1;
            continue $sm;
          case 3:
            return Unit_instance;
          case 4:
            throw this.z8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.x8_1 === 4) {
          throw e;
        } else {
          this.w8_1 = this.x8_1;
          this.z8_1 = e;
        }
      }
     while (true);
  };
  protoOf(PTree$sampleStrWithoutReplacement$slambda).u1a = function ($this$sequence, completion) {
    var i = new PTree$sampleStrWithoutReplacement$slambda(this.q1a_1, completion);
    i.r1a_1 = $this$sequence;
    return i;
  };
  function PTree$sampleStrWithoutReplacement$slambda_0(this$0, resultContinuation) {
    var i = new PTree$sampleStrWithoutReplacement$slambda(this$0, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.t1a($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function PTree$sampleWithReplacement$lambda(this$0) {
    return function () {
      return this$0.v1a();
    };
  }
  function PTree$epsStr$delegate$lambda(this$0) {
    return function () {
      return contains_0(this$0.s10_1, _Char___init__impl__6a9atx(949)) ? '' : this$0.s10_1;
    };
  }
  function PTree$dotEpsStr$delegate$lambda(this$0) {
    return function () {
      return contains(this$0.s10_1, '.\u03B5') ? '' : this$0.s10_1;
    };
  }
  function PTree$triples$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this$0.t10_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.triples$delegate.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(item.we_1.u10_1, item.xe_1.u10_1);
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function PTree$rootName$delegate$lambda(this$0) {
    return function () {
      return this$0.w1a(this$0.s10_1);
    };
  }
  function PTree$isLeaf$delegate$lambda(this$0) {
    return function () {
      return this$0.t10_1.r();
    };
  }
  function PTree(root, branches) {
    root = root === VOID ? '.\u03B5' : root;
    var tmp;
    if (branches === VOID) {
      // Inline function 'kotlin.collections.listOf' call
      tmp = emptyList();
    } else {
      tmp = branches;
    }
    branches = tmp;
    this.s10_1 = root;
    this.t10_1 = branches;
    this.u10_1 = -1;
    var tmp_0 = this;
    tmp_0.v10_1 = lazy(PTree$branchRatio$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.w10_1 = lazy(PTree$allTerminals$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.x10_1 = lazy(PTree$termDict$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.y10_1 = lazy(PTree$inverseDensity$delegate$lambda(this));
    var tmp_4 = this;
    tmp_4.z10_1 = lazy(PTree$shuffledBranches$delegate$lambda(this));
    var tmp_5 = this;
    tmp_5.a11_1 = lazy(PTree$totalTreesStr$delegate$lambda(this));
    var tmp_6 = this;
    tmp_6.b11_1 = lazy(PTree$totalTrees$delegate$lambda(this));
    var tmp_7 = this;
    tmp_7.c11_1 = lazy(PTree$ranges$delegate$lambda(this));
    var tmp_8 = this;
    tmp_8.d11_1 = lazy(PTree$numEpsilons$delegate$lambda(this));
    var tmp_9 = this;
    tmp_9.e11_1 = lazy(PTree$epsSortedBranches$delegate$lambda(this));
    var tmp_10 = this;
    tmp_10.f11_1 = lazy(PTree$depth$delegate$lambda(this));
    var tmp_11 = this;
    tmp_11.g11_1 = lazy(PTree$choice$delegate$lambda(this));
    var tmp_12 = this;
    tmp_12.h11_1 = lazy(PTree$parikhBounds$delegate$lambda(this));
    var tmp_13 = this;
    tmp_13.i11_1 = lazy(PTree$epsStr$delegate$lambda(this));
    var tmp_14 = this;
    tmp_14.j11_1 = lazy(PTree$dotEpsStr$delegate$lambda(this));
    var tmp_15 = this;
    tmp_15.k11_1 = lazy(PTree$triples$delegate$lambda(this));
    var tmp_16 = this;
    tmp_16.l11_1 = lazy(PTree$rootName$delegate$lambda(this));
    var tmp_17 = this;
    tmp_17.m11_1 = lazy(PTree$isLeaf$delegate$lambda(this));
  }
  protoOf(PTree).n11 = function (other) {
    return new PTree(this.s10_1, plus(this.t10_1, other.t10_1));
  };
  protoOf(PTree).b1a = function () {
    var tmp0 = this.v10_1;
    // Inline function 'kotlin.getValue' call
    branchRatio$factory();
    return tmp0.i2();
  };
  protoOf(PTree).c1a = function () {
    var tmp0 = this.w10_1;
    // Inline function 'kotlin.getValue' call
    allTerminals$factory();
    return tmp0.i2();
  };
  protoOf(PTree).x1a = function () {
    var tmp0 = this.y10_1;
    // Inline function 'kotlin.getValue' call
    inverseDensity$factory();
    return tmp0.i2();
  };
  protoOf(PTree).f1a = function () {
    var tmp0 = this.z10_1;
    // Inline function 'kotlin.getValue' call
    shuffledBranches$factory();
    return tmp0.i2();
  };
  protoOf(PTree).y19 = function () {
    var tmp0 = this.b11_1;
    // Inline function 'kotlin.getValue' call
    totalTrees$factory();
    return tmp0.i2();
  };
  protoOf(PTree).x19 = function () {
    var tmp0 = this.c11_1;
    // Inline function 'kotlin.getValue' call
    ranges$factory();
    return tmp0.i2();
  };
  protoOf(PTree).y1a = function () {
    var tmp0 = this.d11_1;
    // Inline function 'kotlin.getValue' call
    numEpsilons$factory();
    return tmp0.i2();
  };
  protoOf(PTree).e1a = function (_this__u8e3s4) {
    return _this__u8e3s4.we_1.y1a().do(_this__u8e3s4.xe_1.y1a());
  };
  protoOf(PTree).d1a = function () {
    var tmp0 = this.f11_1;
    // Inline function 'kotlin.getValue' call
    depth$factory();
    return tmp0.i2();
  };
  protoOf(PTree).h1a = function () {
    var tmp0 = this.h11_1;
    // Inline function 'kotlin.getValue' call
    parikhBounds$factory();
    return tmp0.i2();
  };
  protoOf(PTree).g1a = function () {
    return asSequence(_get_choice__ksxcom(this));
  };
  protoOf(PTree).z1a = function (stride, offset) {
    var tmp;
    if (6 < this.y19().zt()) {
      var tmp_0 = bigLFSRSequence(this.y19());
      tmp = mapIndexedNotNull(tmp_0, PTree$sampleStrWithoutReplacement$lambda(stride, offset, this));
    } else {
      tmp = sequence(PTree$sampleStrWithoutReplacement$slambda_0(this, null));
    }
    return tmp;
  };
  protoOf(PTree).a1b = function (stride, offset, $super) {
    stride = stride === VOID ? 1 : stride;
    offset = offset === VOID ? 0 : offset;
    return $super === VOID ? this.z1a(stride, offset) : $super.z1a.call(this, stride, offset);
  };
  protoOf(PTree).b1b = function () {
    return generateSequence(PTree$sampleWithReplacement$lambda(this));
  };
  protoOf(PTree).w19 = function () {
    var tmp0 = this.i11_1;
    // Inline function 'kotlin.getValue' call
    epsStr$factory();
    return tmp0.i2();
  };
  protoOf(PTree).v1a = function () {
    var tmp;
    if (this.t10_1.r()) {
      tmp = this.w19();
    } else {
      // Inline function 'kotlin.collections.random' call
      var this_0 = this.t10_1;
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.PTree.sample.<anonymous>' call
      var destruct = random(this_0, Default_getInstance());
      var l = destruct.ye();
      var r = destruct.ze();
      var _destruct__k2r9zo = to(l.v1a(), r.v1a());
      var a = _destruct__k2r9zo.ye();
      var b = _destruct__k2r9zo.ze();
      var tmp_0;
      // Inline function 'kotlin.text.isEmpty' call
      if (charSequenceLength(a) === 0) {
        tmp_0 = b;
      } else {
        // Inline function 'kotlin.text.isEmpty' call
        if (charSequenceLength(b) === 0) {
          tmp_0 = a;
        } else {
          tmp_0 = a + ' ' + b;
        }
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(PTree).w1a = function (_this__u8e3s4) {
    return contains_0(_this__u8e3s4, _Char___init__impl__6a9atx(126)) ? split(_this__u8e3s4, charArrayOf([_Char___init__impl__6a9atx(126)])).q(1) : _this__u8e3s4;
  };
  function PSingleton(v) {
    return listOf(to(new PTree(v), new PTree()));
  }
  function enumSeqSmart(_this__u8e3s4, tokens) {
    var tmp0_safe_receiver = startPTree(_this__u8e3s4, tokens);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.enumSeqSmart.<anonymous>' call
      var tmp_0;
      if (Companion_getInstance().to_1.hr(tmp0_safe_receiver.x1a()) < 0) {
        var tmp_1;
        if (tmp0_safe_receiver.y19().hr(BigInteger_init_$Create$(maxTrees)) < 0) {
          println('Small number of parse trees (' + tmp0_safe_receiver.y19().toString() + '), sampling without replacement!');
          tmp_1 = tmp0_safe_receiver.a1b();
        } else {
          println('Large number of parse trees (' + tmp0_safe_receiver.y19().toString() + '), sampling with replacement!');
          tmp_1 = tmp0_safe_receiver.b1b();
        }
        tmp_0 = tmp_1;
      } else {
        println('Ambiguity exceeds total solutions, switching to bottom-up na\xEFve search!');
        tmp_0 = solve(tokens, _this__u8e3s4);
      }
      tmp = tmp_0;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? sequenceOf([]) : tmp1_elvis_lhs;
  }
  function startPTree(_this__u8e3s4, tokens) {
    return last(initPTreeListMat(_this__u8e3s4, tokens).l1b().i1b_1).q(0).q(get_bindex(_this__u8e3s4).e10(get_START_SYMBOL()));
  }
  function initPTreeListMat(_this__u8e3s4, tokens) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var _iterator__ex2g4s = tokens.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initPTreeListMat.<anonymous>' call
      // Inline function 'kotlin.collections.MutableList' call
      var size = get_nonterminals(_this__u8e3s4).k();
      var list = ArrayList_init_$Create$(size);
      // Inline function 'kotlin.repeat' call
      var inductionVariable = 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'kotlin.collections.MutableList.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initPTreeListMat.<anonymous>.<anonymous>' call
          list.e(null);
        }
         while (inductionVariable < size);
      var ptreeList = list;
      // Inline function 'kotlin.collections.associateWith' call
      var this_0 = !(item === get_HOLE_MARKER()) ? get_bimap(_this__u8e3s4).z17(listOf(item)) : get_unitNonterminals(_this__u8e3s4);
      var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
      // Inline function 'kotlin.collections.associateWithTo' call
      var _iterator__ex2g4s_0 = this_0.h();
      while (_iterator__ex2g4s_0.i()) {
        var element = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initPTreeListMat.<anonymous>.<anonymous>' call
        var tmp;
        if (!(item === get_HOLE_MARKER())) {
          tmp = PSingleton(item);
        } else {
          var tmp0_safe_receiver = get_bimap(_this__u8e3s4).r10().l2(element);
          var tmp_0;
          if (tmp0_safe_receiver == null) {
            tmp_0 = null;
          } else {
            // Inline function 'kotlin.collections.map' call
            // Inline function 'kotlin.collections.mapTo' call
            var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(tmp0_safe_receiver, 10));
            var _iterator__ex2g4s_1 = tmp0_safe_receiver.h();
            while (_iterator__ex2g4s_1.i()) {
              var item_0 = _iterator__ex2g4s_1.j();
              // Inline function 'ai.hypergraph.kaliningraph.parsing.initPTreeListMat.<anonymous>.<anonymous>.<anonymous>' call
              var tmp$ret$2 = PSingleton(item_0);
              destination_0.e(tmp$ret$2);
            }
            tmp_0 = destination_0;
          }
          var tmp1_safe_receiver = tmp_0;
          var tmp2_elvis_lhs = tmp1_safe_receiver == null ? null : flatten(tmp1_safe_receiver);
          var tmp_1;
          if (tmp2_elvis_lhs == null) {
            // Inline function 'kotlin.collections.listOf' call
            tmp_1 = emptyList();
          } else {
            tmp_1 = tmp2_elvis_lhs;
          }
          tmp = tmp_1;
        }
        var tmp$ret$6 = tmp;
        result.b5(element, tmp$ret$6);
      }
      // Inline function 'kotlin.collections.forEach' call
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s_2 = result.o2().h();
      while (_iterator__ex2g4s_2.i()) {
        var element_0 = _iterator__ex2g4s_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initPTreeListMat.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.component1' call
        var k = element_0.h2();
        // Inline function 'kotlin.collections.component2' call
        var v = element_0.i2();
        ptreeList.x(get_bindex(_this__u8e3s4).e10(k), new PTree(k, v));
      }
      destination.e(ptreeList);
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$15 = copyToArray(destination);
    return UTMatrix_init_$Create$(tmp$ret$15, get_ptreeListAlgebra(_this__u8e3s4));
  }
  function branchRatio$factory() {
    return getPropertyCallableRef('branchRatio', 1, KProperty1, function (receiver) {
      return receiver.b1a();
    }, null);
  }
  function allTerminals$factory() {
    return getPropertyCallableRef('allTerminals', 1, KProperty1, function (receiver) {
      return receiver.c1a();
    }, null);
  }
  function inverseDensity$factory() {
    return getPropertyCallableRef('inverseDensity', 1, KProperty1, function (receiver) {
      return receiver.x1a();
    }, null);
  }
  function shuffledBranches$factory() {
    return getPropertyCallableRef('shuffledBranches', 1, KProperty1, function (receiver) {
      return receiver.f1a();
    }, null);
  }
  function totalTrees$factory() {
    return getPropertyCallableRef('totalTrees', 1, KProperty1, function (receiver) {
      return receiver.y19();
    }, null);
  }
  function ranges$factory() {
    return getPropertyCallableRef('ranges', 1, KProperty1, function (receiver) {
      return receiver.x19();
    }, null);
  }
  function numEpsilons$factory() {
    return getPropertyCallableRef('numEpsilons', 1, KProperty1, function (receiver) {
      return receiver.y1a();
    }, null);
  }
  function depth$factory() {
    return getPropertyCallableRef('depth', 1, KProperty1, function (receiver) {
      return receiver.d1a();
    }, null);
  }
  function choice$factory() {
    return getPropertyCallableRef('choice', 1, KProperty1, function (receiver) {
      return _get_choice__ksxcom(receiver);
    }, null);
  }
  function parikhBounds$factory() {
    return getPropertyCallableRef('parikhBounds', 1, KProperty1, function (receiver) {
      return receiver.h1a();
    }, null);
  }
  function epsStr$factory() {
    return getPropertyCallableRef('epsStr', 1, KProperty1, function (receiver) {
      return receiver.w19();
    }, null);
  }
  function get_bitwiseAlgebra(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return bitwiseAlgebra$delegate.uj(_this__u8e3s4, bitwiseAlgebra$factory());
  }
  var bitwiseAlgebra$delegate;
  function get_ptreeListAlgebra(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return ptreeListAlgebra$delegate.uj(_this__u8e3s4, ptreeListAlgebra$factory());
  }
  var ptreeListAlgebra$delegate;
  var satLitAlgebra$delegate;
  function get_HOLE_MARKER() {
    _init_properties_SetValiant_kt__o4zw83();
    return HOLE_MARKER;
  }
  var HOLE_MARKER;
  var freshNames;
  function get_PRODCFG() {
    _init_properties_SetValiant_kt__o4zw83();
    return PRODCFG;
  }
  var PRODCFG;
  function isNonterminalStubIn(_this__u8e3s4, cfg) {
    _init_properties_SetValiant_kt__o4zw83();
    return isNonterminalStub(_this__u8e3s4) && get_nonterminals(cfg).j1(dropLast(drop(_this__u8e3s4, 1), 1));
  }
  function parseCFG(_this__u8e3s4, normalize, validate) {
    normalize = normalize === VOID ? true : normalize;
    validate = validate === VOID ? false : validate;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = lines(_this__u8e3s4);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>' call
      if (contains(element, '->')) {
        destination.e(element);
      }
    }
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
    var _iterator__ex2g4s_0 = destination.h();
    while (_iterator__ex2g4s_0.i()) {
      var item = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>' call
      if (validate && !isValidProd(item))
        throw Exception_init_$Create$('Invalid production: ' + item);
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>.<anonymous>' call
      var it = splitProd(item);
      var tmp$ret$5 = to(it.q(0), tokenizeByWhitespace(it.q(1)));
      destination_0.e(tmp$ret$5);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.parseCFG.<anonymous>' call
    var it_0 = toSet_0(destination_0);
    return normalize ? get_normalForm(it_0) : freeze(it_0);
  }
  function stripEscapeChars(_this__u8e3s4, c) {
    c = c === VOID ? _Char___init__impl__6a9atx(96) : c;
    _init_properties_SetValiant_kt__o4zw83();
    return first_1(_this__u8e3s4) === c && last_0(_this__u8e3s4) === c ? dropLast(drop(_this__u8e3s4, 1), 1) : _this__u8e3s4;
  }
  function parseInvalidWithMaximalFragments(_this__u8e3s4, s) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp0 = parseWithStubs(_this__u8e3s4, s).xe_1;
    // Inline function 'kotlin.collections.setOf' call
    // Inline function 'kotlin.collections.fold' call
    var accumulator = emptySet();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseInvalidWithMaximalFragments.<anonymous>' call
      var acc = accumulator;
      var tmp;
      var tmp$ret$1;
      $l$block_0: {
        // Inline function 'kotlin.collections.any' call
        var tmp_0;
        if (isInterface(acc, Collection)) {
          tmp_0 = acc.r();
        } else {
          tmp_0 = false;
        }
        if (tmp_0) {
          tmp$ret$1 = false;
          break $l$block_0;
        }
        var _iterator__ex2g4s_0 = acc.h();
        while (_iterator__ex2g4s_0.i()) {
          var element_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.parseInvalidWithMaximalFragments.<anonymous>.<anonymous>' call
          if (isStrictSubsetOf(element.g19_1, element_0.g19_1)) {
            tmp$ret$1 = true;
            break $l$block_0;
          }
        }
        tmp$ret$1 = false;
      }
      if (tmp$ret$1) {
        tmp = acc;
      } else {
        tmp = plus_1(acc, element);
      }
      accumulator = tmp;
    }
    // Inline function 'kotlin.collections.sortedBy' call
    var this_0 = accumulator;
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp_1 = parseInvalidWithMaximalFragments$lambda;
    var tmp$ret$5 = new sam$kotlin_Comparator$0_4(tmp_1);
    return sortedWith(this_0, tmp$ret$5);
  }
  function union_0(left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    var result = booleanArray(left.length);
    var inductionVariable = 0;
    var last = left.length - 1 | 0;
    if (inductionVariable <= last)
      $l$loop: do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result[i] = left[i];
        if (result[i])
          continue $l$loop;
        result[i] = right[i];
      }
       while (inductionVariable <= last);
    return result;
  }
  function fastJoin(vidx, left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (left.length === 0) {
      tmp = true;
    } else {
      // Inline function 'kotlin.collections.isEmpty' call
      tmp = right.length === 0;
    }
    if (tmp) {
      // Inline function 'kotlin.booleanArrayOf' call
      return booleanArrayOf([]);
    }
    var result = booleanArray(vidx.length);
    var inductionVariable = 0;
    var last = vidx.length;
    while (inductionVariable < last) {
      var i = inductionVariable;
      var indexArray = vidx[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var j = 0;
      $l$loop: while (j < indexArray.length) {
        if (left[indexArray[j]] && right[indexArray[j + 1 | 0]]) {
          result[i] = true;
          break $l$loop;
        }
        j = j + 2 | 0;
      }
    }
    return result;
  }
  function ptreeUnion(left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = left.k();
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.ptreeUnion.<anonymous>' call
        var tmp;
        if (left.q(index) == null || right.q(index) == null) {
          var tmp0_elvis_lhs = left.q(index);
          tmp = tmp0_elvis_lhs == null ? right.q(index) : tmp0_elvis_lhs;
        } else {
          tmp = new PTree(ensureNotNull(left.q(index)).s10_1, plus(ensureNotNull(left.q(index)).t10_1, ensureNotNull(right.q(index)).t10_1));
        }
        var tmp$ret$0 = tmp;
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    return list;
  }
  function fastGenericJoin(vidx, strMap, left, right, t) {
    _init_properties_SetValiant_kt__o4zw83();
    if (left.r() || right.r()) {
      // Inline function 'kotlin.collections.listOf' call
      return emptyList();
    }
    // Inline function 'kotlin.collections.MutableList' call
    var size = vidx.length;
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.fastGenericJoin.<anonymous>' call
        list.e(null);
      }
       while (inductionVariable < size);
    var result = list;
    var inductionVariable_0 = 0;
    var last = vidx.length;
    while (inductionVariable_0 < last) {
      var i = inductionVariable_0;
      var indexArray = vidx[inductionVariable_0];
      inductionVariable_0 = inductionVariable_0 + 1 | 0;
      var j = 0;
      var rt = strMap.q(i);
      // Inline function 'kotlin.collections.mutableListOf' call
      var ls = ArrayList_init_$Create$_0();
      while (j < indexArray.length) {
        var _destruct__k2r9zo = to(left.q(indexArray[j]), right.q(indexArray[j + 1 | 0]));
        var l = _destruct__k2r9zo.ye();
        var r = _destruct__k2r9zo.ze();
        if (!(l == null) && !(r == null)) {
          // Inline function 'kotlin.collections.plusAssign' call
          var element = to(l, r);
          ls.e(element);
        }
        j = j + 2 | 0;
      }
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!ls.r()) {
        result.x(i, t(ls, rt));
      }
    }
    return result;
  }
  function maybeUnion(left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    if (left == null || right == null) {
      tmp = left == null ? right : left;
    } else {
      var tmp_0;
      // Inline function 'kotlin.collections.isEmpty' call
      if (left.length === 0) {
        // Inline function 'kotlin.collections.isNotEmpty' call
        // Inline function 'kotlin.collections.isEmpty' call
        tmp_0 = !(right.length === 0);
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = right;
      } else {
        var tmp_1;
        // Inline function 'kotlin.collections.isNotEmpty' call
        // Inline function 'kotlin.collections.isEmpty' call
        if (!(left.length === 0)) {
          // Inline function 'kotlin.collections.isEmpty' call
          tmp_1 = right.length === 0;
        } else {
          tmp_1 = false;
        }
        if (tmp_1) {
          tmp = left;
        } else {
          tmp = union_0(left, right);
        }
      }
    }
    return tmp;
  }
  function maybeJoin(vindexFast, left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    return left == null || right == null ? null : fastJoin(vindexFast, left, right);
  }
  function isNonterminalStub(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return _this__u8e3s4.length > 2 && first_1(_this__u8e3s4) === _Char___init__impl__6a9atx(60) && last_0(_this__u8e3s4) === _Char___init__impl__6a9atx(62);
  }
  function isValidProd(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.filter' call
    var tmp0 = lines(_this__u8e3s4);
    // Inline function 'kotlin.collections.filterTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.isValidProd.<anonymous>' call
      if (contains(element, '->')) {
        destination.e(element);
      }
    }
    var tmp$ret$3;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(destination, Collection)) {
        tmp = destination.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$3 = true;
        break $l$block_0;
      }
      var _iterator__ex2g4s_0 = destination.h();
      while (_iterator__ex2g4s_0.i()) {
        var element_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.isValidProd.<anonymous>' call
        // Inline function 'kotlin.text.matches' call
        if (!get_PRODCFG().ub(element_0)) {
          tmp$ret$3 = false;
          break $l$block_0;
        }
      }
      tmp$ret$3 = true;
    }
    return tmp$ret$3;
  }
  function parseWithStubs(_this__u8e3s4, s) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.parseWithStubs.<anonymous>' call
    var it = asReversed(toUTMatrix(solveFixedpoint(_this__u8e3s4, tokenizeByWhitespace(s))).i1b_1);
    var tmp0 = it.q(0).q(0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
    var predicate = parseWithStubs$lambda;
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableSet(tmp0);
    // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
    retainAll(this_0, predicate);
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseWithStubs.<anonymous>.<anonymous>' call
      var tmp$ret$2 = item.m1b();
      destination.e(tmp$ret$2);
    }
    var tmp = toSet_0(destination);
    // Inline function 'kotlin.collections.map' call
    var this_1 = flatten(flatten(it));
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var _iterator__ex2g4s_0 = this_1.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.parseWithStubs.<anonymous>.<anonymous>' call
      var tmp$ret$5 = item_0.m1b();
      destination_0.e(tmp$ret$5);
    }
    return to(tmp, destination_0);
  }
  function solveFixedpoint(_this__u8e3s4, tokens, utMatrix) {
    utMatrix = utMatrix === VOID ? initialUTMatrix(_this__u8e3s4, tokens) : utMatrix;
    _init_properties_SetValiant_kt__o4zw83();
    return utMatrix.l1b().n1b();
  }
  function initialUTMatrix(_this__u8e3s4, tokens, bmp, unitReach) {
    bmp = bmp === VOID ? get_bimap(_this__u8e3s4) : bmp;
    unitReach = unitReach === VOID ? get_unitReachability(get_originalForm(_this__u8e3s4)) : unitReach;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.mapIndexed' call
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var index = 0;
    var _iterator__ex2g4s = tokens.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>' call
      var i = checkIndexOverflow(_unary__edvuaz);
      var tmp;
      if (item === get_HOLE_MARKER()) {
        // Inline function 'kotlin.collections.map' call
        var this_0 = toSet_0(flatten(unitReach.n2()));
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
        var _iterator__ex2g4s_0 = this_0.h();
        while (_iterator__ex2g4s_0.i()) {
          var item_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>' call
          var tmp0 = bmp.a18(item_0);
          // Inline function 'ai.hypergraph.kaliningraph.types.filter' call
          var predicate = initialUTMatrix$lambda;
          // Inline function 'kotlin.apply' call
          var this_1 = toMutableSet(tmp0);
          // Inline function 'ai.hypergraph.kaliningraph.types.filter.<anonymous>' call
          retainAll(this_1, predicate);
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
          var _iterator__ex2g4s_1 = this_1.h();
          while (_iterator__ex2g4s_1.i()) {
            var item_1 = _iterator__ex2g4s_1.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$2 = first_0(item_1);
            destination_1.e(tmp$ret$2);
          }
          // Inline function 'kotlin.collections.filter' call
          // Inline function 'kotlin.collections.filterTo' call
          var destination_2 = ArrayList_init_$Create$_0();
          var _iterator__ex2g4s_2 = destination_1.h();
          while (_iterator__ex2g4s_2.i()) {
            var element = _iterator__ex2g4s_2.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            if (get_terminals(_this__u8e3s4).j1(element)) {
              destination_2.e(element);
            }
          }
          // Inline function 'kotlin.collections.map' call
          // Inline function 'kotlin.collections.mapTo' call
          var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(destination_2, 10));
          var _iterator__ex2g4s_3 = destination_2.h();
          while (_iterator__ex2g4s_3.i()) {
            var item_2 = _iterator__ex2g4s_3.j();
            // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$8 = new Tree(item_0, item_2, [], until(i, i + 1 | 0));
            destination_3.e(tmp$ret$8);
          }
          destination_0.e(destination_3);
        }
        tmp = toSet_0(flatten(destination_0));
      } else {
        // Inline function 'kotlin.collections.map' call
        var this_2 = bmp.z17(listOf(item));
        // Inline function 'kotlin.collections.mapTo' call
        var destination_4 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
        var _iterator__ex2g4s_4 = this_2.h();
        while (_iterator__ex2g4s_4.i()) {
          var item_3 = _iterator__ex2g4s_4.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTMatrix.<anonymous>.<anonymous>' call
          var tmp$ret$14 = new Tree(item_3, item, [], until(i, i + 1 | 0));
          destination_4.e(tmp$ret$14);
        }
        tmp = toSet_0(destination_4);
      }
      var tmp$ret$17 = tmp;
      destination.e(tmp$ret$17);
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$20 = copyToArray(destination);
    return UTMatrix_init_$Create$(tmp$ret$20, makeForestAlgebra(_this__u8e3s4));
  }
  function makeForestAlgebra(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.setOf' call
    var tmp = emptySet();
    var tmp_0 = makeForestAlgebra$lambda;
    return new of_1(tmp, VOID, tmp_0, makeForestAlgebra$lambda_0(_this__u8e3s4));
  }
  function treeJoin(_this__u8e3s4, left, right) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = times_3(left, right);
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.treeJoin.<anonymous>' call
      var lt = element.ye();
      var rt = element.ze();
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_bimap(_this__u8e3s4).z17(listOf_0([lt.d19_1, rt.d19_1]));
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s_0 = this_0.h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.treeJoin.<anonymous>.<anonymous>' call
        var tmp$ret$0 = new Tree(item, null, [lt, rt]);
        destination_0.e(tmp$ret$0);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function isValid(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    return isValid_0(_this__u8e3s4, tokenizeByWhitespace(str));
  }
  function isValid_0(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    if (str.k() === 1) {
      // Inline function 'kotlin.collections.isNotEmpty' call
      tmp = !checkUnitWord(_this__u8e3s4, first_0(str)).r();
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.isValid.<anonymous>' call
      tmp = last(initialUTBMatrix(_this__u8e3s4, pad3(str)).l1b().i1b_1).q(0)[get_bindex(_this__u8e3s4).e10(get_START_SYMBOL())];
    }
    return tmp;
  }
  function checkUnitWord(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    if (tokenizeByWhitespace(str).k() === 1 && get_bimap(_this__u8e3s4).z17(listOf(str)).j1(get_START_SYMBOL())) {
      tmp = setOf(new Tree(get_START_SYMBOL(), str, []));
    } else {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    }
    return tmp;
  }
  function initialUTBMatrix(_this__u8e3s4, tokens, allNTs, bmp) {
    allNTs = allNTs === VOID ? get_nonterminals(_this__u8e3s4) : allNTs;
    bmp = bmp === VOID ? get_bimap(_this__u8e3s4) : bmp;
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(tokens, 10));
    var _iterator__ex2g4s = tokens.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>' call
      var tmp;
      if (item === get_HOLE_MARKER()) {
        var tmp_0 = 0;
        var tmp_1 = get_nonterminals(_this__u8e3s4).k();
        var tmp_2 = booleanArray(tmp_1);
        while (tmp_0 < tmp_1) {
          tmp_2[tmp_0] = true;
          tmp_0 = tmp_0 + 1 | 0;
        }
        tmp = tmp_2;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>' call
        var nts = bmp.z17(listOf(item));
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(allNTs, 10));
        var _iterator__ex2g4s_0 = allNTs.h();
        while (_iterator__ex2g4s_0.i()) {
          var item_0 = _iterator__ex2g4s_0.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.initialUTBMatrix.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$1 = nts.j1(item_0);
          destination_0.e(tmp$ret$1);
        }
        tmp = toBooleanArray(destination_0);
      }
      var tmp$ret$6 = tmp;
      destination.e(tmp$ret$6);
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$9 = copyToArray(destination);
    return UTMatrix_init_$Create$(tmp$ret$9, get_bitwiseAlgebra(_this__u8e3s4));
  }
  function pad3(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return _this__u8e3s4.r() ? listOf_0(['\u03B5', '\u03B5', '\u03B5']) : _this__u8e3s4.k() === 1 ? listOf_0(['\u03B5', first_0(_this__u8e3s4), '\u03B5']) : _this__u8e3s4;
  }
  function containsHole(_this__u8e3s4) {
    _init_properties_SetValiant_kt__o4zw83();
    return tokenizeByWhitespace(_this__u8e3s4).j1(get_HOLE_MARKER());
  }
  function CFGCFG(names) {
    _init_properties_SetValiant_kt__o4zw83();
    return parseCFG('\n    START -> CFG\n    CFG -> PRD | CFG \\n CFG\n    PRD -> VAR `->` RHS\n    VAR -> ' + joinToString(names, ' | ') + '\n    RHS -> VAR | RHS RHS | RHS `|` RHS\n  ', VOID, false);
  }
  function parse(_this__u8e3s4, s) {
    _init_properties_SetValiant_kt__o4zw83();
    var tmp;
    try {
      var tmp0 = parseForest(_this__u8e3s4, s);
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.collections.firstOrNull' call
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.parse.<anonymous>' call
          if (element.d19_1 === get_START_SYMBOL()) {
            tmp$ret$1 = element;
            break $l$block;
          }
        }
        tmp$ret$1 = null;
      }
      var tmp0_safe_receiver = tmp$ret$1;
      tmp = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.m1b();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Exception) {
        var e = $p;
        // Inline function 'kotlin.collections.ifEmpty' call
        var this_0 = checkUnitWord(_this__u8e3s4, s);
        var tmp_1;
        if (this_0.r()) {
          // Inline function 'ai.hypergraph.kaliningraph.parsing.parse.<anonymous>' call
          tmp_1 = null;
        } else {
          tmp_1 = this_0;
        }
        var tmp1_safe_receiver = tmp_1;
        tmp_0 = tmp1_safe_receiver == null ? null : firstOrNull(tmp1_safe_receiver);
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  }
  function parseForest(_this__u8e3s4, str) {
    _init_properties_SetValiant_kt__o4zw83();
    return last(solveFixedpoint(_this__u8e3s4, tokenizeByWhitespace(str)).q(0));
  }
  function solve(_this__u8e3s4, CFG, fillers, takeMoreWhile) {
    fillers = fillers === VOID ? minus_0(get_terminals(CFG), get_blocked(CFG)) : fillers;
    var tmp;
    if (takeMoreWhile === VOID) {
      tmp = solve$lambda;
    } else {
      tmp = takeMoreWhile;
    }
    takeMoreWhile = tmp;
    _init_properties_SetValiant_kt__o4zw83();
    var tmp_0 = genCandidates(_this__u8e3s4, CFG, fillers);
    var tmp_1 = takeWhile(tmp_0, solve$lambda_0(takeMoreWhile));
    var tmp_2 = filter(tmp_1, solve$lambda_1(CFG));
    return map(tmp_2, solve$lambda_2);
  }
  function matches(_this__u8e3s4, CFG) {
    _init_properties_SetValiant_kt__o4zw83();
    return isValid_0(CFG, tokenizeByWhitespace(_this__u8e3s4));
  }
  function genCandidates(_this__u8e3s4, CFG, fillers) {
    fillers = fillers === VOID ? get_terminals(CFG) : fillers;
    _init_properties_SetValiant_kt__o4zw83();
    var tmp$ret$0;
    $l$block: {
      // Inline function 'kotlin.collections.count' call
      var tmp;
      if (isInterface(_this__u8e3s4, Collection)) {
        tmp = _this__u8e3s4.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = 0;
        break $l$block;
      }
      var count = 0;
      var _iterator__ex2g4s = _this__u8e3s4.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.genCandidates.<anonymous>' call
        if (element === get_HOLE_MARKER()) {
          count = count + 1 | 0;
          checkCountOverflow(count);
        }
      }
      tmp$ret$0 = count;
    }
    var tmp_0 = MDSamplerWithoutReplacement(fillers, tmp$ret$0);
    return map(tmp_0, genCandidates$lambda(_this__u8e3s4));
  }
  function sam$kotlin_Comparator$0_4(function_0) {
    this.o1b_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_4).oc = function (a, b) {
    return this.o1b_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_4).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_4).n3 = function () {
    return this.o1b_1;
  };
  protoOf(sam$kotlin_Comparator$0_4).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_4).hashCode = function () {
    return hashCode(this.n3());
  };
  function bitwiseAlgebra$delegate$lambda($this$cache) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.bitwiseAlgebra$delegate.<anonymous>.<anonymous>' call
    var vi = get_vindex($this$cache);
    var tmp = 0;
    var tmp_0 = get_nonterminals($this$cache).k();
    var tmp_1 = booleanArray(tmp_0);
    while (tmp < tmp_0) {
      tmp_1[tmp] = false;
      tmp = tmp + 1 | 0;
    }
    var tmp_2 = bitwiseAlgebra$delegate$lambda$lambda;
    return new of_1(tmp_1, VOID, tmp_2, bitwiseAlgebra$delegate$lambda$lambda_0(vi));
  }
  function bitwiseAlgebra$delegate$lambda$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return union_0(x, y);
  }
  function bitwiseAlgebra$delegate$lambda$lambda_0($vi) {
    return function ($this$of, x, y) {
      return fastJoin($vi, x, y);
    };
  }
  function ptreeListAlgebra$delegate$lambda($this$cache) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.ptreeListAlgebra$delegate.<anonymous>.<anonymous>' call
    var it = get_vindex($this$cache);
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = get_nonterminals($this$cache).k();
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.parsing.ptreeListAlgebra$delegate.<anonymous>.<anonymous>.<anonymous>' call
        list.e(null);
      }
       while (inductionVariable < size);
    var tmp = list;
    var tmp_0 = ptreeListAlgebra$delegate$lambda$lambda;
    return new of_1(tmp, VOID, tmp_0, ptreeListAlgebra$delegate$lambda$lambda_0(it, $this$cache));
  }
  function ptreeListAlgebra$delegate$lambda$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return ptreeUnion(x, y);
  }
  function ptreeListAlgebra$delegate$lambda$lambda$lambda(ls, rt) {
    _init_properties_SetValiant_kt__o4zw83();
    return new PTree(rt, ls);
  }
  function ptreeListAlgebra$delegate$lambda$lambda_0($it, $this_cache) {
    return function ($this$of, x, y) {
      var tmp = get_bindex($this_cache).c10_1;
      return fastGenericJoin($it, tmp, x, y, ptreeListAlgebra$delegate$lambda$lambda$lambda);
    };
  }
  function satLitAlgebra$delegate$lambda($this$cache) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.satLitAlgebra$delegate.<anonymous>.<anonymous>' call
    var it = get_vindex($this$cache);
    var tmp = 0;
    var tmp_0 = get_nonterminals($this$cache).k();
    var tmp_1 = booleanArray(tmp_0);
    while (tmp < tmp_0) {
      tmp_1[tmp] = false;
      tmp = tmp + 1 | 0;
    }
    var tmp_2 = satLitAlgebra$delegate$lambda$lambda;
    return new of_1(tmp_1, VOID, tmp_2, satLitAlgebra$delegate$lambda$lambda_0(it));
  }
  function satLitAlgebra$delegate$lambda$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return maybeUnion(x, y);
  }
  function satLitAlgebra$delegate$lambda$lambda_0($it) {
    return function ($this$of, x, y) {
      return maybeJoin($it, x, y);
    };
  }
  function freshNames$lambda(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return toString_2(it.t1_1);
  }
  function freshNames$lambda_0(_destruct__k2r9zo) {
    _init_properties_SetValiant_kt__o4zw83();
    var a = _destruct__k2r9zo.ye();
    var b = _destruct__k2r9zo.ze();
    return a + b;
  }
  function freshNames$lambda_1(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return !(it === get_START_SYMBOL());
  }
  function parseInvalidWithMaximalFragments$lambda(a, b) {
    _init_properties_SetValiant_kt__o4zw83();
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.parsing.parseInvalidWithMaximalFragments.<anonymous>' call
    var tmp = a.g19_1.pk_1;
    // Inline function 'ai.hypergraph.kaliningraph.parsing.parseInvalidWithMaximalFragments.<anonymous>' call
    var tmp$ret$1 = b.g19_1.pk_1;
    return compareValues(tmp, tmp$ret$1);
  }
  function parseWithStubs$lambda(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return it.d19_1 === get_START_SYMBOL();
  }
  function initialUTMatrix$lambda(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return it.k() === 1;
  }
  function makeForestAlgebra$lambda($this$of, x, y) {
    _init_properties_SetValiant_kt__o4zw83();
    return union(x, y);
  }
  function makeForestAlgebra$lambda_0($this_makeForestAlgebra) {
    return function ($this$of, x, y) {
      return treeJoin($this_makeForestAlgebra, x, y);
    };
  }
  function solve$lambda() {
    _init_properties_SetValiant_kt__o4zw83();
    return true;
  }
  function solve$lambda_0($takeMoreWhile) {
    return function (it) {
      return $takeMoreWhile();
    };
  }
  function solve$lambda_1($CFG) {
    return function (it) {
      return matches(it, $CFG);
    };
  }
  function solve$lambda_2(it) {
    _init_properties_SetValiant_kt__o4zw83();
    return removeEpsilon(it);
  }
  function genCandidates$lambda($this_genCandidates) {
    return function (it) {
      var tmp0 = $this_genCandidates;
      // Inline function 'kotlin.collections.fold' call
      var accumulator = to('', it);
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.parsing.genCandidates.<anonymous>.<anonymous>' call
        var destruct = accumulator;
        var a = destruct.ye();
        var b = destruct.ze();
        accumulator = element === get_HOLE_MARKER() ? to(a + ' ' + b.q(0), drop_0(b, 1)) : to(a + ' ' + element, b);
      }
      var tmp$ret$1 = accumulator;
      // Inline function 'kotlin.text.trim' call
      var this_0 = replace(tmp$ret$1.we_1, '\u03B5 ', '');
      return toString_0(trim(isCharSequence(this_0) ? this_0 : THROW_CCE()));
    };
  }
  function bitwiseAlgebra$factory() {
    return getPropertyCallableRef('bitwiseAlgebra', 1, KProperty1, function (receiver) {
      return get_bitwiseAlgebra(receiver);
    }, null);
  }
  function ptreeListAlgebra$factory() {
    return getPropertyCallableRef('ptreeListAlgebra', 1, KProperty1, function (receiver) {
      return get_ptreeListAlgebra(receiver);
    }, null);
  }
  var properties_initialized_SetValiant_kt_hyxtcv;
  function _init_properties_SetValiant_kt__o4zw83() {
    if (!properties_initialized_SetValiant_kt_hyxtcv) {
      properties_initialized_SetValiant_kt_hyxtcv = true;
      bitwiseAlgebra$delegate = cache_0(VOID, bitwiseAlgebra$delegate$lambda);
      ptreeListAlgebra$delegate = cache_0(VOID, ptreeListAlgebra$delegate$lambda);
      satLitAlgebra$delegate = cache_0(VOID, satLitAlgebra$delegate$lambda);
      HOLE_MARKER = '_';
      var tmp = asSequence(Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(65), _Char___init__impl__6a9atx(90)));
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.freshNames.<anonymous>' call
      var it = map(tmp, freshNames$lambda);
      var tmp_0 = times_2(it, it);
      var tmp_1 = plus_5(it, map(tmp_0, freshNames$lambda_0));
      freshNames = filter(tmp_1, freshNames$lambda_1);
      PRODCFG = Regex_init_$Create$('\\s*[^|]+\\s+->\\s+([^|]+\\s+\\|\\s+)*[^|]+\\s*');
    }
  }
  var MAX_SORT_CAPACITY;
  function htmlify(_this__u8e3s4, $this) {
    return replace_0(replace_0(replace(_this__u8e3s4, '->', '\u2192'), _Char___init__impl__6a9atx(60), _Char___init__impl__6a9atx(10216)), _Char___init__impl__6a9atx(62), _Char___init__impl__6a9atx(10217));
  }
  function denormalize$removeSynthetic(_this__u8e3s4, refactoredChildren, isSynthetic) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (_this__u8e3s4.f19_1.length === 0) {
      tmp = listOf(new Tree(_this__u8e3s4.d19_1, _this__u8e3s4.e19_1, [], _this__u8e3s4.g19_1));
    } else {
      if (isSynthetic(_this__u8e3s4)) {
        tmp = refactoredChildren;
      } else {
        // Inline function 'kotlin.collections.toTypedArray' call
        var tmp$ret$4 = copyToArray(refactoredChildren);
        tmp = listOf(new Tree(_this__u8e3s4.d19_1, VOID, tmp$ret$4.slice(), _this__u8e3s4.g19_1));
      }
    }
    return tmp;
  }
  function denormalize$removeSynthetic$default(_this__u8e3s4, refactoredChildren, isSynthetic, $super) {
    var tmp;
    if (refactoredChildren === VOID) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = _this__u8e3s4.f19_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.length);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var item = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.denormalize.removeSynthetic.<anonymous>' call
        var tmp$ret$0 = denormalize$removeSynthetic$default(item);
        destination.e(tmp$ret$0);
      }
      tmp = flatten(destination);
    } else {
      tmp = refactoredChildren;
    }
    refactoredChildren = tmp;
    var tmp_0;
    if (isSynthetic === VOID) {
      tmp_0 = Tree$denormalize$removeSynthetic$lambda(_this__u8e3s4);
    } else {
      tmp_0 = isSynthetic;
    }
    isSynthetic = tmp_0;
    return denormalize$removeSynthetic(_this__u8e3s4, refactoredChildren, isSynthetic);
  }
  function Tree$hash$delegate$lambda(this$0) {
    return function () {
      var tmp = getStringHashCode(this$0.d19_1);
      // Inline function 'kotlin.hashCode' call
      var tmp0_safe_receiver = this$0.e19_1;
      var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
      return (tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0) + getStringHashCode(this$0.p1b()) | 0;
    };
  }
  function Tree$indxInfo$delegate$lambda(this$0) {
    return function () {
      return this$0.g19_1.pk_1 < 2147483647 ? ' [' + this$0.g19_1.pk_1 + ']' : '';
    };
  }
  function Tree$spanInfo$delegate$lambda(this$0) {
    return function () {
      return this$0.g19_1.pk_1 < 2147483647 ? ' [' + this$0.g19_1.toString() + ']' : '';
    };
  }
  function Tree$denormalize$removeSynthetic$lambda($this_removeSynthetic) {
    return function (it) {
      return 2 <= split($this_removeSynthetic.d19_1, charArrayOf([_Char___init__impl__6a9atx(46)])).k();
    };
  }
  function Tree(root, terminal, children, span) {
    terminal = terminal === VOID ? null : terminal;
    var tmp;
    if (span === VOID) {
      // Inline function 'kotlin.collections.fold' call
      var accumulator = to(2147483647, -2147483648);
      var inductionVariable = 0;
      var last = children.length;
      while (inductionVariable < last) {
        var element = children[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.<init>.<anonymous>' call
        var destruct = accumulator;
        var a = destruct.ye();
        var b = destruct.ze();
        // Inline function 'kotlin.comparisons.minOf' call
        var b_0 = element.g19_1.pk_1;
        var tmp_0 = Math.min(a, b_0);
        // Inline function 'kotlin.comparisons.maxOf' call
        var b_1 = element.g19_1.qk_1;
        var tmp$ret$1 = Math.max(b, b_1);
        accumulator = to(tmp_0, tmp$ret$1);
      }
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.<init>.<anonymous>' call
      var it = accumulator;
      tmp = numberRangeToNumber(it.we_1, it.xe_1);
    } else {
      tmp = span;
    }
    span = tmp;
    this.d19_1 = root;
    this.e19_1 = terminal;
    this.f19_1 = children;
    this.g19_1 = span;
    var tmp_1 = this;
    tmp_1.h19_1 = lazy(Tree$hash$delegate$lambda(this));
    var tmp_2 = this;
    tmp_2.i19_1 = lazy(Tree$indxInfo$delegate$lambda(this));
    var tmp_3 = this;
    tmp_3.j19_1 = lazy(Tree$spanInfo$delegate$lambda(this));
  }
  protoOf(Tree).q17 = function () {
    var tmp0 = this.h19_1;
    // Inline function 'kotlin.getValue' call
    hash$factory();
    return tmp0.i2();
  };
  protoOf(Tree).toString = function () {
    return this.d19_1;
  };
  protoOf(Tree).hashCode = function () {
    return this.q17();
  };
  protoOf(Tree).equals = function (other) {
    var tmp = this.hashCode();
    // Inline function 'kotlin.hashCode' call
    var tmp1_elvis_lhs = other == null ? null : hashCode(other);
    return tmp === (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs);
  };
  protoOf(Tree).q1b = function () {
    var tmp0 = this.i19_1;
    // Inline function 'kotlin.getValue' call
    indxInfo$factory();
    return tmp0.i2();
  };
  protoOf(Tree).r1b = function () {
    var tmp0 = this.j19_1;
    // Inline function 'kotlin.getValue' call
    spanInfo$factory();
    return tmp0.i2();
  };
  protoOf(Tree).s1b = function (buffer, prefix, nextPrefix) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (this.f19_1.length === 0) {
      var tmp_0 = buffer + prefix;
      var tmp0_safe_receiver = this.e19_1;
      tmp = tmp_0 + ('' + (tmp0_safe_receiver == null ? null : htmlify(tmp0_safe_receiver, this)) + this.q1b() + '\n');
    } else {
      var tmp1 = this.f19_1;
      var tmp_1 = buffer + prefix + htmlify(this.d19_1, this);
      var tmp_2;
      var progression = this.g19_1;
      var containsLower = progression.pk_1;
      if (!(-1 <= progression.qk_1 ? containsLower <= -1 : false)) {
        tmp_2 = this.r1b();
      } else {
        tmp_2 = '';
      }
      // Inline function 'kotlin.collections.foldIndexed' call
      var index = 0;
      var accumulator = tmp_1 + tmp_2 + '\n';
      var inductionVariable = 0;
      var last = tmp1.length;
      while (inductionVariable < last) {
        var element = tmp1[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.prettyPrint.<anonymous>' call
        var acc = accumulator;
        accumulator = _unary__edvuaz === (this.f19_1.length - 1 | 0) ? element.s1b(acc + '', nextPrefix + '\u2514\u2500\u2500 ', nextPrefix + '    ') : element.s1b(acc, nextPrefix + '\u251C\u2500\u2500 ', nextPrefix + '\u2502   ');
      }
      tmp = accumulator;
    }
    return tmp;
  };
  protoOf(Tree).t1b = function (buffer, prefix, nextPrefix, $super) {
    buffer = buffer === VOID ? '' : buffer;
    prefix = prefix === VOID ? '' : prefix;
    nextPrefix = nextPrefix === VOID ? '' : nextPrefix;
    return $super === VOID ? this.s1b(buffer, prefix, nextPrefix) : $super.s1b.call(this, buffer, prefix, nextPrefix);
  };
  protoOf(Tree).m1b = function () {
    return first_0(denormalize$removeSynthetic$default(this));
  };
  protoOf(Tree).u1b = function (removeEpsilon) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (this.f19_1.length === 0) {
      tmp = '' + this.e19_1;
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = this.f19_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(this_0.length);
      var inductionVariable = 0;
      var last = this_0.length;
      while (inductionVariable < last) {
        var item = this_0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.contents.<anonymous>' call
        var tmp$ret$1 = item.u1b(removeEpsilon);
        destination.e(tmp$ret$1);
      }
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.contents.<anonymous>' call
      var tmp_0;
      if (removeEpsilon) {
        // Inline function 'kotlin.collections.filter' call
        // Inline function 'kotlin.collections.filterTo' call
        var destination_0 = ArrayList_init_$Create$_0();
        var _iterator__ex2g4s = destination.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.parsing.Tree.contents.<anonymous>.<anonymous>' call
          if (!(element === '\u03B5')) {
            destination_0.e(element);
          }
        }
        tmp_0 = destination_0;
      } else {
        tmp_0 = destination;
      }
      var tmp$ret$8 = tmp_0;
      tmp = joinToString(tmp$ret$8, ' ');
    }
    return tmp;
  };
  protoOf(Tree).p1b = function (removeEpsilon, $super) {
    removeEpsilon = removeEpsilon === VOID ? false : removeEpsilon;
    return $super === VOID ? this.u1b(removeEpsilon) : $super.u1b.call(this, removeEpsilon);
  };
  function hash$factory() {
    return getPropertyCallableRef('hash', 1, KProperty1, function (receiver) {
      return receiver.q17();
    }, null);
  }
  function indxInfo$factory() {
    return getPropertyCallableRef('indxInfo', 1, KProperty1, function (receiver) {
      return receiver.q1b();
    }, null);
  }
  function spanInfo$factory() {
    return getPropertyCallableRef('spanInfo', 1, KProperty1, function (receiver) {
      return receiver.r1b();
    }, null);
  }
  var CFG_THRESH;
  var MAX_DFA_IN;
  var MAX_IPRODS;
  var MAX_UNIQUE;
  var MAX_SAMPLE;
  var MAX_TOKENS;
  var MIN_TOKENS;
  function get_MAX_RADIUS() {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    return MAX_RADIUS;
  }
  var MAX_RADIUS;
  function set_TIMEOUT_MS(_set____db54di) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    TIMEOUT_MS = _set____db54di;
  }
  function get_TIMEOUT_MS() {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    return TIMEOUT_MS;
  }
  var TIMEOUT_MS;
  var MAX_REPAIR;
  var impossibleBigrams$delegate;
  var possibleBigrams$delegate;
  var startSymbols$delegate;
  function impossibleBigrams$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.mutableSetOf' call
    return LinkedHashSet_init_$Create$();
  }
  function possibleBigrams$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    // Inline function 'kotlin.collections.mutableSetOf' call
    return LinkedHashSet_init_$Create$();
  }
  function startSymbols$delegate$lambda($this$cache) {
    _init_properties_SyntaxRepair_kt__jnbhn4();
    return mutableSetOf([get_START_SYMBOL()]);
  }
  var properties_initialized_SyntaxRepair_kt_8h5b0y;
  function _init_properties_SyntaxRepair_kt__jnbhn4() {
    if (!properties_initialized_SyntaxRepair_kt_8h5b0y) {
      properties_initialized_SyntaxRepair_kt_8h5b0y = true;
      CFG_THRESH = 20000;
      MAX_DFA_IN = 50000;
      MAX_IPRODS = 150000000;
      MAX_UNIQUE = 20000;
      MAX_SAMPLE = 20;
      MAX_TOKENS = 100;
      MIN_TOKENS = 3;
      MAX_RADIUS = 3;
      TIMEOUT_MS = 10000;
      MAX_REPAIR = 2;
      impossibleBigrams$delegate = cache_0(VOID, impossibleBigrams$delegate$lambda);
      possibleBigrams$delegate = cache_0(VOID, possibleBigrams$delegate$lambda);
      startSymbols$delegate = cache_0(VOID, startSymbols$delegate$lambda);
    }
  }
  function Polynomials() {
    Polynomials_instance = this;
    var tmp = this;
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = listOf_0([1, 3, 7, 11, 13, 19, 25, 37, 59, 47, 61, 55, 41, 67, 97, 91, 109, 103, 115, 131, 193, 137, 145, 143, 241, 157, 185, 167, 229, 171, 213, 191, 253, 203, 211, 239, 247, 285, 369, 299, 425, 301, 361, 333, 357, 351, 501, 355, 397, 391, 451, 463, 487, 529, 545, 539, 865, 557, 721, 563, 817, 601, 617, 607, 1001, 623, 985, 631, 953, 637, 761, 647, 901, 661, 677, 675, 789, 687, 981, 695, 949, 701, 757, 719, 973, 731, 877, 787, 803, 799, 995, 827, 883, 847, 971, 859, 875, 895, 1019, 911, 967, 1033, 1153, 1051, 1729, 1063, 1825, 1069, 1441, 1125, 1329, 1135, 1969, 1163, 1673, 1221, 1305, 1239, 1881, 1255, 1849, 1267, 1657, 1279, 2041, 1293, 1413, 1315, 1573, 1341, 1509, 1347, 1557, 1367, 1877, 1387, 1717, 1423, 1933, 1431, 1869, 1479, 1821, 1527, 1917, 1531, 1789, 1555, 1603, 1591, 1891, 1615, 1939, 1627, 1747, 1663, 2035, 1759, 2011, 1815, 1863, 2053, 2561, 2071, 3713, 2091, 3393, 2093, 2881, 2119, 3617, 2147, 3169, 2149, 2657, 2161, 2273, 2171, 3553, 2189, 2833, 2197, 2705, 2207, 3985, 2217, 2385, 2225, 2257, 2255, 3889, 2279, 3697, 2283, 3441, 2293, 2801, 2317, 2825, 2323, 3209, 2341, 2633, 2345, 2377, 2363, 3529, 2365, 3017, 2373, 2601, 2395, 3497, 2419, 3305, 2421, 2793, 2431, 4073, 2435, 3097, 2447, 3865, 2475, 3417, 2477, 2905, 2489, 2521, 2503, 3641, 2533, 2681, 2551, 3833, 2567, 3589, 2579, 3205, 2581, 2693, 2669, 2917, 2687, 4069, 2717, 2965, 2727, 3669, 2731, 3413, 2739, 3285, 2741, 2773, 2783, 4021, 2799, 3957, 2811, 3573, 2819, 3085, 2867, 3277, 2879, 4045, 2891, 3373, 2911, 4013, 2927, 3949, 2941, 3053, 2951, 3613, 2955, 3357, 2963, 3229, 2991, 3933, 2999, 3805, 3005, 3037, 3035, 3517, 3047, 3709, 3083, 3331, 3103, 3971, 3159, 3747, 3179, 3427, 3187, 3299, 3223, 3731, 3227, 3475, 3251, 3283, 3263, 4051, 3271, 3635, 3319, 3827, 3343, 3851, 3367, 3659, 3399, 3627, 3439, 3947, 3487, 3995, 3515, 3547, 3543, 3771, 3559, 3707, 3623, 3655, 3679, 4007, 3743, 3991, 3791, 3895, 4179, 6465, 4201, 4801, 4219, 7105, 4221, 6081, 4249, 4897, 4305, 4449, 4331, 6881, 4359, 7185, 4383, 7953, 4387, 6289, 4411, 7057, 4431]);
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.sampling.Polynomials.lecuyer.<anonymous>' call
      var i = checkIndexOverflow(_unary__edvuaz);
      var tmp$ret$0 = to(i, listOf(toLong(item)));
      destination.e(tmp$ret$0);
    }
    tmp.v1b_1 = toMap(destination);
    this.w1b_1 = mapOf_0([to(3, listOf_0([3, 2])), to(4, listOf_0([4, 3])), to(5, listOf_0([5, 3])), to(6, listOf_0([6, 5])), to(7, listOf_0([7, 6])), to(8, listOf_0([8, 6, 5, 4])), to(9, listOf_0([9, 5])), to(10, listOf_0([10, 7])), to(11, listOf_0([11, 9])), to(12, listOf_0([12, 6, 4, 1])), to(13, listOf_0([13, 4, 3, 1])), to(14, listOf_0([14, 5, 3, 1])), to(15, listOf_0([15, 14])), to(16, listOf_0([16, 15, 13, 4])), to(17, listOf_0([17, 14])), to(18, listOf_0([18, 11])), to(19, listOf_0([19, 6, 2, 1])), to(20, listOf_0([20, 17])), to(21, listOf_0([21, 19])), to(22, listOf_0([22, 21])), to(23, listOf_0([23, 18])), to(24, listOf_0([24, 23, 22, 17])), to(25, listOf_0([25, 22])), to(26, listOf_0([26, 6, 2, 1])), to(27, listOf_0([27, 5, 2, 1])), to(28, listOf_0([28, 25])), to(29, listOf_0([29, 27])), to(30, listOf_0([30, 6, 4, 1])), to(31, listOf_0([31, 28])), to(32, listOf_0([32, 22, 2, 1])), to(33, listOf_0([33, 20])), to(34, listOf_0([34, 27, 2, 1])), to(35, listOf_0([35, 33])), to(36, listOf_0([36, 25])), to(37, listOf_0([37, 5, 4, 3, 2, 1])), to(38, listOf_0([38, 6, 5, 1])), to(39, listOf_0([39, 35])), to(40, listOf_0([40, 38, 21, 19])), to(41, listOf_0([41, 38])), to(42, listOf_0([42, 41, 20, 19])), to(43, listOf_0([43, 42, 38, 37])), to(44, listOf_0([44, 43, 18, 17])), to(45, listOf_0([45, 44, 42, 41])), to(46, listOf_0([46, 45, 26, 25])), to(47, listOf_0([47, 42])), to(48, listOf_0([48, 47, 21, 20])), to(49, listOf_0([49, 40])), to(50, listOf_0([50, 49, 24, 23])), to(51, listOf_0([51, 50, 36, 35])), to(52, listOf_0([52, 49])), to(53, listOf_0([53, 52, 38, 37])), to(54, listOf_0([54, 53, 18, 17])), to(55, listOf_0([55, 31])), to(56, listOf_0([56, 55, 35, 34])), to(57, listOf_0([57, 50])), to(58, listOf_0([58, 39])), to(59, listOf_0([59, 58, 38, 37])), to(60, listOf_0([60, 59])), to(61, listOf_0([61, 60, 46, 45])), to(62, listOf_0([62, 61, 6, 5])), to(63, listOf_0([63, 62])), to(64, listOf_0([64, 63, 61, 60])), to(65, listOf_0([65, 47])), to(66, listOf_0([66, 65, 57, 56])), to(67, listOf_0([67, 66, 58, 57])), to(68, listOf_0([68, 59])), to(69, listOf_0([69, 67, 42, 40])), to(70, listOf_0([70, 69, 55, 54])), to(71, listOf_0([71, 65])), to(72, listOf_0([72, 66, 25, 19])), to(73, listOf_0([73, 48])), to(74, listOf_0([74, 73, 59, 58])), to(75, listOf_0([75, 74, 65, 64])), to(76, listOf_0([76, 75, 41, 40])), to(77, listOf_0([77, 76, 47, 46])), to(78, listOf_0([78, 77, 59, 58])), to(79, listOf_0([79, 70])), to(80, listOf_0([80, 79, 43, 42])), to(81, listOf_0([81, 77])), to(82, listOf_0([82, 79, 47, 44])), to(83, listOf_0([83, 82, 38, 37])), to(84, listOf_0([84, 71])), to(85, listOf_0([85, 84, 58, 57])), to(86, listOf_0([86, 85, 74, 73])), to(87, listOf_0([87, 74])), to(88, listOf_0([88, 87, 17, 16])), to(89, listOf_0([89, 51])), to(90, listOf_0([90, 89, 72, 71])), to(91, listOf_0([91, 90, 8, 7])), to(92, listOf_0([92, 91, 80, 79])), to(93, listOf_0([93, 91])), to(94, listOf_0([94, 73])), to(95, listOf_0([95, 84])), to(96, listOf_0([96, 94, 49, 47])), to(97, listOf_0([97, 91])), to(98, listOf_0([98, 87])), to(99, listOf_0([99, 97, 54, 52])), to(100, listOf_0([100, 63])), to(101, listOf_0([101, 100, 95, 94])), to(102, listOf_0([102, 101, 36, 35])), to(103, listOf_0([103, 94])), to(104, listOf_0([104, 103, 94, 93])), to(105, listOf_0([105, 89])), to(106, listOf_0([106, 91])), to(107, listOf_0([107, 105, 44, 42])), to(108, listOf_0([108, 77])), to(109, listOf_0([109, 108, 103, 102])), to(110, listOf_0([110, 109, 98, 97])), to(111, listOf_0([111, 101])), to(112, listOf_0([112, 110, 69, 67])), to(113, listOf_0([113, 104])), to(114, listOf_0([114, 113, 33, 32])), to(115, listOf_0([115, 114, 101, 100])), to(116, listOf_0([116, 115, 46, 45])), to(117, listOf_0([117, 115, 99, 97])), to(118, listOf_0([118, 85])), to(119, listOf_0([119, 111])), to(120, listOf_0([120, 113, 9, 2])), to(121, listOf_0([121, 103])), to(122, listOf_0([122, 121, 63, 62])), to(123, listOf_0([123, 121])), to(124, listOf_0([124, 87])), to(125, listOf_0([125, 124, 18, 17])), to(126, listOf_0([126, 125, 90, 89])), to(127, listOf_0([127, 126])), to(128, listOf_0([128, 126, 101, 99])), to(129, listOf_0([129, 124])), to(130, listOf_0([130, 127])), to(131, listOf_0([131, 130, 84, 83])), to(132, listOf_0([132, 103])), to(133, listOf_0([133, 132, 82, 81])), to(134, listOf_0([134, 77])), to(135, listOf_0([135, 124])), to(136, listOf_0([136, 135, 11, 10])), to(137, listOf_0([137, 116])), to(138, listOf_0([138, 137, 131, 130])), to(139, listOf_0([139, 136, 134, 131])), to(140, listOf_0([140, 111])), to(141, listOf_0([141, 140, 110, 109])), to(142, listOf_0([142, 121])), to(143, listOf_0([143, 142, 123, 122])), to(144, listOf_0([144, 143, 75, 74])), to(145, listOf_0([145, 93])), to(146, listOf_0([146, 145, 87, 86])), to(147, listOf_0([147, 146, 110, 109])), to(148, listOf_0([148, 121])), to(149, listOf_0([149, 148, 40, 39])), to(150, listOf_0([150, 97])), to(151, listOf_0([151, 148])), to(152, listOf_0([152, 151, 87, 86])), to(153, listOf_0([153, 152])), to(154, listOf_0([154, 152, 27, 25])), to(155, listOf_0([155, 154, 124, 123])), to(156, listOf_0([156, 155, 41, 40])), to(157, listOf_0([157, 156, 131, 130])), to(158, listOf_0([158, 157, 132, 131])), to(159, listOf_0([159, 128])), to(160, listOf_0([160, 159, 142, 141])), to(161, listOf_0([161, 143])), to(162, listOf_0([162, 161, 75, 74])), to(163, listOf_0([163, 162, 104, 103])), to(164, listOf_0([164, 163, 151, 150])), to(165, listOf_0([165, 164, 135, 134])), to(166, listOf_0([166, 165, 128, 127])), to(167, listOf_0([167, 161])), to(168, listOf_0([168, 166, 153, 151]))]);
    var tmp_0 = this;
    var tmp_1 = mapOf_0([to(0, listOf(new Long(0, 0))), to(1, listOf(new Long(1, 0))), to(2, listOf(new Long(7, 0))), to(3, listOf(new Long(11, 0))), to(4, listOf_0([new Long(19, 0), new Long(25, 0)])), to(5, listOf_0([new Long(37, 0), new Long(41, 0), new Long(47, 0), new Long(55, 0), new Long(59, 0), new Long(61, 0)])), to(6, listOf_0([new Long(67, 0), new Long(91, 0), new Long(97, 0), new Long(103, 0), new Long(109, 0), new Long(115, 0)])), to(7, listOf_0([new Long(131, 0), new Long(137, 0), new Long(143, 0), new Long(145, 0), new Long(157, 0), new Long(167, 0), new Long(171, 0), new Long(185, 0), new Long(191, 0), new Long(193, 0), new Long(203, 0), new Long(211, 0), new Long(213, 0), new Long(229, 0), new Long(239, 0), new Long(241, 0), new Long(247, 0), new Long(253, 0)])), to(8, listOf_0([new Long(285, 0), new Long(299, 0), new Long(301, 0), new Long(333, 0), new Long(351, 0), new Long(355, 0), new Long(357, 0), new Long(361, 0), new Long(369, 0), new Long(391, 0), new Long(397, 0), new Long(425, 0), new Long(451, 0), new Long(463, 0), new Long(487, 0), new Long(501, 0)])), to(9, listOf_0([new Long(529, 0), new Long(539, 0), new Long(545, 0), new Long(557, 0), new Long(563, 0), new Long(601, 0), new Long(607, 0), new Long(617, 0), new Long(623, 0), new Long(631, 0), new Long(637, 0), new Long(647, 0), new Long(661, 0), new Long(675, 0), new Long(677, 0), new Long(687, 0), new Long(695, 0), new Long(701, 0), new Long(719, 0), new Long(721, 0), new Long(731, 0), new Long(757, 0), new Long(761, 0), new Long(787, 0), new Long(789, 0), new Long(799, 0), new Long(803, 0), new Long(817, 0), new Long(827, 0), new Long(847, 0), new Long(859, 0), new Long(865, 0), new Long(875, 0), new Long(877, 0), new Long(883, 0), new Long(895, 0), new Long(901, 0), new Long(911, 0), new Long(949, 0), new Long(953, 0), new Long(967, 0), new Long(971, 0), new Long(973, 0), new Long(981, 0), new Long(985, 0), new Long(995, 0), new Long(1001, 0), new Long(1019, 0)])), to(10, listOf_0([new Long(1033, 0), new Long(1051, 0), new Long(1063, 0), new Long(1069, 0), new Long(1125, 0), new Long(1135, 0), new Long(1153, 0), new Long(1163, 0), new Long(1221, 0), new Long(1239, 0), new Long(1255, 0), new Long(1267, 0), new Long(1279, 0), new Long(1293, 0), new Long(1305, 0), new Long(1315, 0), new Long(1329, 0), new Long(1341, 0), new Long(1347, 0), new Long(1367, 0), new Long(1387, 0), new Long(1413, 0), new Long(1423, 0), new Long(1431, 0), new Long(1441, 0), new Long(1479, 0), new Long(1509, 0), new Long(1527, 0), new Long(1531, 0), new Long(1555, 0), new Long(1557, 0), new Long(1573, 0), new Long(1591, 0), new Long(1603, 0), new Long(1615, 0), new Long(1627, 0), new Long(1657, 0), new Long(1663, 0), new Long(1673, 0), new Long(1717, 0), new Long(1729, 0), new Long(1747, 0), new Long(1759, 0), new Long(1789, 0), new Long(1815, 0), new Long(1821, 0), new Long(1825, 0), new Long(1849, 0), new Long(1863, 0), new Long(1869, 0), new Long(1877, 0), new Long(1881, 0), new Long(1891, 0), new Long(1917, 0), new Long(1933, 0), new Long(1939, 0), new Long(1969, 0), new Long(2011, 0), new Long(2035, 0), new Long(2041, 0)])), to(11, listOf_0([new Long(2053, 0), new Long(2071, 0), new Long(2091, 0), new Long(2093, 0), new Long(2119, 0), new Long(2147, 0), new Long(2149, 0), new Long(2161, 0), new Long(2171, 0), new Long(2189, 0), new Long(2197, 0), new Long(2207, 0), new Long(2217, 0), new Long(2225, 0), new Long(2255, 0), new Long(2257, 0), new Long(2273, 0), new Long(2279, 0), new Long(2283, 0), new Long(2293, 0), new Long(2317, 0), new Long(2323, 0), new Long(2341, 0), new Long(2345, 0), new Long(2363, 0), new Long(2365, 0), new Long(2373, 0), new Long(2377, 0), new Long(2385, 0), new Long(2395, 0), new Long(2419, 0), new Long(2421, 0), new Long(2431, 0), new Long(2435, 0), new Long(2447, 0), new Long(2475, 0), new Long(2477, 0), new Long(2489, 0), new Long(2503, 0), new Long(2521, 0), new Long(2533, 0), new Long(2551, 0), new Long(2561, 0), new Long(2567, 0), new Long(2579, 0), new Long(2581, 0), new Long(2601, 0), new Long(2633, 0), new Long(2657, 0), new Long(2669, 0), new Long(2681, 0), new Long(2687, 0), new Long(2693, 0), new Long(2705, 0), new Long(2717, 0), new Long(2727, 0), new Long(2731, 0), new Long(2739, 0), new Long(2741, 0), new Long(2773, 0), new Long(2783, 0), new Long(2793, 0), new Long(2799, 0), new Long(2801, 0), new Long(2811, 0), new Long(2819, 0), new Long(2825, 0), new Long(2833, 0), new Long(2867, 0), new Long(2879, 0), new Long(2881, 0), new Long(2891, 0), new Long(2905, 0), new Long(2911, 0), new Long(2917, 0), new Long(2927, 0), new Long(2941, 0), new Long(2951, 0), new Long(2955, 0), new Long(2963, 0), new Long(2965, 0), new Long(2991, 0), new Long(2999, 0), new Long(3005, 0), new Long(3017, 0), new Long(3035, 0), new Long(3037, 0), new Long(3047, 0), new Long(3053, 0), new Long(3083, 0), new Long(3085, 0), new Long(3097, 0), new Long(3103, 0), new Long(3159, 0), new Long(3169, 0), new Long(3179, 0), new Long(3187, 0), new Long(3205, 0), new Long(3209, 0), new Long(3223, 0), new Long(3227, 0), new Long(3229, 0), new Long(3251, 0), new Long(3263, 0), new Long(3271, 0), new Long(3277, 0), new Long(3283, 0), new Long(3285, 0), new Long(3299, 0), new Long(3305, 0), new Long(3319, 0), new Long(3331, 0), new Long(3343, 0), new Long(3357, 0), new Long(3367, 0), new Long(3373, 0), new Long(3393, 0), new Long(3399, 0), new Long(3413, 0), new Long(3417, 0), new Long(3427, 0), new Long(3439, 0), new Long(3441, 0), new Long(3475, 0), new Long(3487, 0), new Long(3497, 0), new Long(3515, 0), new Long(3517, 0), new Long(3529, 0), new Long(3543, 0), new Long(3547, 0), new Long(3553, 0), new Long(3559, 0), new Long(3573, 0), new Long(3589, 0), new Long(3613, 0), new Long(3617, 0), new Long(3623, 0), new Long(3627, 0), new Long(3635, 0), new Long(3641, 0), new Long(3655, 0), new Long(3659, 0), new Long(3669, 0), new Long(3679, 0), new Long(3697, 0), new Long(3707, 0), new Long(3709, 0), new Long(3713, 0), new Long(3731, 0), new Long(3743, 0), new Long(3747, 0), new Long(3771, 0), new Long(3791, 0), new Long(3805, 0), new Long(3827, 0), new Long(3833, 0), new Long(3851, 0), new Long(3865, 0), new Long(3889, 0), new Long(3895, 0), new Long(3933, 0), new Long(3947, 0), new Long(3949, 0), new Long(3957, 0), new Long(3971, 0), new Long(3985, 0), new Long(3991, 0), new Long(3995, 0), new Long(4007, 0), new Long(4013, 0), new Long(4021, 0), new Long(4045, 0), new Long(4051, 0), new Long(4069, 0), new Long(4073, 0)])), to(12, listOf_0([new Long(4179, 0), new Long(4201, 0), new Long(4219, 0), new Long(4221, 0), new Long(4249, 0), new Long(4305, 0), new Long(4331, 0), new Long(4359, 0), new Long(4383, 0), new Long(4387, 0), new Long(4411, 0), new Long(4431, 0), new Long(4439, 0), new Long(4449, 0), new Long(4459, 0), new Long(4485, 0), new Long(4531, 0), new Long(4569, 0), new Long(4575, 0), new Long(4621, 0), new Long(4663, 0), new Long(4669, 0), new Long(4711, 0), new Long(4723, 0), new Long(4735, 0), new Long(4793, 0), new Long(4801, 0), new Long(4811, 0), new Long(4879, 0), new Long(4893, 0), new Long(4897, 0), new Long(4921, 0), new Long(4927, 0), new Long(4941, 0), new Long(4977, 0), new Long(5017, 0), new Long(5027, 0), new Long(5033, 0), new Long(5127, 0), new Long(5169, 0), new Long(5175, 0), new Long(5199, 0), new Long(5213, 0), new Long(5223, 0), new Long(5237, 0), new Long(5287, 0), new Long(5293, 0), new Long(5331, 0), new Long(5391, 0), new Long(5405, 0), new Long(5453, 0), new Long(5523, 0), new Long(5573, 0), new Long(5591, 0), new Long(5597, 0), new Long(5611, 0), new Long(5641, 0), new Long(5703, 0), new Long(5717, 0), new Long(5721, 0), new Long(5797, 0), new Long(5821, 0), new Long(5909, 0), new Long(5913, 0), new Long(5955, 0), new Long(5957, 0), new Long(6005, 0), new Long(6025, 0), new Long(6061, 0), new Long(6067, 0), new Long(6079, 0), new Long(6081, 0), new Long(6231, 0), new Long(6237, 0), new Long(6289, 0), new Long(6295, 0), new Long(6329, 0), new Long(6383, 0), new Long(6427, 0), new Long(6453, 0), new Long(6465, 0), new Long(6501, 0), new Long(6523, 0), new Long(6539, 0), new Long(6577, 0), new Long(6589, 0), new Long(6601, 0), new Long(6607, 0), new Long(6631, 0), new Long(6683, 0), new Long(6699, 0), new Long(6707, 0), new Long(6761, 0), new Long(6795, 0), new Long(6865, 0), new Long(6881, 0), new Long(6901, 0), new Long(6923, 0), new Long(6931, 0), new Long(6943, 0), new Long(6999, 0), new Long(7057, 0), new Long(7079, 0), new Long(7103, 0), new Long(7105, 0), new Long(7123, 0), new Long(7173, 0), new Long(7185, 0), new Long(7191, 0), new Long(7207, 0), new Long(7245, 0), new Long(7303, 0), new Long(7327, 0), new Long(7333, 0), new Long(7355, 0), new Long(7365, 0), new Long(7369, 0), new Long(7375, 0), new Long(7411, 0), new Long(7431, 0), new Long(7459, 0), new Long(7491, 0), new Long(7505, 0), new Long(7515, 0), new Long(7541, 0), new Long(7557, 0), new Long(7561, 0), new Long(7701, 0), new Long(7705, 0), new Long(7727, 0), new Long(7749, 0), new Long(7761, 0), new Long(7783, 0), new Long(7795, 0), new Long(7823, 0), new Long(7907, 0), new Long(7953, 0), new Long(7963, 0), new Long(7975, 0), new Long(8049, 0), new Long(8089, 0), new Long(8123, 0), new Long(8125, 0), new Long(8137, 0)])), to(13, listOf_0([new Long(8219, 0), new Long(8231, 0), new Long(8245, 0), new Long(8275, 0), new Long(8293, 0), new Long(8303, 0), new Long(8331, 0), new Long(8333, 0), new Long(8351, 0), new Long(8357, 0), new Long(8367, 0), new Long(8379, 0), new Long(8381, 0), new Long(8387, 0), new Long(8393, 0), new Long(8417, 0), new Long(8435, 0), new Long(8461, 0), new Long(8469, 0), new Long(8489, 0), new Long(8495, 0), new Long(8507, 0), new Long(8515, 0), new Long(8551, 0), new Long(8555, 0), new Long(8569, 0), new Long(8585, 0), new Long(8599, 0), new Long(8605, 0), new Long(8639, 0)])), to(14, listOf_0([new Long(16427, 0), new Long(16441, 0), new Long(16467, 0), new Long(16479, 0), new Long(16507, 0), new Long(16553, 0), new Long(16559, 0), new Long(16571, 0), new Long(16573, 0), new Long(16591, 0), new Long(16619, 0), new Long(16627, 0), new Long(16653, 0), new Long(16659, 0), new Long(16699, 0), new Long(16707, 0), new Long(16795, 0), new Long(16797, 0), new Long(16807, 0), new Long(16813, 0), new Long(16821, 0), new Long(16853, 0), new Long(16857, 0), new Long(16881, 0)])), to(15, listOf_0([new Long(32771, 0), new Long(32785, 0), new Long(32791, 0), new Long(32813, 0), new Long(32821, 0), new Long(32863, 0), new Long(32887, 0), new Long(32897, 0), new Long(32903, 0), new Long(32915, 0), new Long(32933, 0), new Long(32963, 0), new Long(32975, 0), new Long(32989, 0), new Long(32999, 0), new Long(33013, 0), new Long(33025, 0), new Long(33045, 0), new Long(33061, 0), new Long(33111, 0), new Long(33117, 0), new Long(33121, 0), new Long(33133, 0), new Long(33157, 0)])), to(16, listOf_0([new Long(65581, 0), new Long(65593, 0), new Long(65599, 0), new Long(65619, 0), new Long(65725, 0), new Long(65751, 0), new Long(65839, 0), new Long(65853, 0), new Long(65871, 0), new Long(65885, 0), new Long(65943, 0), new Long(65953, 0), new Long(65965, 0), new Long(65983, 0), new Long(65991, 0), new Long(66069, 0), new Long(66073, 0), new Long(66085, 0), new Long(66095, 0), new Long(66141, 0), new Long(66157, 0), new Long(66181, 0), new Long(66193, 0), new Long(66209, 0)])), to(17, listOf_0([new Long(131081, 0), new Long(131087, 0), new Long(131105, 0), new Long(131117, 0), new Long(131123, 0), new Long(131135, 0), new Long(131137, 0), new Long(131157, 0), new Long(131177, 0), new Long(131195, 0), new Long(131213, 0), new Long(131225, 0), new Long(131235, 0), new Long(131247, 0), new Long(131259, 0), new Long(131269, 0), new Long(131317, 0)])), to(18, listOf_0([new Long(262183, 0), new Long(262207, 0), new Long(262221, 0), new Long(262267, 0), new Long(262273, 0), new Long(262363, 0), new Long(262375, 0), new Long(262381, 0), new Long(262407, 0)])), to(19, listOf_0([new Long(524327, 0), new Long(524351, 0), new Long(524359, 0), new Long(524371, 0), new Long(524377, 0), new Long(524387, 0), new Long(524399, 0), new Long(524413, 0), new Long(524435, 0), new Long(524463, 0)])), to(20, listOf_0([new Long(1048585, 0), new Long(1048659, 0), new Long(1048677, 0), new Long(1048681, 0), new Long(1048699, 0)])), to(21, listOf_0([new Long(2097157, 0), new Long(2097191, 0), new Long(2097215, 0), new Long(2097253, 0)])), to(22, listOf_0([new Long(4194307, 0), new Long(4194361, 0)])), to(23, listOf_0([new Long(8388641, 0), new Long(8388651, 0), new Long(8388653, 0), new Long(8388659, 0), new Long(8388671, 0), new Long(8388685, 0), new Long(8388709, 0)])), to(24, listOf(new Long(16777243, 0))), to(25, listOf(new Long(33554441, 0))), to(26, listOf(new Long(67108935, 0))), to(27, listOf(new Long(134217767, 0))), to(28, listOf(new Long(268435465, 0))), to(29, listOf(new Long(536870917, 0))), to(30, listOf(new Long(1073741907, 0))), to(31, listOf(new Long(-2147483639, 0))), to(32, listOf(new Long(197, 1)))]);
    // Inline function 'kotlin.collections.associateWith' call
    var this_1 = numberRangeToNumber(33, 64);
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_1, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var inductionVariable = this_1.pk_1;
    var last = this_1.qk_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.sampling.Polynomials.academic.<anonymous>' call
        var it = element;
        var tmp$ret$3 = ensureNotNull(Polynomials_getInstance().v1b_1.l2(it));
        result.b5(element, tmp$ret$3);
      }
       while (!(element === last));
    tmp_0.x1b_1 = plus_0(tmp_1, result);
  }
  var Polynomials_instance;
  function Polynomials_getInstance() {
    if (Polynomials_instance == null)
      new Polynomials();
    return Polynomials_instance;
  }
  function randomString(length, alphabet) {
    length = length === VOID ? 5 : length;
    alphabet = alphabet === VOID ? plus(plus_6(Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(97), _Char___init__impl__6a9atx(122)), Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(65), _Char___init__impl__6a9atx(90))), Char__rangeTo_impl_tkncvp(_Char___init__impl__6a9atx(48), _Char___init__impl__6a9atx(57))) : alphabet;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(length);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.randomString.<anonymous>' call
        // Inline function 'kotlin.collections.random' call
        var tmp$ret$0 = random(alphabet, Default_getInstance()).t1_1;
        var tmp$ret$1 = new Char(tmp$ret$0);
        list.e(tmp$ret$1);
      }
       while (inductionVariable < length);
    return joinToString(list, '');
  }
  function choose(_this__u8e3s4, i) {
    var tmp = asSequence(i);
    return distinct_0(flatMap(tmp, choose$lambda(_this__u8e3s4)));
  }
  function bigLFSRSequence(maxVal) {
    var tmp = (new BigLFSR(makeBigIntFromTaps(ensureNotNull(Polynomials_getInstance().w1b_1.l2(maxVal.zt()))), makeRandBigInt(maxVal.zt()))).a1c();
    return filter(tmp, bigLFSRSequence$lambda(maxVal));
  }
  function findAll(base, dimension) {
    dimension = dimension === VOID ? 1 : dimension;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(dimension);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < dimension)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>' call
        list.e(base);
      }
       while (inductionVariable < dimension);
    return findAll_0(list);
  }
  function BigLFSR$sequence$slambda(this$0, resultContinuation) {
    this.j1c_1 = this$0;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(BigLFSR$sequence$slambda).o1c = function ($this$sequence, $completion) {
    var tmp = this.p1c($this$sequence, $completion);
    tmp.y8_1 = Unit_instance;
    tmp.z8_1 = null;
    return tmp.e9();
  };
  protoOf(BigLFSR$sequence$slambda).v9 = function (p1, $completion) {
    return this.o1c(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(BigLFSR$sequence$slambda).e9 = function () {
    var suspendResult = this.y8_1;
    $sm: do
      try {
        var tmp = this.w8_1;
        switch (tmp) {
          case 0:
            this.x8_1 = 7;
            this.l1c_1 = this.j1c_1.y1b_1;
            this.w8_1 = 1;
            suspendResult = this.k1c_1.gf(this.l1c_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 1:
            this.w8_1 = 2;
            continue $sm;
          case 2:
            if (false) {}

            this.n1c_1 = this.l1c_1.xt(new Long(0, 0));
            this.m1c_1 = this.l1c_1.g3(1);
            if (this.n1c_1) {
              this.m1c_1 = this.m1c_1.fu(this.j1c_1.z1b_1);
            }

            if (this.m1c_1.equals(this.j1c_1.y1b_1)) {
              this.w8_1 = 5;
              suspendResult = this.k1c_1.gf(Companion_getInstance().so_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.w8_1 = 3;
              suspendResult = this.k1c_1.gf(this.m1c_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            }

          case 3:
            this.w8_1 = 4;
            continue $sm;
          case 4:
            this.l1c_1 = this.m1c_1;
            this.w8_1 = 2;
            continue $sm;
          case 5:
            this.w8_1 = 6;
            continue $sm;
          case 6:
            return Unit_instance;
          case 7:
            throw this.z8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.x8_1 === 7) {
          throw e;
        } else {
          this.w8_1 = this.x8_1;
          this.z8_1 = e;
        }
      }
     while (true);
  };
  protoOf(BigLFSR$sequence$slambda).p1c = function ($this$sequence, completion) {
    var i = new BigLFSR$sequence$slambda(this.j1c_1, completion);
    i.k1c_1 = $this$sequence;
    return i;
  };
  function BigLFSR$sequence$slambda_0(this$0, resultContinuation) {
    var i = new BigLFSR$sequence$slambda(this$0, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.o1c($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function BigLFSR(primitivePoly, start) {
    start = start === VOID ? Companion_getInstance().to_1 : start;
    this.y1b_1 = start;
    this.z1b_1 = primitivePoly.g3(1);
  }
  protoOf(BigLFSR).a1c = function () {
    return sequence(BigLFSR$sequence$slambda_0(this, null));
  };
  function makeBigIntFromTaps(taps) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(taps, 10));
    var _iterator__ex2g4s = taps.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.sampling.makeBigIntFromTaps.<anonymous>' call
      var tmp = Companion_getInstance();
      var tmp_0 = 0;
      var tmp_1 = item + 1 | 0;
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp_2 = fillArrayVal(Array(tmp_1), null);
      while (tmp_0 < tmp_1) {
        var tmp_3 = tmp_0;
        var tmp$ret$1 = tmp_3 === 0 ? _Char___init__impl__6a9atx(49) : _Char___init__impl__6a9atx(48);
        tmp_2[tmp_3] = new Char(tmp$ret$1);
        tmp_0 = tmp_0 + 1 | 0;
      }
      var tmp$ret$2 = tmp.nn(joinToString_0(tmp_2, ''), 2);
      destination.e(tmp$ret$2);
    }
    // Inline function 'kotlin.collections.reduce' call
    var iterator = destination.h();
    if (!iterator.i())
      throw UnsupportedOperationException_init_$Create$("Empty collection can't be reduced.");
    var accumulator = iterator.j();
    while (iterator.i()) {
      var tmp3 = accumulator;
      // Inline function 'ai.hypergraph.kaliningraph.sampling.makeBigIntFromTaps.<anonymous>' call
      var c = iterator.j();
      accumulator = tmp3.du(c);
    }
    return accumulator.du(Companion_getInstance().to_1);
  }
  function makeRandBigInt(len) {
    var tmp = Companion_getInstance();
    var tmp_0 = 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(len), null);
    while (tmp_0 < len) {
      var tmp_2 = tmp_0;
      var tmp$ret$1 = tmp_2 === 0 ? _Char___init__impl__6a9atx(49) : Default_getInstance().ak() ? _Char___init__impl__6a9atx(49) : _Char___init__impl__6a9atx(48);
      tmp_1[tmp_2] = new Char(tmp$ret$1);
      tmp_0 = tmp_0 + 1 | 0;
    }
    return tmp.nn(joinToString_0(tmp_1, ''), 2).ho(1);
  }
  function findAll_0(dimensions, cardinalities, asList) {
    var tmp;
    if (cardinalities === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var _iterator__ex2g4s = dimensions.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>' call
        var tmp$ret$0 = item.k();
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = cardinalities;
    }
    cardinalities = tmp;
    var tmp_0;
    if (asList === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var _iterator__ex2g4s_0 = dimensions.h();
      while (_iterator__ex2g4s_0.i()) {
        var item_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>' call
        var tmp$ret$0_0 = shuffled(item_0);
        destination_0.e(tmp$ret$0_0);
      }
      tmp_0 = destination_0;
    } else {
      tmp_0 = asList;
    }
    asList = tmp_0;
    var tmp_1 = all(cardinalities);
    return map(tmp_1, findAll$lambda(asList));
  }
  function all(i, l) {
    l = l === VOID ? emptyList() : l;
    var tmp;
    if (i.r()) {
      tmp = sequenceOf([l]);
    } else {
      var tmp_0 = asSequence(until(0, i.q(0)));
      tmp = flatMap(tmp_0, all$lambda(i, l));
    }
    return tmp;
  }
  function randomVector(size, rand) {
    var tmp;
    if (rand === VOID) {
      tmp = randomVector$lambda;
    } else {
      tmp = rand;
    }
    rand = tmp;
    var tmp_0 = 0;
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp_1 = fillArrayVal(Array(size), null);
    while (tmp_0 < size) {
      tmp_1[tmp_0] = rand();
      tmp_0 = tmp_0 + 1 | 0;
    }
    return toDoubleArray(tmp_1);
  }
  function MDSamplerWithoutReplacement(set, dimension, skip, shift) {
    dimension = dimension === VOID ? 1 : dimension;
    skip = skip === VOID ? 1 : skip;
    shift = shift === VOID ? 0 : shift;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var list = ArrayList_init_$Create$(dimension);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < dimension)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        list.e(set);
      }
       while (inductionVariable < dimension);
    return MDSamplerWithoutReplacement_0(list, VOID, skip, shift);
  }
  function MDSamplerWithoutReplacement_0(dimensions, cardinalities, skip, shift, shuffledDims, bitLens, degree) {
    var tmp;
    if (cardinalities === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var _iterator__ex2g4s = dimensions.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        var tmp$ret$0 = item.k();
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = cardinalities;
    }
    cardinalities = tmp;
    skip = skip === VOID ? 1 : skip;
    shift = shift === VOID ? 0 : shift;
    var tmp_0;
    if (shuffledDims === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var _iterator__ex2g4s_0 = dimensions.h();
      while (_iterator__ex2g4s_0.i()) {
        var item_0 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        var tmp$ret$0_0 = shuffled(item_0);
        destination_0.e(tmp$ret$0_0);
      }
      tmp_0 = destination_0;
    } else {
      tmp_0 = shuffledDims;
    }
    shuffledDims = tmp_0;
    var tmp_1;
    if (bitLens === VOID) {
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
      var _iterator__ex2g4s_1 = dimensions.h();
      while (_iterator__ex2g4s_1.i()) {
        var item_1 = _iterator__ex2g4s_1.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.stub_for_inlining' call
        var tmp$ret$0_1 = item_1.k();
        destination_1.e(tmp$ret$0_1);
      }
      tmp_1 = toBitLens2(destination_1);
    } else {
      tmp_1 = bitLens;
    }
    bitLens = tmp_1;
    degree = degree === VOID ? sum(bitLens) : degree;
    var tmp_2;
    if (degree < 4) {
      tmp_2 = shuffled_0(findAll_0(dimensions));
    } else {
      // Inline function 'kotlin.collections.contains' call
      // Inline function 'kotlin.collections.containsKey' call
      var this_0 = Polynomials_getInstance().x1b_1;
      if (!(isInterface(this_0, KtMap) ? this_0 : THROW_CCE()).j2(degree)) {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_2 = ArrayList_init_$Create$(collectionSizeOrDefault(dimensions, 10));
        var _iterator__ex2g4s_2 = dimensions.h();
        while (_iterator__ex2g4s_2.i()) {
          var item_2 = _iterator__ex2g4s_2.j();
          // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
          var tmp$ret$11 = item_2.k();
          destination_2.e(tmp$ret$11);
        }
        throw Exception_init_$Create$('Space is too large! (' + degree + ') dim=' + joinToString(destination_2, 'x', '[', ']'));
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
        var it = LFSR(degree);
        var tmp_3;
        if (skip === 1) {
          tmp_3 = it;
        } else {
          tmp_3 = filterIndexed(it, MDSamplerWithoutReplacement$lambda(skip, shift));
        }
        var tmp_4 = tmp_3;
        var tmp_5 = hastyPuddingTrick(map(tmp_4, MDSamplerWithoutReplacement$lambda_0(degree)), cardinalities);
        var tmp_6 = map(tmp_5, MDSamplerWithoutReplacement$lambda_1(shuffledDims));
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_3 = ArrayList_init_$Create$(collectionSizeOrDefault(shuffledDims, 10));
        var _iterator__ex2g4s_3 = shuffledDims.h();
        while (_iterator__ex2g4s_3.i()) {
          var item_3 = _iterator__ex2g4s_3.j();
          // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>' call
          var tmp$ret$16 = item_3.q(0);
          destination_3.e(tmp$ret$16);
        }
        tmp_2 = plus_5(tmp_6, sequenceOf([destination_3]));
      }
    }
    return tmp_2;
  }
  function toBitLens2(_this__u8e3s4) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(_this__u8e3s4, 10));
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.sampling.toBitLens2.<anonymous>' call
      var tmp$ret$0 = log_2(item);
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function hastyPuddingTrick(_this__u8e3s4, cardinalities) {
    var tmp = map(_this__u8e3s4, hastyPuddingTrick$lambda(cardinalities));
    return filter(tmp, hastyPuddingTrick$lambda_0(cardinalities));
  }
  function toBitList2(_this__u8e3s4, len) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var bits = ArrayList_init_$Create$_0();
    var i = _this__u8e3s4;
    var inductionVariable = 0;
    if (inductionVariable < len)
      do {
        var j = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp0 = i;
        // Inline function 'kotlin.ULong.and' call
        var other = _ULong___init__impl__c78o9k(new Long(1, 0));
        var tmp$ret$1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0).i3(_ULong___get_data__impl__fggpzb(other)));
        bits.e(equals(tmp$ret$1, _ULong___init__impl__c78o9k(new Long(1, 0))));
        // Inline function 'kotlin.ULong.shr' call
        var this_0 = i;
        i = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(1));
      }
       while (inductionVariable < len);
    return bits;
  }
  function LFSR(degree, primitivePolynomial) {
    degree = degree === VOID ? 16 : degree;
    var tmp;
    if (primitivePolynomial === VOID) {
      // Inline function 'kotlin.collections.random' call
      var this_0 = ensureNotNull(Polynomials_getInstance().x1b_1.l2(degree));
      var tmp$ret$0 = random(this_0, Default_getInstance());
      // Inline function 'kotlin.text.mapIndexedNotNull' call
      var tmp0 = toString_3(tmp$ret$0, 2);
      // Inline function 'kotlin.text.mapIndexedNotNullTo' call
      var destination = ArrayList_init_$Create$_0();
      // Inline function 'kotlin.text.forEachIndexed' call
      var index = 0;
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(tmp0)) {
        var item = charSequenceGet(tmp0, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        // Inline function 'kotlin.text.mapIndexedNotNullTo.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.sampling.LFSR.<anonymous>' call
        var tmp0_safe_receiver = item === _Char___init__impl__6a9atx(49) ? _unary__edvuaz : null;
        if (tmp0_safe_receiver == null)
          null;
        else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.text.mapIndexedNotNullTo.<anonymous>.<anonymous>' call
          destination.e(tmp0_safe_receiver);
        }
      }
      tmp = destination;
    } else {
      tmp = primitivePolynomial;
    }
    primitivePolynomial = tmp;
    var tmp_0;
    if (degree === 0) {
      tmp_0 = sequenceOf([]);
    } else {
      tmp_0 = sequence(LFSR$slambda_0(degree, primitivePolynomial, null));
    }
    return tmp_0;
  }
  function log_2(x) {
    var i = 0;
    var j = x;
    while (j > 0) {
      j = j >> 1;
      i = i + 1 | 0;
    }
    return i;
  }
  function toIndexes2(_this__u8e3s4, bitLens) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var indexes = ArrayList_init_$Create$_0();
    var i = 0;
    var _iterator__ex2g4s = bitLens.h();
    while (_iterator__ex2g4s.i()) {
      var len = _iterator__ex2g4s.j();
      indexes.e(toIntFast(_this__u8e3s4.f2(i, i + len | 0)));
      i = i + len | 0;
    }
    return indexes;
  }
  function toIntFast(_this__u8e3s4) {
    var i = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var b = _iterator__ex2g4s.j();
      i = i << 1 | (b ? 1 : 0);
    }
    return i;
  }
  function choose$lambda$lambda(it) {
    return toSet_0(it);
  }
  function choose$lambda($this_choose) {
    return function (it) {
      var tmp = findAll($this_choose, it);
      return map(tmp, choose$lambda$lambda);
    };
  }
  function bigLFSRSequence$lambda($maxVal) {
    return function (it) {
      return it.hr($maxVal) < 0;
    };
  }
  function findAll$lambda($asList) {
    return function (it) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = zip($asList, it);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.findAll.<anonymous>.<anonymous>' call
        var l = item.ye();
        var i = item.ze();
        var tmp$ret$0 = l.q(i);
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function all$lambda($i, $l) {
    return function (it) {
      return all(drop_0($i, 1), plus_4($l, it));
    };
  }
  function randomVector$lambda() {
    return Default_getInstance().bk();
  }
  function MDSamplerWithoutReplacement$lambda($skip, $shift) {
    return function (i, _unused_var__etf5q3) {
      return (i % $skip | 0) === $shift;
    };
  }
  function MDSamplerWithoutReplacement$lambda_0($degree) {
    return function (it) {
      return toBitList2(it.s1_1, $degree);
    };
  }
  function MDSamplerWithoutReplacement$lambda_1($shuffledDims) {
    return function (it) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = zip($shuffledDims, it);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.sampling.MDSamplerWithoutReplacement.<anonymous>.<anonymous>' call
        var dims = item.ye();
        var idx = item.ze();
        var tmp$ret$0 = dims.q(idx);
        destination.e(tmp$ret$0);
      }
      return destination;
    };
  }
  function hastyPuddingTrick$lambda($cardinalities) {
    return function (it) {
      return toIndexes2(it, toBitLens2($cardinalities));
    };
  }
  function hastyPuddingTrick$lambda_0($cardinalities) {
    return function (it) {
      var tmp0 = zip(it, $cardinalities);
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp;
        if (isInterface(tmp0, Collection)) {
          tmp = tmp0.r();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.sampling.hastyPuddingTrick.<anonymous>.<anonymous>' call
          var a = element.ye();
          var b = element.ze();
          if (!(a < b)) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function LFSR$slambda($degree, $primitivePolynomial, resultContinuation) {
    this.y1c_1 = $degree;
    this.z1c_1 = $primitivePolynomial;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(LFSR$slambda).g1d = function ($this$sequence, $completion) {
    var tmp = this.h1d($this$sequence, $completion);
    tmp.y8_1 = Unit_instance;
    tmp.z8_1 = null;
    return tmp.e9();
  };
  protoOf(LFSR$slambda).v9 = function (p1, $completion) {
    return this.g1d(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(LFSR$slambda).e9 = function () {
    var suspendResult = this.y8_1;
    $sm: do
      try {
        var tmp = this.w8_1;
        switch (tmp) {
          case 0:
            this.x8_1 = 4;
            this.b1d_1 = (new Long(1, 0)).f3(this.y1c_1);
            var tmp_0 = this;
            var tmp_1 = Default_getInstance();
            var tmp1 = _ULong___init__impl__c78o9k(new Long(1, 0));
            var this_0 = this.b1d_1;
            var other = _ULong___init__impl__c78o9k(this_0);
            tmp_0.c1d_1 = nextULong(tmp_1, new ULongRange(tmp1, other));
            this.d1d_1 = this.c1d_1;
            this.e1d_1 = 0;
            this.w8_1 = 1;
            continue $sm;
          case 1:
            var tmp_2 = this;
            var tmp3 = this.z1c_1;
            var accumulator = new ULong(_ULong___init__impl__c78o9k(new Long(0, 0)));
            var _iterator__ex2g4s = tmp3.h();
            while (_iterator__ex2g4s.i()) {
              var element = _iterator__ex2g4s.j();
              var tmp2 = accumulator.s1_1;
              var this_1 = this.d1d_1;
              var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_1).h3(element));
              accumulator = new ULong(_ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).k3(_ULong___get_data__impl__fggpzb(other_0))));
            }

            var tmp7 = accumulator.s1_1;
            var other_1 = _ULong___init__impl__c78o9k(new Long(1, 0));
            tmp_2.f1d_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7).i3(_ULong___get_data__impl__fggpzb(other_1)));
            var tmp_3 = this;
            var this_2 = this.d1d_1;
            var tmp13 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(1));
            var tmp11 = this.f1d_1;
            var bitCount = this.y1c_1 - 1 | 0;
            var other_2 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp11).f3(bitCount));
            tmp_3.d1d_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp13).j3(_ULong___get_data__impl__fggpzb(other_2)));
            this.w8_1 = 2;
            suspendResult = this.a1d_1.gf(new ULong(this.d1d_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.e1d_1 = this.e1d_1 + 1 | 0;
            var tmp_4 = toLong(this.e1d_1);
            var this_3 = this.b1d_1;
            if (tmp_4.d1(this_3.x2(toLong(1))) < 0) {
              this.w8_1 = 1;
              continue $sm;
            }

            this.w8_1 = 3;
            continue $sm;
          case 3:
            return Unit_instance;
          case 4:
            throw this.z8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.x8_1 === 4) {
          throw e;
        } else {
          this.w8_1 = this.x8_1;
          this.z8_1 = e;
        }
      }
     while (true);
  };
  protoOf(LFSR$slambda).h1d = function ($this$sequence, completion) {
    var i = new LFSR$slambda(this.y1c_1, this.z1c_1, completion);
    i.a1d_1 = $this$sequence;
    return i;
  };
  function LFSR$slambda_0($degree, $primitivePolynomial, resultContinuation) {
    var i = new LFSR$slambda($degree, $primitivePolynomial, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.g1d($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function get_idxs(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return idxs$delegate.uj(_this__u8e3s4, idxs$factory());
  }
  var idxs$delegate;
  function get_rows(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return rows$delegate.uj(_this__u8e3s4, rows$factory());
  }
  var rows$delegate;
  function get_cols(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return cols$delegate.uj(_this__u8e3s4, cols$factory());
  }
  var cols$delegate;
  function get_transpose(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return transpose$delegate.uj(_this__u8e3s4, transpose$factory());
  }
  var transpose$delegate;
  function get_BOOLEAN_ALGEBRA() {
    _init_properties_Tensor_kt__gweomx();
    return BOOLEAN_ALGEBRA;
  }
  var BOOLEAN_ALGEBRA;
  var XOR_ALGEBRA;
  var INTEGER_FIELD;
  function get_DOUBLE_FIELD() {
    _init_properties_Tensor_kt__gweomx();
    return DOUBLE_FIELD;
  }
  var DOUBLE_FIELD;
  var MINPLUS_ALGEBRA;
  var MAXPLUS_ALGEBRA;
  var GF2_ALGEBRA;
  function DoubleMatrix_init_$Init$(numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.DoubleMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    DoubleMatrix.call($this, numRows, numCols, list);
    return $this;
  }
  function DoubleMatrix_init_$Create$(numRows, numCols, f) {
    return DoubleMatrix_init_$Init$(numRows, numCols, f, objectCreate(protoOf(DoubleMatrix)));
  }
  function Companion_2() {
  }
  var Companion_instance_2;
  function Companion_getInstance_3() {
    return Companion_instance_2;
  }
  function DoubleMatrix(numRows, numCols, data, algebra) {
    numCols = numCols === VOID ? numRows : numCols;
    algebra = algebra === VOID ? get_DOUBLE_FIELD() : algebra;
    AbstractMatrix.call(this, algebra, numRows, numCols);
    this.iy_1 = numRows;
    this.jy_1 = numCols;
    this.ky_1 = data;
    this.ly_1 = algebra;
  }
  protoOf(DoubleMatrix).wy = function () {
    return this.iy_1;
  };
  protoOf(DoubleMatrix).xy = function () {
    return this.jy_1;
  };
  protoOf(DoubleMatrix).ay = function () {
    return this.ky_1;
  };
  protoOf(DoubleMatrix).i1d = function () {
    return this.ly_1;
  };
  protoOf(DoubleMatrix).j1d = function (that) {
    return this.k1d(times_0(-1.0, that));
  };
  protoOf(DoubleMatrix).l1d = function (rows, cols, data, alg) {
    return new DoubleMatrix(rows, cols, data, alg);
  };
  protoOf(DoubleMatrix).m1d = function (rows, cols, data, alg) {
    return this.l1d(rows, cols, data, isInterface(alg, Field) ? alg : THROW_CCE());
  };
  function Matrix$plus$lambda(this$0, $t) {
    return function ($this$safeJoin, i, j) {
      return $this$safeJoin.w1d(this$0.yy(i, j), $t.yy(i, j));
    };
  }
  function Matrix() {
  }
  function FreeMatrix_init_$Init$(numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    FreeMatrix.call($this, numRows, numCols, list);
    return $this;
  }
  function FreeMatrix_init_$Create$(numRows, numCols, f) {
    return FreeMatrix_init_$Init$(numRows, numCols, f, objectCreate(protoOf(FreeMatrix)));
  }
  function FreeMatrix_init_$Init$_0(algebra, numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    FreeMatrix.call($this, numRows, numCols, list, algebra);
    return $this;
  }
  function FreeMatrix_init_$Create$_0(algebra, numRows, numCols, f) {
    return FreeMatrix_init_$Init$_0(algebra, numRows, numCols, f, objectCreate(protoOf(FreeMatrix)));
  }
  function FreeMatrix$toString$lambda($colWidth) {
    return function (it) {
      // Inline function 'kotlin.collections.mapIndexed' call
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(it, 10));
      var index = 0;
      var _iterator__ex2g4s = it.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>.<anonymous>.<anonymous>' call
        var i = checkIndexOverflow(_unary__edvuaz);
        var tmp$ret$0 = padEnd(toString_1(item), $colWidth.q(i));
        destination.e(tmp$ret$0);
      }
      return joinToString(destination, '  |  ', '|  ', '  |');
    };
  }
  function FreeMatrix(numRows, numCols, data, algebra) {
    numCols = numCols === VOID ? numRows : numCols;
    var tmp;
    if (algebra === VOID) {
      var tmp_0 = TODO_ALGEBRA(firstOrNull_0(data));
      tmp = isInterface(tmp_0, Ring) ? tmp_0 : THROW_CCE();
    } else {
      tmp = algebra;
    }
    algebra = tmp;
    AbstractMatrix.call(this, algebra, numRows, numCols);
    this.sy_1 = numRows;
    this.ty_1 = numCols;
    this.uy_1 = data;
    this.vy_1 = algebra;
  }
  protoOf(FreeMatrix).wy = function () {
    return this.sy_1;
  };
  protoOf(FreeMatrix).xy = function () {
    return this.ty_1;
  };
  protoOf(FreeMatrix).ay = function () {
    return this.uy_1;
  };
  protoOf(FreeMatrix).i1d = function () {
    return this.vy_1;
  };
  protoOf(FreeMatrix).x1d = function (rows, cols, data, alg) {
    return new FreeMatrix(rows, cols, data, this.i1d());
  };
  protoOf(FreeMatrix).m1d = function (rows, cols, data, alg) {
    return this.x1d(rows, cols, data, isInterface(alg, Ring) ? alg : THROW_CCE());
  };
  protoOf(FreeMatrix).toString = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_cols(this);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>' call
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = item.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>.<anonymous>' call
      var it = iterator.j();
      var maxValue = toString_1(it).length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>.<anonymous>' call
        var it_0 = iterator.j();
        var v = toString_1(it_0).length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      var tmp$ret$3 = maxValue;
      destination.e(tmp$ret$3);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.tensor.FreeMatrix.toString.<anonymous>' call
    var tmp = get_rows(this);
    return '\n' + joinToString(tmp, '\n', VOID, VOID, VOID, VOID, FreeMatrix$toString$lambda(destination));
  };
  function flip(_this__u8e3s4, $this) {
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = _this__u8e3s4.k();
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.Companion.flip.<anonymous>' call
        // Inline function 'kotlin.collections.mapNotNull' call
        // Inline function 'kotlin.collections.mapNotNullTo' call
        var destination = ArrayList_init_$Create$_0();
        // Inline function 'kotlin.collections.forEach' call
        var _iterator__ex2g4s = _this__u8e3s4.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
          // Inline function 'ai.hypergraph.kaliningraph.tensor.Companion.flip.<anonymous>.<anonymous>' call
          // Inline function 'kotlin.collections.elementAtOrNull' call
          var tmp0_safe_receiver = getOrNull(element, index);
          if (tmp0_safe_receiver == null)
            null;
          else {
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>.<anonymous>' call
            destination.e(tmp0_safe_receiver);
          }
        }
        list.e(destination);
      }
       while (inductionVariable < size);
    return list;
  }
  function UTMatrix_init_$Init$(ts, algebra, $this) {
    UTMatrix.call($this, listOf(toList_1(ts)), algebra);
    return $this;
  }
  function UTMatrix_init_$Create$(ts, algebra) {
    return UTMatrix_init_$Init$(ts, algebra, objectCreate(protoOf(UTMatrix)));
  }
  function UTMatrix_init_$Init$_0(numRows, numCols, data, alg, $this) {
    var tmp0_subject = data.k();
    var tmp;
    if (tmp0_subject === imul(numRows, numCols)) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = until(0, numRows);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var inductionVariable = this_0.pk_1;
      var last = this_0.qk_1;
      if (inductionVariable <= last)
        do {
          var item = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.<init>.<anonymous>' call
          var r = item;
          // Inline function 'kotlin.collections.mapNotNull' call
          var tmp0 = until(r + 1 | 0, numCols);
          // Inline function 'kotlin.collections.mapNotNullTo' call
          var destination_0 = ArrayList_init_$Create$_0();
          // Inline function 'kotlin.collections.forEach' call
          var inductionVariable_0 = tmp0.pk_1;
          var last_0 = tmp0.qk_1;
          if (inductionVariable_0 <= last_0)
            do {
              var element = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
              // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.<init>.<anonymous>.<anonymous>' call
              var c = element;
              var tmp0_safe_receiver = data.q(imul(r, numCols) + c | 0);
              if (tmp0_safe_receiver == null)
                null;
              else {
                // Inline function 'kotlin.let' call
                // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>.<anonymous>' call
                destination_0.e(tmp0_safe_receiver);
              }
            }
             while (!(element === last_0));
          destination.e(destination_0);
        }
         while (!(item === last));
      tmp = dropLast_0(flip(destination, Companion_instance_3), 1);
    } else if (tmp0_subject === ((imul(numRows, numCols) - numRows | 0) / 2 | 0)) {
      var tmp2 = downTo(numCols - 1 | 0, 1);
      // Inline function 'kotlin.collections.listOf' call
      var tmp$ret$7 = emptyList();
      // Inline function 'kotlin.collections.fold' call
      var accumulator = to(tmp$ret$7, 0);
      var inductionVariable_1 = tmp2.pk_1;
      var last_1 = tmp2.qk_1;
      var step = tmp2.rk_1;
      if (step > 0 && inductionVariable_1 <= last_1 || (step < 0 && last_1 <= inductionVariable_1))
        do {
          var element_0 = inductionVariable_1;
          inductionVariable_1 = inductionVariable_1 + step | 0;
          var tmp4 = accumulator;
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.<init>.<anonymous>' call
          var i = element_0;
          accumulator = to(plus(tmp4.we_1, listOf(data.f2(tmp4.xe_1, tmp4.xe_1 + i | 0))), tmp4.xe_1 + i | 0);
        }
         while (!(element_0 === last_1));
      var tmp$ret$9 = accumulator;
      tmp = flip(tmp$ret$9.we_1, Companion_instance_3);
    } else {
      throw Exception_init_$Create$('Invalid UTMatrix shape: ' + numRows + '.' + numCols + ' != ' + data.k());
    }
    UTMatrix.call($this, tmp, alg);
    return $this;
  }
  function UTMatrix_init_$Create$_0(numRows, numCols, data, alg) {
    return UTMatrix_init_$Init$_0(numRows, numCols, data, alg, objectCreate(protoOf(UTMatrix)));
  }
  function Companion_3() {
  }
  var Companion_instance_3;
  function Companion_getInstance_4() {
    return Companion_instance_3;
  }
  function UTMatrix$data$delegate$lambda(this$0) {
    return function () {
      // Inline function 'kotlin.collections.map' call
      var this_0 = flip(plus(this$0.i1b_1, listOf(emptyList())), Companion_instance_3);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.data$delegate.<anonymous>.<anonymous>' call
        // Inline function 'kotlin.collections.List' call
        // Inline function 'kotlin.collections.MutableList' call
        var size = (this$0.i1b_1.k() + 1 | 0) - item.k() | 0;
        var list = ArrayList_init_$Create$(size);
        // Inline function 'kotlin.repeat' call
        var inductionVariable = 0;
        if (inductionVariable < size)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.collections.MutableList.<anonymous>' call
            // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.data$delegate.<anonymous>.<anonymous>.<anonymous>' call
            var tmp$ret$0 = this$0.i1d().y1d();
            list.e(tmp$ret$0);
          }
           while (inductionVariable < size);
        var tmp$ret$3 = plus(list, item);
        destination.e(tmp$ret$3);
      }
      return flatten(destination);
    };
  }
  function UTMatrix$toFullMatrix$lambda(this$0) {
    return function (r, c) {
      return c <= r ? this$0.i1d().y1d() : this$0.i1b_1.q((c - r | 0) - 1 | 0).q(r);
    };
  }
  function UTMatrix(diagonals, algebra) {
    AbstractMatrix.call(this, algebra, first_0(diagonals).k() + 1 | 0);
    this.i1b_1 = diagonals;
    this.j1b_1 = algebra;
    var tmp = this;
    tmp.k1b_1 = lazy(UTMatrix$data$delegate$lambda(this));
  }
  protoOf(UTMatrix).i1d = function () {
    return this.j1b_1;
  };
  protoOf(UTMatrix).ay = function () {
    var tmp0 = this.k1b_1;
    // Inline function 'kotlin.getValue' call
    data$factory();
    return tmp0.i2();
  };
  protoOf(UTMatrix).z1d = function (carry, iteration, maxIterations) {
    var tmp;
    if (last(this.i1b_1).k() === 1) {
      tmp = this;
    } else if (iteration === maxIterations) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = downTo(last(this.i1b_1).k() - 1 | 0, 1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var inductionVariable = this_0.pk_1;
      var last_0 = this_0.qk_1;
      var step = this_0.rk_1;
      if (step > 0 && inductionVariable <= last_0 || (step < 0 && last_0 <= inductionVariable))
        do {
          var item = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
          // Inline function 'kotlin.collections.List' call
          // Inline function 'kotlin.collections.MutableList' call
          var size = item;
          var list = ArrayList_init_$Create$(size);
          // Inline function 'kotlin.repeat' call
          var inductionVariable_0 = 0;
          if (inductionVariable_0 < size)
            do {
              var index = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              // Inline function 'kotlin.collections.MutableList.<anonymous>' call
              // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
              var tmp$ret$3 = this.i1d().y1d();
              list.e(tmp$ret$3);
            }
             while (inductionVariable_0 < size);
          destination.e(list);
        }
         while (!(item === last_0));
      tmp = new UTMatrix(plus(this.i1b_1, destination), this.i1d());
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_1 = windowed_0(carry, 2, 1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
      var _iterator__ex2g4s = this_1.h();
      while (_iterator__ex2g4s.i()) {
        var item_0 = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
        // Inline function 'kotlin.let' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
        var it = this.i1d().a1e(get_π2(item_0.q(0)), get_π3(item_0.q(1)));
        var tmp$ret$11 = to_1(to(it, plus_4(get_π2(item_0.q(0)), it)), plus(listOf(it), get_π3(item_0.q(1))));
        destination_0.e(tmp$ret$11);
      }
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_1 = ArrayList_init_$Create$(collectionSizeOrDefault(destination_0, 10));
      var _iterator__ex2g4s_0 = destination_0.h();
      while (_iterator__ex2g4s_0.i()) {
        var item_1 = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>.<anonymous>' call
        var tmp$ret$14 = get_π1(item_1);
        destination_1.e(tmp$ret$14);
      }
      tmp = (new UTMatrix(plus(this.i1b_1, listOf(destination_1)), this.i1d())).z1d(destination_0, iteration + 1 | 0, maxIterations);
    }
    return tmp;
  };
  protoOf(UTMatrix).l1b = function (carry, iteration, maxIterations, $super) {
    var tmp;
    if (carry === VOID) {
      // Inline function 'kotlin.collections.map' call
      var this_0 = last(this.i1b_1);
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.UTMatrix.seekFixpoint.<anonymous>' call
        var tmp$ret$0 = to_1(to(item, listOf(item)), listOf(item));
        destination.e(tmp$ret$0);
      }
      tmp = destination;
    } else {
      tmp = carry;
    }
    carry = tmp;
    iteration = iteration === VOID ? 0 : iteration;
    maxIterations = maxIterations === VOID ? first_0(this.i1b_1).k() : maxIterations;
    return $super === VOID ? this.z1d(carry, iteration, maxIterations) : $super.z1d.call(this, carry, iteration, maxIterations);
  };
  protoOf(UTMatrix).n1b = function () {
    var tmp;
    if (!(last(this.i1b_1).k() === 1)) {
      throw IndexOutOfBoundsException_init_$Create$('OOB: [' + first_0(this.i1b_1).k() + ', ' + last(this.i1b_1).k() + ']');
    } else {
      var tmp_0 = this.i1d();
      var tmp_1 = this.i1b_1.k() + 1 | 0;
      var tmp_2 = this.i1b_1.k() + 1 | 0;
      tmp = FreeMatrix_init_$Create$_0(tmp_0, tmp_1, tmp_2, UTMatrix$toFullMatrix$lambda(this));
    }
    return tmp;
  };
  protoOf(UTMatrix).x1d = function (rows, cols, data, alg) {
    return UTMatrix_init_$Create$_0(rows, cols, data, alg);
  };
  protoOf(UTMatrix).m1d = function (rows, cols, data, alg) {
    return this.x1d(rows, cols, data, isInterface(alg, Ring) ? alg : THROW_CCE());
  };
  function toUTMatrix(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    return UTMatrix_init_$Create$_0(_this__u8e3s4.wy(), _this__u8e3s4.xy(), _this__u8e3s4.ay(), _this__u8e3s4.i1d());
  }
  function AbstractMatrix$values$delegate$lambda(this$0) {
    return function () {
      return toSet_0(this$0.ay());
    };
  }
  function AbstractMatrix$map$delegate$lambda(this$0) {
    return function () {
      var tmp0 = get_idxs(this$0);
      // Inline function 'kotlin.collections.mutableMapOf' call
      // Inline function 'kotlin.collections.fold' call
      var accumulator = LinkedHashMap_init_$Create$();
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.map$delegate.<anonymous>.<anonymous>' call
        var map = accumulator;
        // Inline function 'kotlin.collections.component1' call
        var r = element.q(0);
        // Inline function 'kotlin.collections.component2' call
        var c = element.q(1);
        var element_0 = this$0.yy(r, c);
        if (!equals(element_0, this$0.i1d().y1d())) {
          // Inline function 'kotlin.collections.set' call
          var key = Π(r, c, element_0);
          map.b5(key, 1);
        }
        accumulator = map;
      }
      return accumulator;
    };
  }
  function AbstractMatrix$toString$lambda($colWidth) {
    return function (it) {
      // Inline function 'kotlin.collections.mapIndexed' call
      // Inline function 'kotlin.collections.mapIndexedTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(it, 10));
      var index = 0;
      var _iterator__ex2g4s = it.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>.<anonymous>.<anonymous>' call
        var i = checkIndexOverflow(_unary__edvuaz);
        var tmp$ret$0 = padEnd(toString_1(item), $colWidth.q(i));
        destination.e(tmp$ret$0);
      }
      return joinToString(destination, '  ');
    };
  }
  function AbstractMatrix$hash$delegate$lambda(this$0) {
    return function () {
      var result = getObjectHashCode(this$0);
      result = imul(31, result) + this$0.wy() | 0;
      result = imul(31, result) + this$0.xy() | 0;
      result = imul(31, result) + hashCode(this$0.ay()) | 0;
      result = imul(31, result) + hashCode(this$0.i1d()) | 0;
      return result;
    };
  }
  function AbstractMatrix(algebra, numRows, numCols) {
    numCols = numCols === VOID ? numRows : numCols;
    this.n1d_1 = algebra;
    this.o1d_1 = numRows;
    this.p1d_1 = numCols;
    var tmp = this;
    tmp.q1d_1 = lazy(AbstractMatrix$values$delegate$lambda(this));
    var tmp_0 = this;
    tmp_0.r1d_1 = lazy(AbstractMatrix$map$delegate$lambda(this));
    var tmp_1 = this;
    tmp_1.s1d_1 = lazy(AbstractMatrix$hash$delegate$lambda(this));
  }
  protoOf(AbstractMatrix).i1d = function () {
    return this.n1d_1;
  };
  protoOf(AbstractMatrix).wy = function () {
    return this.o1d_1;
  };
  protoOf(AbstractMatrix).xy = function () {
    return this.p1d_1;
  };
  protoOf(AbstractMatrix).toString = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_cols(this);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>' call
      // Inline function 'kotlin.collections.maxOf' call
      var iterator = item.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>.<anonymous>' call
      var it = iterator.j();
      var maxValue = toString_1(it).length;
      while (iterator.i()) {
        // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>.<anonymous>' call
        var it_0 = iterator.j();
        var v = toString_1(it_0).length;
        if (compareTo(maxValue, v) < 0) {
          maxValue = v;
        }
      }
      var tmp$ret$3 = maxValue;
      destination.e(tmp$ret$3);
    }
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.tensor.AbstractMatrix.toString.<anonymous>' call
    var tmp = get_rows(this);
    return '\n' + joinToString(tmp, '\n', VOID, VOID, VOID, VOID, AbstractMatrix$toString$lambda(destination));
  };
  protoOf(AbstractMatrix).equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other instanceof AbstractMatrix))
      THROW_CCE();
    if (!(this.wy() === other.wy()))
      return false;
    if (!(this.xy() === other.xy()))
      return false;
    if (!equals(this.ay(), other.ay()))
      return false;
    return true;
  };
  protoOf(AbstractMatrix).q17 = function () {
    var tmp0 = this.s1d_1;
    // Inline function 'kotlin.getValue' call
    hash$factory_0();
    return tmp0.i2();
  };
  protoOf(AbstractMatrix).hashCode = function () {
    return this.q17();
  };
  function times_0(_this__u8e3s4, value) {
    _init_properties_Tensor_kt__gweomx();
    return times_1(value, _this__u8e3s4);
  }
  function TODO_ALGEBRA(t) {
    _init_properties_Tensor_kt__gweomx();
    var tmp = TODO_ALGEBRA$lambda;
    return new of_1(t, VOID, tmp, TODO_ALGEBRA$lambda_0);
  }
  function times_1(_this__u8e3s4, value) {
    _init_properties_Tensor_kt__gweomx();
    var tmp = _this__u8e3s4.wy();
    var tmp_0 = _this__u8e3s4.xy();
    // Inline function 'kotlin.collections.map' call
    var this_0 = _this__u8e3s4.ay();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.tensor.times.<anonymous>' call
      var tmp$ret$0 = item * value;
      destination.e(tmp$ret$0);
    }
    return new DoubleMatrix(tmp, tmp_0, destination);
  }
  function BooleanMatrix$Companion$one$lambda(i, j) {
    return i === j;
  }
  function BooleanMatrix_init_$Init$(numRows, numCols, f, $this) {
    numCols = numCols === VOID ? numRows : numCols;
    // Inline function 'kotlin.collections.List' call
    // Inline function 'kotlin.collections.MutableList' call
    var size = imul(numRows, numCols);
    var list = ArrayList_init_$Create$(size);
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < size)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.MutableList.<anonymous>' call
        // Inline function 'ai.hypergraph.kaliningraph.tensor.BooleanMatrix.<init>.<anonymous>' call
        var tmp$ret$0 = f(index / numCols | 0, index % numCols | 0);
        list.e(tmp$ret$0);
      }
       while (inductionVariable < size);
    BooleanMatrix.call($this, numRows, numCols, list);
    return $this;
  }
  function BooleanMatrix_init_$Create$(numRows, numCols, f) {
    return BooleanMatrix_init_$Init$(numRows, numCols, f, objectCreate(protoOf(BooleanMatrix)));
  }
  function Companion_4() {
  }
  protoOf(Companion_4).b1e = function (size) {
    return BooleanMatrix_init_$Create$(size, VOID, BooleanMatrix$Companion$one$lambda);
  };
  var Companion_instance_4;
  function Companion_getInstance_5() {
    return Companion_instance_4;
  }
  function BooleanMatrix$isFull$delegate$lambda(this$0) {
    return function () {
      var tmp0 = this$0.ay();
      var tmp$ret$0;
      $l$block_0: {
        // Inline function 'kotlin.collections.all' call
        var tmp;
        if (isInterface(tmp0, Collection)) {
          tmp = tmp0.r();
        } else {
          tmp = false;
        }
        if (tmp) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
        var _iterator__ex2g4s = tmp0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.tensor.BooleanMatrix.isFull$delegate.<anonymous>.<anonymous>' call
          if (!element) {
            tmp$ret$0 = false;
            break $l$block_0;
          }
        }
        tmp$ret$0 = true;
      }
      return tmp$ret$0;
    };
  }
  function BooleanMatrix$toString$lambda(it) {
    return joinToString(it, ' ', VOID, VOID, VOID, VOID, BooleanMatrix$toString$lambda$lambda);
  }
  function BooleanMatrix$toString$lambda$lambda(it) {
    return it ? '1' : '0';
  }
  function BooleanMatrix(numRows, numCols, data, algebra) {
    numCols = numCols === VOID ? numRows : numCols;
    algebra = algebra === VOID ? get_BOOLEAN_ALGEBRA() : algebra;
    AbstractMatrix.call(this, algebra, numRows, numCols);
    this.i1e_1 = numRows;
    this.j1e_1 = numCols;
    this.k1e_1 = data;
    this.l1e_1 = algebra;
    var tmp = this;
    tmp.m1e_1 = lazy(BooleanMatrix$isFull$delegate$lambda(this));
  }
  protoOf(BooleanMatrix).wy = function () {
    return this.i1e_1;
  };
  protoOf(BooleanMatrix).xy = function () {
    return this.j1e_1;
  };
  protoOf(BooleanMatrix).ay = function () {
    return this.k1e_1;
  };
  protoOf(BooleanMatrix).i1d = function () {
    return this.l1e_1;
  };
  protoOf(BooleanMatrix).toString = function () {
    var tmp = chunked(this.ay(), this.xy());
    return joinToString(tmp, '\n', '\n', VOID, VOID, VOID, BooleanMatrix$toString$lambda);
  };
  protoOf(BooleanMatrix).n1e = function (rows, cols, data, alg) {
    return new BooleanMatrix(rows, cols, data, alg);
  };
  protoOf(BooleanMatrix).m1d = function (rows, cols, data, alg) {
    return this.n1e(rows, cols, data, isInterface(alg, Ring) ? alg : THROW_CCE());
  };
  function minus_3(_this__u8e3s4, mat) {
    _init_properties_Tensor_kt__gweomx();
    return _this__u8e3s4.j1d(toDoubleMatrix_0(mat));
  }
  function toDoubleMatrix_0(_this__u8e3s4) {
    _init_properties_Tensor_kt__gweomx();
    var tmp = _this__u8e3s4.wy();
    var tmp_0 = _this__u8e3s4.xy();
    return DoubleMatrix_init_$Create$(tmp, tmp_0, toDoubleMatrix$lambda_0(_this__u8e3s4));
  }
  function idxs$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    return allPairs($this$cache.wy(), $this$cache.xy());
  }
  function rows$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    return chunked($this$cache.ay(), $this$cache.xy());
  }
  function cols$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.collections.map' call
    var this_0 = until(0, $this$cache.xy());
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var inductionVariable = this_0.pk_1;
    var last = this_0.qk_1;
    if (inductionVariable <= last)
      do {
        var item = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'ai.hypergraph.kaliningraph.tensor.cols$delegate.<anonymous>.<anonymous>' call
        var c = item;
        // Inline function 'kotlin.collections.map' call
        var this_1 = get_rows($this$cache);
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
        var _iterator__ex2g4s = this_1.h();
        while (_iterator__ex2g4s.i()) {
          var item_0 = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.tensor.cols$delegate.<anonymous>.<anonymous>.<anonymous>' call
          var tmp$ret$0 = item_0.q(c);
          destination_0.e(tmp$ret$0);
        }
        destination.e(destination_0);
      }
       while (!(item === last));
    return destination;
  }
  function transpose$delegate$lambda($this$cache) {
    _init_properties_Tensor_kt__gweomx();
    return $this$cache.by($this$cache.xy(), $this$cache.wy(), flatten(get_cols($this$cache)));
  }
  function BOOLEAN_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a || b;
  }
  function BOOLEAN_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a && b;
  }
  function XOR_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return !!(a ^ b);
  }
  function XOR_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return !!(a & b);
  }
  function INTEGER_FIELD$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b | 0;
  }
  function INTEGER_FIELD$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return imul(a, b);
  }
  function INTEGER_FIELD$lambda_1($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a - b | 0;
  }
  function INTEGER_FIELD$lambda_2($this$of, _unused_var__etf5q3, _unused_var__etf5q3_0) {
    _init_properties_Tensor_kt__gweomx();
    throw new NotImplementedError('Division not defined on integer field.');
  }
  function DOUBLE_FIELD$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b;
  }
  function DOUBLE_FIELD$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a * b;
  }
  function DOUBLE_FIELD$lambda_1($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a - b;
  }
  function DOUBLE_FIELD$lambda_2($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a / b;
  }
  function MINPLUS_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.math.min' call
    return Math.min(a, b);
  }
  function MINPLUS_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b | 0;
  }
  function MAXPLUS_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.math.max' call
    return Math.max(a, b);
  }
  function MAXPLUS_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return a + b | 0;
  }
  function GF2_ALGEBRA$lambda($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return (a + b | 0) % 2 | 0;
  }
  function GF2_ALGEBRA$lambda_0($this$of, a, b) {
    _init_properties_Tensor_kt__gweomx();
    return imul(a, b) % 2 | 0;
  }
  function TODO_ALGEBRA$lambda($this$of, _unused_var__etf5q3, _unused_var__etf5q3_0) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.TODO' call
    throw new NotImplementedError();
  }
  function TODO_ALGEBRA$lambda_0($this$of, _unused_var__etf5q3, _unused_var__etf5q3_0) {
    _init_properties_Tensor_kt__gweomx();
    // Inline function 'kotlin.TODO' call
    throw new NotImplementedError();
  }
  function toDoubleMatrix$lambda_0($this_toDoubleMatrix) {
    return function (i, j) {
      return $this_toDoubleMatrix.yy(i, j) ? 1.0 : 0.0;
    };
  }
  function idxs$factory() {
    return getPropertyCallableRef('idxs', 1, KProperty1, function (receiver) {
      return get_idxs(receiver);
    }, null);
  }
  function rows$factory() {
    return getPropertyCallableRef('rows', 1, KProperty1, function (receiver) {
      return get_rows(receiver);
    }, null);
  }
  function cols$factory() {
    return getPropertyCallableRef('cols', 1, KProperty1, function (receiver) {
      return get_cols(receiver);
    }, null);
  }
  function transpose$factory() {
    return getPropertyCallableRef('transpose', 1, KProperty1, function (receiver) {
      return get_transpose(receiver);
    }, null);
  }
  function data$factory() {
    return getPropertyCallableRef('data', 1, KProperty1, function (receiver) {
      return receiver.ay();
    }, null);
  }
  function hash$factory_0() {
    return getPropertyCallableRef('hash', 1, KProperty1, function (receiver) {
      return receiver.q17();
    }, null);
  }
  var properties_initialized_Tensor_kt_e1l3et;
  function _init_properties_Tensor_kt__gweomx() {
    if (!properties_initialized_Tensor_kt_e1l3et) {
      properties_initialized_Tensor_kt_e1l3et = true;
      idxs$delegate = cache_0(VOID, idxs$delegate$lambda);
      rows$delegate = cache_0(VOID, rows$delegate$lambda);
      cols$delegate = cache_0(VOID, cols$delegate$lambda);
      transpose$delegate = cache_0(VOID, transpose$delegate$lambda);
      var tmp = BOOLEAN_ALGEBRA$lambda;
      BOOLEAN_ALGEBRA = new of_1(false, true, tmp, BOOLEAN_ALGEBRA$lambda_0);
      var tmp_0 = XOR_ALGEBRA$lambda;
      XOR_ALGEBRA = new of_1(false, true, tmp_0, XOR_ALGEBRA$lambda_0);
      var tmp_1 = INTEGER_FIELD$lambda;
      var tmp_2 = INTEGER_FIELD$lambda_0;
      var tmp_3 = INTEGER_FIELD$lambda_1;
      INTEGER_FIELD = new of_0(0, 1, tmp_1, tmp_2, tmp_3, INTEGER_FIELD$lambda_2);
      var tmp_4 = DOUBLE_FIELD$lambda;
      var tmp_5 = DOUBLE_FIELD$lambda_0;
      var tmp_6 = DOUBLE_FIELD$lambda_1;
      DOUBLE_FIELD = new of_0(0.0, 1.0, tmp_4, tmp_5, tmp_6, DOUBLE_FIELD$lambda_2);
      var tmp_7 = MINPLUS_ALGEBRA$lambda;
      MINPLUS_ALGEBRA = new of_1(2147483647, 0, tmp_7, MINPLUS_ALGEBRA$lambda_0);
      var tmp_8 = MAXPLUS_ALGEBRA$lambda;
      MAXPLUS_ALGEBRA = new of_1(-2147483648, 0, tmp_8, MAXPLUS_ALGEBRA$lambda_0);
      var tmp_9 = GF2_ALGEBRA$lambda;
      GF2_ALGEBRA = new of_1(0, 1, tmp_9, GF2_ALGEBRA$lambda_0);
    }
  }
  function wl(_this__u8e3s4, k, label) {
    k = k === VOID ? 5 : k;
    var tmp;
    if (label === VOID) {
      tmp = wl$lambda(_this__u8e3s4);
    } else {
      tmp = label;
    }
    label = tmp;
    var $this = _this__u8e3s4;
    var k_0 = k;
    var label_0 = label;
    $l$1: do {
      $l$0: do {
        // Inline function 'kotlin.collections.associateWith' call
        var this_0 = $this;
        var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
        // Inline function 'kotlin.collections.associateWithTo' call
        var _iterator__ex2g4s = this_0.h();
        while (_iterator__ex2g4s.i()) {
          var element = _iterator__ex2g4s.j();
          // Inline function 'ai.hypergraph.kaliningraph.theory.wl.<anonymous>' call
          // Inline function 'kotlin.collections.map' call
          var this_1 = get_neighbors(element);
          // Inline function 'kotlin.collections.mapTo' call
          var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
          var _iterator__ex2g4s_0 = this_1.h();
          while (_iterator__ex2g4s_0.i()) {
            var item = _iterator__ex2g4s_0.j();
            destination.e(label_0(item));
          }
          var tmp$ret$2 = hashCode(sorted(destination));
          result.b5(element, tmp$ret$2);
        }
        var updates = result;
        var tmp_0;
        var tmp_1;
        if (k_0 <= 0) {
          tmp_1 = true;
        } else {
          var tmp2 = $this;
          var tmp$ret$5;
          $l$block_0: {
            // Inline function 'kotlin.collections.all' call
            var tmp_2;
            if (isInterface(tmp2, Collection)) {
              tmp_2 = tmp2.r();
            } else {
              tmp_2 = false;
            }
            if (tmp_2) {
              tmp$ret$5 = true;
              break $l$block_0;
            }
            var _iterator__ex2g4s_1 = tmp2.h();
            while (_iterator__ex2g4s_1.i()) {
              var element_0 = _iterator__ex2g4s_1.j();
              // Inline function 'ai.hypergraph.kaliningraph.theory.wl.<anonymous>' call
              if (!(label_0(element_0) === updates.l2(element_0))) {
                tmp$ret$5 = false;
                break $l$block_0;
              }
            }
            tmp$ret$5 = true;
          }
          tmp_1 = tmp$ret$5;
        }
        if (tmp_1) {
          tmp_0 = updates;
        } else {
          var tmp0 = $this;
          var tmp1 = k_0 - 1 | 0;
          var tmp2_0 = wl$lambda_0(updates);
          $this = tmp0;
          k_0 = tmp1;
          label_0 = tmp2_0;
          continue $l$0;
        }
        return tmp_0;
      }
       while (false);
    }
     while (true);
  }
  function wl$lambda($this_wl) {
    return function (it) {
      return ensureNotNull(get_histogram($this_wl).l2(it));
    };
  }
  function wl$lambda_0($updates) {
    return function (it) {
      return ensureNotNull($updates.l2(it));
    };
  }
  function of_init_$Init$(l, es, $this) {
    of.call($this, l, toList_1(es));
    return $this;
  }
  function of_init_$Create$(l, es) {
    return of_init_$Init$(l, es, objectCreate(protoOf(of)));
  }
  function of(len, l) {
    this.o1e_1 = len;
    this.p1e_1 = l;
  }
  protoOf(of).q1e = function () {
    return this.p1e_1;
  };
  protoOf(of).equals = function (other) {
    var tmp0_safe_receiver = (!(other == null) ? isInterface(other, VT) : false) ? other : null;
    return equals(tmp0_safe_receiver == null ? null : tmp0_safe_receiver.q1e(), this.p1e_1);
  };
  protoOf(of).toString = function () {
    return toString_0(this.p1e_1);
  };
  protoOf(of).r = function () {
    return this.p1e_1.r();
  };
  protoOf(of).j1 = function (element) {
    return this.p1e_1.j1(element);
  };
  protoOf(of).h = function () {
    return this.p1e_1.h();
  };
  protoOf(of).q = function (index) {
    return this.p1e_1.q(index);
  };
  protoOf(of).p = function (index) {
    return this.p1e_1.p(index);
  };
  protoOf(of).f2 = function (fromIndex, toIndex) {
    return this.p1e_1.f2(fromIndex, toIndex);
  };
  protoOf(of).k = function () {
    return this.p1e_1.k();
  };
  function VT() {
  }
  function VT_0(v1, v2, v3) {
    return of_init_$Create$(get_S3(), [v1, v2, v3]);
  }
  function Π4(π1, π2, π3, π4) {
    this.r1e_1 = π1;
    this.s1e_1 = π2;
    this.t1e_1 = π3;
    this.u1e_1 = π4;
  }
  protoOf(Π4).toString = function () {
    return '\u03A04(\u03C01=' + toString_1(this.r1e_1) + ', \u03C02=' + toString_1(this.s1e_1) + ', \u03C03=' + toString_1(this.t1e_1) + ', \u03C04=' + toString_1(this.u1e_1) + ')';
  };
  protoOf(Π4).hashCode = function () {
    var result = this.r1e_1 == null ? 0 : hashCode(this.r1e_1);
    result = imul(result, 31) + (this.s1e_1 == null ? 0 : hashCode(this.s1e_1)) | 0;
    result = imul(result, 31) + (this.t1e_1 == null ? 0 : hashCode(this.t1e_1)) | 0;
    result = imul(result, 31) + (this.u1e_1 == null ? 0 : hashCode(this.u1e_1)) | 0;
    return result;
  };
  protoOf(Π4).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Π4))
      return false;
    var tmp0_other_with_cast = other instanceof Π4 ? other : THROW_CCE();
    if (!equals(this.r1e_1, tmp0_other_with_cast.r1e_1))
      return false;
    if (!equals(this.s1e_1, tmp0_other_with_cast.s1e_1))
      return false;
    if (!equals(this.t1e_1, tmp0_other_with_cast.t1e_1))
      return false;
    if (!equals(this.u1e_1, tmp0_other_with_cast.u1e_1))
      return false;
    return true;
  };
  function to_0(_this__u8e3s4, that) {
    return Π_0(get_π1(_this__u8e3s4), get_π2(_this__u8e3s4), get_π3(_this__u8e3s4), that);
  }
  function to_1(_this__u8e3s4, that) {
    return Π(get_π1_0(_this__u8e3s4), get_π2_0(_this__u8e3s4), that);
  }
  function get_π2(_this__u8e3s4) {
    return _this__u8e3s4.lm_1;
  }
  function get_π1(_this__u8e3s4) {
    return _this__u8e3s4.km_1;
  }
  function get_π3(_this__u8e3s4) {
    return _this__u8e3s4.mm_1;
  }
  function times_2(_this__u8e3s4, other) {
    return flatMap(_this__u8e3s4, times$lambda(other));
  }
  function times_3(_this__u8e3s4, s) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(s, 10));
      var _iterator__ex2g4s_0 = s.h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>.stub_for_inlining' call
        var tmp$ret$0 = to(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = toSet_0(destination_0);
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function intersect_1(_this__u8e3s4) {
    // Inline function 'kotlin.collections.fold' call
    var accumulator = toMutableSet(first(_this__u8e3s4));
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.intersect.<anonymous>' call
      // Inline function 'kotlin.apply' call
      var this_0 = accumulator;
      // Inline function 'ai.hypergraph.kaliningraph.types.intersect.<anonymous>.<anonymous>' call
      this_0.a4(element);
      accumulator = this_0;
    }
    return accumulator;
  }
  function powerset(_this__u8e3s4) {
    return sequence(powerset$slambda_0(_this__u8e3s4, null));
  }
  function isStrictSubsetOf(_this__u8e3s4, ir) {
    return ir.pk_1 <= _this__u8e3s4.pk_1 && _this__u8e3s4.qk_1 <= ir.qk_1 && !_this__u8e3s4.equals(ir);
  }
  function Π5(π1, π2, π3, π4, π5) {
    this.x18_1 = π1;
    this.y18_1 = π2;
    this.z18_1 = π3;
    this.a19_1 = π4;
    this.b19_1 = π5;
  }
  protoOf(Π5).ye = function () {
    return this.x18_1;
  };
  protoOf(Π5).ze = function () {
    return this.y18_1;
  };
  protoOf(Π5).nm = function () {
    return this.z18_1;
  };
  protoOf(Π5).ru = function () {
    return this.a19_1;
  };
  protoOf(Π5).su = function () {
    return this.b19_1;
  };
  protoOf(Π5).toString = function () {
    return '\u03A05(\u03C01=' + toString_1(this.x18_1) + ', \u03C02=' + toString_1(this.y18_1) + ', \u03C03=' + toString_1(this.z18_1) + ', \u03C04=' + toString_1(this.a19_1) + ', \u03C05=' + toString_1(this.b19_1) + ')';
  };
  protoOf(Π5).hashCode = function () {
    var result = this.x18_1 == null ? 0 : hashCode(this.x18_1);
    result = imul(result, 31) + (this.y18_1 == null ? 0 : hashCode(this.y18_1)) | 0;
    result = imul(result, 31) + (this.z18_1 == null ? 0 : hashCode(this.z18_1)) | 0;
    result = imul(result, 31) + (this.a19_1 == null ? 0 : hashCode(this.a19_1)) | 0;
    result = imul(result, 31) + (this.b19_1 == null ? 0 : hashCode(this.b19_1)) | 0;
    return result;
  };
  protoOf(Π5).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Π5))
      return false;
    var tmp0_other_with_cast = other instanceof Π5 ? other : THROW_CCE();
    if (!equals(this.x18_1, tmp0_other_with_cast.x18_1))
      return false;
    if (!equals(this.y18_1, tmp0_other_with_cast.y18_1))
      return false;
    if (!equals(this.z18_1, tmp0_other_with_cast.z18_1))
      return false;
    if (!equals(this.a19_1, tmp0_other_with_cast.a19_1))
      return false;
    if (!equals(this.b19_1, tmp0_other_with_cast.b19_1))
      return false;
    return true;
  };
  function allPairs(numRows, numCols) {
    return times_4(until(0, numRows), until(0, numCols));
  }
  function cc(_this__u8e3s4, that) {
    return VT_1(_this__u8e3s4, that);
  }
  function Π(π1, π2, π3) {
    return new Triple(π1, π2, π3);
  }
  function Π_0(π1, π2, π3, π4) {
    return new Π4(π1, π2, π3, π4);
  }
  function get_π1_0(_this__u8e3s4) {
    return _this__u8e3s4.we_1;
  }
  function get_π2_0(_this__u8e3s4) {
    return _this__u8e3s4.xe_1;
  }
  function times_4(_this__u8e3s4, s) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var inductionVariable = _this__u8e3s4.pk_1;
    var last = _this__u8e3s4.qk_1;
    var step = _this__u8e3s4.rk_1;
    if (step > 0 && inductionVariable <= last || (step < 0 && last <= inductionVariable))
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + step | 0;
        // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>' call
        var it = element;
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(s, 10));
        var inductionVariable_0 = s.pk_1;
        var last_0 = s.qk_1;
        var step_0 = s.rk_1;
        if (step_0 > 0 && inductionVariable_0 <= last_0 || (step_0 < 0 && last_0 <= inductionVariable_0))
          do {
            var item = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + step_0 | 0;
            // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>.stub_for_inlining' call
            var p0 = item;
            var tmp$ret$0 = cc(it, p0);
            destination_0.e(tmp$ret$0);
          }
           while (!(item === last_0));
        var list = toSet_0(destination_0);
        addAll(destination, list);
      }
       while (!(element === last));
    return toSet_0(destination);
  }
  function VT_1(v1, v2) {
    return of_init_$Create$(get_S2(), [v1, v2]);
  }
  function get_second(_this__u8e3s4) {
    // Inline function 'kotlin.collections.component2' call
    return _this__u8e3s4.q(1);
  }
  function get_first(_this__u8e3s4) {
    // Inline function 'kotlin.collections.component1' call
    return _this__u8e3s4.q(0);
  }
  function times_5(_this__u8e3s4, s) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(s, 10));
      var _iterator__ex2g4s_0 = s.h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.times.<anonymous>.stub_for_inlining' call
        var tmp$ret$0 = to_1(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function times_6(_this__u8e3s4, s) {
    return flatMap(_this__u8e3s4, times$lambda_0(s));
  }
  function to_2(_this__u8e3s4, that) {
    return Π_1(_this__u8e3s4.r1e_1, _this__u8e3s4.s1e_1, _this__u8e3s4.t1e_1, _this__u8e3s4.u1e_1, that);
  }
  function Π_1(π1, π2, π3, π4, π5) {
    return new Π5(π1, π2, π3, π4, π5);
  }
  function to$ref($boundThis) {
    var l = function (p0) {
      return to($boundThis, p0);
    };
    l.callableName = 'to';
    return l;
  }
  function times$lambda($other) {
    return function (it) {
      return map($other, to$ref(it));
    };
  }
  function powerset$slambda($this_powerset, resultContinuation) {
    this.d1f_1 = $this_powerset;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(powerset$slambda).o1f = function ($this$sequence, $completion) {
    var tmp = this.p1f($this$sequence, $completion);
    tmp.y8_1 = Unit_instance;
    tmp.z8_1 = null;
    return tmp.e9();
  };
  protoOf(powerset$slambda).v9 = function (p1, $completion) {
    return this.o1f(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(powerset$slambda).e9 = function () {
    var suspendResult = this.y8_1;
    $sm: do
      try {
        var tmp = this.w8_1;
        switch (tmp) {
          case 0:
            this.x8_1 = 7;
            this.f1f_1 = this.d1f_1.k();
            if (this.f1f_1 === 0) {
              this.w8_1 = 5;
              suspendResult = this.e1f_1.gf(emptySet(), this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.g1f_1 = first(this.d1f_1);
              this.h1f_1 = minus_1(this.d1f_1, this.g1f_1);
              this.w8_1 = 1;
              suspendResult = this.e1f_1.if(powerset(this.h1f_1), this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            }

          case 1:
            var tmp_0 = this;
            tmp_0.i1f_1 = powerset(this.h1f_1);
            this.j1f_1 = this.i1f_1;
            this.k1f_1 = this.j1f_1.h();
            this.w8_1 = 2;
            continue $sm;
          case 2:
            if (!this.k1f_1.i()) {
              this.w8_1 = 4;
              continue $sm;
            }

            this.l1f_1 = this.k1f_1.j();
            var tmp_1 = this;
            tmp_1.m1f_1 = this.l1f_1;
            this.n1f_1 = this.m1f_1;
            this.w8_1 = 3;
            suspendResult = this.e1f_1.gf(plus_2(setOf(this.g1f_1), this.n1f_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 3:
            this.w8_1 = 2;
            continue $sm;
          case 4:
            this.w8_1 = 6;
            continue $sm;
          case 5:
            this.w8_1 = 6;
            continue $sm;
          case 6:
            return Unit_instance;
          case 7:
            throw this.z8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.x8_1 === 7) {
          throw e;
        } else {
          this.w8_1 = this.x8_1;
          this.z8_1 = e;
        }
      }
     while (true);
  };
  protoOf(powerset$slambda).p1f = function ($this$sequence, completion) {
    var i = new powerset$slambda(this.d1f_1, completion);
    i.e1f_1 = $this$sequence;
    return i;
  };
  function powerset$slambda_0($this_powerset, resultContinuation) {
    var i = new powerset$slambda($this_powerset, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.o1f($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function to$ref_0($boundThis) {
    var l = function (p0) {
      return to_1($boundThis, p0);
    };
    l.callableName = 'to';
    return l;
  }
  function times$lambda_0($s) {
    return function (it) {
      return map($s, to$ref_0(it));
    };
  }
  var S0;
  function get_S1() {
    _init_properties_Church_kt__lnrkav();
    return S1;
  }
  var S1;
  function get_S2() {
    _init_properties_Church_kt__lnrkav();
    return S2;
  }
  var S2;
  function get_S3() {
    _init_properties_Church_kt__lnrkav();
    return S3;
  }
  var S3;
  function get_S4() {
    _init_properties_Church_kt__lnrkav();
    return S4;
  }
  var S4;
  function get_S5() {
    _init_properties_Church_kt__lnrkav();
    return S5;
  }
  var S5;
  function get_S6() {
    _init_properties_Church_kt__lnrkav();
    return S6;
  }
  var S6;
  function get_S7() {
    _init_properties_Church_kt__lnrkav();
    return S7;
  }
  var S7;
  function get_S8() {
    _init_properties_Church_kt__lnrkav();
    return S8;
  }
  var S8;
  var S9;
  function S(x) {
    this.q1f_1 = x;
  }
  protoOf(S).equals = function (other) {
    var tmp;
    if (other instanceof S) {
      tmp = this.q1f_1 == null && other.q1f_1 == null ? true : equals(this.q1f_1, other.q1f_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(S).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.q1f_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  function O() {
    O_instance = this;
    S.call(this, null);
  }
  var O_instance;
  function O_getInstance() {
    if (O_instance == null)
      new O();
    return O_instance;
  }
  var properties_initialized_Church_kt_g6sfr;
  function _init_properties_Church_kt__lnrkav() {
    if (!properties_initialized_Church_kt_g6sfr) {
      properties_initialized_Church_kt_g6sfr = true;
      S0 = O_getInstance();
      S1 = new S(O_getInstance());
      S2 = new S(get_S1());
      S3 = new S(get_S2());
      S4 = new S(get_S3());
      S5 = new S(get_S4());
      S6 = new S(get_S5());
      S7 = new S(get_S6());
      S8 = new S(get_S7());
      S9 = new S(get_S8());
    }
  }
  function get_D(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return D$delegate.uj(_this__u8e3s4, D$factory());
  }
  var D$delegate;
  function get_A(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return A$delegate.uj(_this__u8e3s4, A$factory());
  }
  var A$delegate;
  var A_AUG$delegate;
  function get_ASYMNORM(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return ASYMNORM$delegate.uj(_this__u8e3s4, ASYMNORM$factory());
  }
  var ASYMNORM$delegate;
  var L$delegate;
  function get_I(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return I$delegate.uj(_this__u8e3s4, I$factory());
  }
  var I$delegate;
  var LSYMNORM$delegate;
  var ENCODED$delegate;
  function get_APSP(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return APSP$delegate.uj(_this__u8e3s4, APSP$factory());
  }
  var APSP$delegate;
  function get_topSort(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return topSort$delegate.uj(_this__u8e3s4, topSort$factory());
  }
  var topSort$delegate;
  function get_allPairs(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return allPairs$delegate.uj(_this__u8e3s4, allPairs$factory_0());
  }
  var allPairs$delegate;
  var degMap$delegate;
  function get_edges(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return edges$delegate.uj(_this__u8e3s4, edges$factory());
  }
  var edges$delegate;
  function get_edgList(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return edgList$delegate.uj(_this__u8e3s4, edgList$factory());
  }
  var edgList$delegate;
  function get_adjList(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return adjList$delegate.uj(_this__u8e3s4, adjList$factory());
  }
  var adjList$delegate;
  function get_edgMap(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return edgMap$delegate.uj(_this__u8e3s4, edgMap$factory());
  }
  var edgMap$delegate;
  function get_histogram(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return histogram$delegate.uj(_this__u8e3s4, histogram$factory());
  }
  var histogram$delegate;
  function get_cache() {
    _init_properties_Graph_kt__cdxgws();
    return cache;
  }
  var cache;
  var graph$delegate;
  function get_graph(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return graph$delegate_0.uj(_this__u8e3s4, graph$factory_0());
  }
  var graph$delegate_0;
  var incoming$delegate;
  function get_outgoing(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return outgoing$delegate.uj(_this__u8e3s4, outgoing$factory());
  }
  var outgoing$delegate;
  function get_neighbors(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return neighbors$delegate.uj(_this__u8e3s4, neighbors$factory());
  }
  var neighbors$delegate;
  function cache_0(caller, fn) {
    caller = caller === VOID ? getCaller() : caller;
    _init_properties_Graph_kt__cdxgws();
    var tmp = cache$lambda(caller, fn);
    return new sam$kotlin_properties_ReadOnlyProperty$0(tmp);
  }
  function Vertex$hash$delegate$lambda(this$0) {
    return function () {
      return getStringHashCode(this$0.l17());
    };
  }
  function Vertex(id) {
    AGF.call(this);
    this.o17_1 = id;
    var tmp = this;
    tmp.p17_1 = lazy(Vertex$hash$delegate$lambda(this));
  }
  protoOf(Vertex).l17 = function () {
    return this.o17_1;
  };
  protoOf(Vertex).q17 = function () {
    var tmp0 = this.p17_1;
    // Inline function 'kotlin.getValue' call
    hash$factory_1();
    return tmp0.i2();
  };
  protoOf(Vertex).equals = function (other) {
    var tmp0_safe_receiver = other instanceof Vertex ? other : null;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.types.Vertex.equals.<anonymous>' call
      tmp = this.l17() === tmp0_safe_receiver.l17();
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs;
  };
  protoOf(Vertex).i16 = function () {
    return vectorize(this.l17());
  };
  protoOf(Vertex).hashCode = function () {
    return this.q17();
  };
  protoOf(Vertex).toString = function () {
    return this.l17();
  };
  function Graph(vertices) {
    var tmp;
    if (vertices === VOID) {
      // Inline function 'kotlin.collections.setOf' call
      tmp = emptySet();
    } else {
      tmp = vertices;
    }
    vertices = tmp;
    AGF.call(this);
    this.h16_1 = vertices;
  }
  protoOf(Graph).f16 = function () {
    return this.h16_1;
  };
  protoOf(Graph).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp0_safe_receiver = other instanceof Graph ? other : null;
      var tmp_0;
      if (tmp0_safe_receiver == null) {
        tmp_0 = null;
      } else {
        tmp_0 = tmp0_safe_receiver.u16(this instanceof Graph ? this : THROW_CCE());
      }
      var tmp1_elvis_lhs = tmp_0;
      tmp = tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs;
    }
    return tmp;
  };
  protoOf(Graph).i16 = function () {
    var tmp;
    if (this.r()) {
      var tmp_0 = 0;
      var tmp_1 = new Float64Array(10);
      while (tmp_0 < 10) {
        tmp_1[tmp_0] = 0.0;
        tmp_0 = tmp_0 + 1 | 0;
      }
      tmp = tmp_1;
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = sorted(wl(this).n2());
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s = this_0.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.Graph.encode.<anonymous>' call
        destination.e(item);
      }
      tmp = toDoubleArray_0(destination);
    }
    return tmp;
  };
  protoOf(Graph).toString = function () {
    return this.x16();
  };
  protoOf(Graph).r = function () {
    return this.h16_1.r();
  };
  protoOf(Graph).j16 = function (element) {
    return this.h16_1.j1(element);
  };
  protoOf(Graph).j1 = function (element) {
    if (!(element instanceof Vertex))
      return false;
    return this.j16(element instanceof Vertex ? element : THROW_CCE());
  };
  protoOf(Graph).h = function () {
    return this.h16_1.h();
  };
  protoOf(Graph).k16 = function (elements) {
    return this.h16_1.g2(elements);
  };
  protoOf(Graph).g2 = function (elements) {
    return this.k16(elements);
  };
  protoOf(Graph).k = function () {
    return this.h16_1.k();
  };
  function Edge(source, target) {
    AGF.call(this);
    this.s1f_1 = source;
    this.t1f_1 = target;
  }
  protoOf(Edge).t17 = function () {
    return this.s1f_1;
  };
  protoOf(Edge).e17 = function () {
    return this.t1f_1;
  };
  protoOf(Edge).equals = function (other) {
    var tmp;
    if ((other instanceof Edge ? other : null) == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.types.Edge.equals.<anonymous>' call
      tmp = this.hashCode() === other.hashCode();
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? false : tmp1_elvis_lhs;
  };
  protoOf(Edge).hashCode = function () {
    return this.t17().hashCode() + this.e17().hashCode() | 0;
  };
  protoOf(Edge).toString = function () {
    return toString_0(this.t17()) + '\u2192' + toString_0(this.e17());
  };
  function IGF$G$lambda(it) {
    return ensureNotNull(getKClassFromExpression(it).y9());
  }
  function IGF() {
  }
  function VIndex(set) {
    this.u1f_1 = set;
    this.v1f_1 = toList(this.u1f_1);
    var tmp = this;
    // Inline function 'kotlin.collections.mapIndexed' call
    var this_0 = this.v1f_1;
    // Inline function 'kotlin.collections.mapIndexedTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var index = 0;
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'ai.hypergraph.kaliningraph.types.VIndex.map.<anonymous>' call
      var index_0 = checkIndexOverflow(_unary__edvuaz);
      var tmp$ret$0 = to(item, index_0);
      destination.e(tmp$ret$0);
    }
    tmp.w1f_1 = toMap(destination);
  }
  protoOf(VIndex).q = function (it) {
    return this.v1f_1.q(it);
  };
  function sam$kotlin_Comparator$0_5(function_0) {
    this.x1f_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_5).oc = function (a, b) {
    return this.x1f_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_5).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_5).n3 = function () {
    return this.x1f_1;
  };
  protoOf(sam$kotlin_Comparator$0_5).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_5).hashCode = function () {
    return hashCode(this.n3());
  };
  function IGraph$join$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp = a.l17();
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp$ret$1 = b.l17();
    return compareValues(tmp, tmp$ret$1);
  }
  function IGraph$join$lambda_0(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp = a.l17();
    // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.join.<anonymous>' call
    var tmp$ret$1 = b.l17();
    return compareValues(tmp, tmp$ret$1);
  }
  function IGraph$join$lambda_1($left, $right) {
    return function (it) {
      return plus_2(get_outgoing($left), get_outgoing($right));
    };
  }
  function IGraph$reversed$lambda($v) {
    return function (it) {
      return $v;
    };
  }
  function IGraph$vwise$lambda(this$0, $lf) {
    return function (i, j) {
      // Inline function 'kotlin.let' call
      // Inline function 'ai.hypergraph.kaliningraph.types.IGraph.vwise.<anonymous>.<anonymous>' call
      var destruct = cc(this$0.q(i), this$0.q(j));
      // Inline function 'kotlin.collections.component1' call
      var v = destruct.q(0);
      // Inline function 'kotlin.collections.component2' call
      var n = destruct.q(1);
      return get_neighbors(v).j1(n) ? $lf(this$0, v, n) : 0.0;
    };
  }
  function IGraph() {
  }
  function IEdge() {
  }
  function neighbors_0(_this__u8e3s4, $this) {
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.IVertex.neighbors.<anonymous>' call
      var list = element.s17();
      addAll(destination, list);
    }
    return toSet_0(destination);
  }
  function IVertex() {
  }
  function get_outdegree(_this__u8e3s4) {
    _init_properties_Graph_kt__cdxgws();
    return get_neighbors(_this__u8e3s4).k();
  }
  function getCaller() {
    _init_properties_Graph_kt__cdxgws();
    return getStringHashCode(lines(stackTraceToString(newThrowable())).q(PlatformVars_instance.y1f_1));
  }
  function AGF() {
    this.l16_1 = Default_getInstance().af();
  }
  protoOf(AGF).m16 = function () {
    return this.l16_1;
  };
  protoOf(AGF).hashCode = function () {
    return this.m16();
  };
  function PlatformVars() {
    this.y1f_1 = 3;
  }
  var PlatformVars_instance;
  function PlatformVars_getInstance() {
    return PlatformVars_instance;
  }
  function sam$kotlin_properties_ReadOnlyProperty$0(function_0) {
    this.z1f_1 = function_0;
  }
  protoOf(sam$kotlin_properties_ReadOnlyProperty$0).uj = function (thisRef, property) {
    return this.z1f_1(thisRef, property);
  };
  protoOf(sam$kotlin_properties_ReadOnlyProperty$0).n3 = function () {
    return this.z1f_1;
  };
  protoOf(sam$kotlin_properties_ReadOnlyProperty$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, ReadOnlyProperty) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_properties_ReadOnlyProperty$0).hashCode = function () {
    return hashCode(this.n3());
  };
  function D$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.k();
    return DoubleMatrix_init_$Create$(tmp, VOID, D$delegate$lambda$lambda($this$cache));
  }
  function D$delegate$lambda$lambda($this_cache) {
    return function (i, j) {
      return i === j ? get_neighbors($this_cache.q(i)).k() : 0.0;
    };
  }
  function A$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.k();
    return BooleanMatrix_init_$Create$(tmp, VOID, A$delegate$lambda$lambda($this$cache));
  }
  function A$delegate$lambda$lambda($this_cache) {
    return function (i, j) {
      return get_neighbors($this_cache.q(i)).j1($this_cache.q(j));
    };
  }
  function A_AUG$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return get_A($this$cache).k1d(get_transpose(get_A($this$cache))).k1d(Companion_instance_4.b1e($this$cache.k()));
  }
  function ASYMNORM$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return $this$cache.v16(ASYMNORM$delegate$lambda$lambda);
  }
  function ASYMNORM$delegate$lambda$lambda($this$vwise, v, n) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.math.sqrt' call
    var x = get_outdegree(v) * get_outdegree(n);
    return 1.0 / Math.sqrt(x);
  }
  function L$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return minus_3(get_D($this$cache), get_A($this$cache));
  }
  function I$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.k();
    var tmp_0 = $this$cache.k();
    return DoubleMatrix_init_$Create$(tmp, tmp_0, kroneckerDelta$ref());
  }
  function kroneckerDelta$ref() {
    var l = function (p0, p1) {
      return kroneckerDelta(p0, p1);
    };
    l.callableName = 'kroneckerDelta';
    return l;
  }
  function LSYMNORM$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return get_I($this$cache).j1d(get_ASYMNORM($this$cache));
  }
  function ENCODED$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.map' call
    var this_0 = $this$cache.f16();
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.ENCODED$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = item.i16();
      destination.e(tmp$ret$0);
    }
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$3 = copyToArray(destination);
    return toDoubleMatrix(tmp$ret$3);
  }
  function APSP$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.mutableMapOf' call
    var dist = LinkedHashMap_init_$Create$();
    var _iterator__ex2g4s = times_3($this$cache.f16(), $this$cache.f16()).h();
    while (_iterator__ex2g4s.i()) {
      var _destruct__k2r9zo = _iterator__ex2g4s.j();
      var u = _destruct__k2r9zo.ye();
      var v = _destruct__k2r9zo.ze();
      var tmp1 = to(v, u);
      // Inline function 'kotlin.collections.set' call
      var value = equals(v, u) ? 0 : 2147483647;
      dist.b5(tmp1, value);
    }
    var _iterator__ex2g4s_0 = get_adjList($this$cache).h();
    while (_iterator__ex2g4s_0.i()) {
      var e = _iterator__ex2g4s_0.j();
      // Inline function 'kotlin.collections.set' call
      var key = to(get_first(e), get_second(e));
      dist.b5(key, 1);
    }
    $l$loop: while (true) {
      var done = true;
      var _iterator__ex2g4s_1 = times_5(times_3($this$cache.f16(), $this$cache.f16()), $this$cache.f16()).h();
      while (_iterator__ex2g4s_1.i()) {
        var _destruct__k2r9zo_0 = _iterator__ex2g4s_1.j();
        var k = _destruct__k2r9zo_0.ye();
        var i = _destruct__k2r9zo_0.ze();
        var j = _destruct__k2r9zo_0.nm();
        if (ensureNotNull(dist.l2(to(i, k))) < 2147483647 && ensureNotNull(dist.l2(to(k, j))) < 2147483647) {
          var newDist = ensureNotNull(dist.l2(to(i, k))) + ensureNotNull(dist.l2(to(k, j))) | 0;
          if (newDist < ensureNotNull(dist.l2(to(i, j)))) {
            // Inline function 'kotlin.collections.set' call
            var key_0 = to(i, j);
            dist.b5(key_0, newDist);
            done = false;
          }
        }
      }
      if (done)
        break $l$loop;
    }
    return dist;
  }
  function topSort$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = $this$cache.f16();
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.topSort$delegate.<anonymous>.<anonymous>' call
      result.b5(element, 0);
    }
    var inDegree = toMutableMap(result);
    // Inline function 'kotlin.collections.associateWith' call
    var this_1 = $this$cache.f16();
    var result_0 = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_1, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s_0 = this_1.h();
    while (_iterator__ex2g4s_0.i()) {
      var element_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.topSort$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$3 = toSet_0(get_outgoing(element_0));
      result_0.b5(element_0, tmp$ret$3);
    }
    var transit = result_0;
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_1 = transit.o2().h();
    while (_iterator__ex2g4s_1.i()) {
      var _destruct__k2r9zo = _iterator__ex2g4s_1.j();
      // Inline function 'kotlin.collections.component1' call
      var s = _destruct__k2r9zo.h2();
      // Inline function 'kotlin.collections.component2' call
      var edges = _destruct__k2r9zo.i2();
      var _iterator__ex2g4s_2 = edges.h();
      while (_iterator__ex2g4s_2.i()) {
        var t = _iterator__ex2g4s_2.j().ze();
        var tmp0_safe_receiver = inDegree.l2(t);
        var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : tmp0_safe_receiver + 1 | 0;
        // Inline function 'kotlin.collections.set' call
        var value = tmp1_elvis_lhs == null ? 1 : tmp1_elvis_lhs;
        inDegree.b5(t, value);
      }
    }
    // Inline function 'kotlin.collections.filterValues' call
    var result_1 = LinkedHashMap_init_$Create$();
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s_3 = inDegree.o2().h();
    while (_iterator__ex2g4s_3.i()) {
      var entry = _iterator__ex2g4s_3.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.topSort$delegate.<anonymous>.<anonymous>' call
      if (entry.i2() === 0) {
        result_1.b5(entry.h2(), entry.i2());
      }
    }
    var queue = ArrayDeque_init_$Create$(result_1.m2());
    // Inline function 'kotlin.collections.mutableListOf' call
    var order = ArrayList_init_$Create$_0();
    $l$loop: while (true) {
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!!queue.r()) {
        break $l$loop;
      }
      var s_0 = queue.ie();
      order.e(s_0);
      // Inline function 'kotlin.collections.orEmpty' call
      var tmp0_elvis_lhs = transit.l2(s_0);
      var _iterator__ex2g4s_4 = (tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs).h();
      while (_iterator__ex2g4s_4.i()) {
        var t_0 = _iterator__ex2g4s_4.j().ze();
        var deg = ensureNotNull(inDegree.l2(t_0)) - 1 | 0;
        // Inline function 'kotlin.collections.set' call
        inDegree.b5(t_0, deg);
        if (deg === 0) {
          queue.he(t_0);
        }
      }
    }
    return order;
  }
  function allPairs$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = $this$cache.f16();
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.allPairs$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = $this$cache.w16(setOf(element));
      result.b5(element, tmp$ret$0);
    }
    var forward = result;
    // Inline function 'kotlin.let' call
    // Inline function 'ai.hypergraph.kaliningraph.types.allPairs$delegate.<anonymous>.<anonymous>' call
    var it = $this$cache.e16();
    // Inline function 'kotlin.collections.associateWith' call
    var this_1 = it.f16();
    var result_0 = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_1, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s_0 = this_1.h();
    while (_iterator__ex2g4s_0.i()) {
      var element_0 = _iterator__ex2g4s_0.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.allPairs$delegate.<anonymous>.<anonymous>.<anonymous>' call
      var tmp$ret$3 = it.w16(setOf(element_0));
      result_0.b5(element_0, tmp$ret$3);
    }
    var backward = result_0;
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = $this$cache.f16();
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_1 = tmp0.h();
    while (_iterator__ex2g4s_1.i()) {
      var element_1 = _iterator__ex2g4s_1.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.allPairs$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_2 = $this$cache.f16();
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_2, 10));
      var _iterator__ex2g4s_2 = this_2.h();
      while (_iterator__ex2g4s_2.i()) {
        var item = _iterator__ex2g4s_2.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.allPairs$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$8 = new Pair(new Pair(element_1, item), intersect(ensureNotNull(forward.l2(element_1)), ensureNotNull(backward.l2(item))));
        destination_0.e(tmp$ret$8);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    // Inline function 'kotlin.collections.filter' call
    // Inline function 'kotlin.collections.filterTo' call
    var destination_1 = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s_3 = destination.h();
    while (_iterator__ex2g4s_3.i()) {
      var element_2 = _iterator__ex2g4s_3.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.allPairs$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!element_2.xe_1.r()) {
        destination_1.e(element_2);
      }
    }
    return toMap(destination_1);
  }
  function degMap$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = $this$cache.f16();
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.degMap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_neighbors(element).k();
      result.b5(element, tmp$ret$0);
    }
    return result;
  }
  function edges$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return toSet_0(flatten(get_edgMap($this$cache).n2()));
  }
  function edgList$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.flatMap' call
    var tmp0 = $this$cache.f16();
    // Inline function 'kotlin.collections.flatMapTo' call
    var destination = ArrayList_init_$Create$_0();
    var _iterator__ex2g4s = tmp0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.edgList$delegate.<anonymous>.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      var this_0 = get_outgoing(element);
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var _iterator__ex2g4s_0 = this_0.h();
      while (_iterator__ex2g4s_0.i()) {
        var item = _iterator__ex2g4s_0.j();
        // Inline function 'ai.hypergraph.kaliningraph.types.edgList$delegate.<anonymous>.<anonymous>.<anonymous>' call
        var tmp$ret$0 = to(element, item);
        destination_0.e(tmp$ret$0);
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return destination;
  }
  function adjList$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_edgList($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.adjList$delegate.<anonymous>.<anonymous>' call
      var v = item.ye();
      var e = item.ze();
      var tmp$ret$0 = cc(v, e.e17());
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function edgMap$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var this_0 = $this$cache.f16();
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault(this_0, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.edgMap$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_outgoing(element);
      result.b5(element, tmp$ret$0);
    }
    return result;
  }
  function histogram$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.associateWith' call
    var result = LinkedHashMap_init_$Create$_0(coerceAtLeast(mapCapacity(collectionSizeOrDefault($this$cache, 10)), 16));
    // Inline function 'kotlin.collections.associateWithTo' call
    var _iterator__ex2g4s = $this$cache.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.histogram$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = get_neighbors(element).k();
      result.b5(element, tmp$ret$0);
    }
    return result;
  }
  function graph$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return get_graph($this$cache.e17());
  }
  function graph$delegate$lambda_0($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    return $this$cache.n16()($this$cache.s17(-1));
  }
  function incoming$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.get' call
    var this_0 = get_edgMap(get_graph($this$cache).e16());
    var tmp0_elvis_lhs = (isInterface(this_0, KtMap) ? this_0 : THROW_CCE()).l2($this$cache);
    return tmp0_elvis_lhs == null ? emptySet() : tmp0_elvis_lhs;
  }
  function outgoing$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    var tmp = $this$cache.m17();
    return toSet_0(tmp(isInterface($this$cache, IVertex) ? $this$cache : THROW_CCE()));
  }
  function neighbors$delegate$lambda($this$cache) {
    _init_properties_Graph_kt__cdxgws();
    // Inline function 'kotlin.collections.map' call
    var this_0 = get_outgoing($this$cache);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'ai.hypergraph.kaliningraph.types.neighbors$delegate.<anonymous>.<anonymous>' call
      var tmp$ret$0 = item.e17();
      destination.e(tmp$ret$0);
    }
    return toSet_0(destination);
  }
  function cache$lambda$lambda($fn, $y) {
    return function () {
      var tmp = $fn($y);
      return !(tmp == null) ? tmp : THROW_CCE();
    };
  }
  function cache$lambda($caller, $fn) {
    return function (y, _unused_var__etf5q3) {
      var tmp;
      if (!(y == null) ? isInterface(y, IGF) : false) {
        tmp = y.m16();
      } else {
        // Inline function 'kotlin.hashCode' call
        var tmp1_elvis_lhs = y == null ? null : hashCode(y);
        tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
      }
      var id = tmp;
      var csg = '' + id + $caller;
      var tmp_0 = get_cache();
      var tmp_1 = tmp_0.y15(csg, cache$lambda$lambda($fn, y));
      return !(tmp_1 == null) ? tmp_1 : THROW_CCE();
    };
  }
  function D$factory() {
    return getPropertyCallableRef('D', 1, KProperty1, function (receiver) {
      return get_D(receiver);
    }, null);
  }
  function A$factory() {
    return getPropertyCallableRef('A', 1, KProperty1, function (receiver) {
      return get_A(receiver);
    }, null);
  }
  function ASYMNORM$factory() {
    return getPropertyCallableRef('ASYMNORM', 1, KProperty1, function (receiver) {
      return get_ASYMNORM(receiver);
    }, null);
  }
  function I$factory() {
    return getPropertyCallableRef('I', 1, KProperty1, function (receiver) {
      return get_I(receiver);
    }, null);
  }
  function APSP$factory() {
    return getPropertyCallableRef('APSP', 1, KProperty1, function (receiver) {
      return get_APSP(receiver);
    }, null);
  }
  function topSort$factory() {
    return getPropertyCallableRef('topSort', 1, KProperty1, function (receiver) {
      return get_topSort(receiver);
    }, null);
  }
  function allPairs$factory_0() {
    return getPropertyCallableRef('allPairs', 1, KProperty1, function (receiver) {
      return get_allPairs(receiver);
    }, null);
  }
  function edges$factory() {
    return getPropertyCallableRef('edges', 1, KProperty1, function (receiver) {
      return get_edges(receiver);
    }, null);
  }
  function edgList$factory() {
    return getPropertyCallableRef('edgList', 1, KProperty1, function (receiver) {
      return get_edgList(receiver);
    }, null);
  }
  function adjList$factory() {
    return getPropertyCallableRef('adjList', 1, KProperty1, function (receiver) {
      return get_adjList(receiver);
    }, null);
  }
  function edgMap$factory() {
    return getPropertyCallableRef('edgMap', 1, KProperty1, function (receiver) {
      return get_edgMap(receiver);
    }, null);
  }
  function histogram$factory() {
    return getPropertyCallableRef('histogram', 1, KProperty1, function (receiver) {
      return get_histogram(receiver);
    }, null);
  }
  function graph$factory_0() {
    return getPropertyCallableRef('graph', 1, KProperty1, function (receiver) {
      return get_graph(receiver);
    }, null);
  }
  function outgoing$factory() {
    return getPropertyCallableRef('outgoing', 1, KProperty1, function (receiver) {
      return get_outgoing(receiver);
    }, null);
  }
  function neighbors$factory() {
    return getPropertyCallableRef('neighbors', 1, KProperty1, function (receiver) {
      return get_neighbors(receiver);
    }, null);
  }
  function hash$factory_1() {
    return getPropertyCallableRef('hash', 1, KProperty1, function (receiver) {
      return receiver.q17();
    }, null);
  }
  var properties_initialized_Graph_kt_ngaj0i;
  function _init_properties_Graph_kt__cdxgws() {
    if (!properties_initialized_Graph_kt_ngaj0i) {
      properties_initialized_Graph_kt_ngaj0i = true;
      D$delegate = cache_0(VOID, D$delegate$lambda);
      A$delegate = cache_0(VOID, A$delegate$lambda);
      A_AUG$delegate = cache_0(VOID, A_AUG$delegate$lambda);
      ASYMNORM$delegate = cache_0(VOID, ASYMNORM$delegate$lambda);
      L$delegate = cache_0(VOID, L$delegate$lambda);
      I$delegate = cache_0(VOID, I$delegate$lambda);
      LSYMNORM$delegate = cache_0(VOID, LSYMNORM$delegate$lambda);
      ENCODED$delegate = cache_0(VOID, ENCODED$delegate$lambda);
      APSP$delegate = cache_0(VOID, APSP$delegate$lambda);
      topSort$delegate = cache_0(VOID, topSort$delegate$lambda);
      allPairs$delegate = cache_0(VOID, allPairs$delegate$lambda);
      degMap$delegate = cache_0(VOID, degMap$delegate$lambda);
      edges$delegate = cache_0(VOID, edges$delegate$lambda);
      edgList$delegate = cache_0(VOID, edgList$delegate$lambda);
      adjList$delegate = cache_0(VOID, adjList$delegate$lambda);
      edgMap$delegate = cache_0(VOID, edgMap$delegate$lambda);
      histogram$delegate = cache_0(VOID, histogram$delegate$lambda);
      cache = new LRUCache();
      graph$delegate = cache_0(VOID, graph$delegate$lambda);
      graph$delegate_0 = cache_0(VOID, graph$delegate$lambda_0);
      incoming$delegate = cache_0(VOID, incoming$delegate$lambda);
      outgoing$delegate = cache_0(VOID, outgoing$delegate$lambda);
      neighbors$delegate = cache_0(VOID, neighbors$delegate$lambda);
    }
  }
  function of_0(nil, one, plus, times, minus, div) {
    this.a1g_1 = nil;
    this.b1g_1 = one;
    this.c1g_1 = plus;
    this.d1g_1 = times;
    this.e1g_1 = minus;
    this.f1g_1 = div;
  }
  protoOf(of_0).y1d = function () {
    return this.a1g_1;
  };
  protoOf(of_0).w1d = function (_this__u8e3s4, t) {
    return this.c1g_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  protoOf(of_0).g1g = function (_this__u8e3s4, t) {
    return this.d1g_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  function Field() {
  }
  function of_1(nil, one, plus, times) {
    one = one === VOID ? nil : one;
    this.h1g_1 = nil;
    this.i1g_1 = one;
    this.j1g_1 = plus;
    this.k1g_1 = times;
  }
  protoOf(of_1).y1d = function () {
    return this.h1g_1;
  };
  protoOf(of_1).w1d = function (_this__u8e3s4, t) {
    return this.j1g_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  protoOf(of_1).g1g = function (_this__u8e3s4, t) {
    return this.k1g_1(_this__u8e3s4, _this__u8e3s4, t);
  };
  function Ring() {
  }
  function round_0(_this__u8e3s4, decimals) {
    var multiplier = 1.0;
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < decimals)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'org.kosat.round.<anonymous>' call
        multiplier = multiplier * 10;
      }
       while (inductionVariable < decimals);
    return round(_this__u8e3s4 * multiplier) / multiplier;
  }
  //region block: post-declaration
  protoOf(AGF).G1 = G1;
  protoOf(AGF).G2 = G2;
  protoOf(AGF).G3 = G3;
  protoOf(AGF).G4 = G4;
  protoOf(Graph).q = get;
  protoOf(Graph).q16 = get_index;
  protoOf(Graph).r16 = plus_7;
  protoOf(Graph).s16 = minus_2;
  protoOf(Graph).t16 = join;
  protoOf(Graph).e16 = reversed_0;
  protoOf(Graph).u16 = isomorphicTo;
  protoOf(Graph).v16 = vwise;
  protoOf(Graph).w16 = transitiveClosure;
  protoOf(Graph).x16 = asString;
  protoOf(LabeledGraph).n16 = get_G0;
  protoOf(LabeledGraph).o16 = get_E0;
  protoOf(LabeledGraph).p16 = get_V0;
  protoOf(Vertex).r17 = neighbors;
  protoOf(Vertex).s17 = neighbors$default;
  protoOf(LGVertex).n16 = get_G0;
  protoOf(LGVertex).o16 = get_E0;
  protoOf(LGVertex).p16 = get_V0;
  protoOf(Edge).ze = component2;
  protoOf(LabeledEdge).n16 = get_G0;
  protoOf(LabeledEdge).o16 = get_E0;
  protoOf(LabeledEdge).p16 = get_V0;
  protoOf(AbstractMatrix).t1d = shape;
  protoOf(AbstractMatrix).yy = get_0;
  protoOf(AbstractMatrix).q = get_1;
  protoOf(AbstractMatrix).k1d = plus_8;
  protoOf(AbstractMatrix).by = new$default;
  protoOf(AbstractMatrix).u1d = safeJoin;
  protoOf(AbstractMatrix).v1d = safeJoin$default;
  protoOf(of_0).a1e = dot;
  protoOf(of_1).a1e = dot;
  //endregion
  //region block: init
  Companion_instance = new Companion();
  hypothesis = 0;
  Companion_instance_1 = new Companion_1();
  maxTrees = 50000;
  MAX_SORT_CAPACITY = 50;
  Companion_instance_2 = new Companion_2();
  Companion_instance_3 = new Companion_3();
  Companion_instance_4 = new Companion_4();
  PlatformVars_instance = new PlatformVars();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = escapeHTML;
  _.$_$.b = CFGCFG;
  _.$_$.c = get_HOLE_MARKER;
  _.$_$.d = contains_2;
  _.$_$.e = enumSeqSmart;
  _.$_$.f = isValidProd;
  _.$_$.g = get_language;
  _.$_$.h = levenshteinAlign;
  _.$_$.i = levenshtein;
  _.$_$.j = get_noNonterminalStubs;
  _.$_$.k = get_nonparametricForm;
  _.$_$.l = get_nonterminals;
  _.$_$.m = get_originalForm;
  _.$_$.n = parseCFG;
  _.$_$.o = parse;
  _.$_$.p = preparseParseableLines;
  _.$_$.q = prettyPrint;
  _.$_$.r = get_segmentationCacheHTML;
  _.$_$.s = get_terminals;
  _.$_$.t = get_TIMEOUT_MS;
  _.$_$.u = set_TIMEOUT_MS;
  _.$_$.v = cache_0;
  _.$_$.w = carveSeams;
  _.$_$.x = paintDiffs;
  _.$_$.y = tokenizeByWhitespaceAndKeepDelimiters;
  _.$_$.z = tokenizeByWhitespace;
  _.$_$.a1 = Companion_instance;
  _.$_$.b1 = PlatformVars_instance;
  _.$_$.c1 = round_0;
  //endregion
  return _;
}));



/***/ }),

/***/ "./kotlin/kotlin-kotlin-stdlib.js":
/*!****************************************!*\
  !*** ./kotlin/kotlin-kotlin-stdlib.js ***!
  \****************************************/
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//region block: polyfills
(function () {
  if (typeof globalThis === 'object')
    return;
  Object.defineProperty(Object.prototype, '__magic__', {get: function () {
    return this;
  }, configurable: true});
  __magic__.globalThis = __magic__;
  delete Object.prototype.__magic__;
}());
if (typeof Math.imul === 'undefined') {
  Math.imul = function imul(a, b) {
    return (a & 4.29490176E9) * (b & 65535) + (a & 65535) * (b | 0) | 0;
  };
}
if (typeof ArrayBuffer.isView === 'undefined') {
  ArrayBuffer.isView = function (a) {
    return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;
  };
}
if (typeof Array.prototype.fill === 'undefined') {
  // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill
  Object.defineProperty(Array.prototype, 'fill', {value: function (value) {
    // Steps 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }
    var O = Object(this); // Steps 3-5.
    var len = O.length >>> 0; // Steps 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0; // Step 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len); // Steps 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0; // Step 11.
    var finalValue = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len); // Step 12.
    while (k < finalValue) {
      O[k] = value;
      k++;
    }
    ; // Step 13.
    return O;
  }});
}
[Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array].forEach(function (TypedArray) {
  if (typeof TypedArray.prototype.fill === 'undefined') {
    Object.defineProperty(TypedArray.prototype, 'fill', {value: Array.prototype.fill});
  }
});
if (typeof Math.clz32 === 'undefined') {
  Math.clz32 = function (log, LN2) {
    return function (x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log(asUint) / LN2 | 0) | 0; // the "| 0" acts like math.floor
    };
  }(Math.log, Math.LN2);
}
if (typeof Math.log10 === 'undefined') {
  Math.log10 = function (x) {
    return Math.log(x) * Math.LOG10E;
  };
}
if (typeof Math.tanh === 'undefined') {
  var epsilon = 2.220446049250313E-16;
  var taylor_2_bound = Math.sqrt(epsilon);
  var taylor_n_bound = Math.sqrt(taylor_2_bound);
  Math.tanh = function (x) {
    if (Math.abs(x) < taylor_n_bound) {
      var result = x;
      if (Math.abs(x) > taylor_2_bound) {
        result -= x * x * x / 3;
      }
      return result;
    } else {
      var a = Math.exp(+x), b = Math.exp(-x);
      return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);
    }
  };
}
if (typeof String.prototype.startsWith === 'undefined') {
  Object.defineProperty(String.prototype, 'startsWith', {value: function (searchString, position) {
    position = position || 0;
    return this.lastIndexOf(searchString, position) === position;
  }});
}
//endregion
(function (factory) {
  if (true)
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  else {}
}(function (_) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var isView = ArrayBuffer.isView;
  var clz32 = Math.clz32;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(CharSequence, 'CharSequence');
  initMetadataForInterface(Comparable, 'Comparable');
  initMetadataForClass(Number_0, 'Number');
  initMetadataForInterface(Sequence, 'Sequence');
  initMetadataForClass(asSequence$$inlined$Sequence$1, VOID, VOID, VOID, [Sequence]);
  initMetadataForClass(asSequence$$inlined$Sequence$1_0, VOID, VOID, VOID, [Sequence]);
  initMetadataForClass(asIterable$$inlined$Iterable$1);
  initMetadataForCompanion(Companion);
  initMetadataForClass(Char, 'Char', VOID, VOID, [Comparable]);
  initMetadataForInterface(Collection, 'Collection');
  initMetadataForInterface(KtList, 'List', VOID, VOID, [Collection]);
  initMetadataForInterface(KtSet, 'Set', VOID, VOID, [Collection]);
  initMetadataForInterface(Entry, 'Entry');
  initMetadataForInterface(KtMap, 'Map');
  initMetadataForInterface(MutableIterable, 'MutableIterable');
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(Enum, 'Enum', VOID, VOID, [Comparable]);
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(Long, 'Long', VOID, Number_0, [Number_0, Comparable]);
  initMetadataForInterface(FunctionAdapter, 'FunctionAdapter');
  initMetadataForClass(arrayIterator$1);
  initMetadataForObject(Digit, 'Digit');
  initMetadataForClass(AbstractCollection, 'AbstractCollection', VOID, VOID, [Collection]);
  initMetadataForClass(AbstractList, 'AbstractList', VOID, AbstractCollection, [AbstractCollection, KtList]);
  initMetadataForInterface(RandomAccess, 'RandomAccess');
  initMetadataForClass(asList$1, VOID, VOID, AbstractList, [AbstractList, RandomAccess]);
  initMetadataForInterface(Comparator, 'Comparator');
  initMetadataForObject(Unit, 'Unit');
  initMetadataForClass(AbstractMutableCollection, 'AbstractMutableCollection', VOID, AbstractCollection, [AbstractCollection, MutableIterable, Collection]);
  initMetadataForClass(IteratorImpl, 'IteratorImpl');
  initMetadataForClass(ListIteratorImpl, 'ListIteratorImpl', VOID, IteratorImpl);
  initMetadataForClass(AbstractMutableList, 'AbstractMutableList', VOID, AbstractMutableCollection, [AbstractMutableCollection, MutableIterable, KtList, Collection]);
  initMetadataForClass(SubList, 'SubList', VOID, AbstractMutableList, [AbstractMutableList, RandomAccess]);
  initMetadataForClass(AbstractMap, 'AbstractMap', VOID, VOID, [KtMap]);
  initMetadataForClass(AbstractMutableMap, 'AbstractMutableMap', VOID, AbstractMap, [AbstractMap, KtMap]);
  initMetadataForClass(AbstractMutableSet, 'AbstractMutableSet', VOID, AbstractMutableCollection, [AbstractMutableCollection, KtSet, MutableIterable, Collection]);
  initMetadataForCompanion(Companion_2);
  initMetadataForClass(ArrayList, 'ArrayList', ArrayList_init_$Create$, AbstractMutableList, [AbstractMutableList, MutableIterable, KtList, Collection, RandomAccess]);
  initMetadataForClass(HashMap, 'HashMap', HashMap_init_$Create$, AbstractMutableMap, [AbstractMutableMap, KtMap]);
  initMetadataForClass(HashMapKeys, 'HashMapKeys', VOID, AbstractMutableSet, [KtSet, MutableIterable, Collection, AbstractMutableSet]);
  initMetadataForClass(HashMapValues, 'HashMapValues', VOID, AbstractMutableCollection, [MutableIterable, Collection, AbstractMutableCollection]);
  initMetadataForClass(HashMapEntrySetBase, 'HashMapEntrySetBase', VOID, AbstractMutableSet, [KtSet, MutableIterable, Collection, AbstractMutableSet]);
  initMetadataForClass(HashMapEntrySet, 'HashMapEntrySet', VOID, HashMapEntrySetBase);
  initMetadataForClass(HashMapKeysDefault$iterator$1);
  initMetadataForClass(HashMapKeysDefault, 'HashMapKeysDefault', VOID, AbstractMutableSet);
  initMetadataForClass(HashMapValuesDefault$iterator$1);
  initMetadataForClass(HashMapValuesDefault, 'HashMapValuesDefault', VOID, AbstractMutableCollection);
  initMetadataForClass(HashSet, 'HashSet', HashSet_init_$Create$, AbstractMutableSet, [AbstractMutableSet, KtSet, MutableIterable, Collection]);
  initMetadataForCompanion(Companion_3);
  initMetadataForClass(Itr, 'Itr');
  initMetadataForClass(KeysItr, 'KeysItr', VOID, Itr);
  initMetadataForClass(ValuesItr, 'ValuesItr', VOID, Itr);
  initMetadataForClass(EntriesItr, 'EntriesItr', VOID, Itr);
  initMetadataForClass(EntryRef, 'EntryRef', VOID, VOID, [Entry]);
  function containsAllEntries(m) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(m, Collection)) {
        tmp = m.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var _iterator__ex2g4s = m.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.InternalMap.containsAllEntries.<anonymous>' call
        // Inline function 'kotlin.js.unsafeCast' call
        // Inline function 'kotlin.js.asDynamic' call
        var entry = element;
        var tmp_0;
        if (!(entry == null) ? isInterface(entry, Entry) : false) {
          tmp_0 = this.f8(entry);
        } else {
          tmp_0 = false;
        }
        if (!tmp_0) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  }
  initMetadataForInterface(InternalMap, 'InternalMap');
  initMetadataForClass(InternalHashMap, 'InternalHashMap', InternalHashMap_init_$Create$, VOID, [InternalMap]);
  initMetadataForClass(LinkedHashMap, 'LinkedHashMap', LinkedHashMap_init_$Create$, HashMap, [HashMap, KtMap]);
  initMetadataForClass(LinkedHashSet, 'LinkedHashSet', LinkedHashSet_init_$Create$, HashSet, [HashSet, KtSet, MutableIterable, Collection]);
  initMetadataForClass(BaseOutput, 'BaseOutput');
  initMetadataForClass(NodeJsOutput, 'NodeJsOutput', VOID, BaseOutput);
  initMetadataForClass(BufferedOutput, 'BufferedOutput', BufferedOutput, BaseOutput);
  initMetadataForClass(BufferedOutputToConsoleLog, 'BufferedOutputToConsoleLog', BufferedOutputToConsoleLog, BufferedOutput);
  initMetadataForInterface(Continuation, 'Continuation');
  initMetadataForClass(InterceptedCoroutine, 'InterceptedCoroutine', VOID, VOID, [Continuation]);
  initMetadataForClass(CoroutineImpl, 'CoroutineImpl', VOID, InterceptedCoroutine, [InterceptedCoroutine, Continuation]);
  initMetadataForObject(CompletedContinuation, 'CompletedContinuation', VOID, VOID, [Continuation]);
  initMetadataForClass(createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1, VOID, VOID, CoroutineImpl);
  initMetadataForClass(Exception, 'Exception', Exception_init_$Create$, Error);
  initMetadataForClass(RuntimeException, 'RuntimeException', RuntimeException_init_$Create$, Exception);
  initMetadataForClass(IllegalArgumentException, 'IllegalArgumentException', IllegalArgumentException_init_$Create$, RuntimeException);
  initMetadataForClass(IllegalStateException, 'IllegalStateException', IllegalStateException_init_$Create$, RuntimeException);
  initMetadataForClass(UnsupportedOperationException, 'UnsupportedOperationException', UnsupportedOperationException_init_$Create$, RuntimeException);
  initMetadataForClass(NoSuchElementException, 'NoSuchElementException', NoSuchElementException_init_$Create$, RuntimeException);
  initMetadataForClass(Error_0, 'Error', Error_init_$Create$, Error);
  initMetadataForClass(IndexOutOfBoundsException, 'IndexOutOfBoundsException', IndexOutOfBoundsException_init_$Create$, RuntimeException);
  initMetadataForClass(NumberFormatException, 'NumberFormatException', NumberFormatException_init_$Create$, IllegalArgumentException);
  initMetadataForClass(ArithmeticException, 'ArithmeticException', ArithmeticException_init_$Create$, RuntimeException);
  initMetadataForClass(AssertionError, 'AssertionError', AssertionError_init_$Create$, Error_0);
  initMetadataForClass(ConcurrentModificationException, 'ConcurrentModificationException', ConcurrentModificationException_init_$Create$, RuntimeException);
  initMetadataForClass(NullPointerException, 'NullPointerException', NullPointerException_init_$Create$, RuntimeException);
  initMetadataForClass(NoWhenBranchMatchedException, 'NoWhenBranchMatchedException', NoWhenBranchMatchedException_init_$Create$, RuntimeException);
  initMetadataForClass(ClassCastException, 'ClassCastException', ClassCastException_init_$Create$, RuntimeException);
  initMetadataForInterface(KClass, 'KClass');
  initMetadataForClass(KClassImpl, 'KClassImpl', VOID, VOID, [KClass]);
  initMetadataForObject(NothingKClassImpl, 'NothingKClassImpl', VOID, KClassImpl);
  initMetadataForClass(ErrorKClass, 'ErrorKClass', ErrorKClass, VOID, [KClass]);
  initMetadataForClass(PrimitiveKClassImpl, 'PrimitiveKClassImpl', VOID, KClassImpl);
  initMetadataForClass(SimpleKClassImpl, 'SimpleKClassImpl', VOID, KClassImpl);
  initMetadataForInterface(KProperty1, 'KProperty1');
  initMetadataForInterface(KProperty0, 'KProperty0');
  initMetadataForObject(PrimitiveClasses, 'PrimitiveClasses');
  initMetadataForClass(ConstrainedOnceSequence, 'ConstrainedOnceSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(StringBuilder, 'StringBuilder', StringBuilder_init_$Create$_1, VOID, [CharSequence]);
  initMetadataForCompanion(Companion_4);
  initMetadataForClass(Regex, 'Regex');
  initMetadataForClass(MatchGroup, 'MatchGroup');
  initMetadataForClass(findNext$1$groups$1, VOID, VOID, AbstractCollection, [Collection, AbstractCollection]);
  initMetadataForClass(findNext$1);
  initMetadataForClass(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(ExceptionTraceBuilder, 'ExceptionTraceBuilder', ExceptionTraceBuilder);
  initMetadataForClass(DurationUnit, 'DurationUnit', VOID, Enum);
  initMetadataForObject(MonotonicTimeSource, 'MonotonicTimeSource');
  initMetadataForClass(Reading, 'Reading');
  initMetadataForClass(HrTimeSource, 'HrTimeSource');
  initMetadataForClass(PerformanceTimeSource, 'PerformanceTimeSource');
  initMetadataForObject(DateNowTimeSource, 'DateNowTimeSource');
  initMetadataForClass(AbstractIterator, 'AbstractIterator');
  initMetadataForClass(SubList_0, 'SubList', VOID, AbstractList, [AbstractList, RandomAccess]);
  initMetadataForClass(IteratorImpl_0, 'IteratorImpl');
  initMetadataForClass(ListIteratorImpl_0, 'ListIteratorImpl', VOID, IteratorImpl_0);
  initMetadataForCompanion(Companion_5);
  initMetadataForClass(AbstractMap$keys$1$iterator$1);
  initMetadataForClass(AbstractMap$values$1$iterator$1);
  initMetadataForCompanion(Companion_6);
  initMetadataForClass(AbstractSet, 'AbstractSet', VOID, AbstractCollection, [AbstractCollection, KtSet]);
  initMetadataForClass(AbstractMap$keys$1, VOID, VOID, AbstractSet);
  initMetadataForClass(AbstractMap$values$1, VOID, VOID, AbstractCollection);
  initMetadataForCompanion(Companion_7);
  initMetadataForCompanion(Companion_8);
  initMetadataForClass(ArrayDeque, 'ArrayDeque', ArrayDeque_init_$Create$, AbstractMutableList);
  initMetadataForObject(EmptyList, 'EmptyList', VOID, VOID, [KtList, RandomAccess]);
  initMetadataForObject(EmptyIterator, 'EmptyIterator');
  initMetadataForClass(ArrayAsCollection, 'ArrayAsCollection', VOID, VOID, [Collection]);
  initMetadataForClass(IndexedValue, 'IndexedValue');
  initMetadataForClass(IndexingIterable, 'IndexingIterable');
  initMetadataForClass(IndexingIterator, 'IndexingIterator');
  initMetadataForObject(EmptyMap, 'EmptyMap', VOID, VOID, [KtMap]);
  initMetadataForClass(IntIterator, 'IntIterator');
  initMetadataForClass(CharIterator, 'CharIterator');
  initMetadataForClass(ReversedListReadOnly$listIterator$1);
  initMetadataForClass(ReversedListReadOnly, 'ReversedListReadOnly', VOID, AbstractList);
  initMetadataForClass(SequenceScope, 'SequenceScope', VOID, VOID, VOID, [1]);
  initMetadataForClass(SequenceBuilderIterator, 'SequenceBuilderIterator', SequenceBuilderIterator, SequenceScope, [SequenceScope, Continuation], [1]);
  initMetadataForClass(sequence$$inlined$Sequence$1, VOID, VOID, VOID, [Sequence]);
  initMetadataForClass(FilteringSequence$iterator$1);
  initMetadataForClass(FilteringSequence, 'FilteringSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(TransformingSequence$iterator$1);
  initMetadataForClass(TransformingSequence, 'TransformingSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(TransformingIndexedSequence$iterator$1);
  initMetadataForClass(TransformingIndexedSequence, 'TransformingIndexedSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(DistinctSequence, 'DistinctSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(FlatteningSequence$iterator$1);
  initMetadataForClass(FlatteningSequence, 'FlatteningSequence', VOID, VOID, [Sequence]);
  initMetadataForInterface(DropTakeSequence, 'DropTakeSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(TakeSequence$iterator$1);
  initMetadataForClass(TakeSequence, 'TakeSequence', VOID, VOID, [Sequence, DropTakeSequence]);
  initMetadataForClass(GeneratorSequence$iterator$1);
  initMetadataForClass(GeneratorSequence, 'GeneratorSequence', VOID, VOID, [Sequence]);
  initMetadataForObject(EmptySequence, 'EmptySequence', VOID, VOID, [Sequence, DropTakeSequence]);
  initMetadataForClass(DistinctIterator, 'DistinctIterator', VOID, AbstractIterator);
  initMetadataForClass(TakeWhileSequence$iterator$1);
  initMetadataForClass(TakeWhileSequence, 'TakeWhileSequence', VOID, VOID, [Sequence]);
  initMetadataForClass(IndexingSequence$iterator$1);
  initMetadataForClass(IndexingSequence, 'IndexingSequence', VOID, VOID, [Sequence]);
  initMetadataForLambda(shuffled$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForObject(EmptySet, 'EmptySet', VOID, VOID, [KtSet]);
  initMetadataForClass(MovingSubList, 'MovingSubList', VOID, AbstractList, [AbstractList, RandomAccess]);
  initMetadataForClass(RingBuffer$iterator$1, VOID, VOID, AbstractIterator);
  initMetadataForClass(RingBuffer, 'RingBuffer', VOID, AbstractList, [AbstractList, RandomAccess]);
  initMetadataForLambda(windowedIterator$slambda, CoroutineImpl, VOID, [1]);
  initMetadataForObject(NaturalOrderComparator, 'NaturalOrderComparator', VOID, VOID, [Comparator]);
  initMetadataForClass(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForObject(Key, 'Key');
  function releaseInterceptedContinuation(continuation) {
  }
  initMetadataForInterface(ContinuationInterceptor, 'ContinuationInterceptor');
  initMetadataForObject(EmptyCoroutineContext, 'EmptyCoroutineContext');
  initMetadataForClass(CoroutineSingletons, 'CoroutineSingletons', VOID, Enum);
  initMetadataForInterface(ReadOnlyProperty, 'ReadOnlyProperty');
  initMetadataForClass(Random, 'Random');
  initMetadataForObject(Default, 'Default', VOID, Random);
  initMetadataForCompanion(Companion_9);
  initMetadataForClass(XorWowRandom, 'XorWowRandom', VOID, Random);
  initMetadataForCompanion(Companion_10);
  initMetadataForClass(IntProgression, 'IntProgression');
  initMetadataForClass(IntRange, 'IntRange', VOID, IntProgression);
  initMetadataForCompanion(Companion_11);
  initMetadataForClass(CharProgression, 'CharProgression');
  initMetadataForClass(CharRange, 'CharRange', VOID, CharProgression);
  initMetadataForClass(IntProgressionIterator, 'IntProgressionIterator', VOID, IntIterator);
  initMetadataForClass(CharProgressionIterator, 'CharProgressionIterator', VOID, CharIterator);
  initMetadataForCompanion(Companion_12);
  initMetadataForCompanion(Companion_13);
  initMetadataForClass(DelimitedRangesSequence$iterator$1);
  initMetadataForClass(DelimitedRangesSequence, 'DelimitedRangesSequence', VOID, VOID, [Sequence]);
  initMetadataForObject(State, 'State');
  initMetadataForClass(LinesIterator, 'LinesIterator');
  initMetadataForClass(lineSequence$$inlined$Sequence$1, VOID, VOID, VOID, [Sequence]);
  initMetadataForCompanion(Companion_14);
  initMetadataForClass(Duration, 'Duration', VOID, VOID, [Comparable]);
  function compareTo(other) {
    return Duration__compareTo_impl_pchp0f(this.dm(other), Companion_getInstance_14().fd_1);
  }
  initMetadataForInterface(ComparableTimeMark, 'ComparableTimeMark', VOID, VOID, [Comparable]);
  initMetadataForClass(ValueTimeMark, 'ValueTimeMark', VOID, VOID, [ComparableTimeMark]);
  initMetadataForObject(Monotonic, 'Monotonic');
  initMetadataForClass(TimedValue, 'TimedValue');
  initMetadataForClass(UnsafeLazyImpl, 'UnsafeLazyImpl');
  initMetadataForObject(UNINITIALIZED_VALUE, 'UNINITIALIZED_VALUE');
  initMetadataForCompanion(Companion_15);
  initMetadataForClass(Failure, 'Failure');
  initMetadataForClass(NotImplementedError, 'NotImplementedError', NotImplementedError, Error_0);
  initMetadataForClass(Pair, 'Pair');
  initMetadataForClass(Triple, 'Triple');
  initMetadataForClass(UByte, 'UByte', VOID, VOID, [Comparable]);
  initMetadataForCompanion(Companion_16);
  initMetadataForClass(UInt, 'UInt', VOID, VOID, [Comparable]);
  initMetadataForClass(Iterator, 'Iterator');
  initMetadataForClass(UIntArray, 'UIntArray', VOID, VOID, [Collection]);
  initMetadataForCompanion(Companion_17);
  initMetadataForClass(ULong, 'ULong', VOID, VOID, [Comparable]);
  initMetadataForClass(Iterator_0, 'Iterator');
  initMetadataForClass(ULongArray, 'ULongArray', VOID, VOID, [Collection]);
  initMetadataForCompanion(Companion_18);
  initMetadataForClass(ULongProgression, 'ULongProgression');
  initMetadataForClass(ULongRange, 'ULongRange', VOID, ULongProgression);
  initMetadataForCompanion(Companion_19);
  initMetadataForClass(ULongProgressionIterator, 'ULongProgressionIterator');
  initMetadataForClass(UShort, 'UShort', VOID, VOID, [Comparable]);
  //endregion
  function CharSequence() {
  }
  function Comparable() {
  }
  function Number_0() {
  }
  function toList(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptyList();
      case 1:
        return listOf(_this__u8e3s4[0]);
      default:
        return toMutableList(_this__u8e3s4);
    }
  }
  function toSet(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptySet();
      case 1:
        return setOf(new Char(_this__u8e3s4[0]));
      default:
        return toCollection_0(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(coerceAtMost(_this__u8e3s4.length, 128))));
    }
  }
  function toSet_0(_this__u8e3s4) {
    switch (_this__u8e3s4.length) {
      case 0:
        return emptySet();
      case 1:
        return setOf(_this__u8e3s4[0]);
      default:
        return toCollection(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.length)));
    }
  }
  function joinToString(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function toDoubleArray(_this__u8e3s4) {
    var tmp = 0;
    var tmp_0 = _this__u8e3s4.length;
    var tmp_1 = new Float64Array(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = _this__u8e3s4[tmp_2];
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function contains(_this__u8e3s4, element) {
    return indexOf_0(_this__u8e3s4, element) >= 0;
  }
  function contains_0(_this__u8e3s4, element) {
    return indexOf_1(_this__u8e3s4, element) >= 0;
  }
  function indexOf(_this__u8e3s4, element) {
    if (element == null) {
      var inductionVariable = 0;
      var last = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable <= last)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (_this__u8e3s4[index] == null) {
            return index;
          }
        }
         while (inductionVariable <= last);
    } else {
      var inductionVariable_0 = 0;
      var last_0 = _this__u8e3s4.length - 1 | 0;
      if (inductionVariable_0 <= last_0)
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals(element, _this__u8e3s4[index_0])) {
            return index_0;
          }
        }
         while (inductionVariable_0 <= last_0);
    }
    return -1;
  }
  function toCollection(_this__u8e3s4, destination) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    while (inductionVariable < last) {
      var item = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.e(item);
    }
    return destination;
  }
  function single(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.length) {
      case 0:
        throw NoSuchElementException_init_$Create$_0('Array is empty.');
      case 1:
        tmp = _this__u8e3s4[0];
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('Array has more than one element.');
    }
    return tmp;
  }
  function toMutableList(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(asCollection(_this__u8e3s4));
  }
  function get_lastIndex(_this__u8e3s4) {
    return _this__u8e3s4.length - 1 | 0;
  }
  function toCollection_0(_this__u8e3s4, destination) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    while (inductionVariable < last) {
      var item = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      destination.e(new Char(item));
    }
    return destination;
  }
  function joinTo(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.f(prefix);
    var count = 0;
    var inductionVariable = 0;
    var last = _this__u8e3s4.length;
    $l$loop: while (inductionVariable < last) {
      var element = _this__u8e3s4[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      count = count + 1 | 0;
      if (count > 1) {
        buffer.f(separator);
      }
      if (limit < 0 || count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 && count > limit) {
      buffer.f(truncated);
    }
    buffer.f(postfix);
    return buffer;
  }
  function indexOf_0(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element.equals(_this__u8e3s4[index])) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function indexOf_1(_this__u8e3s4, element) {
    var inductionVariable = 0;
    var last = _this__u8e3s4.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (element === _this__u8e3s4[index]) {
          return index;
        }
      }
       while (inductionVariable <= last);
    return -1;
  }
  function asSequence(_this__u8e3s4) {
    // Inline function 'kotlin.collections.isEmpty' call
    if (_this__u8e3s4.length === 0)
      return emptySequence();
    // Inline function 'kotlin.sequences.Sequence' call
    return new asSequence$$inlined$Sequence$1(_this__u8e3s4);
  }
  function contains_1(_this__u8e3s4, element) {
    return indexOf(_this__u8e3s4, element) >= 0;
  }
  function asSequence$$inlined$Sequence$1($this_asSequence) {
    this.g_1 = $this_asSequence;
  }
  protoOf(asSequence$$inlined$Sequence$1).h = function () {
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    return arrayIterator(this.g_1);
  };
  function joinToString_0(_this__u8e3s4, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    return joinTo_0(_this__u8e3s4, StringBuilder_init_$Create$_1(), separator, prefix, postfix, limit, truncated, transform).toString();
  }
  function joinTo_0(_this__u8e3s4, buffer, separator, prefix, postfix, limit, truncated, transform) {
    separator = separator === VOID ? ', ' : separator;
    prefix = prefix === VOID ? '' : prefix;
    postfix = postfix === VOID ? '' : postfix;
    limit = limit === VOID ? -1 : limit;
    truncated = truncated === VOID ? '...' : truncated;
    transform = transform === VOID ? null : transform;
    buffer.f(prefix);
    var count = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    $l$loop: while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      count = count + 1 | 0;
      if (count > 1) {
        buffer.f(separator);
      }
      if (limit < 0 || count <= limit) {
        appendElement(buffer, element, transform);
      } else
        break $l$loop;
    }
    if (limit >= 0 && count > limit) {
      buffer.f(truncated);
    }
    buffer.f(postfix);
    return buffer;
  }
  function toBooleanArray(_this__u8e3s4) {
    var result = booleanArray(_this__u8e3s4.k());
    var index = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      result[_unary__edvuaz] = element;
    }
    return result;
  }
  function plus(_this__u8e3s4, elements) {
    if (isInterface(elements, Collection)) {
      var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + elements.k() | 0);
      result.o(_this__u8e3s4);
      result.o(elements);
      return result;
    } else {
      var result_0 = ArrayList_init_$Create$_1(_this__u8e3s4);
      addAll(result_0, elements);
      return result_0;
    }
  }
  function reversed(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.k() <= 1;
    } else {
      tmp = false;
    }
    if (tmp)
      return toList_0(_this__u8e3s4);
    var list = toMutableList_1(_this__u8e3s4);
    reverse(list);
    return list;
  }
  function chunked(_this__u8e3s4, size) {
    return windowed(_this__u8e3s4, size, size, true);
  }
  function takeLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.takeLast.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    if (n === 0)
      return emptyList();
    var size = _this__u8e3s4.k();
    if (n >= size)
      return toList_0(_this__u8e3s4);
    if (n === 1)
      return listOf(last(_this__u8e3s4));
    var list = ArrayList_init_$Create$_0(n);
    if (isInterface(_this__u8e3s4, RandomAccess)) {
      var inductionVariable = size - n | 0;
      if (inductionVariable < size)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          list.e(_this__u8e3s4.q(index));
        }
         while (inductionVariable < size);
    } else {
      // Inline function 'kotlin.collections.iterator' call
      var _iterator__ex2g4s = _this__u8e3s4.p(size - n | 0);
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        list.e(item);
      }
    }
    return list;
  }
  function toList_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
        case 0:
          tmp = emptyList();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, KtList)) {
            tmp_0 = _this__u8e3s4.q(0);
          } else {
            tmp_0 = _this__u8e3s4.h().j();
          }

          tmp = listOf(tmp_0);
          break;
        default:
          tmp = toMutableList_0(_this__u8e3s4);
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyList(toMutableList_1(_this__u8e3s4));
  }
  function drop(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.drop.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    if (n === 0)
      return toList_0(_this__u8e3s4);
    var list;
    if (isInterface(_this__u8e3s4, Collection)) {
      var resultSize = _this__u8e3s4.k() - n | 0;
      if (resultSize <= 0)
        return emptyList();
      if (resultSize === 1)
        return listOf(last_0(_this__u8e3s4));
      list = ArrayList_init_$Create$_0(resultSize);
      if (isInterface(_this__u8e3s4, KtList)) {
        if (isInterface(_this__u8e3s4, RandomAccess)) {
          var inductionVariable = n;
          var last = _this__u8e3s4.k();
          if (inductionVariable < last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              list.e(_this__u8e3s4.q(index));
            }
             while (inductionVariable < last);
        } else {
          // Inline function 'kotlin.collections.iterator' call
          var _iterator__ex2g4s = _this__u8e3s4.p(n);
          while (_iterator__ex2g4s.i()) {
            var item = _iterator__ex2g4s.j();
            list.e(item);
          }
        }
        return list;
      }
    } else {
      list = ArrayList_init_$Create$();
    }
    var count = 0;
    var _iterator__ex2g4s_0 = _this__u8e3s4.h();
    while (_iterator__ex2g4s_0.i()) {
      var item_0 = _iterator__ex2g4s_0.j();
      if (count >= n)
        list.e(item_0);
      else {
        count = count + 1 | 0;
      }
    }
    return optimizeReadOnlyList(list);
  }
  function dropLast(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.dropLast.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return take(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.k() - n | 0, 0));
  }
  function toSet_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
        case 0:
          tmp = emptySet();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, KtList)) {
            tmp_0 = _this__u8e3s4.q(0);
          } else {
            tmp_0 = _this__u8e3s4.h().j();
          }

          tmp = setOf(tmp_0);
          break;
        default:
          tmp = toCollection_1(_this__u8e3s4, LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.k())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlySet(toCollection_1(_this__u8e3s4, LinkedHashSet_init_$Create$()));
  }
  function firstOrNull(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, KtList)) {
      if (_this__u8e3s4.r())
        return null;
      else
        return _this__u8e3s4.q(0);
    } else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        return null;
      return iterator.j();
    }
  }
  function plus_0(_this__u8e3s4, elements) {
    var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + elements.length | 0);
    result.o(_this__u8e3s4);
    addAll_0(result, elements);
    return result;
  }
  function toIntArray(_this__u8e3s4) {
    var result = new Int32Array(_this__u8e3s4.k());
    var index = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      result[_unary__edvuaz] = element;
    }
    return result;
  }
  function zip(_this__u8e3s4, other) {
    // Inline function 'kotlin.collections.zip' call
    var first = _this__u8e3s4.h();
    var second = other.h();
    var tmp0 = collectionSizeOrDefault(_this__u8e3s4, 10);
    // Inline function 'kotlin.comparisons.minOf' call
    var b = collectionSizeOrDefault(other, 10);
    var tmp$ret$0 = Math.min(tmp0, b);
    var list = ArrayList_init_$Create$_0(tmp$ret$0);
    while (first.i() && second.i()) {
      var tmp2 = first.j();
      // Inline function 'kotlin.collections.zip.<anonymous>' call
      var t2 = second.j();
      var tmp$ret$1 = to(tmp2, t2);
      list.e(tmp$ret$1);
    }
    return list;
  }
  function intersect(_this__u8e3s4, other) {
    var set = toMutableSet(_this__u8e3s4);
    retainAll_0(set, other);
    return set;
  }
  function plus_1(_this__u8e3s4, element) {
    var result = ArrayList_init_$Create$_0(_this__u8e3s4.k() + 1 | 0);
    result.o(_this__u8e3s4);
    result.e(element);
    return result;
  }
  function last(_this__u8e3s4) {
    if (_this__u8e3s4.r())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.q(get_lastIndex_0(_this__u8e3s4));
  }
  function asSequence_0(_this__u8e3s4) {
    // Inline function 'kotlin.sequences.Sequence' call
    return new asSequence$$inlined$Sequence$1_0(_this__u8e3s4);
  }
  function toMutableList_0(_this__u8e3s4) {
    return ArrayList_init_$Create$_1(_this__u8e3s4);
  }
  function toMutableSet(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = LinkedHashSet_init_$Create$_0(_this__u8e3s4);
    } else {
      tmp = toCollection_1(_this__u8e3s4, LinkedHashSet_init_$Create$());
    }
    return tmp;
  }
  function first(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, KtList))
      return first_0(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      return iterator.j();
    }
  }
  function first_0(_this__u8e3s4) {
    if (_this__u8e3s4.r())
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    return _this__u8e3s4.q(0);
  }
  function windowed(_this__u8e3s4, size, step, partialWindows) {
    step = step === VOID ? 1 : step;
    partialWindows = partialWindows === VOID ? false : partialWindows;
    checkWindowSizeStep(size, step);
    var tmp;
    if (isInterface(_this__u8e3s4, RandomAccess)) {
      tmp = isInterface(_this__u8e3s4, KtList);
    } else {
      tmp = false;
    }
    if (tmp) {
      var thisSize = _this__u8e3s4.k();
      var resultCapacity = (thisSize / step | 0) + ((thisSize % step | 0) === 0 ? 0 : 1) | 0;
      var result = ArrayList_init_$Create$_0(resultCapacity);
      var index = 0;
      $l$loop: while (0 <= index ? index < thisSize : false) {
        var windowSize = coerceAtMost(size, thisSize - index | 0);
        if (windowSize < size && !partialWindows)
          break $l$loop;
        // Inline function 'kotlin.collections.List' call
        // Inline function 'kotlin.collections.MutableList' call
        var list = ArrayList_init_$Create$_0(windowSize);
        // Inline function 'kotlin.repeat' call
        var inductionVariable = 0;
        if (inductionVariable < windowSize)
          do {
            var index_0 = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.collections.MutableList.<anonymous>' call
            // Inline function 'kotlin.collections.windowed.<anonymous>' call
            var tmp$ret$0 = _this__u8e3s4.q(index_0 + index | 0);
            list.e(tmp$ret$0);
          }
           while (inductionVariable < windowSize);
        result.e(list);
        index = index + step | 0;
      }
      return result;
    }
    var result_0 = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = windowedIterator(_this__u8e3s4.h(), size, step, partialWindows, false);
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'kotlin.collections.windowed.<anonymous>' call
      result_0.e(element);
    }
    return result_0;
  }
  function windowed_0(_this__u8e3s4, size, step, partialWindows, transform) {
    step = step === VOID ? 1 : step;
    partialWindows = partialWindows === VOID ? false : partialWindows;
    checkWindowSizeStep(size, step);
    var tmp;
    if (isInterface(_this__u8e3s4, RandomAccess)) {
      tmp = isInterface(_this__u8e3s4, KtList);
    } else {
      tmp = false;
    }
    if (tmp) {
      var thisSize = _this__u8e3s4.k();
      var resultCapacity = (thisSize / step | 0) + ((thisSize % step | 0) === 0 ? 0 : 1) | 0;
      var result = ArrayList_init_$Create$_0(resultCapacity);
      var window_0 = new MovingSubList(_this__u8e3s4);
      var index = 0;
      $l$loop: while (0 <= index ? index < thisSize : false) {
        var windowSize = coerceAtMost(size, thisSize - index | 0);
        if (!partialWindows && windowSize < size)
          break $l$loop;
        window_0.v(index, index + windowSize | 0);
        result.e(transform(window_0));
        index = index + step | 0;
      }
      return result;
    }
    var result_0 = ArrayList_init_$Create$();
    // Inline function 'kotlin.collections.forEach' call
    // Inline function 'kotlin.collections.iterator' call
    var _iterator__ex2g4s = windowedIterator(_this__u8e3s4.h(), size, step, partialWindows, true);
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      // Inline function 'kotlin.collections.windowed.<anonymous>' call
      result_0.e(transform(element));
    }
    return result_0;
  }
  function distinct(_this__u8e3s4) {
    return toList_0(toMutableSet(_this__u8e3s4));
  }
  function sum(_this__u8e3s4) {
    var sum = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      sum = sum + element | 0;
    }
    return sum;
  }
  function union(_this__u8e3s4, other) {
    var set = toMutableSet(_this__u8e3s4);
    addAll(set, other);
    return set;
  }
  function take(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.take.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    if (n === 0)
      return emptyList();
    if (isInterface(_this__u8e3s4, Collection)) {
      if (n >= _this__u8e3s4.k())
        return toList_0(_this__u8e3s4);
      if (n === 1)
        return listOf(first(_this__u8e3s4));
    }
    var count = 0;
    var list = ArrayList_init_$Create$_0(n);
    var _iterator__ex2g4s = _this__u8e3s4.h();
    $l$loop: while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      list.e(item);
      count = count + 1 | 0;
      if (count === n)
        break $l$loop;
    }
    return optimizeReadOnlyList(list);
  }
  function plus_2(_this__u8e3s4, elements) {
    if (isInterface(_this__u8e3s4, Collection))
      return plus(_this__u8e3s4, elements);
    var result = ArrayList_init_$Create$();
    addAll(result, _this__u8e3s4);
    addAll(result, elements);
    return result;
  }
  function firstOrNull_0(_this__u8e3s4) {
    return _this__u8e3s4.r() ? null : _this__u8e3s4.q(0);
  }
  function minus(_this__u8e3s4, element) {
    var result = ArrayList_init_$Create$_0(collectionSizeOrDefault(_this__u8e3s4, 10));
    var removed = false;
    // Inline function 'kotlin.collections.filterTo' call
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element_0 = _iterator__ex2g4s.j();
      // Inline function 'kotlin.collections.minus.<anonymous>' call
      var tmp;
      if (!removed && equals(element_0, element)) {
        removed = true;
        tmp = false;
      } else {
        tmp = true;
      }
      if (tmp) {
        result.e(element_0);
      }
    }
    return result;
  }
  function toDoubleArray_0(_this__u8e3s4) {
    var result = new Float64Array(_this__u8e3s4.k());
    var index = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      result[_unary__edvuaz] = element;
    }
    return result;
  }
  function sorted(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      if (_this__u8e3s4.k() <= 1)
        return toList_0(_this__u8e3s4);
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp = copyToArray(_this__u8e3s4);
      // Inline function 'kotlin.apply' call
      var this_0 = isArray(tmp) ? tmp : THROW_CCE();
      // Inline function 'kotlin.collections.sorted.<anonymous>' call
      sort(this_0);
      return asList(this_0);
    }
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableList_1(_this__u8e3s4);
    // Inline function 'kotlin.collections.sorted.<anonymous>' call
    sort_0(this_1);
    return this_1;
  }
  function random(_this__u8e3s4, random) {
    if (_this__u8e3s4.r())
      throw NoSuchElementException_init_$Create$_0('Collection is empty.');
    return elementAt(_this__u8e3s4, random.w(_this__u8e3s4.k()));
  }
  function sortedWith(_this__u8e3s4, comparator) {
    if (isInterface(_this__u8e3s4, Collection)) {
      if (_this__u8e3s4.k() <= 1)
        return toList_0(_this__u8e3s4);
      // Inline function 'kotlin.collections.toTypedArray' call
      var tmp = copyToArray(_this__u8e3s4);
      // Inline function 'kotlin.apply' call
      var this_0 = isArray(tmp) ? tmp : THROW_CCE();
      // Inline function 'kotlin.collections.sortedWith.<anonymous>' call
      sortWith(this_0, comparator);
      return asList(this_0);
    }
    // Inline function 'kotlin.apply' call
    var this_1 = toMutableList_1(_this__u8e3s4);
    // Inline function 'kotlin.collections.sortedWith.<anonymous>' call
    sortWith_0(this_1, comparator);
    return this_1;
  }
  function toCollection_1(_this__u8e3s4, destination) {
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      destination.e(item);
    }
    return destination;
  }
  function toMutableList_1(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection))
      return toMutableList_0(_this__u8e3s4);
    return toCollection_1(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function last_0(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, KtList))
      return last(_this__u8e3s4);
    else {
      var iterator = _this__u8e3s4.h();
      if (!iterator.i())
        throw NoSuchElementException_init_$Create$_0('Collection is empty.');
      var last_0 = iterator.j();
      while (iterator.i())
        last_0 = iterator.j();
      return last_0;
    }
  }
  function getOrNull(_this__u8e3s4, index) {
    return (0 <= index ? index < _this__u8e3s4.k() : false) ? _this__u8e3s4.q(index) : null;
  }
  function elementAt(_this__u8e3s4, index) {
    if (isInterface(_this__u8e3s4, KtList))
      return _this__u8e3s4.q(index);
    return elementAtOrElse(_this__u8e3s4, index, elementAt$lambda(index));
  }
  function elementAtOrElse(_this__u8e3s4, index, defaultValue) {
    if (isInterface(_this__u8e3s4, KtList)) {
      // Inline function 'kotlin.collections.getOrElse' call
      return (0 <= index ? index < _this__u8e3s4.k() : false) ? _this__u8e3s4.q(index) : defaultValue(index);
    }
    if (index < 0)
      return defaultValue(index);
    var iterator = _this__u8e3s4.h();
    var count = 0;
    while (iterator.i()) {
      var element = iterator.j();
      var _unary__edvuaz = count;
      count = _unary__edvuaz + 1 | 0;
      if (index === _unary__edvuaz)
        return element;
    }
    return defaultValue(index);
  }
  function shuffle(_this__u8e3s4, random) {
    var inductionVariable = get_lastIndex_0(_this__u8e3s4);
    if (1 <= inductionVariable)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + -1 | 0;
        var j = random.w(i + 1 | 0);
        _this__u8e3s4.x(j, _this__u8e3s4.x(i, _this__u8e3s4.q(j)));
      }
       while (1 <= inductionVariable);
  }
  function withIndex(_this__u8e3s4) {
    return new IndexingIterable(withIndex$lambda(_this__u8e3s4));
  }
  function asSequence$$inlined$Sequence$1_0($this_asSequence) {
    this.y_1 = $this_asSequence;
  }
  protoOf(asSequence$$inlined$Sequence$1_0).h = function () {
    // Inline function 'kotlin.collections.asSequence.<anonymous>' call
    return this.y_1.h();
  };
  function elementAt$lambda($index) {
    return function (it) {
      throw IndexOutOfBoundsException_init_$Create$_0("Collection doesn't contain element at index " + $index + '.');
    };
  }
  function withIndex$lambda($this_withIndex) {
    return function () {
      return $this_withIndex.h();
    };
  }
  function until(_this__u8e3s4, to) {
    if (to <= -2147483648)
      return Companion_getInstance_10().z_1;
    return numberRangeToNumber(_this__u8e3s4, to - 1 | 0);
  }
  function coerceAtLeast(_this__u8e3s4, minimumValue) {
    return _this__u8e3s4 < minimumValue ? minimumValue : _this__u8e3s4;
  }
  function downTo(_this__u8e3s4, to) {
    return Companion_instance_12.a1(_this__u8e3s4, to, -1);
  }
  function coerceAtMost(_this__u8e3s4, maximumValue) {
    return _this__u8e3s4 > maximumValue ? maximumValue : _this__u8e3s4;
  }
  function coerceIn(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue.d1(maximumValue) > 0)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue.toString() + ' is less than minimum ' + minimumValue.toString() + '.');
    if (_this__u8e3s4.d1(minimumValue) < 0)
      return minimumValue;
    if (_this__u8e3s4.d1(maximumValue) > 0)
      return maximumValue;
    return _this__u8e3s4;
  }
  function coerceIn_0(_this__u8e3s4, minimumValue, maximumValue) {
    if (minimumValue > maximumValue)
      throw IllegalArgumentException_init_$Create$_0('Cannot coerce value to an empty range: maximum ' + maximumValue + ' is less than minimum ' + minimumValue + '.');
    if (_this__u8e3s4 < minimumValue)
      return minimumValue;
    if (_this__u8e3s4 > maximumValue)
      return maximumValue;
    return _this__u8e3s4;
  }
  function toSet_2(_this__u8e3s4) {
    var it = _this__u8e3s4.h();
    if (!it.i())
      return emptySet();
    var element = it.j();
    if (!it.i())
      return setOf(element);
    var dst = LinkedHashSet_init_$Create$();
    dst.e(element);
    while (it.i()) {
      dst.e(it.j());
    }
    return dst;
  }
  function filter(_this__u8e3s4, predicate) {
    return new FilteringSequence(_this__u8e3s4, true, predicate);
  }
  function map(_this__u8e3s4, transform) {
    return new TransformingSequence(_this__u8e3s4, transform);
  }
  function mapIndexedNotNull(_this__u8e3s4, transform) {
    return filterNotNull(new TransformingIndexedSequence(_this__u8e3s4, transform));
  }
  function distinctBy(_this__u8e3s4, selector) {
    return new DistinctSequence(_this__u8e3s4, selector);
  }
  function plus_3(_this__u8e3s4, elements) {
    return flatten_0(sequenceOf([_this__u8e3s4, elements]));
  }
  function distinct_0(_this__u8e3s4) {
    return distinctBy(_this__u8e3s4, distinct$lambda);
  }
  function flatMap(_this__u8e3s4, transform) {
    return new FlatteningSequence(_this__u8e3s4, transform, Sequence$iterator$ref());
  }
  function toList_1(_this__u8e3s4) {
    var it = _this__u8e3s4.h();
    if (!it.i())
      return emptyList();
    var element = it.j();
    if (!it.i())
      return listOf(element);
    var dst = ArrayList_init_$Create$();
    dst.e(element);
    while (it.i()) {
      dst.e(it.j());
    }
    return dst;
  }
  function take_0(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.sequences.take.<anonymous>' call
      var message = 'Requested element count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var tmp;
    if (n === 0) {
      tmp = emptySequence();
    } else {
      if (isInterface(_this__u8e3s4, DropTakeSequence)) {
        tmp = _this__u8e3s4.f1(n);
      } else {
        tmp = new TakeSequence(_this__u8e3s4, n);
      }
    }
    return tmp;
  }
  function asIterable(_this__u8e3s4) {
    // Inline function 'kotlin.collections.Iterable' call
    return new asIterable$$inlined$Iterable$1(_this__u8e3s4);
  }
  function filterNotNull(_this__u8e3s4) {
    var tmp = filterNot(_this__u8e3s4, filterNotNull$lambda);
    return isInterface(tmp, Sequence) ? tmp : THROW_CCE();
  }
  function filterNot(_this__u8e3s4, predicate) {
    return new FilteringSequence(_this__u8e3s4, false, predicate);
  }
  function takeWhile(_this__u8e3s4, predicate) {
    return new TakeWhileSequence(_this__u8e3s4, predicate);
  }
  function filterIndexed(_this__u8e3s4, predicate) {
    var tmp = new IndexingSequence(_this__u8e3s4);
    var tmp_0 = new FilteringSequence(tmp, true, filterIndexed$lambda(predicate));
    return new TransformingSequence(tmp_0, filterIndexed$lambda_0);
  }
  function toMutableList_2(_this__u8e3s4) {
    return toCollection_2(_this__u8e3s4, ArrayList_init_$Create$());
  }
  function toCollection_2(_this__u8e3s4, destination) {
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      destination.e(item);
    }
    return destination;
  }
  function distinct$lambda(it) {
    return it;
  }
  function Sequence$iterator$ref() {
    var l = function (p0) {
      return p0.h();
    };
    l.callableName = 'iterator';
    return l;
  }
  function asIterable$$inlined$Iterable$1($this_asIterable) {
    this.g1_1 = $this_asIterable;
  }
  protoOf(asIterable$$inlined$Iterable$1).h = function () {
    // Inline function 'kotlin.sequences.asIterable.<anonymous>' call
    return this.g1_1.h();
  };
  function filterNotNull$lambda(it) {
    return it == null;
  }
  function filterIndexed$lambda($predicate) {
    return function (it) {
      return $predicate(it.h1_1, it.i1_1);
    };
  }
  function filterIndexed$lambda_0(it) {
    return it.i1_1;
  }
  function plus_4(_this__u8e3s4, elements) {
    var tmp0_safe_receiver = collectionSizeOrNull(elements);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.collections.plus.<anonymous>' call
      tmp = _this__u8e3s4.k() + tmp0_safe_receiver | 0;
    }
    var tmp1_elvis_lhs = tmp;
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(tmp1_elvis_lhs == null ? imul(_this__u8e3s4.k(), 2) : tmp1_elvis_lhs));
    result.o(_this__u8e3s4);
    addAll(result, elements);
    return result;
  }
  function minus_0(_this__u8e3s4, elements) {
    var other = convertToListIfNotCollection(elements);
    if (other.r())
      return toSet_1(_this__u8e3s4);
    if (isInterface(other, KtSet)) {
      // Inline function 'kotlin.collections.filterNotTo' call
      var destination = LinkedHashSet_init_$Create$();
      var _iterator__ex2g4s = _this__u8e3s4.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.minus.<anonymous>' call
        if (!other.j1(element)) {
          destination.e(element);
        }
      }
      return destination;
    }
    var result = LinkedHashSet_init_$Create$_0(_this__u8e3s4);
    result.k1(other);
    return result;
  }
  function plus_5(_this__u8e3s4, element) {
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.k() + 1 | 0));
    result.o(_this__u8e3s4);
    result.e(element);
    return result;
  }
  function minus_1(_this__u8e3s4, element) {
    var result = LinkedHashSet_init_$Create$_1(mapCapacity(_this__u8e3s4.k()));
    var removed = false;
    // Inline function 'kotlin.collections.filterTo' call
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element_0 = _iterator__ex2g4s.j();
      // Inline function 'kotlin.collections.minus.<anonymous>' call
      var tmp;
      if (!removed && equals(element_0, element)) {
        removed = true;
        tmp = false;
      } else {
        tmp = true;
      }
      if (tmp) {
        result.e(element_0);
      }
    }
    return result;
  }
  function dropLast_0(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.dropLast.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return take_1(_this__u8e3s4, coerceAtLeast(_this__u8e3s4.length - n | 0, 0));
  }
  function drop_0(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.drop.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.text.substring' call
    var startIndex = coerceAtMost(n, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(startIndex);
  }
  function first_1(_this__u8e3s4) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(_this__u8e3s4) === 0)
      throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');
    return charSequenceGet(_this__u8e3s4, 0);
  }
  function last_1(_this__u8e3s4) {
    // Inline function 'kotlin.text.isEmpty' call
    if (charSequenceLength(_this__u8e3s4) === 0)
      throw NoSuchElementException_init_$Create$_0('Char sequence is empty.');
    return charSequenceGet(_this__u8e3s4, get_lastIndex_1(_this__u8e3s4));
  }
  function reversed_0(_this__u8e3s4) {
    return StringBuilder_init_$Create$_0(_this__u8e3s4).m1();
  }
  function take_1(_this__u8e3s4, n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.text.take.<anonymous>' call
      var message = 'Requested character count ' + n + ' is less than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.text.substring' call
    var endIndex = coerceAtMost(n, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(0, endIndex);
  }
  function slice(_this__u8e3s4, indices) {
    if (indices.r()) {
      // Inline function 'kotlin.collections.listOf' call
      return emptyList();
    }
    var tmp1 = indices.q1();
    // Inline function 'kotlin.collections.copyOfRange' call
    var toIndex = indices.r1() + 1 | 0;
    var tmp$ret$1 = _ULongArray___init__impl__twm1l3(copyOfRange(_ULongArray___get_storage__impl__28e64j(_this__u8e3s4), tmp1, toIndex));
    return asList_0(tmp$ret$1);
  }
  function toULongArray(_this__u8e3s4) {
    var result = _ULongArray___init__impl__twm1l3_0(_this__u8e3s4.k());
    var index = 0;
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j().s1_1;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      ULongArray__set_impl_z19mvh(result, _unary__edvuaz, element);
    }
    return result;
  }
  function _Char___init__impl__6a9atx(value) {
    return value;
  }
  function _get_value__a43j40($this) {
    return $this;
  }
  function _Char___init__impl__6a9atx_0(code) {
    // Inline function 'kotlin.UShort.toInt' call
    var tmp$ret$0 = _UShort___get_data__impl__g0245(code) & 65535;
    return _Char___init__impl__6a9atx(tmp$ret$0);
  }
  function Char__compareTo_impl_ypi4mb($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__compareTo_impl_ypi4mb_0($this, other) {
    return Char__compareTo_impl_ypi4mb($this.t1_1, other instanceof Char ? other.t1_1 : THROW_CCE());
  }
  function Char__minus_impl_a2frrh($this, other) {
    return _get_value__a43j40($this) - _get_value__a43j40(other) | 0;
  }
  function Char__minus_impl_a2frrh_0($this, other) {
    return numberToChar(_get_value__a43j40($this) - other | 0);
  }
  function Char__rangeTo_impl_tkncvp($this, other) {
    return new CharRange($this, other);
  }
  function Char__toInt_impl_vasixd($this) {
    return _get_value__a43j40($this);
  }
  function toString($this) {
    // Inline function 'kotlin.js.unsafeCast' call
    return String.fromCharCode(_get_value__a43j40($this));
  }
  function Char__equals_impl_x6719k($this, other) {
    if (!(other instanceof Char))
      return false;
    return _get_value__a43j40($this) === _get_value__a43j40(other.t1_1);
  }
  function Char__hashCode_impl_otmys($this) {
    return _get_value__a43j40($this);
  }
  function Companion() {
    Companion_instance = this;
    this.u1_1 = _Char___init__impl__6a9atx(0);
    this.v1_1 = _Char___init__impl__6a9atx(65535);
    this.w1_1 = _Char___init__impl__6a9atx(55296);
    this.x1_1 = _Char___init__impl__6a9atx(56319);
    this.y1_1 = _Char___init__impl__6a9atx(56320);
    this.z1_1 = _Char___init__impl__6a9atx(57343);
    this.a2_1 = _Char___init__impl__6a9atx(55296);
    this.b2_1 = _Char___init__impl__6a9atx(57343);
    this.c2_1 = 2;
    this.d2_1 = 16;
  }
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function Char(value) {
    Companion_getInstance();
    this.t1_1 = value;
  }
  protoOf(Char).e2 = function (other) {
    return Char__compareTo_impl_ypi4mb(this.t1_1, other);
  };
  protoOf(Char).d = function (other) {
    return Char__compareTo_impl_ypi4mb_0(this, other);
  };
  protoOf(Char).toString = function () {
    return toString(this.t1_1);
  };
  protoOf(Char).equals = function (other) {
    return Char__equals_impl_x6719k(this.t1_1, other);
  };
  protoOf(Char).hashCode = function () {
    return Char__hashCode_impl_otmys(this.t1_1);
  };
  function KtList() {
  }
  function Collection() {
  }
  function KtSet() {
  }
  function Entry() {
  }
  function KtMap() {
  }
  function MutableIterable() {
  }
  function Companion_0() {
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    return Companion_instance_0;
  }
  function Enum(name, ordinal) {
    this.p2_1 = name;
    this.q2_1 = ordinal;
  }
  protoOf(Enum).r2 = function (other) {
    return compareTo_0(this.q2_1, other.q2_1);
  };
  protoOf(Enum).d = function (other) {
    return this.r2(other instanceof Enum ? other : THROW_CCE());
  };
  protoOf(Enum).equals = function (other) {
    return this === other;
  };
  protoOf(Enum).hashCode = function () {
    return identityHashCode(this);
  };
  protoOf(Enum).toString = function () {
    return this.p2_1;
  };
  function toString_0(_this__u8e3s4) {
    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : toString_1(_this__u8e3s4);
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function Companion_1() {
    Companion_instance_1 = this;
    this.s2_1 = new Long(0, -2147483648);
    this.t2_1 = new Long(-1, 2147483647);
    this.u2_1 = 8;
    this.v2_1 = 64;
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function Long(low, high) {
    Companion_getInstance_1();
    Number_0.call(this);
    this.b1_1 = low;
    this.c1_1 = high;
  }
  protoOf(Long).d1 = function (other) {
    return compare(this, other);
  };
  protoOf(Long).d = function (other) {
    return this.d1(other instanceof Long ? other : THROW_CCE());
  };
  protoOf(Long).w2 = function (other) {
    return add(this, other);
  };
  protoOf(Long).x2 = function (other) {
    return subtract(this, other);
  };
  protoOf(Long).y2 = function (other) {
    return multiply(this, other);
  };
  protoOf(Long).z2 = function (other) {
    return divide(this, other);
  };
  protoOf(Long).a3 = function (other) {
    return modulo(this, other);
  };
  protoOf(Long).b3 = function () {
    return this.w2(new Long(1, 0));
  };
  protoOf(Long).c3 = function () {
    return this.x2(new Long(1, 0));
  };
  protoOf(Long).d3 = function () {
    return this.e3().w2(new Long(1, 0));
  };
  protoOf(Long).f3 = function (bitCount) {
    return shiftLeft(this, bitCount);
  };
  protoOf(Long).g3 = function (bitCount) {
    return shiftRight(this, bitCount);
  };
  protoOf(Long).h3 = function (bitCount) {
    return shiftRightUnsigned(this, bitCount);
  };
  protoOf(Long).i3 = function (other) {
    return new Long(this.b1_1 & other.b1_1, this.c1_1 & other.c1_1);
  };
  protoOf(Long).j3 = function (other) {
    return new Long(this.b1_1 | other.b1_1, this.c1_1 | other.c1_1);
  };
  protoOf(Long).k3 = function (other) {
    return new Long(this.b1_1 ^ other.b1_1, this.c1_1 ^ other.c1_1);
  };
  protoOf(Long).e3 = function () {
    return new Long(~this.b1_1, ~this.c1_1);
  };
  protoOf(Long).l3 = function () {
    return this.b1_1;
  };
  protoOf(Long).m3 = function () {
    return toNumber(this);
  };
  protoOf(Long).toString = function () {
    return toStringImpl(this, 10);
  };
  protoOf(Long).equals = function (other) {
    var tmp;
    if (other instanceof Long) {
      tmp = equalsLong(this, other);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Long).hashCode = function () {
    return hashCode_0(this);
  };
  protoOf(Long).valueOf = function () {
    return this.m3();
  };
  function implement(interfaces) {
    var maxSize = 1;
    var masks = [];
    var inductionVariable = 0;
    var last = interfaces.length;
    while (inductionVariable < last) {
      var i = interfaces[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var currentSize = maxSize;
      var tmp0_elvis_lhs = i.prototype.$imask$;
      var imask = tmp0_elvis_lhs == null ? i.$imask$ : tmp0_elvis_lhs;
      if (!(imask == null)) {
        masks.push(imask);
        currentSize = imask.length;
      }
      var iid = i.$metadata$.iid;
      var tmp;
      if (iid == null) {
        tmp = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.js.implement.<anonymous>' call
        tmp = bitMaskWith(iid);
      }
      var iidImask = tmp;
      if (!(iidImask == null)) {
        masks.push(iidImask);
        currentSize = Math.max(currentSize, iidImask.length);
      }
      if (currentSize > maxSize) {
        maxSize = currentSize;
      }
    }
    return compositeBitMask(maxSize, masks);
  }
  function bitMaskWith(activeBit) {
    var numberIndex = activeBit >> 5;
    var intArray = new Int32Array(numberIndex + 1 | 0);
    var positionInNumber = activeBit & 31;
    var numberWithSettledBit = 1 << positionInNumber;
    intArray[numberIndex] = intArray[numberIndex] | numberWithSettledBit;
    return intArray;
  }
  function compositeBitMask(capacity, masks) {
    var tmp = 0;
    var tmp_0 = new Int32Array(capacity);
    while (tmp < capacity) {
      var tmp_1 = tmp;
      var result = 0;
      var inductionVariable = 0;
      var last = masks.length;
      while (inductionVariable < last) {
        var mask = masks[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        if (tmp_1 < mask.length) {
          result = result | mask[tmp_1];
        }
      }
      tmp_0[tmp_1] = result;
      tmp = tmp + 1 | 0;
    }
    return tmp_0;
  }
  function isBitSet(_this__u8e3s4, possibleActiveBit) {
    var numberIndex = possibleActiveBit >> 5;
    if (numberIndex > _this__u8e3s4.length)
      return false;
    var positionInNumber = possibleActiveBit & 31;
    var numberWithSettledBit = 1 << positionInNumber;
    return !((_this__u8e3s4[numberIndex] & numberWithSettledBit) === 0);
  }
  function FunctionAdapter() {
  }
  function fillArrayVal(array, initValue) {
    var inductionVariable = 0;
    var last = array.length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        array[i] = initValue;
      }
       while (!(i === last));
    return array;
  }
  function arrayIterator(array) {
    return new arrayIterator$1(array);
  }
  function booleanArray(size) {
    var tmp0 = 'BooleanArray';
    // Inline function 'withType' call
    var array = fillArrayVal(Array(size), false);
    array.$type$ = tmp0;
    // Inline function 'kotlin.js.unsafeCast' call
    return array;
  }
  function charArray(size) {
    var tmp0 = 'CharArray';
    // Inline function 'withType' call
    var array = new Uint16Array(size);
    array.$type$ = tmp0;
    // Inline function 'kotlin.js.unsafeCast' call
    return array;
  }
  function longArray(size) {
    var tmp0 = 'LongArray';
    // Inline function 'withType' call
    var array = fillArrayVal(Array(size), new Long(0, 0));
    array.$type$ = tmp0;
    // Inline function 'kotlin.js.unsafeCast' call
    return array;
  }
  function booleanArrayOf(arr) {
    var tmp1 = 'BooleanArray';
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'withType' call
    var array = arr.slice();
    array.$type$ = tmp1;
    // Inline function 'kotlin.js.unsafeCast' call
    return array;
  }
  function charArrayOf(arr) {
    var tmp0 = 'CharArray';
    // Inline function 'withType' call
    var array = new Uint16Array(arr);
    array.$type$ = tmp0;
    // Inline function 'kotlin.js.unsafeCast' call
    return array;
  }
  function longArrayOf(arr) {
    var tmp1 = 'LongArray';
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'withType' call
    var array = arr.slice();
    array.$type$ = tmp1;
    // Inline function 'kotlin.js.unsafeCast' call
    return array;
  }
  function arrayIterator$1($array) {
    this.p3_1 = $array;
    this.o3_1 = 0;
  }
  protoOf(arrayIterator$1).i = function () {
    return !(this.o3_1 === this.p3_1.length);
  };
  protoOf(arrayIterator$1).j = function () {
    var tmp;
    if (!(this.o3_1 === this.p3_1.length)) {
      var _unary__edvuaz = this.o3_1;
      this.o3_1 = _unary__edvuaz + 1 | 0;
      tmp = this.p3_1[_unary__edvuaz];
    } else {
      throw NoSuchElementException_init_$Create$_0('' + this.o3_1);
    }
    return tmp;
  };
  function get_buf() {
    _init_properties_bitUtils_kt__nfcg4k();
    return buf;
  }
  var buf;
  function get_bufFloat64() {
    _init_properties_bitUtils_kt__nfcg4k();
    return bufFloat64;
  }
  var bufFloat64;
  var bufFloat32;
  function get_bufInt32() {
    _init_properties_bitUtils_kt__nfcg4k();
    return bufInt32;
  }
  var bufInt32;
  function get_lowIndex() {
    _init_properties_bitUtils_kt__nfcg4k();
    return lowIndex;
  }
  var lowIndex;
  function get_highIndex() {
    _init_properties_bitUtils_kt__nfcg4k();
    return highIndex;
  }
  var highIndex;
  function getNumberHashCode(obj) {
    _init_properties_bitUtils_kt__nfcg4k();
    // Inline function 'kotlin.js.jsBitwiseOr' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    if ((obj | 0) === obj) {
      return numberToInt(obj);
    }
    get_bufFloat64()[0] = obj;
    return imul(get_bufInt32()[get_highIndex()], 31) + get_bufInt32()[get_lowIndex()] | 0;
  }
  var properties_initialized_bitUtils_kt_i2bo3e;
  function _init_properties_bitUtils_kt__nfcg4k() {
    if (!properties_initialized_bitUtils_kt_i2bo3e) {
      properties_initialized_bitUtils_kt_i2bo3e = true;
      buf = new ArrayBuffer(8);
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufFloat64 = new Float64Array(get_buf());
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufFloat32 = new Float32Array(get_buf());
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      bufInt32 = new Int32Array(get_buf());
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.js.lowIndex.<anonymous>' call
      get_bufFloat64()[0] = -1.0;
      lowIndex = !(get_bufInt32()[0] === 0) ? 1 : 0;
      highIndex = 1 - get_lowIndex() | 0;
    }
  }
  function charSequenceGet(a, index) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.Char' call
      var code = a.charCodeAt(index);
      var tmp_0;
      // Inline function 'kotlin.code' call
      var this_0 = _Char___init__impl__6a9atx(0);
      if (code < Char__toInt_impl_vasixd(this_0)) {
        tmp_0 = true;
      } else {
        // Inline function 'kotlin.code' call
        var this_1 = _Char___init__impl__6a9atx(65535);
        tmp_0 = code > Char__toInt_impl_vasixd(this_1);
      }
      if (tmp_0) {
        throw IllegalArgumentException_init_$Create$_0('Invalid Char code: ' + code);
      }
      tmp = numberToChar(code);
    } else {
      tmp = a.b(index);
    }
    return tmp;
  }
  function isString(a) {
    return typeof a === 'string';
  }
  function charSequenceLength(a) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = a.length;
    } else {
      tmp = a.a();
    }
    return tmp;
  }
  function charSequenceSubSequence(a, startIndex, endIndex) {
    var tmp;
    if (isString(a)) {
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = a.substring(startIndex, endIndex);
    } else {
      tmp = a.c(startIndex, endIndex);
    }
    return tmp;
  }
  function arrayToString(array) {
    return joinToString(array, ', ', '[', ']', VOID, VOID, arrayToString$lambda);
  }
  function contentEqualsInternal(_this__u8e3s4, other) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    // Inline function 'kotlin.js.asDynamic' call
    var b = other;
    if (a === b)
      return true;
    if (a == null || b == null || !isArrayish(b) || a.length != b.length)
      return false;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals(a[i], b[i])) {
          return false;
        }
      }
       while (inductionVariable < last);
    return true;
  }
  function contentHashCodeInternal(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var a = _this__u8e3s4;
    if (a == null)
      return 0;
    var result = 1;
    var inductionVariable = 0;
    var last = a.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        result = imul(result, 31) + hashCode(a[i]) | 0;
      }
       while (inductionVariable < last);
    return result;
  }
  function arrayToString$lambda(it) {
    return toString_1(it);
  }
  function compareTo_0(a, b) {
    var tmp;
    switch (typeof a) {
      case 'number':
        var tmp_0;
        if (typeof b === 'number') {
          tmp_0 = doubleCompareTo(a, b);
        } else {
          if (b instanceof Long) {
            tmp_0 = doubleCompareTo(a, b.m3());
          } else {
            tmp_0 = primitiveCompareTo(a, b);
          }
        }

        tmp = tmp_0;
        break;
      case 'string':
      case 'boolean':
        tmp = primitiveCompareTo(a, b);
        break;
      default:
        tmp = compareToDoNotIntrinsicify(a, b);
        break;
    }
    return tmp;
  }
  function doubleCompareTo(a, b) {
    var tmp;
    if (a < b) {
      tmp = -1;
    } else if (a > b) {
      tmp = 1;
    } else if (a === b) {
      var tmp_0;
      if (a !== 0) {
        tmp_0 = 0;
      } else {
        // Inline function 'kotlin.js.asDynamic' call
        var ia = 1 / a;
        var tmp_1;
        // Inline function 'kotlin.js.asDynamic' call
        if (ia === 1 / b) {
          tmp_1 = 0;
        } else {
          if (ia < 0) {
            tmp_1 = -1;
          } else {
            tmp_1 = 1;
          }
        }
        tmp_0 = tmp_1;
      }
      tmp = tmp_0;
    } else if (a !== a) {
      tmp = b !== b ? 0 : 1;
    } else {
      tmp = -1;
    }
    return tmp;
  }
  function primitiveCompareTo(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function compareToDoNotIntrinsicify(a, b) {
    return a.d(b);
  }
  function identityHashCode(obj) {
    return getObjectHashCode(obj);
  }
  function getObjectHashCode(obj) {
    // Inline function 'kotlin.js.jsIn' call
    if (!('kotlinHashCodeValue$' in obj)) {
      var hash = calculateRandomHash();
      var descriptor = new Object();
      descriptor.value = hash;
      descriptor.enumerable = false;
      Object.defineProperty(obj, 'kotlinHashCodeValue$', descriptor);
    }
    // Inline function 'kotlin.js.unsafeCast' call
    return obj['kotlinHashCodeValue$'];
  }
  function calculateRandomHash() {
    // Inline function 'kotlin.js.jsBitwiseOr' call
    return Math.random() * 4.294967296E9 | 0;
  }
  function defineProp(obj, name, getter, setter) {
    return Object.defineProperty(obj, name, {configurable: true, get: getter, set: setter});
  }
  function objectCreate(proto) {
    proto = proto === VOID ? null : proto;
    return Object.create(proto);
  }
  function toString_1(o) {
    var tmp;
    if (o == null) {
      tmp = 'null';
    } else if (isArrayish(o)) {
      tmp = '[...]';
    } else if (!(typeof o.toString === 'function')) {
      tmp = anyToString(o);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = o.toString();
    }
    return tmp;
  }
  function equals(obj1, obj2) {
    if (obj1 == null) {
      return obj2 == null;
    }
    if (obj2 == null) {
      return false;
    }
    if (typeof obj1 === 'object' && typeof obj1.equals === 'function') {
      return obj1.equals(obj2);
    }
    if (obj1 !== obj1) {
      return obj2 !== obj2;
    }
    if (typeof obj1 === 'number' && typeof obj2 === 'number') {
      var tmp;
      if (obj1 === obj2) {
        var tmp_0;
        if (obj1 !== 0) {
          tmp_0 = true;
        } else {
          // Inline function 'kotlin.js.asDynamic' call
          var tmp_1 = 1 / obj1;
          // Inline function 'kotlin.js.asDynamic' call
          tmp_0 = tmp_1 === 1 / obj2;
        }
        tmp = tmp_0;
      } else {
        tmp = false;
      }
      return tmp;
    }
    return obj1 === obj2;
  }
  function hashCode(obj) {
    if (obj == null)
      return 0;
    var typeOf = typeof obj;
    var tmp;
    switch (typeOf) {
      case 'object':
        tmp = 'function' === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);
        break;
      case 'function':
        tmp = getObjectHashCode(obj);
        break;
      case 'number':
        tmp = getNumberHashCode(obj);
        break;
      case 'boolean':
        // Inline function 'kotlin.js.unsafeCast' call

        tmp = getBooleanHashCode(obj);
        break;
      case 'string':
        tmp = getStringHashCode(String(obj));
        break;
      case 'bigint':
        tmp = getBigIntHashCode(obj);
        break;
      case 'symbol':
        tmp = getSymbolHashCode(obj);
        break;
      default:
        tmp = function () {
          throw new Error('Unexpected typeof `' + typeOf + '`');
        }();
        break;
    }
    return tmp;
  }
  function anyToString(o) {
    return Object.prototype.toString.call(o);
  }
  function getBooleanHashCode(value) {
    return value ? 1231 : 1237;
  }
  function getStringHashCode(str) {
    var hash = 0;
    var length = str.length;
    var inductionVariable = 0;
    var last = length - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        var code = str.charCodeAt(i);
        hash = imul(hash, 31) + code | 0;
      }
       while (!(i === last));
    return hash;
  }
  function getBigIntHashCode(value) {
    var shiftNumber = BigInt(32);
    var MASK = BigInt(4.294967295E9);
    var bigNumber = value < 0 ? -value : value;
    var hashCode = 0;
    var signum = value < 0 ? -1 : 1;
    while (bigNumber != 0) {
      // Inline function 'kotlin.js.unsafeCast' call
      var chunk = Number(bigNumber & MASK);
      hashCode = imul(31, hashCode) + chunk | 0;
      bigNumber = bigNumber >> shiftNumber;
    }
    return imul(hashCode, signum);
  }
  function getSymbolHashCode(value) {
    var hashCodeMap = symbolIsSharable(value) ? getSymbolMap() : getSymbolWeakMap();
    var cachedHashCode = hashCodeMap.get(value);
    if (cachedHashCode !== VOID)
      return cachedHashCode;
    var hash = calculateRandomHash();
    hashCodeMap.set(value, hash);
    return hash;
  }
  function symbolIsSharable(symbol) {
    return Symbol.keyFor(symbol) != VOID;
  }
  function getSymbolMap() {
    if (symbolMap === VOID) {
      symbolMap = new Map();
    }
    return symbolMap;
  }
  function getSymbolWeakMap() {
    if (symbolWeakMap === VOID) {
      symbolWeakMap = new WeakMap();
    }
    return symbolWeakMap;
  }
  var symbolMap;
  var symbolWeakMap;
  function boxIntrinsic(x) {
    var message = 'Should be lowered';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  }
  function unboxIntrinsic(x) {
    var message = 'Should be lowered';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  }
  function captureStack(instance, constructorFunction) {
    if (Error.captureStackTrace != null) {
      Error.captureStackTrace(instance, constructorFunction);
    } else {
      // Inline function 'kotlin.js.asDynamic' call
      instance.stack = (new Error()).stack;
    }
  }
  function protoOf(constructor) {
    return constructor.prototype;
  }
  function newThrowable(message, cause) {
    var throwable = new Error();
    var tmp;
    if (isUndefined(message)) {
      var tmp_0;
      if (isUndefined(cause)) {
        tmp_0 = message;
      } else {
        var tmp1_elvis_lhs = cause == null ? null : cause.toString();
        tmp_0 = tmp1_elvis_lhs == null ? VOID : tmp1_elvis_lhs;
      }
      tmp = tmp_0;
    } else {
      tmp = message == null ? VOID : message;
    }
    throwable.message = tmp;
    throwable.cause = cause;
    throwable.name = 'Throwable';
    // Inline function 'kotlin.js.unsafeCast' call
    return throwable;
  }
  function isUndefined(value) {
    return value === VOID;
  }
  function extendThrowable(this_, message, cause) {
    Error.call(this_);
    setPropertiesToThrowableInstance(this_, message, cause);
  }
  function setPropertiesToThrowableInstance(this_, message, cause) {
    var errorInfo = calculateErrorInfo(Object.getPrototypeOf(this_));
    if ((errorInfo & 1) === 0) {
      var tmp;
      if (message == null) {
        var tmp_0;
        if (!(message === null)) {
          var tmp1_elvis_lhs = cause == null ? null : cause.toString();
          tmp_0 = tmp1_elvis_lhs == null ? VOID : tmp1_elvis_lhs;
        } else {
          tmp_0 = VOID;
        }
        tmp = tmp_0;
      } else {
        tmp = message;
      }
      this_.message = tmp;
    }
    if ((errorInfo & 2) === 0) {
      this_.cause = cause;
    }
    this_.name = Object.getPrototypeOf(this_).constructor.name;
  }
  function ensureNotNull(v) {
    var tmp;
    if (v == null) {
      THROW_NPE();
    } else {
      tmp = v;
    }
    return tmp;
  }
  function THROW_NPE() {
    throw NullPointerException_init_$Create$();
  }
  function noWhenBranchMatchedException() {
    throw NoWhenBranchMatchedException_init_$Create$();
  }
  function THROW_CCE() {
    throw ClassCastException_init_$Create$();
  }
  function get_ZERO() {
    _init_properties_longJs_kt__elc2w5();
    return ZERO;
  }
  var ZERO;
  function get_ONE() {
    _init_properties_longJs_kt__elc2w5();
    return ONE;
  }
  var ONE;
  function get_NEG_ONE() {
    _init_properties_longJs_kt__elc2w5();
    return NEG_ONE;
  }
  var NEG_ONE;
  function get_MAX_VALUE() {
    _init_properties_longJs_kt__elc2w5();
    return MAX_VALUE;
  }
  var MAX_VALUE;
  function get_MIN_VALUE() {
    _init_properties_longJs_kt__elc2w5();
    return MIN_VALUE;
  }
  var MIN_VALUE;
  function get_TWO_PWR_24_() {
    _init_properties_longJs_kt__elc2w5();
    return TWO_PWR_24_;
  }
  var TWO_PWR_24_;
  function compare(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (equalsLong(_this__u8e3s4, other)) {
      return 0;
    }
    var thisNeg = isNegative(_this__u8e3s4);
    var otherNeg = isNegative(other);
    return thisNeg && !otherNeg ? -1 : !thisNeg && otherNeg ? 1 : isNegative(subtract(_this__u8e3s4, other)) ? -1 : 1;
  }
  function add(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    var a48 = _this__u8e3s4.c1_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.c1_1 & 65535;
    var a16 = _this__u8e3s4.b1_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.b1_1 & 65535;
    var b48 = other.c1_1 >>> 16 | 0;
    var b32 = other.c1_1 & 65535;
    var b16 = other.b1_1 >>> 16 | 0;
    var b00 = other.b1_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + (a00 + b00 | 0) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + (a16 + b16 | 0) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + (a32 + b32 | 0) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (a48 + b48 | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function subtract(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return add(_this__u8e3s4, other.d3());
  }
  function multiply(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    } else if (isZero(other)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      return isOdd(other) ? get_MIN_VALUE() : get_ZERO();
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return isOdd(_this__u8e3s4) ? get_MIN_VALUE() : get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = multiply(negate(_this__u8e3s4), negate(other));
      } else {
        tmp = negate(multiply(negate(_this__u8e3s4), other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(multiply(_this__u8e3s4, negate(other)));
    }
    if (lessThan(_this__u8e3s4, get_TWO_PWR_24_()) && lessThan(other, get_TWO_PWR_24_())) {
      return fromNumber(toNumber(_this__u8e3s4) * toNumber(other));
    }
    var a48 = _this__u8e3s4.c1_1 >>> 16 | 0;
    var a32 = _this__u8e3s4.c1_1 & 65535;
    var a16 = _this__u8e3s4.b1_1 >>> 16 | 0;
    var a00 = _this__u8e3s4.b1_1 & 65535;
    var b48 = other.c1_1 >>> 16 | 0;
    var b32 = other.c1_1 & 65535;
    var b16 = other.b1_1 >>> 16 | 0;
    var b00 = other.b1_1 & 65535;
    var c48 = 0;
    var c32 = 0;
    var c16 = 0;
    var c00 = 0;
    c00 = c00 + imul(a00, b00) | 0;
    c16 = c16 + (c00 >>> 16 | 0) | 0;
    c00 = c00 & 65535;
    c16 = c16 + imul(a16, b00) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c16 = c16 + imul(a00, b16) | 0;
    c32 = c32 + (c16 >>> 16 | 0) | 0;
    c16 = c16 & 65535;
    c32 = c32 + imul(a32, b00) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a16, b16) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c32 = c32 + imul(a00, b32) | 0;
    c48 = c48 + (c32 >>> 16 | 0) | 0;
    c32 = c32 & 65535;
    c48 = c48 + (((imul(a48, b00) + imul(a32, b16) | 0) + imul(a16, b32) | 0) + imul(a00, b48) | 0) | 0;
    c48 = c48 & 65535;
    return new Long(c16 << 16 | c00, c48 << 16 | c32);
  }
  function divide(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    if (isZero(other)) {
      throw Exception_init_$Create$_0('division by zero');
    } else if (isZero(_this__u8e3s4)) {
      return get_ZERO();
    }
    if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
      if (equalsLong(other, get_ONE()) || equalsLong(other, get_NEG_ONE())) {
        return get_MIN_VALUE();
      } else if (equalsLong(other, get_MIN_VALUE())) {
        return get_ONE();
      } else {
        var halfThis = shiftRight(_this__u8e3s4, 1);
        var approx = shiftLeft(halfThis.z2(other), 1);
        if (equalsLong(approx, get_ZERO())) {
          return isNegative(other) ? get_ONE() : get_NEG_ONE();
        } else {
          var rem = subtract(_this__u8e3s4, multiply(other, approx));
          return add(approx, rem.z2(other));
        }
      }
    } else if (equalsLong(other, get_MIN_VALUE())) {
      return get_ZERO();
    }
    if (isNegative(_this__u8e3s4)) {
      var tmp;
      if (isNegative(other)) {
        tmp = negate(_this__u8e3s4).z2(negate(other));
      } else {
        tmp = negate(negate(_this__u8e3s4).z2(other));
      }
      return tmp;
    } else if (isNegative(other)) {
      return negate(_this__u8e3s4.z2(negate(other)));
    }
    var res = get_ZERO();
    var rem_0 = _this__u8e3s4;
    while (greaterThanOrEqual(rem_0, other)) {
      var approxDouble = toNumber(rem_0) / toNumber(other);
      var approx2 = Math.max(1.0, Math.floor(approxDouble));
      var log2 = Math.ceil(Math.log(approx2) / Math.LN2);
      var delta = log2 <= 48 ? 1.0 : Math.pow(2.0, log2 - 48);
      var approxRes = fromNumber(approx2);
      var approxRem = multiply(approxRes, other);
      while (isNegative(approxRem) || greaterThan(approxRem, rem_0)) {
        approx2 = approx2 - delta;
        approxRes = fromNumber(approx2);
        approxRem = multiply(approxRes, other);
      }
      if (isZero(approxRes)) {
        approxRes = get_ONE();
      }
      res = add(res, approxRes);
      rem_0 = subtract(rem_0, approxRem);
    }
    return res;
  }
  function modulo(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return subtract(_this__u8e3s4, multiply(_this__u8e3s4.z2(other), other));
  }
  function shiftLeft(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.b1_1 << numBits_0, _this__u8e3s4.c1_1 << numBits_0 | (_this__u8e3s4.b1_1 >>> (32 - numBits_0 | 0) | 0));
      } else {
        return new Long(0, _this__u8e3s4.b1_1 << (numBits_0 - 32 | 0));
      }
    }
  }
  function shiftRight(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.b1_1 >>> numBits_0 | 0 | _this__u8e3s4.c1_1 << (32 - numBits_0 | 0), _this__u8e3s4.c1_1 >> numBits_0);
      } else {
        return new Long(_this__u8e3s4.c1_1 >> (numBits_0 - 32 | 0), _this__u8e3s4.c1_1 >= 0 ? 0 : -1);
      }
    }
  }
  function shiftRightUnsigned(_this__u8e3s4, numBits) {
    _init_properties_longJs_kt__elc2w5();
    var numBits_0 = numBits & 63;
    if (numBits_0 === 0) {
      return _this__u8e3s4;
    } else {
      if (numBits_0 < 32) {
        return new Long(_this__u8e3s4.b1_1 >>> numBits_0 | 0 | _this__u8e3s4.c1_1 << (32 - numBits_0 | 0), _this__u8e3s4.c1_1 >>> numBits_0 | 0);
      } else {
        var tmp;
        if (numBits_0 === 32) {
          tmp = new Long(_this__u8e3s4.c1_1, 0);
        } else {
          tmp = new Long(_this__u8e3s4.c1_1 >>> (numBits_0 - 32 | 0) | 0, 0);
        }
        return tmp;
      }
    }
  }
  function toNumber(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.c1_1 * 4.294967296E9 + getLowBitsUnsigned(_this__u8e3s4);
  }
  function toStringImpl(_this__u8e3s4, radix) {
    _init_properties_longJs_kt__elc2w5();
    if (radix < 2 || 36 < radix) {
      throw Exception_init_$Create$_0('radix out of range: ' + radix);
    }
    if (isZero(_this__u8e3s4)) {
      return '0';
    }
    if (isNegative(_this__u8e3s4)) {
      if (equalsLong(_this__u8e3s4, get_MIN_VALUE())) {
        var radixLong = fromInt(radix);
        var div = _this__u8e3s4.z2(radixLong);
        var rem = subtract(multiply(div, radixLong), _this__u8e3s4).l3();
        var tmp = toStringImpl(div, radix);
        // Inline function 'kotlin.js.asDynamic' call
        // Inline function 'kotlin.js.unsafeCast' call
        return tmp + rem.toString(radix);
      } else {
        return '-' + toStringImpl(negate(_this__u8e3s4), radix);
      }
    }
    var digitsPerTime = radix === 2 ? 31 : radix <= 10 ? 9 : radix <= 21 ? 7 : radix <= 35 ? 6 : 5;
    var radixToPower = fromNumber(Math.pow(radix, digitsPerTime));
    var rem_0 = _this__u8e3s4;
    var result = '';
    while (true) {
      var remDiv = rem_0.z2(radixToPower);
      var intval = subtract(rem_0, multiply(remDiv, radixToPower)).l3();
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      var digits = intval.toString(radix);
      rem_0 = remDiv;
      if (isZero(rem_0)) {
        return digits + result;
      } else {
        while (digits.length < digitsPerTime) {
          digits = '0' + digits;
        }
        result = digits + result;
      }
    }
  }
  function equalsLong(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.c1_1 === other.c1_1 && _this__u8e3s4.b1_1 === other.b1_1;
  }
  function hashCode_0(l) {
    _init_properties_longJs_kt__elc2w5();
    return l.b1_1 ^ l.c1_1;
  }
  function fromInt(value) {
    _init_properties_longJs_kt__elc2w5();
    return new Long(value, value < 0 ? -1 : 0);
  }
  function isNegative(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.c1_1 < 0;
  }
  function isZero(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.c1_1 === 0 && _this__u8e3s4.b1_1 === 0;
  }
  function isOdd(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return (_this__u8e3s4.b1_1 & 1) === 1;
  }
  function negate(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.d3();
  }
  function lessThan(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) < 0;
  }
  function fromNumber(value) {
    _init_properties_longJs_kt__elc2w5();
    if (isNaN_0(value)) {
      return get_ZERO();
    } else if (value <= -9.223372036854776E18) {
      return get_MIN_VALUE();
    } else if (value + 1 >= 9.223372036854776E18) {
      return get_MAX_VALUE();
    } else if (value < 0) {
      return negate(fromNumber(-value));
    } else {
      var twoPwr32 = 4.294967296E9;
      // Inline function 'kotlin.js.jsBitwiseOr' call
      var tmp = value % twoPwr32 | 0;
      // Inline function 'kotlin.js.jsBitwiseOr' call
      var tmp$ret$1 = value / twoPwr32 | 0;
      return new Long(tmp, tmp$ret$1);
    }
  }
  function greaterThan(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) > 0;
  }
  function greaterThanOrEqual(_this__u8e3s4, other) {
    _init_properties_longJs_kt__elc2w5();
    return compare(_this__u8e3s4, other) >= 0;
  }
  function getLowBitsUnsigned(_this__u8e3s4) {
    _init_properties_longJs_kt__elc2w5();
    return _this__u8e3s4.b1_1 >= 0 ? _this__u8e3s4.b1_1 : 4.294967296E9 + _this__u8e3s4.b1_1;
  }
  var properties_initialized_longJs_kt_4syf89;
  function _init_properties_longJs_kt__elc2w5() {
    if (!properties_initialized_longJs_kt_4syf89) {
      properties_initialized_longJs_kt_4syf89 = true;
      ZERO = fromInt(0);
      ONE = fromInt(1);
      NEG_ONE = fromInt(-1);
      MAX_VALUE = new Long(-1, 2147483647);
      MIN_VALUE = new Long(0, -2147483648);
      TWO_PWR_24_ = fromInt(16777216);
    }
  }
  function createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity) {
    var undef = VOID;
    var iid = kind === 'interface' ? generateInterfaceId() : VOID;
    return {kind: kind, simpleName: name, associatedObjectKey: associatedObjectKey, associatedObjects: associatedObjects, suspendArity: suspendArity, $kClass$: undef, defaultConstructor: defaultConstructor, iid: iid};
  }
  function generateInterfaceId() {
    if (globalInterfaceId === VOID) {
      globalInterfaceId = 0;
    }
    // Inline function 'kotlin.js.unsafeCast' call
    globalInterfaceId = globalInterfaceId + 1 | 0;
    // Inline function 'kotlin.js.unsafeCast' call
    return globalInterfaceId;
  }
  var globalInterfaceId;
  function initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    if (!(parent == null)) {
      ctor.prototype = Object.create(parent.prototype);
      ctor.prototype.constructor = ctor;
    }
    var metadata = createMetadata(kind, name, defaultConstructor, associatedObjectKey, associatedObjects, suspendArity);
    ctor.$metadata$ = metadata;
    if (!(interfaces == null)) {
      var receiver = !equals(metadata.iid, VOID) ? ctor : ctor.prototype;
      receiver.$imask$ = implement(interfaces);
    }
  }
  function initMetadataForClass(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    var kind = 'class';
    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
  }
  function initMetadataForObject(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    var kind = 'object';
    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
  }
  function initMetadataForInterface(ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects) {
    var kind = 'interface';
    initMetadataFor(kind, ctor, name, defaultConstructor, parent, interfaces, suspendArity, associatedObjectKey, associatedObjects);
  }
  function initMetadataForLambda(ctor, parent, interfaces, suspendArity) {
    initMetadataForClass(ctor, 'Lambda', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function initMetadataForCoroutine(ctor, parent, interfaces, suspendArity) {
    initMetadataForClass(ctor, 'Coroutine', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function initMetadataForFunctionReference(ctor, parent, interfaces, suspendArity) {
    initMetadataForClass(ctor, 'FunctionReference', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function initMetadataForCompanion(ctor, parent, interfaces, suspendArity) {
    initMetadataForObject(ctor, 'Companion', VOID, parent, interfaces, suspendArity, VOID, VOID);
  }
  function numberToInt(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a.l3();
    } else {
      tmp = doubleToInt(a);
    }
    return tmp;
  }
  function doubleToInt(a) {
    var tmp;
    if (a > 2147483647) {
      tmp = 2147483647;
    } else if (a < -2147483648) {
      tmp = -2147483648;
    } else {
      // Inline function 'kotlin.js.jsBitwiseOr' call
      tmp = a | 0;
    }
    return tmp;
  }
  function numberToDouble(a) {
    // Inline function 'kotlin.js.unsafeCast' call
    return +a;
  }
  function toShort(a) {
    // Inline function 'kotlin.js.unsafeCast' call
    return a << 16 >> 16;
  }
  function numberToLong(a) {
    var tmp;
    if (a instanceof Long) {
      tmp = a;
    } else {
      tmp = fromNumber(a);
    }
    return tmp;
  }
  function numberToChar(a) {
    // Inline function 'kotlin.toUShort' call
    var this_0 = numberToInt(a);
    var tmp$ret$0 = _UShort___init__impl__jigrne(toShort(this_0));
    return _Char___init__impl__6a9atx_0(tmp$ret$0);
  }
  function toLong(a) {
    return fromInt(a);
  }
  function numberRangeToNumber(start, endInclusive) {
    return new IntRange(start, endInclusive);
  }
  function get_propertyRefClassMetadataCache() {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return propertyRefClassMetadataCache;
  }
  var propertyRefClassMetadataCache;
  function metadataObject() {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return createMetadata('class', VOID, VOID, VOID, VOID, VOID);
  }
  function getPropertyCallableRef(name, paramCount, superType, getter, setter) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    getter.get = getter;
    getter.set = setter;
    getter.callableName = name;
    // Inline function 'kotlin.js.unsafeCast' call
    return getPropertyRefClass(getter, getKPropMetadata(paramCount, setter), getInterfaceMaskFor(getter, superType));
  }
  function getPropertyRefClass(obj, metadata, imask) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    obj.$metadata$ = metadata;
    obj.constructor = obj;
    obj.$imask$ = imask;
    return obj;
  }
  function getKPropMetadata(paramCount, setter) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    return get_propertyRefClassMetadataCache()[paramCount][setter == null ? 0 : 1];
  }
  function getInterfaceMaskFor(obj, superType) {
    _init_properties_reflectRuntime_kt__5r4uu3();
    var tmp0_elvis_lhs = obj.$imask$;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp$ret$2 = [superType];
      tmp = implement(tmp$ret$2);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  var properties_initialized_reflectRuntime_kt_inkhwd;
  function _init_properties_reflectRuntime_kt__5r4uu3() {
    if (!properties_initialized_reflectRuntime_kt_inkhwd) {
      properties_initialized_reflectRuntime_kt_inkhwd = true;
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp = [metadataObject(), metadataObject()];
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      var tmp_0 = [metadataObject(), metadataObject()];
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.arrayOf' call
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      propertyRefClassMetadataCache = [tmp, tmp_0, [metadataObject(), metadataObject()]];
    }
  }
  function isArrayish(o) {
    return isJsArray(o) || isView(o);
  }
  function isJsArray(obj) {
    // Inline function 'kotlin.js.unsafeCast' call
    return Array.isArray(obj);
  }
  function isInterface(obj, iface) {
    return isInterfaceImpl(obj, iface.$metadata$.iid);
  }
  function isInterfaceImpl(obj, iface) {
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp0_elvis_lhs = obj.$imask$;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return false;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var mask = tmp;
    return isBitSet(mask, iface);
  }
  function isArray(obj) {
    var tmp;
    if (isJsArray(obj)) {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = !obj.$type$;
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isNumber(a) {
    var tmp;
    if (typeof a === 'number') {
      tmp = true;
    } else {
      tmp = a instanceof Long;
    }
    return tmp;
  }
  function isComparable(value) {
    var type = typeof value;
    return type === 'string' || type === 'boolean' || isNumber(value) || isInterface(value, Comparable);
  }
  function isCharSequence(value) {
    return typeof value === 'string' || isInterface(value, CharSequence);
  }
  function isBooleanArray(a) {
    return isJsArray(a) && a.$type$ === 'BooleanArray';
  }
  function isByteArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int8Array;
  }
  function isShortArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int16Array;
  }
  function isCharArray(a) {
    var tmp;
    // Inline function 'kotlin.js.jsInstanceOf' call
    if (a instanceof Uint16Array) {
      tmp = a.$type$ === 'CharArray';
    } else {
      tmp = false;
    }
    return tmp;
  }
  function isIntArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Int32Array;
  }
  function isFloatArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Float32Array;
  }
  function isLongArray(a) {
    return isJsArray(a) && a.$type$ === 'LongArray';
  }
  function isDoubleArray(a) {
    // Inline function 'kotlin.js.jsInstanceOf' call
    return a instanceof Float64Array;
  }
  function jsIsType(obj, jsClass) {
    if (jsClass === Object) {
      return obj != null;
    }
    var objType = typeof obj;
    var jsClassType = typeof jsClass;
    if (obj == null || jsClass == null || (!(objType === 'object') && !(objType === 'function'))) {
      return false;
    }
    var constructor = jsClassType === 'object' ? jsGetPrototypeOf(jsClass) : jsClass;
    var klassMetadata = constructor.$metadata$;
    if ((klassMetadata == null ? null : klassMetadata.kind) === 'interface') {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_elvis_lhs = klassMetadata.iid;
      var tmp;
      if (tmp0_elvis_lhs == null) {
        return false;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var iid = tmp;
      return isInterfaceImpl(obj, iid);
    }
    // Inline function 'kotlin.js.jsInstanceOf' call
    return obj instanceof constructor;
  }
  function jsGetPrototypeOf(jsClass) {
    return Object.getPrototypeOf(jsClass);
  }
  function calculateErrorInfo(proto) {
    var tmp0_safe_receiver = proto.constructor;
    var metadata = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.$metadata$;
    var tmp2_safe_receiver = metadata == null ? null : metadata.errorInfo;
    if (tmp2_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp2_safe_receiver;
    }
    var result = 0;
    if (hasProp(proto, 'message'))
      result = result | 1;
    if (hasProp(proto, 'cause'))
      result = result | 2;
    if (!(result === 3)) {
      var parentProto = getPrototypeOf(proto);
      if (parentProto != Error.prototype) {
        result = result | calculateErrorInfo(parentProto);
      }
    }
    if (!(metadata == null)) {
      metadata.errorInfo = result;
    }
    return result;
  }
  function hasProp(proto, propName) {
    return proto.hasOwnProperty(propName);
  }
  function getPrototypeOf(obj) {
    return Object.getPrototypeOf(obj);
  }
  function get_VOID() {
    _init_properties_void_kt__3zg9as();
    return VOID;
  }
  var VOID;
  var properties_initialized_void_kt_e4ret2;
  function _init_properties_void_kt__3zg9as() {
    if (!properties_initialized_void_kt_e4ret2) {
      properties_initialized_void_kt_e4ret2 = true;
      VOID = void 0;
    }
  }
  function asList(_this__u8e3s4) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return new ArrayList(_this__u8e3s4);
  }
  function contentEquals(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function copyOf(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return fillFrom(_this__u8e3s4, new Int32Array(newSize));
  }
  function contentHashCode(_this__u8e3s4) {
    return contentHashCodeInternal(_this__u8e3s4);
  }
  function contentEquals_0(_this__u8e3s4, other) {
    return contentEqualsInternal(_this__u8e3s4, other);
  }
  function sort(_this__u8e3s4) {
    if (_this__u8e3s4.length > 1) {
      sortArray(_this__u8e3s4);
    }
  }
  function sortWith(_this__u8e3s4, comparator) {
    if (_this__u8e3s4.length > 1) {
      sortArrayWith(_this__u8e3s4, comparator);
    }
  }
  function copyOfRange(_this__u8e3s4, fromIndex, toIndex) {
    Companion_instance_5.r3(fromIndex, toIndex, _this__u8e3s4.length);
    var tmp1 = 'LongArray';
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'withType' call
    var array = _this__u8e3s4.slice(fromIndex, toIndex);
    array.$type$ = tmp1;
    return array;
  }
  function copyOf_0(_this__u8e3s4) {
    var tmp1 = 'LongArray';
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'withType' call
    var array = _this__u8e3s4.slice();
    array.$type$ = tmp1;
    return array;
  }
  function copyOfRange_0(_this__u8e3s4, fromIndex, toIndex) {
    Companion_instance_5.r3(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.slice(fromIndex, toIndex);
  }
  function fill(_this__u8e3s4, element, fromIndex, toIndex) {
    fromIndex = fromIndex === VOID ? 0 : fromIndex;
    toIndex = toIndex === VOID ? _this__u8e3s4.length : toIndex;
    Companion_instance_5.r3(fromIndex, toIndex, _this__u8e3s4.length);
    // Inline function 'kotlin.js.nativeFill' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fill(element, fromIndex, toIndex);
  }
  function copyOf_1(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.require' call
    if (!(newSize >= 0)) {
      // Inline function 'kotlin.collections.copyOf.<anonymous>' call
      var message = 'Invalid new array size: ' + newSize + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return arrayCopyResize(_this__u8e3s4, newSize, null);
  }
  function contentToString(_this__u8e3s4) {
    var tmp1_elvis_lhs = _this__u8e3s4 == null ? null : joinToString(_this__u8e3s4, ', ', '[', ']');
    return tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
  }
  function reverse(_this__u8e3s4) {
    var midPoint = (_this__u8e3s4.k() / 2 | 0) - 1 | 0;
    if (midPoint < 0)
      return Unit_instance;
    var reverseIndex = get_lastIndex_0(_this__u8e3s4);
    var inductionVariable = 0;
    if (inductionVariable <= midPoint)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp = _this__u8e3s4.q(index);
        _this__u8e3s4.x(index, _this__u8e3s4.q(reverseIndex));
        _this__u8e3s4.x(reverseIndex, tmp);
        reverseIndex = reverseIndex - 1 | 0;
      }
       while (!(index === midPoint));
  }
  function digitToIntImpl(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    var index = binarySearchRange(Digit_getInstance().s3_1, ch);
    var diff = ch - Digit_getInstance().s3_1[index] | 0;
    return diff < 10 ? diff : -1;
  }
  function binarySearchRange(array, needle) {
    var bottom = 0;
    var top = array.length - 1 | 0;
    var middle = -1;
    var value = 0;
    while (bottom <= top) {
      middle = (bottom + top | 0) / 2 | 0;
      value = array[middle];
      if (needle > value)
        bottom = middle + 1 | 0;
      else if (needle === value)
        return middle;
      else
        top = middle - 1 | 0;
    }
    return middle - (needle < value ? 1 : 0) | 0;
  }
  function Digit() {
    Digit_instance = this;
    var tmp = this;
    // Inline function 'kotlin.intArrayOf' call
    tmp.s3_1 = new Int32Array([48, 1632, 1776, 1984, 2406, 2534, 2662, 2790, 2918, 3046, 3174, 3302, 3430, 3558, 3664, 3792, 3872, 4160, 4240, 6112, 6160, 6470, 6608, 6784, 6800, 6992, 7088, 7232, 7248, 42528, 43216, 43264, 43472, 43504, 43600, 44016, 65296]);
  }
  var Digit_instance;
  function Digit_getInstance() {
    if (Digit_instance == null)
      new Digit();
    return Digit_instance;
  }
  function asList_0(_this__u8e3s4) {
    return new asList$1(_this__u8e3s4);
  }
  function asList$1($this_asList) {
    this.t3_1 = $this_asList;
    AbstractList.call(this);
  }
  protoOf(asList$1).k = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.t3_1);
  };
  protoOf(asList$1).r = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.t3_1);
  };
  protoOf(asList$1).u3 = function (element) {
    return ULongArray__contains_impl_v9bgai(this.t3_1, element);
  };
  protoOf(asList$1).j1 = function (element) {
    if (!(element instanceof ULong))
      return false;
    return this.u3(element instanceof ULong ? element.s1_1 : THROW_CCE());
  };
  protoOf(asList$1).v3 = function (index) {
    Companion_instance_5.w3(index, this.k());
    return ULongArray__get_impl_pr71q9(this.t3_1, index);
  };
  protoOf(asList$1).q = function (index) {
    return new ULong(this.v3(index));
  };
  function isWhitespaceImpl(_this__u8e3s4) {
    // Inline function 'kotlin.code' call
    var ch = Char__toInt_impl_vasixd(_this__u8e3s4);
    return (9 <= ch ? ch <= 13 : false) || (28 <= ch ? ch <= 32 : false) || ch === 160 || (ch > 4096 && (ch === 5760 || (8192 <= ch ? ch <= 8202 : false) || ch === 8232 || ch === 8233 || ch === 8239 || ch === 8287 || ch === 12288));
  }
  function Comparator() {
  }
  function isNaN_0(_this__u8e3s4) {
    return !(_this__u8e3s4 === _this__u8e3s4);
  }
  function takeHighestOneBit(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 === 0) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.countLeadingZeroBits' call
      tmp = 1 << (31 - clz32(_this__u8e3s4) | 0);
    }
    return tmp;
  }
  function Unit() {
  }
  protoOf(Unit).toString = function () {
    return 'kotlin.Unit';
  };
  var Unit_instance;
  function Unit_getInstance() {
    return Unit_instance;
  }
  function uintCompare(v1, v2) {
    return compareTo_0(v1 ^ -2147483648, v2 ^ -2147483648);
  }
  function uintDivide(v1, v2) {
    // Inline function 'kotlin.UInt.toLong' call
    // Inline function 'kotlin.uintToLong' call
    var value = _UInt___get_data__impl__f0vqqw(v1);
    var tmp = toLong(value).i3(new Long(-1, 0));
    // Inline function 'kotlin.UInt.toLong' call
    // Inline function 'kotlin.uintToLong' call
    var value_0 = _UInt___get_data__impl__f0vqqw(v2);
    var tmp$ret$3 = toLong(value_0).i3(new Long(-1, 0));
    // Inline function 'kotlin.toUInt' call
    var this_0 = tmp.z2(tmp$ret$3);
    return _UInt___init__impl__l7qpdl(this_0.l3());
  }
  function uintRemainder(v1, v2) {
    // Inline function 'kotlin.UInt.toLong' call
    // Inline function 'kotlin.uintToLong' call
    var value = _UInt___get_data__impl__f0vqqw(v1);
    var tmp = toLong(value).i3(new Long(-1, 0));
    // Inline function 'kotlin.UInt.toLong' call
    // Inline function 'kotlin.uintToLong' call
    var value_0 = _UInt___get_data__impl__f0vqqw(v2);
    var tmp$ret$3 = toLong(value_0).i3(new Long(-1, 0));
    // Inline function 'kotlin.toUInt' call
    var this_0 = tmp.a3(tmp$ret$3);
    return _UInt___init__impl__l7qpdl(this_0.l3());
  }
  function ulongCompare(v1, v2) {
    return v1.k3(new Long(0, -2147483648)).d1(v2.k3(new Long(0, -2147483648)));
  }
  function ulongDivide(v1, v2) {
    // Inline function 'kotlin.ULong.toLong' call
    var dividend = _ULong___get_data__impl__fggpzb(v1);
    // Inline function 'kotlin.ULong.toLong' call
    var divisor = _ULong___get_data__impl__fggpzb(v2);
    if (divisor.d1(new Long(0, 0)) < 0) {
      var tmp;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2)) < 0) {
        tmp = _ULong___init__impl__c78o9k(new Long(0, 0));
      } else {
        tmp = _ULong___init__impl__c78o9k(new Long(1, 0));
      }
      return tmp;
    }
    if (dividend.d1(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.z2(divisor));
    }
    var quotient = dividend.h3(1).z2(divisor).f3(1);
    var rem = dividend.x2(quotient.y2(divisor));
    var tmp_0;
    var tmp4 = _ULong___init__impl__c78o9k(rem);
    // Inline function 'kotlin.ULong.compareTo' call
    var other = _ULong___init__impl__c78o9k(divisor);
    if (ulongCompare(_ULong___get_data__impl__fggpzb(tmp4), _ULong___get_data__impl__fggpzb(other)) >= 0) {
      tmp_0 = 1;
    } else {
      tmp_0 = 0;
    }
    // Inline function 'kotlin.Long.plus' call
    var other_0 = tmp_0;
    var tmp$ret$4 = quotient.w2(toLong(other_0));
    return _ULong___init__impl__c78o9k(tmp$ret$4);
  }
  function ulongRemainder(v1, v2) {
    // Inline function 'kotlin.ULong.toLong' call
    var dividend = _ULong___get_data__impl__fggpzb(v1);
    // Inline function 'kotlin.ULong.toLong' call
    var divisor = _ULong___get_data__impl__fggpzb(v2);
    if (divisor.d1(new Long(0, 0)) < 0) {
      var tmp;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(v1), _ULong___get_data__impl__fggpzb(v2)) < 0) {
        tmp = v1;
      } else {
        // Inline function 'kotlin.ULong.minus' call
        tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(v1).x2(_ULong___get_data__impl__fggpzb(v2)));
      }
      return tmp;
    }
    if (dividend.d1(new Long(0, 0)) >= 0) {
      return _ULong___init__impl__c78o9k(dividend.a3(divisor));
    }
    var quotient = dividend.h3(1).z2(divisor).f3(1);
    var rem = dividend.x2(quotient.y2(divisor));
    var tmp_0;
    var tmp6 = _ULong___init__impl__c78o9k(rem);
    // Inline function 'kotlin.ULong.compareTo' call
    var other = _ULong___init__impl__c78o9k(divisor);
    if (ulongCompare(_ULong___get_data__impl__fggpzb(tmp6), _ULong___get_data__impl__fggpzb(other)) >= 0) {
      tmp_0 = divisor;
    } else {
      tmp_0 = new Long(0, 0);
    }
    return _ULong___init__impl__c78o9k(rem.x2(tmp_0));
  }
  function ulongToString(value, base) {
    if (value.d1(new Long(0, 0)) >= 0)
      return toString_2(value, base);
    // Inline function 'kotlin.Long.div' call
    var quotient = value.h3(1).z2(toLong(base)).f3(1);
    // Inline function 'kotlin.Long.times' call
    var tmp$ret$1 = quotient.y2(toLong(base));
    var rem = value.x2(tmp$ret$1);
    if (rem.d1(toLong(base)) >= 0) {
      // Inline function 'kotlin.Long.minus' call
      rem = rem.x2(toLong(base));
      // Inline function 'kotlin.Long.plus' call
      quotient = quotient.w2(toLong(1));
    }
    return toString_2(quotient, base) + toString_2(rem, base);
  }
  function collectionToArray(collection) {
    return collectionToArrayCommonImpl(collection);
  }
  function terminateCollectionToArray(collectionSize, array) {
    return array;
  }
  function arrayOfNulls(reference, size) {
    // Inline function 'kotlin.arrayOfNulls' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return fillArrayVal(Array(size), null);
  }
  function listOf(element) {
    return arrayListOf([element]);
  }
  function setOf(element) {
    return hashSetOf([element]);
  }
  function shuffled(_this__u8e3s4) {
    // Inline function 'kotlin.apply' call
    var this_0 = toMutableList_1(_this__u8e3s4);
    // Inline function 'kotlin.collections.shuffled.<anonymous>' call
    shuffle_0(this_0);
    return this_0;
  }
  function mapOf(pair) {
    return hashMapOf([pair]);
  }
  function mapCapacity(expectedSize) {
    return expectedSize;
  }
  function checkIndexOverflow(index) {
    if (index < 0) {
      throwIndexOverflow();
    }
    return index;
  }
  function sort_0(_this__u8e3s4) {
    collectionsSort(_this__u8e3s4, naturalOrder());
  }
  function sortWith_0(_this__u8e3s4, comparator) {
    collectionsSort(_this__u8e3s4, comparator);
  }
  function copyToArray(collection) {
    var tmp;
    // Inline function 'kotlin.js.asDynamic' call
    if (collection.toArray !== undefined) {
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = collection.toArray();
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = collectionToArray(collection);
    }
    return tmp;
  }
  function shuffle_0(_this__u8e3s4) {
    return shuffle(_this__u8e3s4, Default_getInstance());
  }
  function collectionsSort(list, comparator) {
    if (list.k() <= 1)
      return Unit_instance;
    var array = copyToArray(list);
    sortArrayWith(array, comparator);
    var inductionVariable = 0;
    var last = array.length;
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        list.x(i, array[i]);
      }
       while (inductionVariable < last);
  }
  function arrayCopy(source, destination, destinationOffset, startIndex, endIndex) {
    Companion_instance_5.r3(startIndex, endIndex, source.length);
    var rangeSize = endIndex - startIndex | 0;
    Companion_instance_5.r3(destinationOffset, destinationOffset + rangeSize | 0, destination.length);
    if (isView(destination) && isView(source)) {
      // Inline function 'kotlin.js.asDynamic' call
      var subrange = source.subarray(startIndex, endIndex);
      // Inline function 'kotlin.js.asDynamic' call
      destination.set(subrange, destinationOffset);
    } else {
      if (!(source === destination) || destinationOffset <= startIndex) {
        var inductionVariable = 0;
        if (inductionVariable < rangeSize)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            destination[destinationOffset + index | 0] = source[startIndex + index | 0];
          }
           while (inductionVariable < rangeSize);
      } else {
        var inductionVariable_0 = rangeSize - 1 | 0;
        if (0 <= inductionVariable_0)
          do {
            var index_0 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + -1 | 0;
            destination[destinationOffset + index_0 | 0] = source[startIndex + index_0 | 0];
          }
           while (0 <= inductionVariable_0);
      }
    }
  }
  function checkCountOverflow(count) {
    if (count < 0) {
      throwCountOverflow();
    }
    return count;
  }
  function AbstractMutableCollection$removeAll$lambda($elements) {
    return function (it) {
      return $elements.j1(it);
    };
  }
  function AbstractMutableCollection$retainAll$lambda($elements) {
    return function (it) {
      return !$elements.j1(it);
    };
  }
  function AbstractMutableCollection() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractMutableCollection).x3 = function (element) {
    this.y3();
    var iterator = this.h();
    while (iterator.i()) {
      if (equals(iterator.j(), element)) {
        iterator.z3();
        return true;
      }
    }
    return false;
  };
  protoOf(AbstractMutableCollection).o = function (elements) {
    this.y3();
    var modified = false;
    var _iterator__ex2g4s = elements.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      if (this.e(element))
        modified = true;
    }
    return modified;
  };
  protoOf(AbstractMutableCollection).k1 = function (elements) {
    this.y3();
    var tmp = isInterface(this, MutableIterable) ? this : THROW_CCE();
    return removeAll_0(tmp, AbstractMutableCollection$removeAll$lambda(elements));
  };
  protoOf(AbstractMutableCollection).a4 = function (elements) {
    this.y3();
    var tmp = isInterface(this, MutableIterable) ? this : THROW_CCE();
    return removeAll_0(tmp, AbstractMutableCollection$retainAll$lambda(elements));
  };
  protoOf(AbstractMutableCollection).toJSON = function () {
    return this.toArray();
  };
  protoOf(AbstractMutableCollection).y3 = function () {
  };
  function IteratorImpl($outer) {
    this.d4_1 = $outer;
    this.b4_1 = 0;
    this.c4_1 = -1;
  }
  protoOf(IteratorImpl).i = function () {
    return this.b4_1 < this.d4_1.k();
  };
  protoOf(IteratorImpl).j = function () {
    if (!this.i())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var _unary__edvuaz = this.b4_1;
    this.b4_1 = _unary__edvuaz + 1 | 0;
    tmp.c4_1 = _unary__edvuaz;
    return this.d4_1.q(this.c4_1);
  };
  protoOf(IteratorImpl).z3 = function () {
    // Inline function 'kotlin.check' call
    if (!!(this.c4_1 === -1)) {
      // Inline function 'kotlin.collections.IteratorImpl.remove.<anonymous>' call
      var message = 'Call next() or previous() before removing element from the iterator.';
      throw IllegalStateException_init_$Create$_0(toString_1(message));
    }
    this.d4_1.f4(this.c4_1);
    this.b4_1 = this.c4_1;
    this.c4_1 = -1;
  };
  function ListIteratorImpl($outer, index) {
    this.j4_1 = $outer;
    IteratorImpl.call(this, $outer);
    Companion_instance_5.k4(index, this.j4_1.k());
    this.b4_1 = index;
  }
  protoOf(ListIteratorImpl).l4 = function () {
    return this.b4_1 > 0;
  };
  protoOf(ListIteratorImpl).m4 = function () {
    if (!this.l4())
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    this.b4_1 = this.b4_1 - 1 | 0;
    tmp.c4_1 = this.b4_1;
    return this.j4_1.q(this.c4_1);
  };
  function SubList(list, fromIndex, toIndex) {
    AbstractMutableList.call(this);
    this.o4_1 = list;
    this.p4_1 = fromIndex;
    this.q4_1 = 0;
    Companion_instance_5.r3(this.p4_1, toIndex, this.o4_1.k());
    this.q4_1 = toIndex - this.p4_1 | 0;
  }
  protoOf(SubList).r4 = function (index, element) {
    Companion_instance_5.k4(index, this.q4_1);
    this.o4_1.r4(this.p4_1 + index | 0, element);
    this.q4_1 = this.q4_1 + 1 | 0;
  };
  protoOf(SubList).q = function (index) {
    Companion_instance_5.w3(index, this.q4_1);
    return this.o4_1.q(this.p4_1 + index | 0);
  };
  protoOf(SubList).f4 = function (index) {
    Companion_instance_5.w3(index, this.q4_1);
    var result = this.o4_1.f4(this.p4_1 + index | 0);
    this.q4_1 = this.q4_1 - 1 | 0;
    return result;
  };
  protoOf(SubList).x = function (index, element) {
    Companion_instance_5.w3(index, this.q4_1);
    return this.o4_1.x(this.p4_1 + index | 0, element);
  };
  protoOf(SubList).k = function () {
    return this.q4_1;
  };
  protoOf(SubList).y3 = function () {
    return this.o4_1.y3();
  };
  function AbstractMutableList$retainAll$lambda($elements) {
    return function (it) {
      return !$elements.j1(it);
    };
  }
  function AbstractMutableList() {
    AbstractMutableCollection.call(this);
    this.e4_1 = 0;
  }
  protoOf(AbstractMutableList).e = function (element) {
    this.y3();
    this.r4(this.k(), element);
    return true;
  };
  protoOf(AbstractMutableList).a4 = function (elements) {
    this.y3();
    return removeAll(this, AbstractMutableList$retainAll$lambda(elements));
  };
  protoOf(AbstractMutableList).h = function () {
    return new IteratorImpl(this);
  };
  protoOf(AbstractMutableList).j1 = function (element) {
    return this.s4(element) >= 0;
  };
  protoOf(AbstractMutableList).s4 = function (element) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.indexOfFirst' call
      var index = 0;
      var _iterator__ex2g4s = this.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.AbstractMutableList.indexOf.<anonymous>' call
        if (equals(item, element)) {
          tmp$ret$1 = index;
          break $l$block;
        }
        index = index + 1 | 0;
      }
      tmp$ret$1 = -1;
    }
    return tmp$ret$1;
  };
  protoOf(AbstractMutableList).p = function (index) {
    return new ListIteratorImpl(this, index);
  };
  protoOf(AbstractMutableList).f2 = function (fromIndex, toIndex) {
    return new SubList(this, fromIndex, toIndex);
  };
  protoOf(AbstractMutableList).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtList) : false))
      return false;
    return Companion_instance_5.t4(this, other);
  };
  protoOf(AbstractMutableList).hashCode = function () {
    return Companion_instance_5.u4(this);
  };
  function AbstractMutableMap() {
    AbstractMap.call(this);
    this.x4_1 = null;
    this.y4_1 = null;
  }
  protoOf(AbstractMutableMap).z4 = function () {
    return new HashMapKeysDefault(this);
  };
  protoOf(AbstractMutableMap).a5 = function () {
    return new HashMapValuesDefault(this);
  };
  protoOf(AbstractMutableMap).m2 = function () {
    var tmp0_elvis_lhs = this.x4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = this.z4();
      // Inline function 'kotlin.collections.AbstractMutableMap.<get-keys>.<anonymous>' call
      this.x4_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(AbstractMutableMap).n2 = function () {
    var tmp0_elvis_lhs = this.y4_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = this.a5();
      // Inline function 'kotlin.collections.AbstractMutableMap.<get-values>.<anonymous>' call
      this.y4_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(AbstractMutableMap).c5 = function (key) {
    this.y3();
    var iter = this.o2().h();
    while (iter.i()) {
      var entry = iter.j();
      var k = entry.h2();
      if (equals(key, k)) {
        var value = entry.i2();
        iter.z3();
        return value;
      }
    }
    return null;
  };
  protoOf(AbstractMutableMap).y3 = function () {
  };
  function AbstractMutableSet() {
    AbstractMutableCollection.call(this);
  }
  protoOf(AbstractMutableSet).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtSet) : false))
      return false;
    return Companion_instance_7.g5(this, other);
  };
  protoOf(AbstractMutableSet).hashCode = function () {
    return Companion_instance_7.h5(this);
  };
  function arrayOfUninitializedElements(capacity) {
    // Inline function 'kotlin.require' call
    if (!(capacity >= 0)) {
      // Inline function 'kotlin.collections.arrayOfUninitializedElements.<anonymous>' call
      var message = 'capacity must be non-negative.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.arrayOfNulls' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return fillArrayVal(Array(capacity), null);
  }
  function resetRange(_this__u8e3s4, fromIndex, toIndex) {
    // Inline function 'kotlin.js.nativeFill' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4.fill(null, fromIndex, toIndex);
  }
  function copyOfUninitializedElements(_this__u8e3s4, newSize) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return copyOf_1(_this__u8e3s4, newSize);
  }
  function resetAt(_this__u8e3s4, index) {
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    _this__u8e3s4[index] = null;
  }
  function Companion_2() {
    Companion_instance_2 = this;
    var tmp = this;
    // Inline function 'kotlin.also' call
    var this_0 = ArrayList_init_$Create$_0(0);
    // Inline function 'kotlin.collections.Companion.Empty.<anonymous>' call
    this_0.n_1 = true;
    tmp.i5_1 = this_0;
  }
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function ArrayList_init_$Init$($this) {
    // Inline function 'kotlin.emptyArray' call
    var tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$() {
    return ArrayList_init_$Init$(objectCreate(protoOf(ArrayList)));
  }
  function ArrayList_init_$Init$_0(initialCapacity, $this) {
    // Inline function 'kotlin.emptyArray' call
    var tmp$ret$0 = [];
    ArrayList.call($this, tmp$ret$0);
    // Inline function 'kotlin.require' call
    if (!(initialCapacity >= 0)) {
      // Inline function 'kotlin.collections.ArrayList.<init>.<anonymous>' call
      var message = 'Negative initial capacity: ' + initialCapacity;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return $this;
  }
  function ArrayList_init_$Create$_0(initialCapacity) {
    return ArrayList_init_$Init$_0(initialCapacity, objectCreate(protoOf(ArrayList)));
  }
  function ArrayList_init_$Init$_1(elements, $this) {
    // Inline function 'kotlin.collections.toTypedArray' call
    var tmp$ret$0 = copyToArray(elements);
    ArrayList.call($this, tmp$ret$0);
    return $this;
  }
  function ArrayList_init_$Create$_1(elements) {
    return ArrayList_init_$Init$_1(elements, objectCreate(protoOf(ArrayList)));
  }
  function increaseLength($this, amount) {
    var previous = $this.k();
    // Inline function 'kotlin.js.asDynamic' call
    $this.m_1.length = $this.k() + amount | 0;
    return previous;
  }
  function rangeCheck($this, index) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.collections.ArrayList.rangeCheck.<anonymous>' call
    Companion_instance_5.w3(index, $this.k());
    return index;
  }
  function insertionRangeCheck($this, index) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.collections.ArrayList.insertionRangeCheck.<anonymous>' call
    Companion_instance_5.k4(index, $this.k());
    return index;
  }
  function ArrayList(array) {
    Companion_getInstance_2();
    AbstractMutableList.call(this);
    this.m_1 = array;
    this.n_1 = false;
  }
  protoOf(ArrayList).k = function () {
    return this.m_1.length;
  };
  protoOf(ArrayList).q = function (index) {
    var tmp = this.m_1[rangeCheck(this, index)];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayList).x = function (index, element) {
    this.y3();
    rangeCheck(this, index);
    // Inline function 'kotlin.apply' call
    var this_0 = this.m_1[index];
    // Inline function 'kotlin.collections.ArrayList.set.<anonymous>' call
    this.m_1[index] = element;
    var tmp = this_0;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayList).e = function (element) {
    this.y3();
    // Inline function 'kotlin.js.asDynamic' call
    this.m_1.push(element);
    this.e4_1 = this.e4_1 + 1 | 0;
    return true;
  };
  protoOf(ArrayList).r4 = function (index, element) {
    this.y3();
    // Inline function 'kotlin.js.asDynamic' call
    this.m_1.splice(insertionRangeCheck(this, index), 0, element);
    this.e4_1 = this.e4_1 + 1 | 0;
  };
  protoOf(ArrayList).o = function (elements) {
    this.y3();
    if (elements.r())
      return false;
    var offset = increaseLength(this, elements.k());
    // Inline function 'kotlin.collections.forEachIndexed' call
    var index = 0;
    var _iterator__ex2g4s = elements.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      // Inline function 'kotlin.collections.ArrayList.addAll.<anonymous>' call
      var index_0 = checkIndexOverflow(_unary__edvuaz);
      this.m_1[offset + index_0 | 0] = item;
    }
    this.e4_1 = this.e4_1 + 1 | 0;
    return true;
  };
  protoOf(ArrayList).f4 = function (index) {
    this.y3();
    rangeCheck(this, index);
    this.e4_1 = this.e4_1 + 1 | 0;
    var tmp;
    if (index === get_lastIndex_0(this)) {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = this.m_1.pop();
    } else {
      // Inline function 'kotlin.js.asDynamic' call
      tmp = this.m_1.splice(index, 1)[0];
    }
    return tmp;
  };
  protoOf(ArrayList).j5 = function () {
    this.y3();
    var tmp = this;
    // Inline function 'kotlin.emptyArray' call
    tmp.m_1 = [];
    this.e4_1 = this.e4_1 + 1 | 0;
  };
  protoOf(ArrayList).s4 = function (element) {
    return indexOf(this.m_1, element);
  };
  protoOf(ArrayList).toString = function () {
    return arrayToString(this.m_1);
  };
  protoOf(ArrayList).k5 = function () {
    return [].slice.call(this.m_1);
  };
  protoOf(ArrayList).toArray = function () {
    return this.k5();
  };
  protoOf(ArrayList).y3 = function () {
    if (this.n_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  var _stableSortingIsSupported;
  function sortArrayWith(array, comparator) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArrayWith$lambda(comparator);
      // Inline function 'kotlin.js.asDynamic' call
      array.sort(comparison);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      mergeSort(array, 0, get_lastIndex(array), comparator);
    }
  }
  function sortArray(array) {
    if (getStableSortingIsSupported()) {
      var comparison = sortArray$lambda;
      // Inline function 'kotlin.js.asDynamic' call
      array.sort(comparison);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      mergeSort(array, 0, get_lastIndex(array), naturalOrder());
    }
  }
  function getStableSortingIsSupported() {
    var tmp0_safe_receiver = _stableSortingIsSupported;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      return tmp0_safe_receiver;
    }
    _stableSortingIsSupported = false;
    // Inline function 'kotlin.js.unsafeCast' call
    var array = [];
    var inductionVariable = 0;
    if (inductionVariable < 600)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.js.asDynamic' call
        array.push(index);
      }
       while (inductionVariable < 600);
    var comparison = getStableSortingIsSupported$lambda;
    // Inline function 'kotlin.js.asDynamic' call
    array.sort(comparison);
    var inductionVariable_0 = 1;
    var last = array.length;
    if (inductionVariable_0 < last)
      do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        var a = array[index_0 - 1 | 0];
        var b = array[index_0];
        if ((a & 3) === (b & 3) && a >= b)
          return false;
      }
       while (inductionVariable_0 < last);
    _stableSortingIsSupported = true;
    return true;
  }
  function mergeSort(array, start, endInclusive, comparator) {
    // Inline function 'kotlin.arrayOfNulls' call
    var size = array.length;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var buffer = fillArrayVal(Array(size), null);
    var result = mergeSort_0(array, buffer, start, endInclusive, comparator);
    if (!(result === array)) {
      var inductionVariable = start;
      if (inductionVariable <= endInclusive)
        do {
          var i = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          array[i] = result[i];
        }
         while (!(i === endInclusive));
    }
  }
  function mergeSort_0(array, buffer, start, end, comparator) {
    if (start === end) {
      return array;
    }
    var median = (start + end | 0) / 2 | 0;
    var left = mergeSort_0(array, buffer, start, median, comparator);
    var right = mergeSort_0(array, buffer, median + 1 | 0, end, comparator);
    var target = left === buffer ? array : buffer;
    var leftIndex = start;
    var rightIndex = median + 1 | 0;
    var inductionVariable = start;
    if (inductionVariable <= end)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (leftIndex <= median && rightIndex <= end) {
          var leftValue = left[leftIndex];
          var rightValue = right[rightIndex];
          if (comparator.compare(leftValue, rightValue) <= 0) {
            target[i] = leftValue;
            leftIndex = leftIndex + 1 | 0;
          } else {
            target[i] = rightValue;
            rightIndex = rightIndex + 1 | 0;
          }
        } else if (leftIndex <= median) {
          target[i] = left[leftIndex];
          leftIndex = leftIndex + 1 | 0;
        } else {
          target[i] = right[rightIndex];
          rightIndex = rightIndex + 1 | 0;
        }
      }
       while (!(i === end));
    return target;
  }
  function sortArrayWith$lambda($comparator) {
    return function (a, b) {
      return $comparator.compare(a, b);
    };
  }
  function sortArray$lambda(a, b) {
    return compareTo_0(a, b);
  }
  function getStableSortingIsSupported$lambda(a, b) {
    return (a & 3) - (b & 3) | 0;
  }
  function HashMap_init_$Init$(internalMap, $this) {
    AbstractMutableMap.call($this);
    HashMap.call($this);
    $this.p5_1 = internalMap;
    return $this;
  }
  function HashMap_init_$Init$_0($this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$(), $this);
    return $this;
  }
  function HashMap_init_$Create$() {
    return HashMap_init_$Init$_0(objectCreate(protoOf(HashMap)));
  }
  function HashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$_2(initialCapacity, loadFactor), $this);
    return $this;
  }
  function HashMap_init_$Init$_2(initialCapacity, $this) {
    HashMap_init_$Init$_1(initialCapacity, 1.0, $this);
    return $this;
  }
  function HashMap_init_$Create$_0(initialCapacity) {
    return HashMap_init_$Init$_2(initialCapacity, objectCreate(protoOf(HashMap)));
  }
  function HashMap_init_$Init$_3(original, $this) {
    HashMap_init_$Init$(InternalHashMap_init_$Create$_1(original), $this);
    return $this;
  }
  protoOf(HashMap).j2 = function (key) {
    return this.p5_1.r5(key);
  };
  protoOf(HashMap).k2 = function (value) {
    return this.p5_1.k2(value);
  };
  protoOf(HashMap).z4 = function () {
    return new HashMapKeys(this.p5_1);
  };
  protoOf(HashMap).a5 = function () {
    return new HashMapValues(this.p5_1);
  };
  protoOf(HashMap).o2 = function () {
    var tmp0_elvis_lhs = this.q5_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.also' call
      var this_0 = new HashMapEntrySet(this.p5_1);
      // Inline function 'kotlin.collections.HashMap.<get-entries>.<anonymous>' call
      this.q5_1 = this_0;
      tmp = this_0;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  protoOf(HashMap).l2 = function (key) {
    return this.p5_1.l2(key);
  };
  protoOf(HashMap).b5 = function (key, value) {
    return this.p5_1.b5(key, value);
  };
  protoOf(HashMap).c5 = function (key) {
    return this.p5_1.c5(key);
  };
  protoOf(HashMap).k = function () {
    return this.p5_1.k();
  };
  protoOf(HashMap).s5 = function (from) {
    return this.p5_1.s5(from);
  };
  function HashMap() {
    this.q5_1 = null;
  }
  function HashMapKeys(backing) {
    AbstractMutableSet.call(this);
    this.t5_1 = backing;
  }
  protoOf(HashMapKeys).k = function () {
    return this.t5_1.k();
  };
  protoOf(HashMapKeys).r = function () {
    return this.t5_1.k() === 0;
  };
  protoOf(HashMapKeys).j1 = function (element) {
    return this.t5_1.r5(element);
  };
  protoOf(HashMapKeys).e = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapKeys).o = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapKeys).x3 = function (element) {
    return this.t5_1.u5(element);
  };
  protoOf(HashMapKeys).h = function () {
    return this.t5_1.v5();
  };
  protoOf(HashMapKeys).y3 = function () {
    return this.t5_1.w5();
  };
  function HashMapValues(backing) {
    AbstractMutableCollection.call(this);
    this.x5_1 = backing;
  }
  protoOf(HashMapValues).k = function () {
    return this.x5_1.k();
  };
  protoOf(HashMapValues).r = function () {
    return this.x5_1.k() === 0;
  };
  protoOf(HashMapValues).y5 = function (element) {
    return this.x5_1.k2(element);
  };
  protoOf(HashMapValues).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.y5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValues).z5 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapValues).e = function (element) {
    return this.z5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValues).a6 = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapValues).o = function (elements) {
    return this.a6(elements);
  };
  protoOf(HashMapValues).h = function () {
    return this.x5_1.b6();
  };
  protoOf(HashMapValues).y3 = function () {
    return this.x5_1.w5();
  };
  function HashMapEntrySet(backing) {
    HashMapEntrySetBase.call(this, backing);
  }
  protoOf(HashMapEntrySet).h = function () {
    return this.d6_1.e6();
  };
  function HashMapEntrySetBase(backing) {
    AbstractMutableSet.call(this);
    this.d6_1 = backing;
  }
  protoOf(HashMapEntrySetBase).k = function () {
    return this.d6_1.k();
  };
  protoOf(HashMapEntrySetBase).r = function () {
    return this.d6_1.k() === 0;
  };
  protoOf(HashMapEntrySetBase).f6 = function (element) {
    return this.d6_1.i6(element);
  };
  protoOf(HashMapEntrySetBase).j1 = function (element) {
    if (!(!(element == null) ? isInterface(element, Entry) : false))
      return false;
    return this.f6((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).g6 = function (element) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapEntrySetBase).e = function (element) {
    return this.g6((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).o = function (elements) {
    throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(HashMapEntrySetBase).h6 = function (element) {
    return this.d6_1.j6(element);
  };
  protoOf(HashMapEntrySetBase).x3 = function (element) {
    if (!(!(element == null) ? isInterface(element, Entry) : false))
      return false;
    return this.h6((!(element == null) ? isInterface(element, Entry) : false) ? element : THROW_CCE());
  };
  protoOf(HashMapEntrySetBase).g2 = function (elements) {
    return this.d6_1.k6(elements);
  };
  protoOf(HashMapEntrySetBase).y3 = function () {
    return this.d6_1.w5();
  };
  function HashMapKeysDefault$iterator$1($entryIterator) {
    this.l6_1 = $entryIterator;
  }
  protoOf(HashMapKeysDefault$iterator$1).i = function () {
    return this.l6_1.i();
  };
  protoOf(HashMapKeysDefault$iterator$1).j = function () {
    return this.l6_1.j().h2();
  };
  protoOf(HashMapKeysDefault$iterator$1).z3 = function () {
    return this.l6_1.z3();
  };
  function HashMapKeysDefault(backingMap) {
    AbstractMutableSet.call(this);
    this.m6_1 = backingMap;
  }
  protoOf(HashMapKeysDefault).n6 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on keys');
  };
  protoOf(HashMapKeysDefault).e = function (element) {
    return this.n6((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapKeysDefault).r5 = function (element) {
    return this.m6_1.j2(element);
  };
  protoOf(HashMapKeysDefault).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.r5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapKeysDefault).h = function () {
    var entryIterator = this.m6_1.o2().h();
    return new HashMapKeysDefault$iterator$1(entryIterator);
  };
  protoOf(HashMapKeysDefault).c5 = function (element) {
    this.y3();
    if (this.m6_1.j2(element)) {
      this.m6_1.c5(element);
      return true;
    }
    return false;
  };
  protoOf(HashMapKeysDefault).x3 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.c5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapKeysDefault).k = function () {
    return this.m6_1.k();
  };
  protoOf(HashMapKeysDefault).y3 = function () {
    return this.m6_1.y3();
  };
  function HashMapValuesDefault$iterator$1($entryIterator) {
    this.o6_1 = $entryIterator;
  }
  protoOf(HashMapValuesDefault$iterator$1).i = function () {
    return this.o6_1.i();
  };
  protoOf(HashMapValuesDefault$iterator$1).j = function () {
    return this.o6_1.j().i2();
  };
  protoOf(HashMapValuesDefault$iterator$1).z3 = function () {
    return this.o6_1.z3();
  };
  function HashMapValuesDefault(backingMap) {
    AbstractMutableCollection.call(this);
    this.p6_1 = backingMap;
  }
  protoOf(HashMapValuesDefault).z5 = function (element) {
    throw UnsupportedOperationException_init_$Create$_0('Add is not supported on values');
  };
  protoOf(HashMapValuesDefault).e = function (element) {
    return this.z5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValuesDefault).y5 = function (element) {
    return this.p6_1.k2(element);
  };
  protoOf(HashMapValuesDefault).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.y5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(HashMapValuesDefault).h = function () {
    var entryIterator = this.p6_1.o2().h();
    return new HashMapValuesDefault$iterator$1(entryIterator);
  };
  protoOf(HashMapValuesDefault).k = function () {
    return this.p6_1.k();
  };
  protoOf(HashMapValuesDefault).y3 = function () {
    return this.p6_1.y3();
  };
  function HashSet_init_$Init$(map, $this) {
    AbstractMutableSet.call($this);
    HashSet.call($this);
    $this.e1_1 = map;
    return $this;
  }
  function HashSet_init_$Init$_0($this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$(), $this);
    return $this;
  }
  function HashSet_init_$Create$() {
    return HashSet_init_$Init$_0(objectCreate(protoOf(HashSet)));
  }
  function HashSet_init_$Init$_1(elements, $this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$_0(elements.k()), $this);
    var _iterator__ex2g4s = elements.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      $this.e1_1.b5(element, true);
    }
    return $this;
  }
  function HashSet_init_$Init$_2(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$(InternalHashMap_init_$Create$_2(initialCapacity, loadFactor), $this);
    return $this;
  }
  function HashSet_init_$Init$_3(initialCapacity, $this) {
    HashSet_init_$Init$_2(initialCapacity, 1.0, $this);
    return $this;
  }
  function HashSet_init_$Create$_0(initialCapacity) {
    return HashSet_init_$Init$_3(initialCapacity, objectCreate(protoOf(HashSet)));
  }
  protoOf(HashSet).e = function (element) {
    return this.e1_1.b5(element, true) == null;
  };
  protoOf(HashSet).j1 = function (element) {
    return this.e1_1.r5(element);
  };
  protoOf(HashSet).r = function () {
    return this.e1_1.k() === 0;
  };
  protoOf(HashSet).h = function () {
    return this.e1_1.v5();
  };
  protoOf(HashSet).x3 = function (element) {
    return !(this.e1_1.c5(element) == null);
  };
  protoOf(HashSet).k = function () {
    return this.e1_1.k();
  };
  function HashSet() {
  }
  function computeHashSize($this, capacity) {
    return takeHighestOneBit(imul(coerceAtLeast(capacity, 1), 3));
  }
  function computeShift($this, hashSize) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    return clz32(hashSize) + 1 | 0;
  }
  function checkForComodification($this) {
    if (!($this.a7_1.x6_1 === $this.c7_1))
      throw ConcurrentModificationException_init_$Create$_0('The backing map has been modified after this entry was obtained.');
  }
  function InternalHashMap_init_$Init$($this) {
    InternalHashMap_init_$Init$_0(8, $this);
    return $this;
  }
  function InternalHashMap_init_$Create$() {
    return InternalHashMap_init_$Init$(objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_0(initialCapacity, $this) {
    InternalHashMap.call($this, arrayOfUninitializedElements(initialCapacity), null, new Int32Array(initialCapacity), new Int32Array(computeHashSize(Companion_instance_3, initialCapacity)), 2, 0);
    return $this;
  }
  function InternalHashMap_init_$Create$_0(initialCapacity) {
    return InternalHashMap_init_$Init$_0(initialCapacity, objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_1(original, $this) {
    InternalHashMap_init_$Init$_0(original.k(), $this);
    $this.s5(original);
    return $this;
  }
  function InternalHashMap_init_$Create$_1(original) {
    return InternalHashMap_init_$Init$_1(original, objectCreate(protoOf(InternalHashMap)));
  }
  function InternalHashMap_init_$Init$_2(initialCapacity, loadFactor, $this) {
    InternalHashMap_init_$Init$_0(initialCapacity, $this);
    // Inline function 'kotlin.require' call
    if (!(loadFactor > 0)) {
      // Inline function 'kotlin.collections.InternalHashMap.<init>.<anonymous>' call
      var message = 'Non-positive load factor: ' + loadFactor;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return $this;
  }
  function InternalHashMap_init_$Create$_2(initialCapacity, loadFactor) {
    return InternalHashMap_init_$Init$_2(initialCapacity, loadFactor, objectCreate(protoOf(InternalHashMap)));
  }
  function _get_capacity__a9k9f3($this) {
    return $this.q6_1.length;
  }
  function _get_hashSize__tftcho($this) {
    return $this.t6_1.length;
  }
  function registerModification($this) {
    $this.x6_1 = $this.x6_1 + 1 | 0;
  }
  function ensureExtraCapacity($this, n) {
    if (shouldCompact($this, n)) {
      compact($this, true);
    } else {
      ensureCapacity($this, $this.v6_1 + n | 0);
    }
  }
  function shouldCompact($this, extraCapacity) {
    var spareCapacity = _get_capacity__a9k9f3($this) - $this.v6_1 | 0;
    var gaps = $this.v6_1 - $this.k() | 0;
    return spareCapacity < extraCapacity && (gaps + spareCapacity | 0) >= extraCapacity && gaps >= (_get_capacity__a9k9f3($this) / 4 | 0);
  }
  function ensureCapacity($this, minCapacity) {
    if (minCapacity < 0)
      throw RuntimeException_init_$Create$_0('too many elements');
    if (minCapacity > _get_capacity__a9k9f3($this)) {
      var newSize = Companion_instance_5.d7(_get_capacity__a9k9f3($this), minCapacity);
      $this.q6_1 = copyOfUninitializedElements($this.q6_1, newSize);
      var tmp = $this;
      var tmp0_safe_receiver = $this.r6_1;
      tmp.r6_1 = tmp0_safe_receiver == null ? null : copyOfUninitializedElements(tmp0_safe_receiver, newSize);
      $this.s6_1 = copyOf($this.s6_1, newSize);
      var newHashSize = computeHashSize(Companion_instance_3, newSize);
      if (newHashSize > _get_hashSize__tftcho($this)) {
        rehash($this, newHashSize);
      }
    }
  }
  function allocateValuesArray($this) {
    var curValuesArray = $this.r6_1;
    if (!(curValuesArray == null))
      return curValuesArray;
    var newValuesArray = arrayOfUninitializedElements(_get_capacity__a9k9f3($this));
    $this.r6_1 = newValuesArray;
    return newValuesArray;
  }
  function hash($this, key) {
    return key == null ? 0 : imul(hashCode(key), -1640531527) >>> $this.w6_1 | 0;
  }
  function compact($this, updateHashArray) {
    var i = 0;
    var j = 0;
    var valuesArray = $this.r6_1;
    while (i < $this.v6_1) {
      var hash = $this.s6_1[i];
      if (hash >= 0) {
        $this.q6_1[j] = $this.q6_1[i];
        if (!(valuesArray == null)) {
          valuesArray[j] = valuesArray[i];
        }
        if (updateHashArray) {
          $this.s6_1[j] = hash;
          $this.t6_1[hash] = j + 1 | 0;
        }
        j = j + 1 | 0;
      }
      i = i + 1 | 0;
    }
    resetRange($this.q6_1, j, $this.v6_1);
    if (valuesArray == null)
      null;
    else {
      resetRange(valuesArray, j, $this.v6_1);
    }
    $this.v6_1 = j;
  }
  function rehash($this, newHashSize) {
    registerModification($this);
    if ($this.v6_1 > $this.y6_1) {
      compact($this, false);
    }
    $this.t6_1 = new Int32Array(newHashSize);
    $this.w6_1 = computeShift(Companion_instance_3, newHashSize);
    var i = 0;
    while (i < $this.v6_1) {
      var _unary__edvuaz = i;
      i = _unary__edvuaz + 1 | 0;
      if (!putRehash($this, _unary__edvuaz)) {
        throw IllegalStateException_init_$Create$_0('This cannot happen with fixed magic multiplier and grow-only hash array. Have object hashCodes changed?');
      }
    }
  }
  function putRehash($this, i) {
    var hash_0 = hash($this, $this.q6_1[i]);
    var probesLeft = $this.u6_1;
    while (true) {
      var index = $this.t6_1[hash_0];
      if (index === 0) {
        $this.t6_1[hash_0] = i + 1 | 0;
        $this.s6_1[i] = hash_0;
        return true;
      }
      probesLeft = probesLeft - 1 | 0;
      if (probesLeft < 0)
        return false;
      var _unary__edvuaz = hash_0;
      hash_0 = _unary__edvuaz - 1 | 0;
      if (_unary__edvuaz === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
    }
  }
  function findKey($this, key) {
    var hash_0 = hash($this, key);
    var probesLeft = $this.u6_1;
    while (true) {
      var index = $this.t6_1[hash_0];
      if (index === 0)
        return -1;
      if (index > 0 && equals($this.q6_1[index - 1 | 0], key))
        return index - 1 | 0;
      probesLeft = probesLeft - 1 | 0;
      if (probesLeft < 0)
        return -1;
      var _unary__edvuaz = hash_0;
      hash_0 = _unary__edvuaz - 1 | 0;
      if (_unary__edvuaz === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
    }
  }
  function findValue($this, value) {
    var i = $this.v6_1;
    $l$loop: while (true) {
      i = i - 1 | 0;
      if (!(i >= 0)) {
        break $l$loop;
      }
      if ($this.s6_1[i] >= 0 && equals(ensureNotNull($this.r6_1)[i], value))
        return i;
    }
    return -1;
  }
  function addKey($this, key) {
    $this.w5();
    retry: while (true) {
      var hash_0 = hash($this, key);
      var tentativeMaxProbeDistance = coerceAtMost(imul($this.u6_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
      var probeDistance = 0;
      while (true) {
        var index = $this.t6_1[hash_0];
        if (index <= 0) {
          if ($this.v6_1 >= _get_capacity__a9k9f3($this)) {
            ensureExtraCapacity($this, 1);
            continue retry;
          }
          var _unary__edvuaz = $this.v6_1;
          $this.v6_1 = _unary__edvuaz + 1 | 0;
          var putIndex = _unary__edvuaz;
          $this.q6_1[putIndex] = key;
          $this.s6_1[putIndex] = hash_0;
          $this.t6_1[hash_0] = putIndex + 1 | 0;
          $this.y6_1 = $this.y6_1 + 1 | 0;
          registerModification($this);
          if (probeDistance > $this.u6_1)
            $this.u6_1 = probeDistance;
          return putIndex;
        }
        if (equals($this.q6_1[index - 1 | 0], key)) {
          return -index | 0;
        }
        probeDistance = probeDistance + 1 | 0;
        if (probeDistance > tentativeMaxProbeDistance) {
          rehash($this, imul(_get_hashSize__tftcho($this), 2));
          continue retry;
        }
        var _unary__edvuaz_0 = hash_0;
        hash_0 = _unary__edvuaz_0 - 1 | 0;
        if (_unary__edvuaz_0 === 0)
          hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
      }
    }
  }
  function removeEntryAt($this, index) {
    resetAt($this.q6_1, index);
    var tmp0_safe_receiver = $this.r6_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      resetAt(tmp0_safe_receiver, index);
    }
    removeHashAt($this, $this.s6_1[index]);
    $this.s6_1[index] = -1;
    $this.y6_1 = $this.y6_1 - 1 | 0;
    registerModification($this);
  }
  function removeHashAt($this, removedHash) {
    var hash_0 = removedHash;
    var hole = removedHash;
    var probeDistance = 0;
    var patchAttemptsLeft = coerceAtMost(imul($this.u6_1, 2), _get_hashSize__tftcho($this) / 2 | 0);
    while (true) {
      var _unary__edvuaz = hash_0;
      hash_0 = _unary__edvuaz - 1 | 0;
      if (_unary__edvuaz === 0)
        hash_0 = _get_hashSize__tftcho($this) - 1 | 0;
      probeDistance = probeDistance + 1 | 0;
      if (probeDistance > $this.u6_1) {
        $this.t6_1[hole] = 0;
        return Unit_instance;
      }
      var index = $this.t6_1[hash_0];
      if (index === 0) {
        $this.t6_1[hole] = 0;
        return Unit_instance;
      }
      if (index < 0) {
        $this.t6_1[hole] = -1;
        hole = hash_0;
        probeDistance = 0;
      } else {
        var otherHash = hash($this, $this.q6_1[index - 1 | 0]);
        if (((otherHash - hash_0 | 0) & (_get_hashSize__tftcho($this) - 1 | 0)) >= probeDistance) {
          $this.t6_1[hole] = index;
          $this.s6_1[index - 1 | 0] = hole;
          hole = hash_0;
          probeDistance = 0;
        }
      }
      patchAttemptsLeft = patchAttemptsLeft - 1 | 0;
      if (patchAttemptsLeft < 0) {
        $this.t6_1[hole] = -1;
        return Unit_instance;
      }
    }
  }
  function contentEquals_1($this, other) {
    return $this.y6_1 === other.k() && $this.k6(other.o2());
  }
  function putEntry($this, entry) {
    var index = addKey($this, entry.h2());
    var valuesArray = allocateValuesArray($this);
    if (index >= 0) {
      valuesArray[index] = entry.i2();
      return true;
    }
    var oldValue = valuesArray[(-index | 0) - 1 | 0];
    if (!equals(entry.i2(), oldValue)) {
      valuesArray[(-index | 0) - 1 | 0] = entry.i2();
      return true;
    }
    return false;
  }
  function putAllEntries($this, from) {
    if (from.r())
      return false;
    ensureExtraCapacity($this, from.k());
    var it = from.h();
    var updated = false;
    while (it.i()) {
      if (putEntry($this, it.j()))
        updated = true;
    }
    return updated;
  }
  function Companion_3() {
    this.e7_1 = -1640531527;
    this.f7_1 = 8;
    this.g7_1 = 2;
    this.h7_1 = -1;
  }
  var Companion_instance_3;
  function Companion_getInstance_3() {
    return Companion_instance_3;
  }
  function Itr(map) {
    this.i7_1 = map;
    this.j7_1 = 0;
    this.k7_1 = -1;
    this.l7_1 = this.i7_1.x6_1;
    this.m7();
  }
  protoOf(Itr).m7 = function () {
    while (this.j7_1 < this.i7_1.v6_1 && this.i7_1.s6_1[this.j7_1] < 0) {
      this.j7_1 = this.j7_1 + 1 | 0;
    }
  };
  protoOf(Itr).i = function () {
    return this.j7_1 < this.i7_1.v6_1;
  };
  protoOf(Itr).z3 = function () {
    this.n7();
    // Inline function 'kotlin.check' call
    if (!!(this.k7_1 === -1)) {
      // Inline function 'kotlin.collections.Itr.remove.<anonymous>' call
      var message = 'Call next() before removing element from the iterator.';
      throw IllegalStateException_init_$Create$_0(toString_1(message));
    }
    this.i7_1.w5();
    removeEntryAt(this.i7_1, this.k7_1);
    this.k7_1 = -1;
    this.l7_1 = this.i7_1.x6_1;
  };
  protoOf(Itr).n7 = function () {
    if (!(this.i7_1.x6_1 === this.l7_1))
      throw ConcurrentModificationException_init_$Create$();
  };
  function KeysItr(map) {
    Itr.call(this, map);
  }
  protoOf(KeysItr).j = function () {
    this.n7();
    if (this.j7_1 >= this.i7_1.v6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var _unary__edvuaz = this.j7_1;
    this.j7_1 = _unary__edvuaz + 1 | 0;
    tmp.k7_1 = _unary__edvuaz;
    var result = this.i7_1.q6_1[this.k7_1];
    this.m7();
    return result;
  };
  function ValuesItr(map) {
    Itr.call(this, map);
  }
  protoOf(ValuesItr).j = function () {
    this.n7();
    if (this.j7_1 >= this.i7_1.v6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var _unary__edvuaz = this.j7_1;
    this.j7_1 = _unary__edvuaz + 1 | 0;
    tmp.k7_1 = _unary__edvuaz;
    var result = ensureNotNull(this.i7_1.r6_1)[this.k7_1];
    this.m7();
    return result;
  };
  function EntriesItr(map) {
    Itr.call(this, map);
  }
  protoOf(EntriesItr).j = function () {
    this.n7();
    if (this.j7_1 >= this.i7_1.v6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var _unary__edvuaz = this.j7_1;
    this.j7_1 = _unary__edvuaz + 1 | 0;
    tmp.k7_1 = _unary__edvuaz;
    var result = new EntryRef(this.i7_1, this.k7_1);
    this.m7();
    return result;
  };
  protoOf(EntriesItr).a8 = function () {
    if (this.j7_1 >= this.i7_1.v6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var _unary__edvuaz = this.j7_1;
    this.j7_1 = _unary__edvuaz + 1 | 0;
    tmp.k7_1 = _unary__edvuaz;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.i7_1.q6_1[this.k7_1];
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp_0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = ensureNotNull(this.i7_1.r6_1)[this.k7_1];
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    var result = tmp_0 ^ (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0);
    this.m7();
    return result;
  };
  protoOf(EntriesItr).b8 = function (sb) {
    if (this.j7_1 >= this.i7_1.v6_1)
      throw NoSuchElementException_init_$Create$();
    var tmp = this;
    var _unary__edvuaz = this.j7_1;
    this.j7_1 = _unary__edvuaz + 1 | 0;
    tmp.k7_1 = _unary__edvuaz;
    var key = this.i7_1.q6_1[this.k7_1];
    if (equals(key, this.i7_1))
      sb.d8('(this Map)');
    else
      sb.c8(key);
    sb.e8(_Char___init__impl__6a9atx(61));
    var value = ensureNotNull(this.i7_1.r6_1)[this.k7_1];
    if (equals(value, this.i7_1))
      sb.d8('(this Map)');
    else
      sb.c8(value);
    this.m7();
  };
  function EntryRef(map, index) {
    this.a7_1 = map;
    this.b7_1 = index;
    this.c7_1 = this.a7_1.x6_1;
  }
  protoOf(EntryRef).h2 = function () {
    checkForComodification(this);
    return this.a7_1.q6_1[this.b7_1];
  };
  protoOf(EntryRef).i2 = function () {
    checkForComodification(this);
    return ensureNotNull(this.a7_1.r6_1)[this.b7_1];
  };
  protoOf(EntryRef).equals = function (other) {
    var tmp;
    var tmp_0;
    if (!(other == null) ? isInterface(other, Entry) : false) {
      tmp_0 = equals(other.h2(), this.h2());
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals(other.i2(), this.i2());
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EntryRef).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.h2();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = this.i2();
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    return tmp ^ (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0);
  };
  protoOf(EntryRef).toString = function () {
    return toString_0(this.h2()) + '=' + toString_0(this.i2());
  };
  function InternalHashMap(keysArray, valuesArray, presenceArray, hashArray, maxProbeDistance, length) {
    this.q6_1 = keysArray;
    this.r6_1 = valuesArray;
    this.s6_1 = presenceArray;
    this.t6_1 = hashArray;
    this.u6_1 = maxProbeDistance;
    this.v6_1 = length;
    this.w6_1 = computeShift(Companion_instance_3, _get_hashSize__tftcho(this));
    this.x6_1 = 0;
    this.y6_1 = 0;
    this.z6_1 = false;
  }
  protoOf(InternalHashMap).k = function () {
    return this.y6_1;
  };
  protoOf(InternalHashMap).k2 = function (value) {
    return findValue(this, value) >= 0;
  };
  protoOf(InternalHashMap).l2 = function (key) {
    var index = findKey(this, key);
    if (index < 0)
      return null;
    return ensureNotNull(this.r6_1)[index];
  };
  protoOf(InternalHashMap).r5 = function (key) {
    return findKey(this, key) >= 0;
  };
  protoOf(InternalHashMap).b5 = function (key, value) {
    var index = addKey(this, key);
    var valuesArray = allocateValuesArray(this);
    if (index < 0) {
      var oldValue = valuesArray[(-index | 0) - 1 | 0];
      valuesArray[(-index | 0) - 1 | 0] = value;
      return oldValue;
    } else {
      valuesArray[index] = value;
      return null;
    }
  };
  protoOf(InternalHashMap).s5 = function (from) {
    this.w5();
    putAllEntries(this, from.o2());
  };
  protoOf(InternalHashMap).c5 = function (key) {
    this.w5();
    var index = findKey(this, key);
    if (index < 0)
      return null;
    var oldValue = ensureNotNull(this.r6_1)[index];
    removeEntryAt(this, index);
    return oldValue;
  };
  protoOf(InternalHashMap).equals = function (other) {
    var tmp;
    if (other === this) {
      tmp = true;
    } else {
      var tmp_0;
      if (!(other == null) ? isInterface(other, KtMap) : false) {
        tmp_0 = contentEquals_1(this, other);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(InternalHashMap).hashCode = function () {
    var result = 0;
    var it = this.e6();
    while (it.i()) {
      result = result + it.a8() | 0;
    }
    return result;
  };
  protoOf(InternalHashMap).toString = function () {
    var sb = StringBuilder_init_$Create$(2 + imul(this.y6_1, 3) | 0);
    sb.d8('{');
    var i = 0;
    var it = this.e6();
    while (it.i()) {
      if (i > 0) {
        sb.d8(', ');
      }
      it.b8(sb);
      i = i + 1 | 0;
    }
    sb.d8('}');
    return sb.toString();
  };
  protoOf(InternalHashMap).w5 = function () {
    if (this.z6_1)
      throw UnsupportedOperationException_init_$Create$();
  };
  protoOf(InternalHashMap).u5 = function (key) {
    this.w5();
    var index = findKey(this, key);
    if (index < 0)
      return false;
    removeEntryAt(this, index);
    return true;
  };
  protoOf(InternalHashMap).i6 = function (entry) {
    var index = findKey(this, entry.h2());
    if (index < 0)
      return false;
    return equals(ensureNotNull(this.r6_1)[index], entry.i2());
  };
  protoOf(InternalHashMap).f8 = function (entry) {
    return this.i6(isInterface(entry, Entry) ? entry : THROW_CCE());
  };
  protoOf(InternalHashMap).j6 = function (entry) {
    this.w5();
    var index = findKey(this, entry.h2());
    if (index < 0)
      return false;
    if (!equals(ensureNotNull(this.r6_1)[index], entry.i2()))
      return false;
    removeEntryAt(this, index);
    return true;
  };
  protoOf(InternalHashMap).v5 = function () {
    return new KeysItr(this);
  };
  protoOf(InternalHashMap).b6 = function () {
    return new ValuesItr(this);
  };
  protoOf(InternalHashMap).e6 = function () {
    return new EntriesItr(this);
  };
  function InternalMap() {
  }
  function LinkedHashMap_init_$Init$($this) {
    HashMap_init_$Init$_0($this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$() {
    return LinkedHashMap_init_$Init$(objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_0(initialCapacity, $this) {
    HashMap_init_$Init$_2(initialCapacity, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_0(initialCapacity) {
    return LinkedHashMap_init_$Init$_0(initialCapacity, objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashMap_init_$Init$_1(initialCapacity, loadFactor, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_1(initialCapacity, loadFactor) {
    return LinkedHashMap_init_$Init$_1(initialCapacity, loadFactor, objectCreate(protoOf(LinkedHashMap)));
  }
  function LinkedHashMap_init_$Init$_2(original, $this) {
    HashMap_init_$Init$_3(original, $this);
    LinkedHashMap.call($this);
    return $this;
  }
  function LinkedHashMap_init_$Create$_2(original) {
    return LinkedHashMap_init_$Init$_2(original, objectCreate(protoOf(LinkedHashMap)));
  }
  protoOf(LinkedHashMap).y3 = function () {
    return this.p5_1.w5();
  };
  function LinkedHashMap() {
  }
  function LinkedHashSet_init_$Init$($this) {
    HashSet_init_$Init$_0($this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$() {
    return LinkedHashSet_init_$Init$(objectCreate(protoOf(LinkedHashSet)));
  }
  function LinkedHashSet_init_$Init$_0(elements, $this) {
    HashSet_init_$Init$_1(elements, $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_0(elements) {
    return LinkedHashSet_init_$Init$_0(elements, objectCreate(protoOf(LinkedHashSet)));
  }
  function LinkedHashSet_init_$Init$_1(initialCapacity, loadFactor, $this) {
    HashSet_init_$Init$_2(initialCapacity, loadFactor, $this);
    LinkedHashSet.call($this);
    return $this;
  }
  function LinkedHashSet_init_$Init$_2(initialCapacity, $this) {
    LinkedHashSet_init_$Init$_1(initialCapacity, 1.0, $this);
    return $this;
  }
  function LinkedHashSet_init_$Create$_1(initialCapacity) {
    return LinkedHashSet_init_$Init$_2(initialCapacity, objectCreate(protoOf(LinkedHashSet)));
  }
  protoOf(LinkedHashSet).y3 = function () {
    return this.e1_1.w5();
  };
  function LinkedHashSet() {
  }
  function RandomAccess() {
  }
  function get_output() {
    _init_properties_console_kt__rfg7jv();
    return output;
  }
  var output;
  function BaseOutput() {
  }
  protoOf(BaseOutput).n8 = function () {
    this.o8('\n');
  };
  protoOf(BaseOutput).p8 = function (message) {
    this.o8(message);
    this.n8();
  };
  function NodeJsOutput(outputStream) {
    BaseOutput.call(this);
    this.q8_1 = outputStream;
  }
  protoOf(NodeJsOutput).o8 = function (message) {
    // Inline function 'kotlin.io.String' call
    var tmp1_elvis_lhs = message == null ? null : toString_1(message);
    var messageString = tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
    this.q8_1.write(messageString);
  };
  function BufferedOutputToConsoleLog() {
    BufferedOutput.call(this);
  }
  protoOf(BufferedOutputToConsoleLog).o8 = function (message) {
    // Inline function 'kotlin.io.String' call
    var tmp1_elvis_lhs = message == null ? null : toString_1(message);
    var s = tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs;
    // Inline function 'kotlin.text.nativeLastIndexOf' call
    // Inline function 'kotlin.js.asDynamic' call
    var i = s.lastIndexOf('\n', 0);
    if (i >= 0) {
      var tmp = this;
      var tmp_0 = this.s8_1;
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp.s8_1 = tmp_0 + s.substring(0, i);
      this.t8();
      var tmp6 = s;
      // Inline function 'kotlin.text.substring' call
      var startIndex = i + 1 | 0;
      // Inline function 'kotlin.js.asDynamic' call
      s = tmp6.substring(startIndex);
    }
    this.s8_1 = this.s8_1 + s;
  };
  protoOf(BufferedOutputToConsoleLog).t8 = function () {
    console.log(this.s8_1);
    this.s8_1 = '';
  };
  function BufferedOutput() {
    BaseOutput.call(this);
    this.s8_1 = '';
  }
  protoOf(BufferedOutput).o8 = function (message) {
    var tmp = this;
    var tmp_0 = this.s8_1;
    // Inline function 'kotlin.io.String' call
    var tmp1_elvis_lhs = message == null ? null : toString_1(message);
    tmp.s8_1 = tmp_0 + (tmp1_elvis_lhs == null ? 'null' : tmp1_elvis_lhs);
  };
  function println(message) {
    _init_properties_console_kt__rfg7jv();
    get_output().p8(message);
  }
  var properties_initialized_console_kt_gll9dl;
  function _init_properties_console_kt__rfg7jv() {
    if (!properties_initialized_console_kt_gll9dl) {
      properties_initialized_console_kt_gll9dl = true;
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.io.output.<anonymous>' call
      var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
      output = isNode ? new NodeJsOutput(process.stdout) : new BufferedOutputToConsoleLog();
    }
  }
  function CoroutineImpl(resultContinuation) {
    InterceptedCoroutine.call(this);
    this.v8_1 = resultContinuation;
    this.w8_1 = 0;
    this.x8_1 = 0;
    this.y8_1 = null;
    this.z8_1 = null;
    this.a9_1 = null;
    var tmp = this;
    var tmp0_safe_receiver = this.v8_1;
    tmp.b9_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.c9();
  }
  protoOf(CoroutineImpl).c9 = function () {
    return ensureNotNull(this.b9_1);
  };
  protoOf(CoroutineImpl).d9 = function (result) {
    var current = this;
    // Inline function 'kotlin.Result.getOrNull' call
    var tmp;
    if (_Result___get_isFailure__impl__jpiriv(result)) {
      tmp = null;
    } else {
      var tmp_0 = _Result___get_value__impl__bjfvqg(result);
      tmp = (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
    }
    var currentResult = tmp;
    var currentException = Result__exceptionOrNull_impl_p6xea9(result);
    while (true) {
      // Inline function 'kotlin.with' call
      // Inline function 'kotlin.coroutines.CoroutineImpl.resumeWith.<anonymous>' call
      var $this$with = current;
      if (currentException == null) {
        $this$with.y8_1 = currentResult;
      } else {
        $this$with.w8_1 = $this$with.x8_1;
        $this$with.z8_1 = currentException;
      }
      try {
        var outcome = $this$with.e9();
        if (outcome === get_COROUTINE_SUSPENDED())
          return Unit_instance;
        currentResult = outcome;
        currentException = null;
      } catch ($p) {
        var exception = $p;
        currentResult = null;
        // Inline function 'kotlin.js.unsafeCast' call
        currentException = exception;
      }
      $this$with.g9();
      var completion = ensureNotNull($this$with.v8_1);
      if (completion instanceof CoroutineImpl) {
        current = completion;
      } else {
        if (!(currentException == null)) {
          // Inline function 'kotlin.coroutines.resumeWithException' call
          // Inline function 'kotlin.Companion.failure' call
          var exception_0 = ensureNotNull(currentException);
          var tmp$ret$2 = _Result___init__impl__xyqfz8(createFailure(exception_0));
          completion.h9(tmp$ret$2);
        } else {
          // Inline function 'kotlin.coroutines.resume' call
          // Inline function 'kotlin.Companion.success' call
          var value = currentResult;
          var tmp$ret$4 = _Result___init__impl__xyqfz8(value);
          completion.h9(tmp$ret$4);
        }
        return Unit_instance;
      }
    }
  };
  protoOf(CoroutineImpl).h9 = function (result) {
    return this.d9(result);
  };
  function CompletedContinuation() {
  }
  protoOf(CompletedContinuation).c9 = function () {
    var message = 'This continuation is already complete';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(CompletedContinuation).d9 = function (result) {
    // Inline function 'kotlin.error' call
    var message = 'This continuation is already complete';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(CompletedContinuation).h9 = function (result) {
    return this.d9(result);
  };
  protoOf(CompletedContinuation).toString = function () {
    return 'This continuation is already complete';
  };
  var CompletedContinuation_instance;
  function CompletedContinuation_getInstance() {
    return CompletedContinuation_instance;
  }
  function InterceptedCoroutine() {
    this.f9_1 = null;
  }
  protoOf(InterceptedCoroutine).g9 = function () {
    var intercepted = this.f9_1;
    if (!(intercepted == null) && !(intercepted === this)) {
      ensureNotNull(this.c9().i9(Key_instance)).j9(intercepted);
    }
    this.f9_1 = CompletedContinuation_instance;
  };
  function createCoroutineUnintercepted(_this__u8e3s4, receiver, completion) {
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineFromSuspendFunction' call
    return new createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1(completion, _this__u8e3s4, receiver, completion);
  }
  function invokeSuspendSuperTypeWithReceiver(_this__u8e3s4, receiver, completion) {
    throw new NotImplementedError('It is intrinsic method');
  }
  function createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1($completion, $this_createCoroutineUnintercepted, $receiver, $completion$1) {
    this.s9_1 = $this_createCoroutineUnintercepted;
    this.t9_1 = $receiver;
    this.u9_1 = $completion$1;
    CoroutineImpl.call(this, isInterface($completion, Continuation) ? $completion : THROW_CCE());
  }
  protoOf(createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$1).e9 = function () {
    if (this.z8_1 != null)
      throw this.z8_1;
    // Inline function 'kotlin.coroutines.intrinsics.createCoroutineUnintercepted.<anonymous>' call
    // Inline function 'kotlin.js.asDynamic' call
    var a = this.s9_1;
    return typeof a === 'function' ? a(this.t9_1, this.u9_1) : this.s9_1.v9(this.t9_1, this.u9_1);
  };
  function Exception_init_$Init$($this) {
    extendThrowable($this);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$() {
    var tmp = Exception_init_$Init$(objectCreate(protoOf(Exception)));
    captureStack(tmp, Exception_init_$Create$);
    return tmp;
  }
  function Exception_init_$Init$_0(message, $this) {
    extendThrowable($this, message);
    Exception.call($this);
    return $this;
  }
  function Exception_init_$Create$_0(message) {
    var tmp = Exception_init_$Init$_0(message, objectCreate(protoOf(Exception)));
    captureStack(tmp, Exception_init_$Create$_0);
    return tmp;
  }
  function Exception() {
    captureStack(this, Exception);
  }
  function IllegalArgumentException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$() {
    var tmp = IllegalArgumentException_init_$Init$(objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$);
    return tmp;
  }
  function IllegalArgumentException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalArgumentException.call($this);
    return $this;
  }
  function IllegalArgumentException_init_$Create$_0(message) {
    var tmp = IllegalArgumentException_init_$Init$_0(message, objectCreate(protoOf(IllegalArgumentException)));
    captureStack(tmp, IllegalArgumentException_init_$Create$_0);
    return tmp;
  }
  function IllegalArgumentException() {
    captureStack(this, IllegalArgumentException);
  }
  function IllegalStateException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$() {
    var tmp = IllegalStateException_init_$Init$(objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$);
    return tmp;
  }
  function IllegalStateException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IllegalStateException.call($this);
    return $this;
  }
  function IllegalStateException_init_$Create$_0(message) {
    var tmp = IllegalStateException_init_$Init$_0(message, objectCreate(protoOf(IllegalStateException)));
    captureStack(tmp, IllegalStateException_init_$Create$_0);
    return tmp;
  }
  function IllegalStateException() {
    captureStack(this, IllegalStateException);
  }
  function UnsupportedOperationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$() {
    var tmp = UnsupportedOperationException_init_$Init$(objectCreate(protoOf(UnsupportedOperationException)));
    captureStack(tmp, UnsupportedOperationException_init_$Create$);
    return tmp;
  }
  function UnsupportedOperationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    UnsupportedOperationException.call($this);
    return $this;
  }
  function UnsupportedOperationException_init_$Create$_0(message) {
    var tmp = UnsupportedOperationException_init_$Init$_0(message, objectCreate(protoOf(UnsupportedOperationException)));
    captureStack(tmp, UnsupportedOperationException_init_$Create$_0);
    return tmp;
  }
  function UnsupportedOperationException() {
    captureStack(this, UnsupportedOperationException);
  }
  function RuntimeException_init_$Init$($this) {
    Exception_init_$Init$($this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$() {
    var tmp = RuntimeException_init_$Init$(objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$);
    return tmp;
  }
  function RuntimeException_init_$Init$_0(message, $this) {
    Exception_init_$Init$_0(message, $this);
    RuntimeException.call($this);
    return $this;
  }
  function RuntimeException_init_$Create$_0(message) {
    var tmp = RuntimeException_init_$Init$_0(message, objectCreate(protoOf(RuntimeException)));
    captureStack(tmp, RuntimeException_init_$Create$_0);
    return tmp;
  }
  function RuntimeException() {
    captureStack(this, RuntimeException);
  }
  function NoSuchElementException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$() {
    var tmp = NoSuchElementException_init_$Init$(objectCreate(protoOf(NoSuchElementException)));
    captureStack(tmp, NoSuchElementException_init_$Create$);
    return tmp;
  }
  function NoSuchElementException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    NoSuchElementException.call($this);
    return $this;
  }
  function NoSuchElementException_init_$Create$_0(message) {
    var tmp = NoSuchElementException_init_$Init$_0(message, objectCreate(protoOf(NoSuchElementException)));
    captureStack(tmp, NoSuchElementException_init_$Create$_0);
    return tmp;
  }
  function NoSuchElementException() {
    captureStack(this, NoSuchElementException);
  }
  function Error_init_$Init$($this) {
    extendThrowable($this);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Create$() {
    var tmp = Error_init_$Init$(objectCreate(protoOf(Error_0)));
    captureStack(tmp, Error_init_$Create$);
    return tmp;
  }
  function Error_init_$Init$_0(message, $this) {
    extendThrowable($this, message);
    Error_0.call($this);
    return $this;
  }
  function Error_init_$Init$_1(message, cause, $this) {
    extendThrowable($this, message, cause);
    Error_0.call($this);
    return $this;
  }
  function Error_0() {
    captureStack(this, Error_0);
  }
  function IndexOutOfBoundsException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$() {
    var tmp = IndexOutOfBoundsException_init_$Init$(objectCreate(protoOf(IndexOutOfBoundsException)));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$);
    return tmp;
  }
  function IndexOutOfBoundsException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    IndexOutOfBoundsException.call($this);
    return $this;
  }
  function IndexOutOfBoundsException_init_$Create$_0(message) {
    var tmp = IndexOutOfBoundsException_init_$Init$_0(message, objectCreate(protoOf(IndexOutOfBoundsException)));
    captureStack(tmp, IndexOutOfBoundsException_init_$Create$_0);
    return tmp;
  }
  function IndexOutOfBoundsException() {
    captureStack(this, IndexOutOfBoundsException);
  }
  function NumberFormatException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$() {
    var tmp = NumberFormatException_init_$Init$(objectCreate(protoOf(NumberFormatException)));
    captureStack(tmp, NumberFormatException_init_$Create$);
    return tmp;
  }
  function NumberFormatException_init_$Init$_0(message, $this) {
    IllegalArgumentException_init_$Init$_0(message, $this);
    NumberFormatException.call($this);
    return $this;
  }
  function NumberFormatException_init_$Create$_0(message) {
    var tmp = NumberFormatException_init_$Init$_0(message, objectCreate(protoOf(NumberFormatException)));
    captureStack(tmp, NumberFormatException_init_$Create$_0);
    return tmp;
  }
  function NumberFormatException() {
    captureStack(this, NumberFormatException);
  }
  function ArithmeticException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$() {
    var tmp = ArithmeticException_init_$Init$(objectCreate(protoOf(ArithmeticException)));
    captureStack(tmp, ArithmeticException_init_$Create$);
    return tmp;
  }
  function ArithmeticException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ArithmeticException.call($this);
    return $this;
  }
  function ArithmeticException_init_$Create$_0(message) {
    var tmp = ArithmeticException_init_$Init$_0(message, objectCreate(protoOf(ArithmeticException)));
    captureStack(tmp, ArithmeticException_init_$Create$_0);
    return tmp;
  }
  function ArithmeticException() {
    captureStack(this, ArithmeticException);
  }
  function AssertionError_init_$Init$($this) {
    Error_init_$Init$($this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$() {
    var tmp = AssertionError_init_$Init$(objectCreate(protoOf(AssertionError)));
    captureStack(tmp, AssertionError_init_$Create$);
    return tmp;
  }
  function AssertionError_init_$Init$_0(message, $this) {
    var tmp = message == null ? null : toString_1(message);
    Error_init_$Init$_1(tmp, message instanceof Error ? message : null, $this);
    AssertionError.call($this);
    return $this;
  }
  function AssertionError_init_$Create$_0(message) {
    var tmp = AssertionError_init_$Init$_0(message, objectCreate(protoOf(AssertionError)));
    captureStack(tmp, AssertionError_init_$Create$_0);
    return tmp;
  }
  function AssertionError() {
    captureStack(this, AssertionError);
  }
  function ConcurrentModificationException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ConcurrentModificationException.call($this);
    return $this;
  }
  function ConcurrentModificationException_init_$Create$() {
    var tmp = ConcurrentModificationException_init_$Init$(objectCreate(protoOf(ConcurrentModificationException)));
    captureStack(tmp, ConcurrentModificationException_init_$Create$);
    return tmp;
  }
  function ConcurrentModificationException_init_$Init$_0(message, $this) {
    RuntimeException_init_$Init$_0(message, $this);
    ConcurrentModificationException.call($this);
    return $this;
  }
  function ConcurrentModificationException_init_$Create$_0(message) {
    var tmp = ConcurrentModificationException_init_$Init$_0(message, objectCreate(protoOf(ConcurrentModificationException)));
    captureStack(tmp, ConcurrentModificationException_init_$Create$_0);
    return tmp;
  }
  function ConcurrentModificationException() {
    captureStack(this, ConcurrentModificationException);
  }
  function NullPointerException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NullPointerException.call($this);
    return $this;
  }
  function NullPointerException_init_$Create$() {
    var tmp = NullPointerException_init_$Init$(objectCreate(protoOf(NullPointerException)));
    captureStack(tmp, NullPointerException_init_$Create$);
    return tmp;
  }
  function NullPointerException() {
    captureStack(this, NullPointerException);
  }
  function NoWhenBranchMatchedException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    NoWhenBranchMatchedException.call($this);
    return $this;
  }
  function NoWhenBranchMatchedException_init_$Create$() {
    var tmp = NoWhenBranchMatchedException_init_$Init$(objectCreate(protoOf(NoWhenBranchMatchedException)));
    captureStack(tmp, NoWhenBranchMatchedException_init_$Create$);
    return tmp;
  }
  function NoWhenBranchMatchedException() {
    captureStack(this, NoWhenBranchMatchedException);
  }
  function ClassCastException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    ClassCastException.call($this);
    return $this;
  }
  function ClassCastException_init_$Create$() {
    var tmp = ClassCastException_init_$Init$(objectCreate(protoOf(ClassCastException)));
    captureStack(tmp, ClassCastException_init_$Create$);
    return tmp;
  }
  function ClassCastException() {
    captureStack(this, ClassCastException);
  }
  function lazy(initializer) {
    return new UnsafeLazyImpl(initializer);
  }
  function fillFrom(src, dst) {
    var srcLen = src.length;
    var dstLen = dst.length;
    var index = 0;
    // Inline function 'kotlin.js.unsafeCast' call
    var arr = dst;
    while (index < srcLen && index < dstLen) {
      var tmp = index;
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      arr[tmp] = src[_unary__edvuaz];
    }
    return dst;
  }
  function arrayCopyResize(source, newSize, defaultValue) {
    // Inline function 'kotlin.js.unsafeCast' call
    var result = source.slice(0, newSize);
    // Inline function 'kotlin.copyArrayType' call
    if (source.$type$ !== undefined) {
      result.$type$ = source.$type$;
    }
    var index = source.length;
    if (newSize > index) {
      // Inline function 'kotlin.js.asDynamic' call
      result.length = newSize;
      while (index < newSize) {
        var _unary__edvuaz = index;
        index = _unary__edvuaz + 1 | 0;
        result[_unary__edvuaz] = defaultValue;
      }
    }
    return result;
  }
  function abs(n) {
    return n < 0 ? -n | 0 | 0 : n;
  }
  function roundToLong(_this__u8e3s4) {
    var tmp;
    if (isNaN_0(_this__u8e3s4)) {
      throw IllegalArgumentException_init_$Create$_0('Cannot round NaN value.');
    } else if (_this__u8e3s4 > (new Long(-1, 2147483647)).m3()) {
      tmp = new Long(-1, 2147483647);
    } else if (_this__u8e3s4 < (new Long(0, -2147483648)).m3()) {
      tmp = new Long(0, -2147483648);
    } else {
      tmp = numberToLong(Math.round(_this__u8e3s4));
    }
    return tmp;
  }
  function abs_0(n) {
    return n.d1(new Long(0, 0)) < 0 ? n.d3() : n;
  }
  function round(x) {
    if (!(x % 0.5 === 0.0)) {
      return Math.round(x);
    }
    // Inline function 'kotlin.math.floor' call
    var floor = Math.floor(x);
    var tmp;
    if (floor % 2 === 0.0) {
      tmp = floor;
    } else {
      // Inline function 'kotlin.math.ceil' call
      tmp = Math.ceil(x);
    }
    return tmp;
  }
  function get_INV_2_26() {
    _init_properties_PlatformRandom_kt__6kjv62();
    return INV_2_26;
  }
  var INV_2_26;
  function get_INV_2_53() {
    _init_properties_PlatformRandom_kt__6kjv62();
    return INV_2_53;
  }
  var INV_2_53;
  function doubleFromParts(hi26, low27) {
    _init_properties_PlatformRandom_kt__6kjv62();
    return hi26 * get_INV_2_26() + low27 * get_INV_2_53();
  }
  function defaultPlatformRandom() {
    _init_properties_PlatformRandom_kt__6kjv62();
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp$ret$0 = Math.random() * Math.pow(2, 32) | 0;
    return Random_0(tmp$ret$0);
  }
  var properties_initialized_PlatformRandom_kt_uibhw8;
  function _init_properties_PlatformRandom_kt__6kjv62() {
    if (!properties_initialized_PlatformRandom_kt_uibhw8) {
      properties_initialized_PlatformRandom_kt_uibhw8 = true;
      // Inline function 'kotlin.math.pow' call
      INV_2_26 = Math.pow(2.0, -26);
      // Inline function 'kotlin.math.pow' call
      INV_2_53 = Math.pow(2.0, -53);
    }
  }
  function KClass() {
  }
  function KClassImpl(jClass) {
    this.aa_1 = jClass;
  }
  protoOf(KClassImpl).ba = function () {
    return this.aa_1;
  };
  protoOf(KClassImpl).equals = function (other) {
    var tmp;
    if (other instanceof NothingKClassImpl) {
      tmp = false;
    } else {
      if (other instanceof ErrorKClass) {
        tmp = false;
      } else {
        if (other instanceof KClassImpl) {
          tmp = equals(this.ba(), other.ba());
        } else {
          tmp = false;
        }
      }
    }
    return tmp;
  };
  protoOf(KClassImpl).hashCode = function () {
    var tmp0_safe_receiver = this.y9();
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);
    return tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
  };
  protoOf(KClassImpl).toString = function () {
    return 'class ' + this.y9();
  };
  function NothingKClassImpl() {
    NothingKClassImpl_instance = this;
    KClassImpl.call(this, Object);
    this.da_1 = 'Nothing';
  }
  protoOf(NothingKClassImpl).y9 = function () {
    return this.da_1;
  };
  protoOf(NothingKClassImpl).z9 = function (value) {
    return false;
  };
  protoOf(NothingKClassImpl).ba = function () {
    throw UnsupportedOperationException_init_$Create$_0("There's no native JS class for Nothing type");
  };
  protoOf(NothingKClassImpl).equals = function (other) {
    return other === this;
  };
  protoOf(NothingKClassImpl).hashCode = function () {
    return 0;
  };
  var NothingKClassImpl_instance;
  function NothingKClassImpl_getInstance() {
    if (NothingKClassImpl_instance == null)
      new NothingKClassImpl();
    return NothingKClassImpl_instance;
  }
  function ErrorKClass() {
  }
  protoOf(ErrorKClass).y9 = function () {
    var message = 'Unknown simpleName for ErrorKClass';
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(ErrorKClass).z9 = function (value) {
    var message = "Can's check isInstance on ErrorKClass";
    throw IllegalStateException_init_$Create$_0(toString_1(message));
  };
  protoOf(ErrorKClass).equals = function (other) {
    return other === this;
  };
  protoOf(ErrorKClass).hashCode = function () {
    return 0;
  };
  function PrimitiveKClassImpl(jClass, givenSimpleName, isInstanceFunction) {
    KClassImpl.call(this, jClass);
    this.fa_1 = givenSimpleName;
    this.ga_1 = isInstanceFunction;
  }
  protoOf(PrimitiveKClassImpl).equals = function (other) {
    if (!(other instanceof PrimitiveKClassImpl))
      return false;
    return protoOf(KClassImpl).equals.call(this, other) && this.fa_1 === other.fa_1;
  };
  protoOf(PrimitiveKClassImpl).y9 = function () {
    return this.fa_1;
  };
  protoOf(PrimitiveKClassImpl).z9 = function (value) {
    return this.ga_1(value);
  };
  function SimpleKClassImpl(jClass) {
    KClassImpl.call(this, jClass);
    var tmp = this;
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = jClass.$metadata$;
    // Inline function 'kotlin.js.unsafeCast' call
    tmp.ia_1 = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.simpleName;
  }
  protoOf(SimpleKClassImpl).y9 = function () {
    return this.ia_1;
  };
  protoOf(SimpleKClassImpl).z9 = function (value) {
    return jsIsType(value, this.ba());
  };
  function KProperty1() {
  }
  function KProperty0() {
  }
  function get_functionClasses() {
    _init_properties_primitives_kt__3fums4();
    return functionClasses;
  }
  var functionClasses;
  function PrimitiveClasses$anyClass$lambda(it) {
    return !(it == null);
  }
  function PrimitiveClasses$numberClass$lambda(it) {
    return isNumber(it);
  }
  function PrimitiveClasses$booleanClass$lambda(it) {
    return !(it == null) ? typeof it === 'boolean' : false;
  }
  function PrimitiveClasses$byteClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$shortClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$intClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$floatClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$doubleClass$lambda(it) {
    return !(it == null) ? typeof it === 'number' : false;
  }
  function PrimitiveClasses$arrayClass$lambda(it) {
    return !(it == null) ? isArray(it) : false;
  }
  function PrimitiveClasses$stringClass$lambda(it) {
    return !(it == null) ? typeof it === 'string' : false;
  }
  function PrimitiveClasses$throwableClass$lambda(it) {
    return it instanceof Error;
  }
  function PrimitiveClasses$booleanArrayClass$lambda(it) {
    return !(it == null) ? isBooleanArray(it) : false;
  }
  function PrimitiveClasses$charArrayClass$lambda(it) {
    return !(it == null) ? isCharArray(it) : false;
  }
  function PrimitiveClasses$byteArrayClass$lambda(it) {
    return !(it == null) ? isByteArray(it) : false;
  }
  function PrimitiveClasses$shortArrayClass$lambda(it) {
    return !(it == null) ? isShortArray(it) : false;
  }
  function PrimitiveClasses$intArrayClass$lambda(it) {
    return !(it == null) ? isIntArray(it) : false;
  }
  function PrimitiveClasses$longArrayClass$lambda(it) {
    return !(it == null) ? isLongArray(it) : false;
  }
  function PrimitiveClasses$floatArrayClass$lambda(it) {
    return !(it == null) ? isFloatArray(it) : false;
  }
  function PrimitiveClasses$doubleArrayClass$lambda(it) {
    return !(it == null) ? isDoubleArray(it) : false;
  }
  function PrimitiveClasses$functionClass$lambda($arity) {
    return function (it) {
      var tmp;
      if (typeof it === 'function') {
        // Inline function 'kotlin.js.asDynamic' call
        tmp = it.length === $arity;
      } else {
        tmp = false;
      }
      return tmp;
    };
  }
  function PrimitiveClasses() {
    PrimitiveClasses_instance = this;
    var tmp = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_0 = Object;
    tmp.anyClass = new PrimitiveKClassImpl(tmp_0, 'Any', PrimitiveClasses$anyClass$lambda);
    var tmp_1 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_2 = Number;
    tmp_1.numberClass = new PrimitiveKClassImpl(tmp_2, 'Number', PrimitiveClasses$numberClass$lambda);
    this.nothingClass = NothingKClassImpl_getInstance();
    var tmp_3 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_4 = Boolean;
    tmp_3.booleanClass = new PrimitiveKClassImpl(tmp_4, 'Boolean', PrimitiveClasses$booleanClass$lambda);
    var tmp_5 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_6 = Number;
    tmp_5.byteClass = new PrimitiveKClassImpl(tmp_6, 'Byte', PrimitiveClasses$byteClass$lambda);
    var tmp_7 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_8 = Number;
    tmp_7.shortClass = new PrimitiveKClassImpl(tmp_8, 'Short', PrimitiveClasses$shortClass$lambda);
    var tmp_9 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_10 = Number;
    tmp_9.intClass = new PrimitiveKClassImpl(tmp_10, 'Int', PrimitiveClasses$intClass$lambda);
    var tmp_11 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_12 = Number;
    tmp_11.floatClass = new PrimitiveKClassImpl(tmp_12, 'Float', PrimitiveClasses$floatClass$lambda);
    var tmp_13 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_14 = Number;
    tmp_13.doubleClass = new PrimitiveKClassImpl(tmp_14, 'Double', PrimitiveClasses$doubleClass$lambda);
    var tmp_15 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_16 = Array;
    tmp_15.arrayClass = new PrimitiveKClassImpl(tmp_16, 'Array', PrimitiveClasses$arrayClass$lambda);
    var tmp_17 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_18 = String;
    tmp_17.stringClass = new PrimitiveKClassImpl(tmp_18, 'String', PrimitiveClasses$stringClass$lambda);
    var tmp_19 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_20 = Error;
    tmp_19.throwableClass = new PrimitiveKClassImpl(tmp_20, 'Throwable', PrimitiveClasses$throwableClass$lambda);
    var tmp_21 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_22 = Array;
    tmp_21.booleanArrayClass = new PrimitiveKClassImpl(tmp_22, 'BooleanArray', PrimitiveClasses$booleanArrayClass$lambda);
    var tmp_23 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_24 = Uint16Array;
    tmp_23.charArrayClass = new PrimitiveKClassImpl(tmp_24, 'CharArray', PrimitiveClasses$charArrayClass$lambda);
    var tmp_25 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_26 = Int8Array;
    tmp_25.byteArrayClass = new PrimitiveKClassImpl(tmp_26, 'ByteArray', PrimitiveClasses$byteArrayClass$lambda);
    var tmp_27 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_28 = Int16Array;
    tmp_27.shortArrayClass = new PrimitiveKClassImpl(tmp_28, 'ShortArray', PrimitiveClasses$shortArrayClass$lambda);
    var tmp_29 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_30 = Int32Array;
    tmp_29.intArrayClass = new PrimitiveKClassImpl(tmp_30, 'IntArray', PrimitiveClasses$intArrayClass$lambda);
    var tmp_31 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_32 = Array;
    tmp_31.longArrayClass = new PrimitiveKClassImpl(tmp_32, 'LongArray', PrimitiveClasses$longArrayClass$lambda);
    var tmp_33 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_34 = Float32Array;
    tmp_33.floatArrayClass = new PrimitiveKClassImpl(tmp_34, 'FloatArray', PrimitiveClasses$floatArrayClass$lambda);
    var tmp_35 = this;
    // Inline function 'kotlin.js.unsafeCast' call
    var tmp_36 = Float64Array;
    tmp_35.doubleArrayClass = new PrimitiveKClassImpl(tmp_36, 'DoubleArray', PrimitiveClasses$doubleArrayClass$lambda);
  }
  protoOf(PrimitiveClasses).ja = function () {
    return this.anyClass;
  };
  protoOf(PrimitiveClasses).ka = function () {
    return this.numberClass;
  };
  protoOf(PrimitiveClasses).la = function () {
    return this.nothingClass;
  };
  protoOf(PrimitiveClasses).ma = function () {
    return this.booleanClass;
  };
  protoOf(PrimitiveClasses).na = function () {
    return this.byteClass;
  };
  protoOf(PrimitiveClasses).oa = function () {
    return this.shortClass;
  };
  protoOf(PrimitiveClasses).pa = function () {
    return this.intClass;
  };
  protoOf(PrimitiveClasses).qa = function () {
    return this.floatClass;
  };
  protoOf(PrimitiveClasses).ra = function () {
    return this.doubleClass;
  };
  protoOf(PrimitiveClasses).sa = function () {
    return this.arrayClass;
  };
  protoOf(PrimitiveClasses).ta = function () {
    return this.stringClass;
  };
  protoOf(PrimitiveClasses).ua = function () {
    return this.throwableClass;
  };
  protoOf(PrimitiveClasses).va = function () {
    return this.booleanArrayClass;
  };
  protoOf(PrimitiveClasses).wa = function () {
    return this.charArrayClass;
  };
  protoOf(PrimitiveClasses).xa = function () {
    return this.byteArrayClass;
  };
  protoOf(PrimitiveClasses).ya = function () {
    return this.shortArrayClass;
  };
  protoOf(PrimitiveClasses).za = function () {
    return this.intArrayClass;
  };
  protoOf(PrimitiveClasses).ab = function () {
    return this.longArrayClass;
  };
  protoOf(PrimitiveClasses).bb = function () {
    return this.floatArrayClass;
  };
  protoOf(PrimitiveClasses).cb = function () {
    return this.doubleArrayClass;
  };
  protoOf(PrimitiveClasses).functionClass = function (arity) {
    var tmp0_elvis_lhs = get_functionClasses()[arity];
    var tmp;
    if (tmp0_elvis_lhs == null) {
      // Inline function 'kotlin.run' call
      // Inline function 'kotlin.reflect.js.internal.PrimitiveClasses.functionClass.<anonymous>' call
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp_0 = Function;
      var tmp_1 = 'Function' + arity;
      var result = new PrimitiveKClassImpl(tmp_0, tmp_1, PrimitiveClasses$functionClass$lambda(arity));
      // Inline function 'kotlin.js.asDynamic' call
      get_functionClasses()[arity] = result;
      tmp = result;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  var PrimitiveClasses_instance;
  function PrimitiveClasses_getInstance() {
    if (PrimitiveClasses_instance == null)
      new PrimitiveClasses();
    return PrimitiveClasses_instance;
  }
  var properties_initialized_primitives_kt_jle18u;
  function _init_properties_primitives_kt__3fums4() {
    if (!properties_initialized_primitives_kt_jle18u) {
      properties_initialized_primitives_kt_jle18u = true;
      // Inline function 'kotlin.arrayOfNulls' call
      functionClasses = fillArrayVal(Array(0), null);
    }
  }
  function getKClass(jClass) {
    var tmp;
    if (Array.isArray(jClass)) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = getKClassM(jClass);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = getKClass1(jClass);
    }
    return tmp;
  }
  function getKClassM(jClasses) {
    var tmp;
    switch (jClasses.length) {
      case 1:
        tmp = getKClass1(jClasses[0]);
        break;
      case 0:
        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp = NothingKClassImpl_getInstance();
        break;
      default:
        // Inline function 'kotlin.js.unsafeCast' call

        // Inline function 'kotlin.js.asDynamic' call

        tmp = new ErrorKClass();
        break;
    }
    return tmp;
  }
  function getKClass1(jClass) {
    if (jClass === String) {
      // Inline function 'kotlin.js.unsafeCast' call
      // Inline function 'kotlin.js.asDynamic' call
      return PrimitiveClasses_getInstance().stringClass;
    }
    // Inline function 'kotlin.js.asDynamic' call
    var metadata = jClass.$metadata$;
    var tmp;
    if (metadata != null) {
      var tmp_0;
      if (metadata.$kClass$ == null) {
        var kClass = new SimpleKClassImpl(jClass);
        metadata.$kClass$ = kClass;
        tmp_0 = kClass;
      } else {
        tmp_0 = metadata.$kClass$;
      }
      tmp = tmp_0;
    } else {
      tmp = new SimpleKClassImpl(jClass);
    }
    return tmp;
  }
  function getKClassFromExpression(e) {
    var tmp;
    switch (typeof e) {
      case 'string':
        tmp = PrimitiveClasses_getInstance().stringClass;
        break;
      case 'number':
        var tmp_0;
        // Inline function 'kotlin.js.jsBitwiseOr' call

        // Inline function 'kotlin.js.asDynamic' call

        if ((e | 0) === e) {
          tmp_0 = PrimitiveClasses_getInstance().intClass;
        } else {
          tmp_0 = PrimitiveClasses_getInstance().doubleClass;
        }

        tmp = tmp_0;
        break;
      case 'boolean':
        tmp = PrimitiveClasses_getInstance().booleanClass;
        break;
      case 'function':
        var tmp_1 = PrimitiveClasses_getInstance();
        // Inline function 'kotlin.js.asDynamic' call

        tmp = tmp_1.functionClass(e.length);
        break;
      default:
        var tmp_2;
        if (isBooleanArray(e)) {
          tmp_2 = PrimitiveClasses_getInstance().booleanArrayClass;
        } else {
          if (isCharArray(e)) {
            tmp_2 = PrimitiveClasses_getInstance().charArrayClass;
          } else {
            if (isByteArray(e)) {
              tmp_2 = PrimitiveClasses_getInstance().byteArrayClass;
            } else {
              if (isShortArray(e)) {
                tmp_2 = PrimitiveClasses_getInstance().shortArrayClass;
              } else {
                if (isIntArray(e)) {
                  tmp_2 = PrimitiveClasses_getInstance().intArrayClass;
                } else {
                  if (isLongArray(e)) {
                    tmp_2 = PrimitiveClasses_getInstance().longArrayClass;
                  } else {
                    if (isFloatArray(e)) {
                      tmp_2 = PrimitiveClasses_getInstance().floatArrayClass;
                    } else {
                      if (isDoubleArray(e)) {
                        tmp_2 = PrimitiveClasses_getInstance().doubleArrayClass;
                      } else {
                        if (isInterface(e, KClass)) {
                          tmp_2 = getKClass(KClass);
                        } else {
                          if (isArray(e)) {
                            tmp_2 = PrimitiveClasses_getInstance().arrayClass;
                          } else {
                            var constructor = Object.getPrototypeOf(e).constructor;
                            var tmp_3;
                            if (constructor === Object) {
                              tmp_3 = PrimitiveClasses_getInstance().anyClass;
                            } else if (constructor === Error) {
                              tmp_3 = PrimitiveClasses_getInstance().throwableClass;
                            } else {
                              var jsClass = constructor;
                              tmp_3 = getKClass1(jsClass);
                            }
                            tmp_2 = tmp_3;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

        tmp = tmp_2;
        break;
    }
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    return tmp;
  }
  function reset(_this__u8e3s4) {
    _this__u8e3s4.lastIndex = 0;
  }
  function ConstrainedOnceSequence(sequence) {
    this.db_1 = sequence;
  }
  protoOf(ConstrainedOnceSequence).h = function () {
    var tmp0_elvis_lhs = this.db_1;
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$_0('This sequence can be consumed only once.');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var sequence = tmp;
    this.db_1 = null;
    return sequence.h();
  };
  function StringBuilder_init_$Init$(capacity, $this) {
    StringBuilder_init_$Init$_1($this);
    return $this;
  }
  function StringBuilder_init_$Create$(capacity) {
    return StringBuilder_init_$Init$(capacity, objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder_init_$Init$_0(content, $this) {
    StringBuilder.call($this, toString_1(content));
    return $this;
  }
  function StringBuilder_init_$Create$_0(content) {
    return StringBuilder_init_$Init$_0(content, objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder_init_$Init$_1($this) {
    StringBuilder.call($this, '');
    return $this;
  }
  function StringBuilder_init_$Create$_1() {
    return StringBuilder_init_$Init$_1(objectCreate(protoOf(StringBuilder)));
  }
  function StringBuilder(content) {
    this.l1_1 = content;
  }
  protoOf(StringBuilder).a = function () {
    // Inline function 'kotlin.js.asDynamic' call
    return this.l1_1.length;
  };
  protoOf(StringBuilder).b = function (index) {
    // Inline function 'kotlin.text.getOrElse' call
    var this_0 = this.l1_1;
    var tmp;
    if (0 <= index ? index <= (charSequenceLength(this_0) - 1 | 0) : false) {
      tmp = charSequenceGet(this_0, index);
    } else {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', length: ' + this.a() + '}');
    }
    return tmp;
  };
  protoOf(StringBuilder).c = function (startIndex, endIndex) {
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    return this.l1_1.substring(startIndex, endIndex);
  };
  protoOf(StringBuilder).e8 = function (value) {
    this.l1_1 = this.l1_1 + toString(value);
    return this;
  };
  protoOf(StringBuilder).f = function (value) {
    this.l1_1 = this.l1_1 + toString_0(value);
    return this;
  };
  protoOf(StringBuilder).m1 = function () {
    var reversed = '';
    var index = this.l1_1.length - 1 | 0;
    while (index >= 0) {
      var tmp = this.l1_1;
      var _unary__edvuaz = index;
      index = _unary__edvuaz - 1 | 0;
      var low = charSequenceGet(tmp, _unary__edvuaz);
      if (isLowSurrogate(low) && index >= 0) {
        var tmp_0 = this.l1_1;
        var _unary__edvuaz_0 = index;
        index = _unary__edvuaz_0 - 1 | 0;
        var high = charSequenceGet(tmp_0, _unary__edvuaz_0);
        if (isHighSurrogate(high)) {
          reversed = reversed + new Char(high) + toString(low);
        } else {
          reversed = reversed + new Char(low) + toString(high);
        }
      } else {
        reversed = reversed + toString(low);
      }
    }
    this.l1_1 = reversed;
    return this;
  };
  protoOf(StringBuilder).c8 = function (value) {
    this.l1_1 = this.l1_1 + toString_0(value);
    return this;
  };
  protoOf(StringBuilder).eb = function (value) {
    return this.d8(value.toString());
  };
  protoOf(StringBuilder).fb = function (value) {
    return this.d8(value.toString());
  };
  protoOf(StringBuilder).d8 = function (value) {
    var tmp = this;
    var tmp_0 = this.l1_1;
    tmp.l1_1 = tmp_0 + (value == null ? 'null' : value);
    return this;
  };
  protoOf(StringBuilder).gb = function (index, value) {
    Companion_instance_5.k4(index, this.a());
    var tmp = this;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = this.l1_1.substring(0, index) + toString(value);
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.l1_1 = tmp_0 + this.l1_1.substring(index);
    return this;
  };
  protoOf(StringBuilder).toString = function () {
    return this.l1_1;
  };
  protoOf(StringBuilder).hb = function (value, startIndex, endIndex) {
    var stringCsq = toString_1(value);
    Companion_instance_5.ib(startIndex, endIndex, stringCsq.length);
    var tmp = this;
    var tmp_0 = this.l1_1;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.l1_1 = tmp_0 + stringCsq.substring(startIndex, endIndex);
    return this;
  };
  function uppercaseChar(_this__u8e3s4) {
    // Inline function 'kotlin.text.uppercase' call
    // Inline function 'kotlin.js.asDynamic' call
    // Inline function 'kotlin.js.unsafeCast' call
    var uppercase = toString(_this__u8e3s4).toUpperCase();
    return uppercase.length > 1 ? _this__u8e3s4 : charSequenceGet(uppercase, 0);
  }
  function isLowSurrogate(_this__u8e3s4) {
    return _Char___init__impl__6a9atx(56320) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(57343) : false;
  }
  function isHighSurrogate(_this__u8e3s4) {
    return _Char___init__impl__6a9atx(55296) <= _this__u8e3s4 ? _this__u8e3s4 <= _Char___init__impl__6a9atx(56319) : false;
  }
  function isWhitespace(_this__u8e3s4) {
    return isWhitespaceImpl(_this__u8e3s4);
  }
  function toString_2(_this__u8e3s4, radix) {
    return toStringImpl(_this__u8e3s4, checkRadix(radix));
  }
  function checkRadix(radix) {
    if (!(2 <= radix ? radix <= 36 : false)) {
      throw IllegalArgumentException_init_$Create$_0('radix ' + radix + ' was not in valid range 2..36');
    }
    return radix;
  }
  function toLong_0(_this__u8e3s4, radix) {
    var tmp0_elvis_lhs = toLongOrNull(_this__u8e3s4, radix);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toInt(_this__u8e3s4) {
    var tmp0_elvis_lhs = toIntOrNull(_this__u8e3s4);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      numberFormatError(_this__u8e3s4);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  function toString_3(_this__u8e3s4, radix) {
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.toString(checkRadix(radix));
  }
  function digitOf(char, radix) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.text.digitOf.<anonymous>' call
    var it = Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(48)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(57)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(48)) : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(90)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(97)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(122)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(97)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(128)) < 0 ? -1 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65313)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65338)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65313)) + 10 | 0 : Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65345)) >= 0 && Char__compareTo_impl_ypi4mb(char, _Char___init__impl__6a9atx(65370)) <= 0 ? Char__minus_impl_a2frrh(char, _Char___init__impl__6a9atx(65345)) + 10 | 0 : digitToIntImpl(char);
    return it >= radix ? -1 : it;
  }
  function Regex_init_$Init$(pattern, $this) {
    Regex.call($this, pattern, emptySet());
    return $this;
  }
  function Regex_init_$Create$(pattern) {
    return Regex_init_$Init$(pattern, objectCreate(protoOf(Regex)));
  }
  function Companion_4() {
    Companion_instance_4 = this;
    this.jb_1 = new RegExp('[\\\\^$*+?.()|[\\]{}]', 'g');
    this.kb_1 = new RegExp('[\\\\$]', 'g');
    this.lb_1 = new RegExp('\\$', 'g');
  }
  protoOf(Companion_4).mb = function (literal) {
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = this.jb_1;
    // Inline function 'kotlin.js.asDynamic' call
    return literal.replace(pattern, '\\$&');
  };
  protoOf(Companion_4).nb = function (literal) {
    // Inline function 'kotlin.text.nativeReplace' call
    var pattern = this.lb_1;
    // Inline function 'kotlin.js.asDynamic' call
    return literal.replace(pattern, '$$$$');
  };
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function Regex$findAll$lambda(this$0, $input, $startIndex) {
    return function () {
      return this$0.tb($input, $startIndex);
    };
  }
  function Regex$findAll$lambda_0(match) {
    return match.j();
  }
  function Regex(pattern, options) {
    Companion_getInstance_4();
    this.ob_1 = pattern;
    this.pb_1 = toSet_1(options);
    this.qb_1 = new RegExp(pattern, toFlags(options, 'gu'));
    this.rb_1 = null;
    this.sb_1 = null;
  }
  protoOf(Regex).ub = function (input) {
    reset(this.qb_1);
    var match = this.qb_1.exec(toString_1(input));
    return !(match == null) && match.index === 0 && this.qb_1.lastIndex === charSequenceLength(input);
  };
  protoOf(Regex).tb = function (input, startIndex) {
    if (startIndex < 0 || startIndex > charSequenceLength(input)) {
      throw IndexOutOfBoundsException_init_$Create$_0('Start index out of bounds: ' + startIndex + ', input length: ' + charSequenceLength(input));
    }
    return findNext(this.qb_1, toString_1(input), startIndex, this.qb_1);
  };
  protoOf(Regex).vb = function (input, startIndex, $super) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    return $super === VOID ? this.tb(input, startIndex) : $super.tb.call(this, input, startIndex);
  };
  protoOf(Regex).wb = function (input, startIndex) {
    if (startIndex < 0 || startIndex > charSequenceLength(input)) {
      throw IndexOutOfBoundsException_init_$Create$_0('Start index out of bounds: ' + startIndex + ', input length: ' + charSequenceLength(input));
    }
    var tmp = Regex$findAll$lambda(this, input, startIndex);
    return generateSequence_0(tmp, Regex$findAll$lambda_0);
  };
  protoOf(Regex).xb = function (input, startIndex, $super) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    return $super === VOID ? this.wb(input, startIndex) : $super.wb.call(this, input, startIndex);
  };
  protoOf(Regex).yb = function (input, limit) {
    requireNonNegativeLimit(limit);
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.text.Regex.split.<anonymous>' call
    var it = this.xb(input);
    var matches = limit === 0 ? it : take_0(it, limit - 1 | 0);
    // Inline function 'kotlin.collections.mutableListOf' call
    var result = ArrayList_init_$Create$();
    var lastStart = 0;
    var _iterator__ex2g4s = matches.h();
    while (_iterator__ex2g4s.i()) {
      var match = _iterator__ex2g4s.j();
      result.e(toString_1(charSequenceSubSequence(input, lastStart, match.zb().q1())));
      lastStart = match.zb().r1() + 1 | 0;
    }
    result.e(toString_1(charSequenceSubSequence(input, lastStart, charSequenceLength(input))));
    return result;
  };
  protoOf(Regex).toString = function () {
    return this.qb_1.toString();
  };
  function toFlags(_this__u8e3s4, prepend) {
    return joinToString_0(_this__u8e3s4, '', prepend, VOID, VOID, VOID, toFlags$lambda);
  }
  function findNext(_this__u8e3s4, input, from, nextPattern) {
    _this__u8e3s4.lastIndex = from;
    var match = _this__u8e3s4.exec(input);
    if (match == null)
      return null;
    var range = numberRangeToNumber(match.index, _this__u8e3s4.lastIndex - 1 | 0);
    return new findNext$1(range, match, nextPattern, input);
  }
  function MatchGroup(value) {
    this.ac_1 = value;
  }
  protoOf(MatchGroup).toString = function () {
    return 'MatchGroup(value=' + this.ac_1 + ')';
  };
  protoOf(MatchGroup).hashCode = function () {
    return getStringHashCode(this.ac_1);
  };
  protoOf(MatchGroup).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof MatchGroup))
      return false;
    var tmp0_other_with_cast = other instanceof MatchGroup ? other : THROW_CCE();
    if (!(this.ac_1 === tmp0_other_with_cast.ac_1))
      return false;
    return true;
  };
  function toFlags$lambda(it) {
    return it.dc_1;
  }
  function findNext$o$groups$o$iterator$lambda(this$0) {
    return function (it) {
      return this$0.q(it);
    };
  }
  function advanceToNextCharacter($this, index) {
    if (index < get_lastIndex_1($this.mc_1)) {
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      var code1 = $this.mc_1.charCodeAt(index);
      if (55296 <= code1 ? code1 <= 56319 : false) {
        // Inline function 'kotlin.js.asDynamic' call
        // Inline function 'kotlin.js.unsafeCast' call
        var code2 = $this.mc_1.charCodeAt(index + 1 | 0);
        if (56320 <= code2 ? code2 <= 57343 : false) {
          return index + 2 | 0;
        }
      }
    }
    return index + 1 | 0;
  }
  function findNext$1$groups$1($match, this$0) {
    this.ec_1 = $match;
    this.fc_1 = this$0;
    AbstractCollection.call(this);
  }
  protoOf(findNext$1$groups$1).k = function () {
    return this.ec_1.length;
  };
  protoOf(findNext$1$groups$1).h = function () {
    var tmp = asSequence_0(get_indices(this));
    return map(tmp, findNext$o$groups$o$iterator$lambda(this)).h();
  };
  protoOf(findNext$1$groups$1).q = function (index) {
    // Inline function 'kotlin.js.get' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = this.ec_1[index];
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.text.<no name provided>.get.<anonymous>' call
      tmp = new MatchGroup(tmp0_safe_receiver);
    }
    return tmp;
  };
  function findNext$1($range, $match, $nextPattern, $input) {
    this.jc_1 = $range;
    this.kc_1 = $match;
    this.lc_1 = $nextPattern;
    this.mc_1 = $input;
    this.gc_1 = $range;
    var tmp = this;
    tmp.hc_1 = new findNext$1$groups$1($match, this);
    this.ic_1 = null;
  }
  protoOf(findNext$1).zb = function () {
    return this.gc_1;
  };
  protoOf(findNext$1).i2 = function () {
    // Inline function 'kotlin.js.get' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = this.kc_1[0];
    return ensureNotNull(tmp$ret$1);
  };
  protoOf(findNext$1).j = function () {
    return findNext(this.lc_1, this.mc_1, this.jc_1.r() ? advanceToNextCharacter(this, this.jc_1.q1()) : this.jc_1.r1() + 1 | 0, this.lc_1);
  };
  var STRING_CASE_INSENSITIVE_ORDER;
  function compareTo_1(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    _init_properties_stringJs_kt__bg7zye();
    if (ignoreCase) {
      var n1 = _this__u8e3s4.length;
      var n2 = other.length;
      // Inline function 'kotlin.comparisons.minOf' call
      var min = Math.min(n1, n2);
      if (min === 0)
        return n1 - n2 | 0;
      var inductionVariable = 0;
      if (inductionVariable < min)
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          var thisChar = charSequenceGet(_this__u8e3s4, index);
          var otherChar = charSequenceGet(other, index);
          if (!(thisChar === otherChar)) {
            thisChar = uppercaseChar(thisChar);
            otherChar = uppercaseChar(otherChar);
            if (!(thisChar === otherChar)) {
              // Inline function 'kotlin.text.lowercaseChar' call
              // Inline function 'kotlin.text.lowercase' call
              var this_0 = thisChar;
              // Inline function 'kotlin.js.asDynamic' call
              // Inline function 'kotlin.js.unsafeCast' call
              var tmp$ret$3 = toString(this_0).toLowerCase();
              thisChar = charSequenceGet(tmp$ret$3, 0);
              // Inline function 'kotlin.text.lowercaseChar' call
              // Inline function 'kotlin.text.lowercase' call
              var this_1 = otherChar;
              // Inline function 'kotlin.js.asDynamic' call
              // Inline function 'kotlin.js.unsafeCast' call
              var tmp$ret$7 = toString(this_1).toLowerCase();
              otherChar = charSequenceGet(tmp$ret$7, 0);
              if (!(thisChar === otherChar)) {
                return Char__compareTo_impl_ypi4mb(thisChar, otherChar);
              }
            }
          }
        }
         while (inductionVariable < min);
      return n1 - n2 | 0;
    } else {
      return compareTo_0(_this__u8e3s4, other);
    }
  }
  function toCharArray(_this__u8e3s4) {
    _init_properties_stringJs_kt__bg7zye();
    var tmp = 0;
    var tmp_0 = _this__u8e3s4.length;
    var tmp_1 = charArray(tmp_0);
    while (tmp < tmp_0) {
      var tmp_2 = tmp;
      tmp_1[tmp_2] = charSequenceGet(_this__u8e3s4, tmp_2);
      tmp = tmp + 1 | 0;
    }
    return tmp_1;
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.nc_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).oc = function (a, b) {
    return this.nc_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).n3 = function () {
    return this.nc_1;
  };
  protoOf(sam$kotlin_Comparator$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0).hashCode = function () {
    return hashCode(this.n3());
  };
  function STRING_CASE_INSENSITIVE_ORDER$lambda(a, b) {
    _init_properties_stringJs_kt__bg7zye();
    return compareTo_1(a, b, true);
  }
  var properties_initialized_stringJs_kt_nta8o4;
  function _init_properties_stringJs_kt__bg7zye() {
    if (!properties_initialized_stringJs_kt_nta8o4) {
      properties_initialized_stringJs_kt_nta8o4 = true;
      var tmp = STRING_CASE_INSENSITIVE_ORDER$lambda;
      STRING_CASE_INSENSITIVE_ORDER = new sam$kotlin_Comparator$0(tmp);
    }
  }
  function replace(_this__u8e3s4, oldValue, newValue, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp1 = new RegExp(Companion_getInstance_4().mb(oldValue), ignoreCase ? 'gui' : 'gu');
    // Inline function 'kotlin.text.nativeReplace' call
    var replacement = Companion_getInstance_4().nb(newValue);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(tmp1, replacement);
  }
  function startsWith(_this__u8e3s4, prefix, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (!ignoreCase) {
      // Inline function 'kotlin.text.nativeStartsWith' call
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.startsWith(prefix, 0);
    } else
      return regionMatches(_this__u8e3s4, 0, prefix, 0, prefix.length, ignoreCase);
  }
  function replace_0(_this__u8e3s4, oldChar, newChar, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp1 = new RegExp(Companion_getInstance_4().mb(toString(oldChar)), ignoreCase ? 'gui' : 'gu');
    // Inline function 'kotlin.text.nativeReplace' call
    var replacement = toString(newChar);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(tmp1, replacement);
  }
  function replaceFirst(_this__u8e3s4, oldValue, newValue, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp1 = new RegExp(Companion_getInstance_4().mb(oldValue), ignoreCase ? 'ui' : 'u');
    // Inline function 'kotlin.text.nativeReplace' call
    var replacement = Companion_getInstance_4().nb(newValue);
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.replace(tmp1, replacement);
  }
  function regionMatches(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase);
  }
  function stackTraceToString(_this__u8e3s4) {
    return (new ExceptionTraceBuilder()).tc(_this__u8e3s4);
  }
  function hasSeen($this, exception) {
    var tmp0 = $this.qc_1;
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.any' call
      var inductionVariable = 0;
      var last = tmp0.length;
      while (inductionVariable < last) {
        var element = tmp0[inductionVariable];
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.ExceptionTraceBuilder.hasSeen.<anonymous>' call
        if (element === exception) {
          tmp$ret$1 = true;
          break $l$block;
        }
      }
      tmp$ret$1 = false;
    }
    return tmp$ret$1;
  }
  function dumpFullTrace(_this__u8e3s4, $this, indent, qualifier) {
    if (dumpSelfTrace(_this__u8e3s4, $this, indent, qualifier))
      true;
    else
      return Unit_instance;
    var cause = _this__u8e3s4.cause;
    while (!(cause == null)) {
      if (dumpSelfTrace(cause, $this, indent, 'Caused by: '))
        true;
      else
        return Unit_instance;
      cause = cause.cause;
    }
  }
  function dumpSelfTrace(_this__u8e3s4, $this, indent, qualifier) {
    $this.pc_1.d8(indent).d8(qualifier);
    var shortInfo = _this__u8e3s4.toString();
    if (hasSeen($this, _this__u8e3s4)) {
      $this.pc_1.d8('[CIRCULAR REFERENCE, SEE ABOVE: ').d8(shortInfo).d8(']\n');
      return false;
    }
    // Inline function 'kotlin.js.asDynamic' call
    $this.qc_1.push(_this__u8e3s4);
    // Inline function 'kotlin.js.asDynamic' call
    var tmp = _this__u8e3s4.stack;
    var stack = (tmp == null ? true : typeof tmp === 'string') ? tmp : THROW_CCE();
    if (!(stack == null)) {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call
      var it = indexOf_2(stack, shortInfo);
      var stackStart = it < 0 ? 0 : it + shortInfo.length | 0;
      if (stackStart === 0) {
        $this.pc_1.d8(shortInfo).d8('\n');
      }
      // Inline function 'kotlin.text.isEmpty' call
      var this_0 = $this.rc_1;
      if (charSequenceLength(this_0) === 0) {
        $this.rc_1 = stack;
        $this.sc_1 = stackStart;
      } else {
        stack = dropCommonFrames($this, stack, stackStart);
      }
      // Inline function 'kotlin.text.isNotEmpty' call
      if (charSequenceLength(indent) > 0) {
        var tmp_0;
        if (stackStart === 0) {
          tmp_0 = 0;
        } else {
          // Inline function 'kotlin.text.count' call
          var count = 0;
          var inductionVariable = 0;
          while (inductionVariable < charSequenceLength(shortInfo)) {
            var element = charSequenceGet(shortInfo, inductionVariable);
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call
            if (element === _Char___init__impl__6a9atx(10)) {
              count = count + 1 | 0;
            }
          }
          tmp_0 = 1 + count | 0;
        }
        var messageLines = tmp_0;
        // Inline function 'kotlin.sequences.forEachIndexed' call
        var index = 0;
        var _iterator__ex2g4s = lineSequence(stack).h();
        while (_iterator__ex2g4s.i()) {
          var item = _iterator__ex2g4s.j();
          var _unary__edvuaz = index;
          index = _unary__edvuaz + 1 | 0;
          // Inline function 'kotlin.ExceptionTraceBuilder.dumpSelfTrace.<anonymous>' call
          if (checkIndexOverflow(_unary__edvuaz) >= messageLines) {
            $this.pc_1.d8(indent);
          }
          $this.pc_1.d8(item).d8('\n');
        }
      } else {
        $this.pc_1.d8(stack).d8('\n');
      }
    } else {
      $this.pc_1.d8(shortInfo).d8('\n');
    }
    var suppressed = get_suppressedExceptions(_this__u8e3s4);
    // Inline function 'kotlin.collections.isNotEmpty' call
    if (!suppressed.r()) {
      var suppressedIndent = indent + '    ';
      var _iterator__ex2g4s_0 = suppressed.h();
      while (_iterator__ex2g4s_0.i()) {
        var s = _iterator__ex2g4s_0.j();
        dumpFullTrace(s, $this, suppressedIndent, 'Suppressed: ');
      }
    }
    return true;
  }
  function dropCommonFrames($this, stack, stackStart) {
    var commonFrames = 0;
    var lastBreak = 0;
    var preLastBreak = 0;
    var inductionVariable = 0;
    var tmp0 = $this.rc_1.length - $this.sc_1 | 0;
    // Inline function 'kotlin.comparisons.minOf' call
    var b = stack.length - stackStart | 0;
    var last = Math.min(tmp0, b);
    if (inductionVariable < last)
      $l$loop: do {
        var pos = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var c = charSequenceGet(stack, get_lastIndex_1(stack) - pos | 0);
        if (!(c === charSequenceGet($this.rc_1, get_lastIndex_1($this.rc_1) - pos | 0)))
          break $l$loop;
        if (c === _Char___init__impl__6a9atx(10)) {
          commonFrames = commonFrames + 1 | 0;
          preLastBreak = lastBreak;
          lastBreak = pos;
        }
      }
       while (inductionVariable < last);
    if (commonFrames <= 1)
      return stack;
    while (preLastBreak > 0 && charSequenceGet(stack, get_lastIndex_1(stack) - (preLastBreak - 1 | 0) | 0) === _Char___init__impl__6a9atx(32))
      preLastBreak = preLastBreak - 1 | 0;
    return dropLast_0(stack, preLastBreak) + ('... and ' + (commonFrames - 1 | 0) + ' more common stack frames skipped');
  }
  function ExceptionTraceBuilder() {
    this.pc_1 = StringBuilder_init_$Create$_1();
    var tmp = this;
    // Inline function 'kotlin.arrayOf' call
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    tmp.qc_1 = [];
    this.rc_1 = '';
    this.sc_1 = 0;
  }
  protoOf(ExceptionTraceBuilder).tc = function (exception) {
    dumpFullTrace(exception, this, '', '');
    return this.pc_1.toString();
  };
  function get_suppressedExceptions(_this__u8e3s4) {
    // Inline function 'kotlin.js.asDynamic' call
    var tmp0_safe_receiver = _this__u8e3s4._suppressed;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      tmp = tmp0_safe_receiver;
    }
    var tmp1_elvis_lhs = tmp;
    return tmp1_elvis_lhs == null ? emptyList() : tmp1_elvis_lhs;
  }
  var DurationUnit_NANOSECONDS_instance;
  var DurationUnit_MICROSECONDS_instance;
  var DurationUnit_MILLISECONDS_instance;
  var DurationUnit_SECONDS_instance;
  var DurationUnit_MINUTES_instance;
  var DurationUnit_HOURS_instance;
  var DurationUnit_DAYS_instance;
  var DurationUnit_entriesInitialized;
  function DurationUnit_initEntries() {
    if (DurationUnit_entriesInitialized)
      return Unit_instance;
    DurationUnit_entriesInitialized = true;
    DurationUnit_NANOSECONDS_instance = new DurationUnit('NANOSECONDS', 0, 1.0);
    DurationUnit_MICROSECONDS_instance = new DurationUnit('MICROSECONDS', 1, 1000.0);
    DurationUnit_MILLISECONDS_instance = new DurationUnit('MILLISECONDS', 2, 1000000.0);
    DurationUnit_SECONDS_instance = new DurationUnit('SECONDS', 3, 1.0E9);
    DurationUnit_MINUTES_instance = new DurationUnit('MINUTES', 4, 6.0E10);
    DurationUnit_HOURS_instance = new DurationUnit('HOURS', 5, 3.6E12);
    DurationUnit_DAYS_instance = new DurationUnit('DAYS', 6, 8.64E13);
  }
  function DurationUnit(name, ordinal, scale) {
    Enum.call(this, name, ordinal);
    this.wc_1 = scale;
  }
  function convertDurationUnit(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo_0(sourceUnit.wc_1, targetUnit.wc_1);
    return sourceCompareTarget > 0 ? value * (sourceUnit.wc_1 / targetUnit.wc_1) : sourceCompareTarget < 0 ? value / (targetUnit.wc_1 / sourceUnit.wc_1) : value;
  }
  function convertDurationUnit_0(value, sourceUnit, targetUnit) {
    var sourceCompareTarget = compareTo_0(sourceUnit.wc_1, targetUnit.wc_1);
    var tmp;
    if (sourceCompareTarget > 0) {
      var scale = numberToLong(sourceUnit.wc_1 / targetUnit.wc_1);
      var result = value.y2(scale);
      tmp = result.z2(scale).equals(value) ? result : value.d1(new Long(0, 0)) > 0 ? new Long(-1, 2147483647) : new Long(0, -2147483648);
    } else if (sourceCompareTarget < 0) {
      tmp = value.z2(numberToLong(targetUnit.wc_1 / sourceUnit.wc_1));
    } else {
      tmp = value;
    }
    return tmp;
  }
  function DurationUnit_NANOSECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_NANOSECONDS_instance;
  }
  function DurationUnit_MILLISECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MILLISECONDS_instance;
  }
  function DurationUnit_SECONDS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_SECONDS_instance;
  }
  function DurationUnit_MINUTES_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_MINUTES_instance;
  }
  function DurationUnit_HOURS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_HOURS_instance;
  }
  function DurationUnit_DAYS_getInstance() {
    DurationUnit_initEntries();
    return DurationUnit_DAYS_instance;
  }
  function MonotonicTimeSource() {
    MonotonicTimeSource_instance = this;
    var tmp = this;
    // Inline function 'kotlin.run' call
    // Inline function 'kotlin.time.MonotonicTimeSource.actualSource.<anonymous>' call
    var isNode = typeof process !== 'undefined' && process.versions && !!process.versions.node;
    var tmp_0;
    if (isNode) {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$0 = process;
      tmp_0 = new HrTimeSource(tmp$ret$0);
    } else {
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp0_safe_receiver = typeof self !== 'undefined' ? self : globalThis;
      var tmp1_safe_receiver = tmp0_safe_receiver == null ? null : tmp0_safe_receiver.performance;
      var tmp_1;
      if (tmp1_safe_receiver == null) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.time.MonotonicTimeSource.actualSource.<anonymous>.stub_for_inlining' call
        tmp_1 = new PerformanceTimeSource(tmp1_safe_receiver);
      }
      var tmp2_elvis_lhs = tmp_1;
      tmp_0 = tmp2_elvis_lhs == null ? DateNowTimeSource_instance : tmp2_elvis_lhs;
    }
    tmp.xc_1 = tmp_0;
  }
  protoOf(MonotonicTimeSource).yc = function () {
    return this.xc_1.yc();
  };
  protoOf(MonotonicTimeSource).zc = function () {
    return new ValueTimeMark(this.yc());
  };
  protoOf(MonotonicTimeSource).ad = function (timeMark) {
    return this.xc_1.ad(timeMark);
  };
  protoOf(MonotonicTimeSource).bd = function (one, another) {
    return this.xc_1.bd(one, another);
  };
  var MonotonicTimeSource_instance;
  function MonotonicTimeSource_getInstance() {
    if (MonotonicTimeSource_instance == null)
      new MonotonicTimeSource();
    return MonotonicTimeSource_instance;
  }
  function Reading(components) {
    this.cd_1 = components;
  }
  protoOf(Reading).equals = function (other) {
    var tmp;
    if (other instanceof Reading) {
      tmp = contentEquals(this.cd_1, other.cd_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Reading).hashCode = function () {
    return contentHashCode(this.cd_1);
  };
  protoOf(Reading).toString = function () {
    return contentToString(this.cd_1);
  };
  function HrTimeSource(process) {
    this.dd_1 = process;
  }
  protoOf(HrTimeSource).yc = function () {
    return _ValueTimeMark___init__impl__uyfl2m(new Reading(this.dd_1.hrtime()));
  };
  protoOf(HrTimeSource).zc = function () {
    return new ValueTimeMark(this.yc());
  };
  protoOf(HrTimeSource).ad = function (timeMark) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(timeMark);
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.time.HrTimeSource.elapsedFrom.<anonymous>' call
    var destruct = this.dd_1.hrtime((tmp instanceof Reading ? tmp : THROW_CCE()).cd_1);
    // Inline function 'kotlin.collections.component1' call
    var seconds = destruct[0];
    // Inline function 'kotlin.collections.component2' call
    var nanos = destruct[1];
    return Duration__plus_impl_yu9v8f(toDuration(seconds, DurationUnit_SECONDS_getInstance()), toDuration(nanos, DurationUnit_NANOSECONDS_getInstance()));
  };
  protoOf(HrTimeSource).bd = function (one, another) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(one);
    var _destruct__k2r9zo = tmp instanceof Reading ? tmp : THROW_CCE();
    // Inline function 'kotlin.time.Reading.component1' call
    // Inline function 'kotlin.collections.component1' call
    var s1 = _destruct__k2r9zo.cd_1[0];
    // Inline function 'kotlin.time.Reading.component2' call
    // Inline function 'kotlin.collections.component2' call
    var n1 = _destruct__k2r9zo.cd_1[1];
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(another);
    var _destruct__k2r9zo_0 = tmp_0 instanceof Reading ? tmp_0 : THROW_CCE();
    // Inline function 'kotlin.time.Reading.component1' call
    // Inline function 'kotlin.collections.component1' call
    var s2 = _destruct__k2r9zo_0.cd_1[0];
    // Inline function 'kotlin.time.Reading.component2' call
    // Inline function 'kotlin.collections.component2' call
    var n2 = _destruct__k2r9zo_0.cd_1[1];
    return Duration__plus_impl_yu9v8f(s1 === s2 && n1 === n2 ? Companion_getInstance_14().fd_1 : toDuration(s1 - s2, DurationUnit_SECONDS_getInstance()), toDuration(n1 - n2, DurationUnit_NANOSECONDS_getInstance()));
  };
  protoOf(HrTimeSource).toString = function () {
    return 'TimeSource(process.hrtime())';
  };
  function read($this) {
    return $this.id_1.now();
  }
  function PerformanceTimeSource(performance) {
    this.id_1 = performance;
  }
  protoOf(PerformanceTimeSource).yc = function () {
    return _ValueTimeMark___init__impl__uyfl2m(read(this));
  };
  protoOf(PerformanceTimeSource).zc = function () {
    return new ValueTimeMark(this.yc());
  };
  protoOf(PerformanceTimeSource).ad = function (timeMark) {
    Companion_getInstance_14();
    var tmp = read(this);
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(timeMark);
    // Inline function 'kotlin.time.Companion.milliseconds' call
    var this_0 = tmp - (typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE());
    return toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
  };
  protoOf(PerformanceTimeSource).bd = function (one, another) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(one);
    var ms1 = typeof tmp === 'number' ? tmp : THROW_CCE();
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(another);
    var ms2 = typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE();
    var tmp_1;
    if (ms1 === ms2) {
      tmp_1 = Companion_getInstance_14().fd_1;
    } else {
      Companion_getInstance_14();
      // Inline function 'kotlin.time.Companion.milliseconds' call
      var this_0 = ms1 - ms2;
      tmp_1 = toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
    }
    return tmp_1;
  };
  protoOf(PerformanceTimeSource).toString = function () {
    return 'TimeSource(self.performance.now())';
  };
  function read_0($this) {
    return Date.now();
  }
  function DateNowTimeSource() {
  }
  protoOf(DateNowTimeSource).yc = function () {
    return _ValueTimeMark___init__impl__uyfl2m(read_0(this));
  };
  protoOf(DateNowTimeSource).zc = function () {
    return new ValueTimeMark(this.yc());
  };
  protoOf(DateNowTimeSource).ad = function (timeMark) {
    Companion_getInstance_14();
    var tmp = read_0(this);
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(timeMark);
    // Inline function 'kotlin.time.Companion.milliseconds' call
    var this_0 = tmp - (typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE());
    return toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
  };
  protoOf(DateNowTimeSource).bd = function (one, another) {
    var tmp = _ValueTimeMark___get_reading__impl__5qz8rd(one);
    var ms1 = typeof tmp === 'number' ? tmp : THROW_CCE();
    var tmp_0 = _ValueTimeMark___get_reading__impl__5qz8rd(another);
    var ms2 = typeof tmp_0 === 'number' ? tmp_0 : THROW_CCE();
    var tmp_1;
    if (ms1 === ms2) {
      tmp_1 = Companion_getInstance_14().fd_1;
    } else {
      Companion_getInstance_14();
      // Inline function 'kotlin.time.Companion.milliseconds' call
      var this_0 = ms1 - ms2;
      tmp_1 = toDuration(this_0, DurationUnit_MILLISECONDS_getInstance());
    }
    return tmp_1;
  };
  protoOf(DateNowTimeSource).toString = function () {
    return 'TimeSource(Date.now())';
  };
  var DateNowTimeSource_instance;
  function DateNowTimeSource_getInstance() {
    return DateNowTimeSource_instance;
  }
  function AbstractCollection$toString$lambda(this$0) {
    return function (it) {
      return it === this$0 ? '(this Collection)' : toString_0(it);
    };
  }
  function AbstractCollection() {
  }
  protoOf(AbstractCollection).j1 = function (element) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(this, Collection)) {
        tmp = this.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var _iterator__ex2g4s = this.h();
      while (_iterator__ex2g4s.i()) {
        var element_0 = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.AbstractCollection.contains.<anonymous>' call
        if (equals(element_0, element)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractCollection).g2 = function (elements) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(elements, Collection)) {
        tmp = elements.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var _iterator__ex2g4s = elements.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.AbstractCollection.containsAll.<anonymous>' call
        if (!this.j1(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractCollection).r = function () {
    return this.k() === 0;
  };
  protoOf(AbstractCollection).toString = function () {
    return joinToString_0(this, ', ', '[', ']', VOID, VOID, AbstractCollection$toString$lambda(this));
  };
  protoOf(AbstractCollection).toArray = function () {
    return collectionToArray(this);
  };
  function tryToComputeNext($this) {
    $this.jd_1 = 3;
    $this.ld();
    return $this.jd_1 === 1;
  }
  function AbstractIterator() {
    this.jd_1 = 0;
    this.kd_1 = null;
  }
  protoOf(AbstractIterator).i = function () {
    var tmp;
    switch (this.jd_1) {
      case 2:
        tmp = false;
        break;
      case 1:
        tmp = true;
        break;
      case 0:
        tmp = tryToComputeNext(this);
        break;
      default:
        throw IllegalArgumentException_init_$Create$_0('hasNext called when the iterator is in the FAILED state.');
    }
    return tmp;
  };
  protoOf(AbstractIterator).j = function () {
    if (this.jd_1 === 1) {
      this.jd_1 = 0;
      var tmp = this.kd_1;
      return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    }
    if (this.jd_1 === 2 || !tryToComputeNext(this)) {
      throw NoSuchElementException_init_$Create$();
    }
    this.jd_1 = 0;
    var tmp_0 = this.kd_1;
    return (tmp_0 == null ? true : !(tmp_0 == null)) ? tmp_0 : THROW_CCE();
  };
  protoOf(AbstractIterator).md = function (value) {
    this.kd_1 = value;
    this.jd_1 = 1;
  };
  protoOf(AbstractIterator).nd = function () {
    this.jd_1 = 2;
  };
  function SubList_0(list, fromIndex, toIndex) {
    AbstractList.call(this);
    this.od_1 = list;
    this.pd_1 = fromIndex;
    this.qd_1 = 0;
    Companion_instance_5.r3(this.pd_1, toIndex, this.od_1.k());
    this.qd_1 = toIndex - this.pd_1 | 0;
  }
  protoOf(SubList_0).q = function (index) {
    Companion_instance_5.w3(index, this.qd_1);
    return this.od_1.q(this.pd_1 + index | 0);
  };
  protoOf(SubList_0).k = function () {
    return this.qd_1;
  };
  function IteratorImpl_0($outer) {
    this.sd_1 = $outer;
    this.rd_1 = 0;
  }
  protoOf(IteratorImpl_0).i = function () {
    return this.rd_1 < this.sd_1.k();
  };
  protoOf(IteratorImpl_0).j = function () {
    if (!this.i())
      throw NoSuchElementException_init_$Create$();
    var _unary__edvuaz = this.rd_1;
    this.rd_1 = _unary__edvuaz + 1 | 0;
    return this.sd_1.q(_unary__edvuaz);
  };
  function ListIteratorImpl_0($outer, index) {
    this.vd_1 = $outer;
    IteratorImpl_0.call(this, $outer);
    Companion_instance_5.k4(index, this.vd_1.k());
    this.rd_1 = index;
  }
  protoOf(ListIteratorImpl_0).l4 = function () {
    return this.rd_1 > 0;
  };
  protoOf(ListIteratorImpl_0).m4 = function () {
    if (!this.l4())
      throw NoSuchElementException_init_$Create$();
    this.rd_1 = this.rd_1 - 1 | 0;
    return this.vd_1.q(this.rd_1);
  };
  function Companion_5() {
    this.q3_1 = 2147483639;
  }
  protoOf(Companion_5).w3 = function (index, size) {
    if (index < 0 || index >= size) {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);
    }
  };
  protoOf(Companion_5).k4 = function (index, size) {
    if (index < 0 || index > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('index: ' + index + ', size: ' + size);
    }
  };
  protoOf(Companion_5).r3 = function (fromIndex, toIndex, size) {
    if (fromIndex < 0 || toIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex + ', size: ' + size);
    }
    if (fromIndex > toIndex) {
      throw IllegalArgumentException_init_$Create$_0('fromIndex: ' + fromIndex + ' > toIndex: ' + toIndex);
    }
  };
  protoOf(Companion_5).ib = function (startIndex, endIndex, size) {
    if (startIndex < 0 || endIndex > size) {
      throw IndexOutOfBoundsException_init_$Create$_0('startIndex: ' + startIndex + ', endIndex: ' + endIndex + ', size: ' + size);
    }
    if (startIndex > endIndex) {
      throw IllegalArgumentException_init_$Create$_0('startIndex: ' + startIndex + ' > endIndex: ' + endIndex);
    }
  };
  protoOf(Companion_5).d7 = function (oldCapacity, minCapacity) {
    var newCapacity = oldCapacity + (oldCapacity >> 1) | 0;
    if ((newCapacity - minCapacity | 0) < 0)
      newCapacity = minCapacity;
    if ((newCapacity - 2147483639 | 0) > 0)
      newCapacity = minCapacity > 2147483639 ? 2147483647 : 2147483639;
    return newCapacity;
  };
  protoOf(Companion_5).u4 = function (c) {
    var hashCode_0 = 1;
    var _iterator__ex2g4s = c.h();
    while (_iterator__ex2g4s.i()) {
      var e = _iterator__ex2g4s.j();
      var tmp = imul(31, hashCode_0);
      var tmp1_elvis_lhs = e == null ? null : hashCode(e);
      hashCode_0 = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    }
    return hashCode_0;
  };
  protoOf(Companion_5).t4 = function (c, other) {
    if (!(c.k() === other.k()))
      return false;
    var otherIterator = other.h();
    var _iterator__ex2g4s = c.h();
    while (_iterator__ex2g4s.i()) {
      var elem = _iterator__ex2g4s.j();
      var elemOther = otherIterator.j();
      if (!equals(elem, elemOther)) {
        return false;
      }
    }
    return true;
  };
  var Companion_instance_5;
  function Companion_getInstance_5() {
    return Companion_instance_5;
  }
  function AbstractList() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractList).h = function () {
    return new IteratorImpl_0(this);
  };
  protoOf(AbstractList).p = function (index) {
    return new ListIteratorImpl_0(this, index);
  };
  protoOf(AbstractList).f2 = function (fromIndex, toIndex) {
    return new SubList_0(this, fromIndex, toIndex);
  };
  protoOf(AbstractList).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtList) : false))
      return false;
    return Companion_instance_5.t4(this, other);
  };
  protoOf(AbstractList).hashCode = function () {
    return Companion_instance_5.u4(this);
  };
  function AbstractMap$keys$1$iterator$1($entryIterator) {
    this.wd_1 = $entryIterator;
  }
  protoOf(AbstractMap$keys$1$iterator$1).i = function () {
    return this.wd_1.i();
  };
  protoOf(AbstractMap$keys$1$iterator$1).j = function () {
    return this.wd_1.j().h2();
  };
  function AbstractMap$values$1$iterator$1($entryIterator) {
    this.xd_1 = $entryIterator;
  }
  protoOf(AbstractMap$values$1$iterator$1).i = function () {
    return this.xd_1.i();
  };
  protoOf(AbstractMap$values$1$iterator$1).j = function () {
    return this.xd_1.j().i2();
  };
  function toString_4($this, entry) {
    return toString_5($this, entry.h2()) + '=' + toString_5($this, entry.i2());
  }
  function toString_5($this, o) {
    return o === $this ? '(this Map)' : toString_0(o);
  }
  function implFindEntry($this, key) {
    var tmp0 = $this.o2();
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.firstOrNull' call
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.AbstractMap.implFindEntry.<anonymous>' call
        if (equals(element.h2(), key)) {
          tmp$ret$1 = element;
          break $l$block;
        }
      }
      tmp$ret$1 = null;
    }
    return tmp$ret$1;
  }
  function Companion_6() {
  }
  var Companion_instance_6;
  function Companion_getInstance_6() {
    return Companion_instance_6;
  }
  function AbstractMap$keys$1(this$0) {
    this.yd_1 = this$0;
    AbstractSet.call(this);
  }
  protoOf(AbstractMap$keys$1).r5 = function (element) {
    return this.yd_1.j2(element);
  };
  protoOf(AbstractMap$keys$1).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.r5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(AbstractMap$keys$1).h = function () {
    var entryIterator = this.yd_1.o2().h();
    return new AbstractMap$keys$1$iterator$1(entryIterator);
  };
  protoOf(AbstractMap$keys$1).k = function () {
    return this.yd_1.k();
  };
  function AbstractMap$toString$lambda(this$0) {
    return function (it) {
      return toString_4(this$0, it);
    };
  }
  function AbstractMap$values$1(this$0) {
    this.zd_1 = this$0;
    AbstractCollection.call(this);
  }
  protoOf(AbstractMap$values$1).y5 = function (element) {
    return this.zd_1.k2(element);
  };
  protoOf(AbstractMap$values$1).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.y5((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(AbstractMap$values$1).h = function () {
    var entryIterator = this.zd_1.o2().h();
    return new AbstractMap$values$1$iterator$1(entryIterator);
  };
  protoOf(AbstractMap$values$1).k = function () {
    return this.zd_1.k();
  };
  function AbstractMap() {
    this.d5_1 = null;
    this.e5_1 = null;
  }
  protoOf(AbstractMap).j2 = function (key) {
    return !(implFindEntry(this, key) == null);
  };
  protoOf(AbstractMap).k2 = function (value) {
    var tmp0 = this.o2();
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var tmp;
      if (isInterface(tmp0, Collection)) {
        tmp = tmp0.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = false;
        break $l$block_0;
      }
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.AbstractMap.containsValue.<anonymous>' call
        if (equals(element.i2(), value)) {
          tmp$ret$0 = true;
          break $l$block_0;
        }
      }
      tmp$ret$0 = false;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractMap).f5 = function (entry) {
    if (!(!(entry == null) ? isInterface(entry, Entry) : false))
      return false;
    var key = entry.h2();
    var value = entry.i2();
    // Inline function 'kotlin.collections.get' call
    var ourValue = (isInterface(this, KtMap) ? this : THROW_CCE()).l2(key);
    if (!equals(value, ourValue)) {
      return false;
    }
    var tmp;
    if (ourValue == null) {
      // Inline function 'kotlin.collections.containsKey' call
      tmp = !(isInterface(this, KtMap) ? this : THROW_CCE()).j2(key);
    } else {
      tmp = false;
    }
    if (tmp) {
      return false;
    }
    return true;
  };
  protoOf(AbstractMap).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtMap) : false))
      return false;
    if (!(this.k() === other.k()))
      return false;
    var tmp0 = other.o2();
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var tmp;
      if (isInterface(tmp0, Collection)) {
        tmp = tmp0.r();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var _iterator__ex2g4s = tmp0.h();
      while (_iterator__ex2g4s.i()) {
        var element = _iterator__ex2g4s.j();
        // Inline function 'kotlin.collections.AbstractMap.equals.<anonymous>' call
        if (!this.f5(element)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  protoOf(AbstractMap).l2 = function (key) {
    var tmp0_safe_receiver = implFindEntry(this, key);
    return tmp0_safe_receiver == null ? null : tmp0_safe_receiver.i2();
  };
  protoOf(AbstractMap).hashCode = function () {
    return hashCode(this.o2());
  };
  protoOf(AbstractMap).r = function () {
    return this.k() === 0;
  };
  protoOf(AbstractMap).k = function () {
    return this.o2().k();
  };
  protoOf(AbstractMap).m2 = function () {
    if (this.d5_1 == null) {
      var tmp = this;
      tmp.d5_1 = new AbstractMap$keys$1(this);
    }
    return ensureNotNull(this.d5_1);
  };
  protoOf(AbstractMap).toString = function () {
    var tmp = this.o2();
    return joinToString_0(tmp, ', ', '{', '}', VOID, VOID, AbstractMap$toString$lambda(this));
  };
  protoOf(AbstractMap).n2 = function () {
    if (this.e5_1 == null) {
      var tmp = this;
      tmp.e5_1 = new AbstractMap$values$1(this);
    }
    return ensureNotNull(this.e5_1);
  };
  function Companion_7() {
  }
  protoOf(Companion_7).h5 = function (c) {
    var hashCode_0 = 0;
    var _iterator__ex2g4s = c.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      var tmp = hashCode_0;
      var tmp1_elvis_lhs = element == null ? null : hashCode(element);
      hashCode_0 = tmp + (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) | 0;
    }
    return hashCode_0;
  };
  protoOf(Companion_7).g5 = function (c, other) {
    if (!(c.k() === other.k()))
      return false;
    return c.g2(other);
  };
  var Companion_instance_7;
  function Companion_getInstance_7() {
    return Companion_instance_7;
  }
  function AbstractSet() {
    AbstractCollection.call(this);
  }
  protoOf(AbstractSet).equals = function (other) {
    if (other === this)
      return true;
    if (!(!(other == null) ? isInterface(other, KtSet) : false))
      return false;
    return Companion_instance_7.g5(this, other);
  };
  protoOf(AbstractSet).hashCode = function () {
    return Companion_instance_7.h5(this);
  };
  function ArrayDeque_init_$Init$($this) {
    AbstractMutableList.call($this);
    ArrayDeque.call($this);
    $this.ce_1 = Companion_getInstance_8().ee_1;
    return $this;
  }
  function ArrayDeque_init_$Create$() {
    return ArrayDeque_init_$Init$(objectCreate(protoOf(ArrayDeque)));
  }
  function ArrayDeque_init_$Init$_0(elements, $this) {
    AbstractMutableList.call($this);
    ArrayDeque.call($this);
    var tmp = $this;
    // Inline function 'kotlin.collections.toTypedArray' call
    tmp.ce_1 = copyToArray(elements);
    $this.de_1 = $this.ce_1.length;
    // Inline function 'kotlin.collections.isEmpty' call
    if ($this.ce_1.length === 0)
      $this.ce_1 = Companion_getInstance_8().ee_1;
    return $this;
  }
  function ArrayDeque_init_$Create$_0(elements) {
    return ArrayDeque_init_$Init$_0(elements, objectCreate(protoOf(ArrayDeque)));
  }
  function ensureCapacity_0($this, minCapacity) {
    if (minCapacity < 0)
      throw IllegalStateException_init_$Create$_0('Deque is too big.');
    if (minCapacity <= $this.ce_1.length)
      return Unit_instance;
    if ($this.ce_1 === Companion_getInstance_8().ee_1) {
      var tmp = $this;
      // Inline function 'kotlin.arrayOfNulls' call
      var size = coerceAtLeast(minCapacity, 10);
      tmp.ce_1 = fillArrayVal(Array(size), null);
      return Unit_instance;
    }
    var newCapacity = Companion_instance_5.d7($this.ce_1.length, minCapacity);
    copyElements($this, newCapacity);
  }
  function copyElements($this, newCapacity) {
    // Inline function 'kotlin.arrayOfNulls' call
    var newElements = fillArrayVal(Array(newCapacity), null);
    var tmp1 = $this.ce_1;
    var tmp4 = $this.be_1;
    // Inline function 'kotlin.collections.copyInto' call
    var endIndex = $this.ce_1.length;
    arrayCopy(tmp1, newElements, 0, tmp4, endIndex);
    var tmp6 = $this.ce_1;
    var tmp8 = $this.ce_1.length - $this.be_1 | 0;
    // Inline function 'kotlin.collections.copyInto' call
    var endIndex_0 = $this.be_1;
    arrayCopy(tmp6, newElements, tmp8, 0, endIndex_0);
    $this.be_1 = 0;
    $this.ce_1 = newElements;
  }
  function positiveMod($this, index) {
    return index >= $this.ce_1.length ? index - $this.ce_1.length | 0 : index;
  }
  function negativeMod($this, index) {
    return index < 0 ? index + $this.ce_1.length | 0 : index;
  }
  function incremented($this, index) {
    return index === get_lastIndex($this.ce_1) ? 0 : index + 1 | 0;
  }
  function decremented($this, index) {
    return index === 0 ? get_lastIndex($this.ce_1) : index - 1 | 0;
  }
  function copyCollectionElements($this, internalIndex, elements) {
    var iterator = elements.h();
    var inductionVariable = internalIndex;
    var last = $this.ce_1.length;
    if (inductionVariable < last)
      $l$loop: do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!iterator.i())
          break $l$loop;
        $this.ce_1[index] = iterator.j();
      }
       while (inductionVariable < last);
    var inductionVariable_0 = 0;
    var last_0 = $this.be_1;
    if (inductionVariable_0 < last_0)
      $l$loop_0: do {
        var index_0 = inductionVariable_0;
        inductionVariable_0 = inductionVariable_0 + 1 | 0;
        if (!iterator.i())
          break $l$loop_0;
        $this.ce_1[index_0] = iterator.j();
      }
       while (inductionVariable_0 < last_0);
    $this.de_1 = $this.de_1 + elements.k() | 0;
  }
  function registerModification_0($this) {
    $this.e4_1 = $this.e4_1 + 1 | 0;
  }
  function Companion_8() {
    Companion_instance_8 = this;
    var tmp = this;
    // Inline function 'kotlin.emptyArray' call
    tmp.ee_1 = [];
    this.fe_1 = 10;
  }
  var Companion_instance_8;
  function Companion_getInstance_8() {
    if (Companion_instance_8 == null)
      new Companion_8();
    return Companion_instance_8;
  }
  protoOf(ArrayDeque).k = function () {
    return this.de_1;
  };
  protoOf(ArrayDeque).r = function () {
    return this.de_1 === 0;
  };
  protoOf(ArrayDeque).ge = function (element) {
    registerModification_0(this);
    ensureCapacity_0(this, this.de_1 + 1 | 0);
    this.be_1 = decremented(this, this.be_1);
    this.ce_1[this.be_1] = element;
    this.de_1 = this.de_1 + 1 | 0;
  };
  protoOf(ArrayDeque).he = function (element) {
    registerModification_0(this);
    ensureCapacity_0(this, this.de_1 + 1 | 0);
    var tmp = this.ce_1;
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.de_1;
    tmp[positiveMod(this, this.be_1 + index | 0)] = element;
    this.de_1 = this.de_1 + 1 | 0;
  };
  protoOf(ArrayDeque).ie = function () {
    if (this.r())
      throw NoSuchElementException_init_$Create$_0('ArrayDeque is empty.');
    registerModification_0(this);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var internalIndex = this.be_1;
    var tmp = this.ce_1[internalIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.ce_1[this.be_1] = null;
    this.be_1 = incremented(this, this.be_1);
    this.de_1 = this.de_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).je = function () {
    if (this.r())
      throw NoSuchElementException_init_$Create$_0('ArrayDeque is empty.');
    registerModification_0(this);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = get_lastIndex_0(this);
    var internalLastIndex = positiveMod(this, this.be_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.ce_1[internalLastIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.ce_1[internalLastIndex] = null;
    this.de_1 = this.de_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).e = function (element) {
    this.he(element);
    return true;
  };
  protoOf(ArrayDeque).r4 = function (index, element) {
    Companion_instance_5.k4(index, this.de_1);
    if (index === this.de_1) {
      this.he(element);
      return Unit_instance;
    } else if (index === 0) {
      this.ge(element);
      return Unit_instance;
    }
    registerModification_0(this);
    ensureCapacity_0(this, this.de_1 + 1 | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.be_1 + index | 0);
    if (index < (this.de_1 + 1 | 0) >> 1) {
      var decrementedInternalIndex = decremented(this, internalIndex);
      var decrementedHead = decremented(this, this.be_1);
      if (decrementedInternalIndex >= this.be_1) {
        this.ce_1[decrementedHead] = this.ce_1[this.be_1];
        var tmp0 = this.ce_1;
        var tmp1 = this.ce_1;
        var tmp2 = this.be_1;
        var tmp3 = this.be_1 + 1 | 0;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex = decrementedInternalIndex + 1 | 0;
        arrayCopy(tmp0, tmp1, tmp2, tmp3, endIndex);
      } else {
        var tmp5 = this.ce_1;
        var tmp6 = this.ce_1;
        var tmp7 = this.be_1 - 1 | 0;
        var tmp8 = this.be_1;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex_0 = this.ce_1.length;
        arrayCopy(tmp5, tmp6, tmp7, tmp8, endIndex_0);
        this.ce_1[this.ce_1.length - 1 | 0] = this.ce_1[0];
        var tmp10 = this.ce_1;
        var tmp11 = this.ce_1;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex_1 = decrementedInternalIndex + 1 | 0;
        arrayCopy(tmp10, tmp11, 0, 1, endIndex_1);
      }
      this.ce_1[decrementedInternalIndex] = element;
      this.be_1 = decrementedHead;
    } else {
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index_0 = this.de_1;
      var tail = positiveMod(this, this.be_1 + index_0 | 0);
      if (internalIndex < tail) {
        var tmp15 = this.ce_1;
        var tmp16 = this.ce_1;
        // Inline function 'kotlin.collections.copyInto' call
        var destinationOffset = internalIndex + 1 | 0;
        arrayCopy(tmp15, tmp16, destinationOffset, internalIndex, tail);
      } else {
        var tmp20 = this.ce_1;
        // Inline function 'kotlin.collections.copyInto' call
        var destination = this.ce_1;
        arrayCopy(tmp20, destination, 1, 0, tail);
        this.ce_1[0] = this.ce_1[this.ce_1.length - 1 | 0];
        var tmp25 = this.ce_1;
        var tmp26 = this.ce_1;
        var tmp27 = internalIndex + 1 | 0;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex_2 = this.ce_1.length - 1 | 0;
        arrayCopy(tmp25, tmp26, tmp27, internalIndex, endIndex_2);
      }
      this.ce_1[internalIndex] = element;
    }
    this.de_1 = this.de_1 + 1 | 0;
  };
  protoOf(ArrayDeque).o = function (elements) {
    if (elements.r())
      return false;
    registerModification_0(this);
    ensureCapacity_0(this, this.de_1 + elements.k() | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.de_1;
    var tmp$ret$0 = positiveMod(this, this.be_1 + index | 0);
    copyCollectionElements(this, tmp$ret$0, elements);
    return true;
  };
  protoOf(ArrayDeque).q = function (index) {
    Companion_instance_5.w3(index, this.de_1);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var internalIndex = positiveMod(this, this.be_1 + index | 0);
    var tmp = this.ce_1[internalIndex];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(ArrayDeque).x = function (index, element) {
    Companion_instance_5.w3(index, this.de_1);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.be_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.ce_1[internalIndex];
    var oldElement = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.ce_1[internalIndex] = element;
    return oldElement;
  };
  protoOf(ArrayDeque).j1 = function (element) {
    return !(this.s4(element) === -1);
  };
  protoOf(ArrayDeque).s4 = function (element) {
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.de_1;
    var tail = positiveMod(this, this.be_1 + index | 0);
    if (this.be_1 < tail) {
      var inductionVariable = this.be_1;
      if (inductionVariable < tail)
        do {
          var index_0 = inductionVariable;
          inductionVariable = inductionVariable + 1 | 0;
          if (equals(element, this.ce_1[index_0]))
            return index_0 - this.be_1 | 0;
        }
         while (inductionVariable < tail);
    } else if (this.be_1 >= tail) {
      var inductionVariable_0 = this.be_1;
      var last = this.ce_1.length;
      if (inductionVariable_0 < last)
        do {
          var index_1 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + 1 | 0;
          if (equals(element, this.ce_1[index_1]))
            return index_1 - this.be_1 | 0;
        }
         while (inductionVariable_0 < last);
      var inductionVariable_1 = 0;
      if (inductionVariable_1 < tail)
        do {
          var index_2 = inductionVariable_1;
          inductionVariable_1 = inductionVariable_1 + 1 | 0;
          if (equals(element, this.ce_1[index_2]))
            return (index_2 + this.ce_1.length | 0) - this.be_1 | 0;
        }
         while (inductionVariable_1 < tail);
    }
    return -1;
  };
  protoOf(ArrayDeque).f4 = function (index) {
    Companion_instance_5.w3(index, this.de_1);
    if (index === get_lastIndex_0(this)) {
      return this.je();
    } else if (index === 0) {
      return this.ie();
    }
    registerModification_0(this);
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var internalIndex = positiveMod(this, this.be_1 + index | 0);
    // Inline function 'kotlin.collections.ArrayDeque.internalGet' call
    var tmp = this.ce_1[internalIndex];
    var element = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    if (index < this.de_1 >> 1) {
      if (internalIndex >= this.be_1) {
        var tmp0 = this.ce_1;
        var tmp1 = this.ce_1;
        var tmp2 = this.be_1 + 1 | 0;
        // Inline function 'kotlin.collections.copyInto' call
        var startIndex = this.be_1;
        arrayCopy(tmp0, tmp1, tmp2, startIndex, internalIndex);
      } else {
        var tmp5 = this.ce_1;
        // Inline function 'kotlin.collections.copyInto' call
        var destination = this.ce_1;
        arrayCopy(tmp5, destination, 1, 0, internalIndex);
        this.ce_1[0] = this.ce_1[this.ce_1.length - 1 | 0];
        var tmp10 = this.ce_1;
        var tmp11 = this.ce_1;
        var tmp12 = this.be_1 + 1 | 0;
        var tmp13 = this.be_1;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex = this.ce_1.length - 1 | 0;
        arrayCopy(tmp10, tmp11, tmp12, tmp13, endIndex);
      }
      this.ce_1[this.be_1] = null;
      this.be_1 = incremented(this, this.be_1);
    } else {
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index_0 = get_lastIndex_0(this);
      var internalLastIndex = positiveMod(this, this.be_1 + index_0 | 0);
      if (internalIndex <= internalLastIndex) {
        var tmp15 = this.ce_1;
        var tmp16 = this.ce_1;
        var tmp18 = internalIndex + 1 | 0;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex_0 = internalLastIndex + 1 | 0;
        arrayCopy(tmp15, tmp16, internalIndex, tmp18, endIndex_0);
      } else {
        var tmp20 = this.ce_1;
        var tmp21 = this.ce_1;
        var tmp23 = internalIndex + 1 | 0;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex_1 = this.ce_1.length;
        arrayCopy(tmp20, tmp21, internalIndex, tmp23, endIndex_1);
        this.ce_1[this.ce_1.length - 1 | 0] = this.ce_1[0];
        var tmp25 = this.ce_1;
        var tmp26 = this.ce_1;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex_2 = internalLastIndex + 1 | 0;
        arrayCopy(tmp25, tmp26, 0, 1, endIndex_2);
      }
      this.ce_1[internalLastIndex] = null;
    }
    this.de_1 = this.de_1 - 1 | 0;
    return element;
  };
  protoOf(ArrayDeque).a4 = function (elements) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.collections.ArrayDeque.filterInPlace' call
      var tmp;
      if (this.r()) {
        tmp = true;
      } else {
        // Inline function 'kotlin.collections.isEmpty' call
        tmp = this.ce_1.length === 0;
      }
      if (tmp) {
        tmp$ret$1 = false;
        break $l$block;
      }
      // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
      var index = this.de_1;
      var tail = positiveMod(this, this.be_1 + index | 0);
      var newTail = this.be_1;
      var modified = false;
      if (this.be_1 < tail) {
        var inductionVariable = this.be_1;
        if (inductionVariable < tail)
          do {
            var index_0 = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            var element = this.ce_1[index_0];
            // Inline function 'kotlin.collections.ArrayDeque.retainAll.<anonymous>' call
            var it = (element == null ? true : !(element == null)) ? element : THROW_CCE();
            if (elements.j1(it)) {
              var tmp_0 = this.ce_1;
              var _unary__edvuaz = newTail;
              newTail = _unary__edvuaz + 1 | 0;
              tmp_0[_unary__edvuaz] = element;
            } else {
              modified = true;
            }
          }
           while (inductionVariable < tail);
        fill(this.ce_1, null, newTail, tail);
      } else {
        var inductionVariable_0 = this.be_1;
        var last = this.ce_1.length;
        if (inductionVariable_0 < last)
          do {
            var index_1 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            var element_0 = this.ce_1[index_1];
            this.ce_1[index_1] = null;
            // Inline function 'kotlin.collections.ArrayDeque.retainAll.<anonymous>' call
            var it_0 = (element_0 == null ? true : !(element_0 == null)) ? element_0 : THROW_CCE();
            if (elements.j1(it_0)) {
              var tmp_1 = this.ce_1;
              var _unary__edvuaz_0 = newTail;
              newTail = _unary__edvuaz_0 + 1 | 0;
              tmp_1[_unary__edvuaz_0] = element_0;
            } else {
              modified = true;
            }
          }
           while (inductionVariable_0 < last);
        newTail = positiveMod(this, newTail);
        var inductionVariable_1 = 0;
        if (inductionVariable_1 < tail)
          do {
            var index_2 = inductionVariable_1;
            inductionVariable_1 = inductionVariable_1 + 1 | 0;
            var element_1 = this.ce_1[index_2];
            this.ce_1[index_2] = null;
            // Inline function 'kotlin.collections.ArrayDeque.retainAll.<anonymous>' call
            var it_1 = (element_1 == null ? true : !(element_1 == null)) ? element_1 : THROW_CCE();
            if (elements.j1(it_1)) {
              this.ce_1[newTail] = element_1;
              newTail = incremented(this, newTail);
            } else {
              modified = true;
            }
          }
           while (inductionVariable_1 < tail);
      }
      if (modified) {
        registerModification_0(this);
        this.de_1 = negativeMod(this, newTail - this.be_1 | 0);
      }
      tmp$ret$1 = modified;
    }
    return tmp$ret$1;
  };
  protoOf(ArrayDeque).ke = function (array) {
    var tmp = array.length >= this.de_1 ? array : arrayOfNulls(array, this.de_1);
    var dest = isArray(tmp) ? tmp : THROW_CCE();
    // Inline function 'kotlin.collections.ArrayDeque.internalIndex' call
    var index = this.de_1;
    var tail = positiveMod(this, this.be_1 + index | 0);
    if (this.be_1 < tail) {
      var tmp0 = this.ce_1;
      // Inline function 'kotlin.collections.copyInto' call
      var startIndex = this.be_1;
      arrayCopy(tmp0, dest, 0, startIndex, tail);
    } else {
      // Inline function 'kotlin.collections.isNotEmpty' call
      if (!this.r()) {
        var tmp6 = this.ce_1;
        var tmp9 = this.be_1;
        // Inline function 'kotlin.collections.copyInto' call
        var endIndex = this.ce_1.length;
        arrayCopy(tmp6, dest, 0, tmp9, endIndex);
        var tmp11 = this.ce_1;
        // Inline function 'kotlin.collections.copyInto' call
        var destinationOffset = this.ce_1.length - this.be_1 | 0;
        arrayCopy(tmp11, dest, destinationOffset, 0, tail);
      }
    }
    var tmp_0 = terminateCollectionToArray(this.de_1, dest);
    return isArray(tmp_0) ? tmp_0 : THROW_CCE();
  };
  protoOf(ArrayDeque).k5 = function () {
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.de_1;
    var tmp$ret$0 = fillArrayVal(Array(size), null);
    return this.ke(tmp$ret$0);
  };
  protoOf(ArrayDeque).toArray = function () {
    return this.k5();
  };
  function ArrayDeque() {
    Companion_getInstance_8();
    this.be_1 = 0;
    this.de_1 = 0;
  }
  function collectionToArrayCommonImpl(collection) {
    if (collection.r()) {
      // Inline function 'kotlin.emptyArray' call
      return [];
    }
    // Inline function 'kotlin.arrayOfNulls' call
    var size = collection.k();
    var destination = fillArrayVal(Array(size), null);
    var iterator = collection.h();
    var index = 0;
    while (iterator.i()) {
      var _unary__edvuaz = index;
      index = _unary__edvuaz + 1 | 0;
      destination[_unary__edvuaz] = iterator.j();
    }
    return destination;
  }
  function emptyList() {
    return EmptyList_getInstance();
  }
  function listOf_0(elements) {
    return elements.length > 0 ? asList(elements) : emptyList();
  }
  function get_indices(_this__u8e3s4) {
    return numberRangeToNumber(0, _this__u8e3s4.k() - 1 | 0);
  }
  function get_lastIndex_0(_this__u8e3s4) {
    return _this__u8e3s4.k() - 1 | 0;
  }
  function binarySearch(_this__u8e3s4, fromIndex, toIndex, comparison) {
    fromIndex = fromIndex === VOID ? 0 : fromIndex;
    toIndex = toIndex === VOID ? _this__u8e3s4.k() : toIndex;
    rangeCheck_0(_this__u8e3s4.k(), fromIndex, toIndex);
    var low = fromIndex;
    var high = toIndex - 1 | 0;
    while (low <= high) {
      var mid = (low + high | 0) >>> 1 | 0;
      var midVal = _this__u8e3s4.q(mid);
      var cmp = comparison(midVal);
      if (cmp < 0)
        low = mid + 1 | 0;
      else if (cmp > 0)
        high = mid - 1 | 0;
      else
        return mid;
    }
    return -(low + 1 | 0) | 0;
  }
  function EmptyList() {
    EmptyList_instance = this;
    this.le_1 = new Long(-1478467534, -1720727600);
  }
  protoOf(EmptyList).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, KtList) : false) {
      tmp = other.r();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptyList).hashCode = function () {
    return 1;
  };
  protoOf(EmptyList).toString = function () {
    return '[]';
  };
  protoOf(EmptyList).k = function () {
    return 0;
  };
  protoOf(EmptyList).r = function () {
    return true;
  };
  protoOf(EmptyList).me = function (element) {
    return false;
  };
  protoOf(EmptyList).j1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.me(tmp);
  };
  protoOf(EmptyList).q = function (index) {
    throw IndexOutOfBoundsException_init_$Create$_0("Empty list doesn't contain element at index " + index + '.');
  };
  protoOf(EmptyList).h = function () {
    return EmptyIterator_instance;
  };
  protoOf(EmptyList).p = function (index) {
    if (!(index === 0))
      throw IndexOutOfBoundsException_init_$Create$_0('Index: ' + index);
    return EmptyIterator_instance;
  };
  protoOf(EmptyList).f2 = function (fromIndex, toIndex) {
    if (fromIndex === 0 && toIndex === 0)
      return this;
    throw IndexOutOfBoundsException_init_$Create$_0('fromIndex: ' + fromIndex + ', toIndex: ' + toIndex);
  };
  var EmptyList_instance;
  function EmptyList_getInstance() {
    if (EmptyList_instance == null)
      new EmptyList();
    return EmptyList_instance;
  }
  function rangeCheck_0(size, fromIndex, toIndex) {
    if (fromIndex > toIndex)
      throw IllegalArgumentException_init_$Create$_0('fromIndex (' + fromIndex + ') is greater than toIndex (' + toIndex + ').');
    else if (fromIndex < 0)
      throw IndexOutOfBoundsException_init_$Create$_0('fromIndex (' + fromIndex + ') is less than zero.');
    else if (toIndex > size)
      throw IndexOutOfBoundsException_init_$Create$_0('toIndex (' + toIndex + ') is greater than size (' + size + ').');
  }
  function EmptyIterator() {
  }
  protoOf(EmptyIterator).i = function () {
    return false;
  };
  protoOf(EmptyIterator).l4 = function () {
    return false;
  };
  protoOf(EmptyIterator).j = function () {
    throw NoSuchElementException_init_$Create$();
  };
  protoOf(EmptyIterator).m4 = function () {
    throw NoSuchElementException_init_$Create$();
  };
  var EmptyIterator_instance;
  function EmptyIterator_getInstance() {
    return EmptyIterator_instance;
  }
  function optimizeReadOnlyList(_this__u8e3s4) {
    switch (_this__u8e3s4.k()) {
      case 0:
        return emptyList();
      case 1:
        return listOf(_this__u8e3s4.q(0));
      default:
        return _this__u8e3s4;
    }
  }
  function arrayListOf(elements) {
    return elements.length === 0 ? ArrayList_init_$Create$() : ArrayList_init_$Create$_1(new ArrayAsCollection(elements, true));
  }
  function throwIndexOverflow() {
    throw ArithmeticException_init_$Create$_0('Index overflow has happened.');
  }
  function asCollection(_this__u8e3s4) {
    return new ArrayAsCollection(_this__u8e3s4, false);
  }
  function ArrayAsCollection(values, isVarargs) {
    this.ne_1 = values;
    this.oe_1 = isVarargs;
  }
  protoOf(ArrayAsCollection).k = function () {
    return this.ne_1.length;
  };
  protoOf(ArrayAsCollection).r = function () {
    // Inline function 'kotlin.collections.isEmpty' call
    return this.ne_1.length === 0;
  };
  protoOf(ArrayAsCollection).pe = function (element) {
    return contains_1(this.ne_1, element);
  };
  protoOf(ArrayAsCollection).j1 = function (element) {
    if (!(element == null ? true : !(element == null)))
      return false;
    return this.pe((element == null ? true : !(element == null)) ? element : THROW_CCE());
  };
  protoOf(ArrayAsCollection).h = function () {
    return arrayIterator(this.ne_1);
  };
  function throwCountOverflow() {
    throw ArithmeticException_init_$Create$_0('Count overflow has happened.');
  }
  function IndexedValue(index, value) {
    this.h1_1 = index;
    this.i1_1 = value;
  }
  protoOf(IndexedValue).toString = function () {
    return 'IndexedValue(index=' + this.h1_1 + ', value=' + toString_0(this.i1_1) + ')';
  };
  protoOf(IndexedValue).hashCode = function () {
    var result = this.h1_1;
    result = imul(result, 31) + (this.i1_1 == null ? 0 : hashCode(this.i1_1)) | 0;
    return result;
  };
  protoOf(IndexedValue).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof IndexedValue))
      return false;
    var tmp0_other_with_cast = other instanceof IndexedValue ? other : THROW_CCE();
    if (!(this.h1_1 === tmp0_other_with_cast.h1_1))
      return false;
    if (!equals(this.i1_1, tmp0_other_with_cast.i1_1))
      return false;
    return true;
  };
  function flatten(_this__u8e3s4) {
    var result = ArrayList_init_$Create$();
    var _iterator__ex2g4s = _this__u8e3s4.h();
    while (_iterator__ex2g4s.i()) {
      var element = _iterator__ex2g4s.j();
      addAll(result, element);
    }
    return result;
  }
  function collectionSizeOrDefault(_this__u8e3s4, default_0) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.k();
    } else {
      tmp = default_0;
    }
    return tmp;
  }
  function IndexingIterable(iteratorFactory) {
    this.qe_1 = iteratorFactory;
  }
  protoOf(IndexingIterable).h = function () {
    return new IndexingIterator(this.qe_1());
  };
  function collectionSizeOrNull(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4.k();
    } else {
      tmp = null;
    }
    return tmp;
  }
  function IndexingIterator(iterator) {
    this.re_1 = iterator;
    this.se_1 = 0;
  }
  protoOf(IndexingIterator).i = function () {
    return this.re_1.i();
  };
  protoOf(IndexingIterator).j = function () {
    var _unary__edvuaz = this.se_1;
    this.se_1 = _unary__edvuaz + 1 | 0;
    return new IndexedValue(checkIndexOverflow(_unary__edvuaz), this.re_1.j());
  };
  function emptyMap() {
    var tmp = EmptyMap_getInstance();
    return isInterface(tmp, KtMap) ? tmp : THROW_CCE();
  }
  function mapOf_0(pairs) {
    return pairs.length > 0 ? toMap_0(pairs, LinkedHashMap_init_$Create$_0(mapCapacity(pairs.length))) : emptyMap();
  }
  function toMap(_this__u8e3s4) {
    if (isInterface(_this__u8e3s4, Collection)) {
      var tmp;
      switch (_this__u8e3s4.k()) {
        case 0:
          tmp = emptyMap();
          break;
        case 1:
          var tmp_0;
          if (isInterface(_this__u8e3s4, KtList)) {
            tmp_0 = _this__u8e3s4.q(0);
          } else {
            tmp_0 = _this__u8e3s4.h().j();
          }

          tmp = mapOf(tmp_0);
          break;
        default:
          tmp = toMap_1(_this__u8e3s4, LinkedHashMap_init_$Create$_0(mapCapacity(_this__u8e3s4.k())));
          break;
      }
      return tmp;
    }
    return optimizeReadOnlyMap(toMap_1(_this__u8e3s4, LinkedHashMap_init_$Create$()));
  }
  function toMutableMap(_this__u8e3s4) {
    return LinkedHashMap_init_$Create$_2(_this__u8e3s4);
  }
  function plus_6(_this__u8e3s4, map) {
    // Inline function 'kotlin.apply' call
    var this_0 = LinkedHashMap_init_$Create$_2(_this__u8e3s4);
    // Inline function 'kotlin.collections.plus.<anonymous>' call
    this_0.s5(map);
    return this_0;
  }
  function EmptyMap() {
    EmptyMap_instance = this;
    this.te_1 = new Long(-888910638, 1920087921);
  }
  protoOf(EmptyMap).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, KtMap) : false) {
      tmp = other.r();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptyMap).hashCode = function () {
    return 0;
  };
  protoOf(EmptyMap).toString = function () {
    return '{}';
  };
  protoOf(EmptyMap).k = function () {
    return 0;
  };
  protoOf(EmptyMap).r = function () {
    return true;
  };
  protoOf(EmptyMap).ue = function (key) {
    return false;
  };
  protoOf(EmptyMap).j2 = function (key) {
    if (!(key == null ? true : !(key == null)))
      return false;
    return this.ue((key == null ? true : !(key == null)) ? key : THROW_CCE());
  };
  protoOf(EmptyMap).ve = function (key) {
    return null;
  };
  protoOf(EmptyMap).l2 = function (key) {
    if (!(key == null ? true : !(key == null)))
      return null;
    return this.ve((key == null ? true : !(key == null)) ? key : THROW_CCE());
  };
  protoOf(EmptyMap).o2 = function () {
    return EmptySet_getInstance();
  };
  protoOf(EmptyMap).m2 = function () {
    return EmptySet_getInstance();
  };
  protoOf(EmptyMap).n2 = function () {
    return EmptyList_getInstance();
  };
  var EmptyMap_instance;
  function EmptyMap_getInstance() {
    if (EmptyMap_instance == null)
      new EmptyMap();
    return EmptyMap_instance;
  }
  function toMap_0(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll(destination, _this__u8e3s4);
    return destination;
  }
  function toMap_1(_this__u8e3s4, destination) {
    // Inline function 'kotlin.apply' call
    // Inline function 'kotlin.collections.toMap.<anonymous>' call
    putAll_0(destination, _this__u8e3s4);
    return destination;
  }
  function optimizeReadOnlyMap(_this__u8e3s4) {
    var tmp;
    switch (_this__u8e3s4.k()) {
      case 0:
        tmp = emptyMap();
        break;
      case 1:
        // Inline function 'kotlin.collections.toSingletonMapOrSelf' call

        tmp = _this__u8e3s4;
        break;
      default:
        tmp = _this__u8e3s4;
        break;
    }
    return tmp;
  }
  function putAll(_this__u8e3s4, pairs) {
    var inductionVariable = 0;
    var last = pairs.length;
    while (inductionVariable < last) {
      var _destruct__k2r9zo = pairs[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var key = _destruct__k2r9zo.ye();
      var value = _destruct__k2r9zo.ze();
      _this__u8e3s4.b5(key, value);
    }
  }
  function putAll_0(_this__u8e3s4, pairs) {
    var _iterator__ex2g4s = pairs.h();
    while (_iterator__ex2g4s.i()) {
      var _destruct__k2r9zo = _iterator__ex2g4s.j();
      var key = _destruct__k2r9zo.ye();
      var value = _destruct__k2r9zo.ze();
      _this__u8e3s4.b5(key, value);
    }
  }
  function hashMapOf(pairs) {
    // Inline function 'kotlin.apply' call
    var this_0 = HashMap_init_$Create$_0(mapCapacity(pairs.length));
    // Inline function 'kotlin.collections.hashMapOf.<anonymous>' call
    putAll(this_0, pairs);
    return this_0;
  }
  function retainAll(_this__u8e3s4, predicate) {
    return filterInPlace(_this__u8e3s4, predicate, false);
  }
  function removeAll(_this__u8e3s4, predicate) {
    return filterInPlace_0(_this__u8e3s4, predicate, true);
  }
  function removeLast(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4.r()) {
      throw NoSuchElementException_init_$Create$_0('List is empty.');
    } else {
      tmp = _this__u8e3s4.f4(get_lastIndex_0(_this__u8e3s4));
    }
    return tmp;
  }
  function addAll(_this__u8e3s4, elements) {
    if (isInterface(elements, Collection))
      return _this__u8e3s4.o(elements);
    else {
      var result = false;
      var _iterator__ex2g4s = elements.h();
      while (_iterator__ex2g4s.i()) {
        var item = _iterator__ex2g4s.j();
        if (_this__u8e3s4.e(item))
          result = true;
      }
      return result;
    }
  }
  function filterInPlace(_this__u8e3s4, predicate, predicateResultToRemove) {
    var result = false;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.collections.filterInPlace.<anonymous>' call
    var $this$with = _this__u8e3s4.h();
    while ($this$with.i())
      if (predicate($this$with.j()) === predicateResultToRemove) {
        $this$with.z3();
        result = true;
      }
    return result;
  }
  function filterInPlace_0(_this__u8e3s4, predicate, predicateResultToRemove) {
    if (!isInterface(_this__u8e3s4, RandomAccess)) {
      return filterInPlace(isInterface(_this__u8e3s4, MutableIterable) ? _this__u8e3s4 : THROW_CCE(), predicate, predicateResultToRemove);
    }
    var writeIndex = 0;
    var inductionVariable = 0;
    var last = get_lastIndex_0(_this__u8e3s4);
    if (inductionVariable <= last)
      $l$loop: do {
        var readIndex = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var element = _this__u8e3s4.q(readIndex);
        if (predicate(element) === predicateResultToRemove)
          continue $l$loop;
        if (!(writeIndex === readIndex)) {
          _this__u8e3s4.x(writeIndex, element);
        }
        writeIndex = writeIndex + 1 | 0;
      }
       while (!(readIndex === last));
    if (writeIndex < _this__u8e3s4.k()) {
      var inductionVariable_0 = get_lastIndex_0(_this__u8e3s4);
      var last_0 = writeIndex;
      if (last_0 <= inductionVariable_0)
        do {
          var removeIndex = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + -1 | 0;
          _this__u8e3s4.f4(removeIndex);
        }
         while (!(removeIndex === last_0));
      return true;
    } else {
      return false;
    }
  }
  function addAll_0(_this__u8e3s4, elements) {
    return _this__u8e3s4.o(asList(elements));
  }
  function retainAll_0(_this__u8e3s4, elements) {
    return _this__u8e3s4.a4(convertToListIfNotCollection(elements));
  }
  function addAll_1(_this__u8e3s4, elements) {
    var result = false;
    var _iterator__ex2g4s = elements.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      if (_this__u8e3s4.e(item))
        result = true;
    }
    return result;
  }
  function convertToListIfNotCollection(_this__u8e3s4) {
    var tmp;
    if (isInterface(_this__u8e3s4, Collection)) {
      tmp = _this__u8e3s4;
    } else {
      tmp = toList_0(_this__u8e3s4);
    }
    return tmp;
  }
  function removeAll_0(_this__u8e3s4, predicate) {
    return filterInPlace(_this__u8e3s4, predicate, true);
  }
  function IntIterator() {
  }
  protoOf(IntIterator).j = function () {
    return this.af();
  };
  function CharIterator() {
  }
  protoOf(CharIterator).bf = function () {
    return this.cf();
  };
  protoOf(CharIterator).j = function () {
    return new Char(this.bf());
  };
  function asReversed(_this__u8e3s4) {
    return new ReversedListReadOnly(_this__u8e3s4);
  }
  function ReversedListReadOnly$listIterator$1(this$0, $index) {
    this.ef_1 = this$0;
    this.df_1 = this$0.ff_1.p(reversePositionIndex(this$0, $index));
  }
  protoOf(ReversedListReadOnly$listIterator$1).i = function () {
    return this.df_1.l4();
  };
  protoOf(ReversedListReadOnly$listIterator$1).l4 = function () {
    return this.df_1.i();
  };
  protoOf(ReversedListReadOnly$listIterator$1).j = function () {
    return this.df_1.m4();
  };
  protoOf(ReversedListReadOnly$listIterator$1).m4 = function () {
    return this.df_1.j();
  };
  function ReversedListReadOnly(delegate) {
    AbstractList.call(this);
    this.ff_1 = delegate;
  }
  protoOf(ReversedListReadOnly).k = function () {
    return this.ff_1.k();
  };
  protoOf(ReversedListReadOnly).q = function (index) {
    return this.ff_1.q(reverseElementIndex(this, index));
  };
  protoOf(ReversedListReadOnly).h = function () {
    return this.p(0);
  };
  protoOf(ReversedListReadOnly).p = function (index) {
    return new ReversedListReadOnly$listIterator$1(this, index);
  };
  function reverseElementIndex(_this__u8e3s4, index) {
    var tmp;
    if (0 <= index ? index <= get_lastIndex_0(_this__u8e3s4) : false) {
      tmp = get_lastIndex_0(_this__u8e3s4) - index | 0;
    } else {
      throw IndexOutOfBoundsException_init_$Create$_0('Element index ' + index + ' must be in range [' + numberRangeToNumber(0, get_lastIndex_0(_this__u8e3s4)).toString() + '].');
    }
    return tmp;
  }
  function reversePositionIndex(_this__u8e3s4, index) {
    var tmp;
    if (0 <= index ? index <= _this__u8e3s4.k() : false) {
      tmp = _this__u8e3s4.k() - index | 0;
    } else {
      throw IndexOutOfBoundsException_init_$Create$_0('Position index ' + index + ' must be in range [' + numberRangeToNumber(0, _this__u8e3s4.k()).toString() + '].');
    }
    return tmp;
  }
  function Sequence() {
  }
  function sequence(block) {
    // Inline function 'kotlin.sequences.Sequence' call
    return new sequence$$inlined$Sequence$1(block);
  }
  function SequenceScope() {
  }
  protoOf(SequenceScope).if = function (sequence, $completion) {
    return this.hf(sequence.h(), $completion);
  };
  function iterator(block) {
    var iterator = new SequenceBuilderIterator();
    iterator.mf_1 = createCoroutineUnintercepted(block, iterator, iterator);
    return iterator;
  }
  function nextNotReady($this) {
    if (!$this.i())
      throw NoSuchElementException_init_$Create$();
    else
      return $this.j();
  }
  function exceptionalState($this) {
    switch ($this.jf_1) {
      case 4:
        return NoSuchElementException_init_$Create$();
      case 5:
        return IllegalStateException_init_$Create$_0('Iterator has failed.');
      default:
        return IllegalStateException_init_$Create$_0('Unexpected state of the iterator: ' + $this.jf_1);
    }
  }
  function SequenceBuilderIterator() {
    SequenceScope.call(this);
    this.jf_1 = 0;
    this.kf_1 = null;
    this.lf_1 = null;
    this.mf_1 = null;
  }
  protoOf(SequenceBuilderIterator).i = function () {
    while (true) {
      switch (this.jf_1) {
        case 0:
          break;
        case 1:
          if (ensureNotNull(this.lf_1).i()) {
            this.jf_1 = 2;
            return true;
          } else {
            this.lf_1 = null;
          }

          break;
        case 4:
          return false;
        case 3:
        case 2:
          return true;
        default:
          throw exceptionalState(this);
      }
      this.jf_1 = 5;
      var step = ensureNotNull(this.mf_1);
      this.mf_1 = null;
      // Inline function 'kotlin.coroutines.resume' call
      // Inline function 'kotlin.Companion.success' call
      var tmp$ret$0 = _Result___init__impl__xyqfz8(Unit_instance);
      step.h9(tmp$ret$0);
    }
  };
  protoOf(SequenceBuilderIterator).j = function () {
    switch (this.jf_1) {
      case 0:
      case 1:
        return nextNotReady(this);
      case 2:
        this.jf_1 = 1;
        return ensureNotNull(this.lf_1).j();
      case 3:
        this.jf_1 = 0;
        var tmp = this.kf_1;
        var result = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
        this.kf_1 = null;
        return result;
      default:
        throw exceptionalState(this);
    }
  };
  protoOf(SequenceBuilderIterator).gf = function (value, $completion) {
    this.kf_1 = value;
    this.jf_1 = 3;
    // Inline function 'kotlin.sequences.SequenceBuilderIterator.yield.<anonymous>' call
    this.mf_1 = $completion;
    return get_COROUTINE_SUSPENDED();
  };
  protoOf(SequenceBuilderIterator).hf = function (iterator, $completion) {
    if (!iterator.i())
      return Unit_instance;
    this.lf_1 = iterator;
    this.jf_1 = 2;
    // Inline function 'kotlin.sequences.SequenceBuilderIterator.yieldAll.<anonymous>' call
    this.mf_1 = $completion;
    return get_COROUTINE_SUSPENDED();
  };
  protoOf(SequenceBuilderIterator).nf = function (result) {
    // Inline function 'kotlin.getOrThrow' call
    throwOnFailure(result);
    var tmp = _Result___get_value__impl__bjfvqg(result);
    if (!(tmp == null ? true : !(tmp == null)))
      THROW_CCE();
    this.jf_1 = 4;
  };
  protoOf(SequenceBuilderIterator).h9 = function (result) {
    return this.nf(result);
  };
  protoOf(SequenceBuilderIterator).c9 = function () {
    return EmptyCoroutineContext_getInstance();
  };
  function sequence$$inlined$Sequence$1($block) {
    this.of_1 = $block;
  }
  protoOf(sequence$$inlined$Sequence$1).h = function () {
    // Inline function 'kotlin.sequences.sequence.<anonymous>' call
    return iterator(this.of_1);
  };
  function generateSequence(nextFunction) {
    return constrainOnce(new GeneratorSequence(nextFunction, generateSequence$lambda(nextFunction)));
  }
  function sequenceOf(elements) {
    return asSequence(elements);
  }
  function calcNext($this) {
    while ($this.pf_1.i()) {
      var item = $this.pf_1.j();
      if ($this.sf_1.vf_1(item) === $this.sf_1.uf_1) {
        $this.rf_1 = item;
        $this.qf_1 = 1;
        return Unit_instance;
      }
    }
    $this.qf_1 = 0;
  }
  function FilteringSequence$iterator$1(this$0) {
    this.sf_1 = this$0;
    this.pf_1 = this$0.tf_1.h();
    this.qf_1 = -1;
    this.rf_1 = null;
  }
  protoOf(FilteringSequence$iterator$1).j = function () {
    if (this.qf_1 === -1) {
      calcNext(this);
    }
    if (this.qf_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var result = this.rf_1;
    this.rf_1 = null;
    this.qf_1 = -1;
    return (result == null ? true : !(result == null)) ? result : THROW_CCE();
  };
  protoOf(FilteringSequence$iterator$1).i = function () {
    if (this.qf_1 === -1) {
      calcNext(this);
    }
    return this.qf_1 === 1;
  };
  function FilteringSequence(sequence, sendWhen, predicate) {
    sendWhen = sendWhen === VOID ? true : sendWhen;
    this.tf_1 = sequence;
    this.uf_1 = sendWhen;
    this.vf_1 = predicate;
  }
  protoOf(FilteringSequence).h = function () {
    return new FilteringSequence$iterator$1(this);
  };
  function TransformingSequence$iterator$1(this$0) {
    this.xf_1 = this$0;
    this.wf_1 = this$0.yf_1.h();
  }
  protoOf(TransformingSequence$iterator$1).j = function () {
    return this.xf_1.zf_1(this.wf_1.j());
  };
  protoOf(TransformingSequence$iterator$1).i = function () {
    return this.wf_1.i();
  };
  function TransformingSequence(sequence, transformer) {
    this.yf_1 = sequence;
    this.zf_1 = transformer;
  }
  protoOf(TransformingSequence).h = function () {
    return new TransformingSequence$iterator$1(this);
  };
  protoOf(TransformingSequence).ag = function (iterator) {
    return new FlatteningSequence(this.yf_1, this.zf_1, iterator);
  };
  function TransformingIndexedSequence$iterator$1(this$0) {
    this.dg_1 = this$0;
    this.bg_1 = this$0.eg_1.h();
    this.cg_1 = 0;
  }
  protoOf(TransformingIndexedSequence$iterator$1).j = function () {
    var _unary__edvuaz = this.cg_1;
    this.cg_1 = _unary__edvuaz + 1 | 0;
    return this.dg_1.fg_1(checkIndexOverflow(_unary__edvuaz), this.bg_1.j());
  };
  protoOf(TransformingIndexedSequence$iterator$1).i = function () {
    return this.bg_1.i();
  };
  function TransformingIndexedSequence(sequence, transformer) {
    this.eg_1 = sequence;
    this.fg_1 = transformer;
  }
  protoOf(TransformingIndexedSequence).h = function () {
    return new TransformingIndexedSequence$iterator$1(this);
  };
  function DistinctSequence(source, keySelector) {
    this.gg_1 = source;
    this.hg_1 = keySelector;
  }
  protoOf(DistinctSequence).h = function () {
    return new DistinctIterator(this.gg_1.h(), this.hg_1);
  };
  function flatten_0(_this__u8e3s4) {
    return flatten_1(_this__u8e3s4, flatten$lambda);
  }
  function ensureItemIterator($this) {
    var itemIterator = $this.jg_1;
    if (!(itemIterator == null) && itemIterator.i()) {
      $this.kg_1 = 1;
      return true;
    }
    while ($this.ig_1.i()) {
      var element = $this.ig_1.j();
      var nextItemIterator = $this.lg_1.og_1($this.lg_1.ng_1(element));
      if (nextItemIterator.i()) {
        $this.jg_1 = nextItemIterator;
        $this.kg_1 = 1;
        return true;
      }
    }
    $this.kg_1 = 2;
    $this.jg_1 = null;
    return false;
  }
  function FlatteningSequence$iterator$1(this$0) {
    this.lg_1 = this$0;
    this.ig_1 = this$0.mg_1.h();
    this.jg_1 = null;
    this.kg_1 = 0;
  }
  protoOf(FlatteningSequence$iterator$1).j = function () {
    if (this.kg_1 === 2)
      throw NoSuchElementException_init_$Create$();
    if (this.kg_1 === 0 && !ensureItemIterator(this)) {
      throw NoSuchElementException_init_$Create$();
    }
    this.kg_1 = 0;
    return ensureNotNull(this.jg_1).j();
  };
  protoOf(FlatteningSequence$iterator$1).i = function () {
    if (this.kg_1 === 1)
      return true;
    if (this.kg_1 === 2)
      return false;
    return ensureItemIterator(this);
  };
  function FlatteningSequence(sequence, transformer, iterator) {
    this.mg_1 = sequence;
    this.ng_1 = transformer;
    this.og_1 = iterator;
  }
  protoOf(FlatteningSequence).h = function () {
    return new FlatteningSequence$iterator$1(this);
  };
  function emptySequence() {
    return EmptySequence_instance;
  }
  function DropTakeSequence() {
  }
  function TakeSequence$iterator$1(this$0) {
    this.pg_1 = this$0.sg_1;
    this.qg_1 = this$0.rg_1.h();
  }
  protoOf(TakeSequence$iterator$1).j = function () {
    if (this.pg_1 === 0)
      throw NoSuchElementException_init_$Create$();
    this.pg_1 = this.pg_1 - 1 | 0;
    return this.qg_1.j();
  };
  protoOf(TakeSequence$iterator$1).i = function () {
    return this.pg_1 > 0 && this.qg_1.i();
  };
  function TakeSequence(sequence, count) {
    this.rg_1 = sequence;
    this.sg_1 = count;
    // Inline function 'kotlin.require' call
    if (!(this.sg_1 >= 0)) {
      // Inline function 'kotlin.sequences.TakeSequence.<anonymous>' call
      var message = 'count must be non-negative, but was ' + this.sg_1 + '.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
  }
  protoOf(TakeSequence).f1 = function (n) {
    return n >= this.sg_1 ? this : new TakeSequence(this.rg_1, n);
  };
  protoOf(TakeSequence).h = function () {
    return new TakeSequence$iterator$1(this);
  };
  function generateSequence_0(seedFunction, nextFunction) {
    return new GeneratorSequence(seedFunction, nextFunction);
  }
  function constrainOnce(_this__u8e3s4) {
    var tmp;
    if (_this__u8e3s4 instanceof ConstrainedOnceSequence) {
      tmp = _this__u8e3s4;
    } else {
      tmp = new ConstrainedOnceSequence(_this__u8e3s4);
    }
    return tmp;
  }
  function calcNext_0($this) {
    $this.tg_1 = $this.ug_1 === -2 ? $this.vg_1.wg_1() : $this.vg_1.xg_1(ensureNotNull($this.tg_1));
    $this.ug_1 = $this.tg_1 == null ? 0 : 1;
  }
  function GeneratorSequence$iterator$1(this$0) {
    this.vg_1 = this$0;
    this.tg_1 = null;
    this.ug_1 = -2;
  }
  protoOf(GeneratorSequence$iterator$1).j = function () {
    if (this.ug_1 < 0) {
      calcNext_0(this);
    }
    if (this.ug_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.tg_1;
    var result = !(tmp == null) ? tmp : THROW_CCE();
    this.ug_1 = -1;
    return result;
  };
  protoOf(GeneratorSequence$iterator$1).i = function () {
    if (this.ug_1 < 0) {
      calcNext_0(this);
    }
    return this.ug_1 === 1;
  };
  function GeneratorSequence(getInitialValue, getNextValue) {
    this.wg_1 = getInitialValue;
    this.xg_1 = getNextValue;
  }
  protoOf(GeneratorSequence).h = function () {
    return new GeneratorSequence$iterator$1(this);
  };
  function EmptySequence() {
  }
  protoOf(EmptySequence).h = function () {
    return EmptyIterator_instance;
  };
  protoOf(EmptySequence).f1 = function (n) {
    return EmptySequence_instance;
  };
  var EmptySequence_instance;
  function EmptySequence_getInstance() {
    return EmptySequence_instance;
  }
  function DistinctIterator(source, keySelector) {
    AbstractIterator.call(this);
    this.ah_1 = source;
    this.bh_1 = keySelector;
    this.ch_1 = HashSet_init_$Create$();
  }
  protoOf(DistinctIterator).ld = function () {
    while (this.ah_1.i()) {
      var next = this.ah_1.j();
      var key = this.bh_1(next);
      if (this.ch_1.e(key)) {
        this.md(next);
        return Unit_instance;
      }
    }
    this.nd();
  };
  function flatten_1(_this__u8e3s4, iterator) {
    if (_this__u8e3s4 instanceof TransformingSequence) {
      return (_this__u8e3s4 instanceof TransformingSequence ? _this__u8e3s4 : THROW_CCE()).ag(iterator);
    }
    return new FlatteningSequence(_this__u8e3s4, flatten$lambda_0, iterator);
  }
  function shuffled_0(_this__u8e3s4) {
    return shuffled_1(_this__u8e3s4, Default_getInstance());
  }
  function shuffled_1(_this__u8e3s4, random) {
    return sequence(shuffled$slambda_0(_this__u8e3s4, random, null));
  }
  function calcNext_1($this) {
    if ($this.dh_1.i()) {
      var item = $this.dh_1.j();
      if ($this.gh_1.ih_1(item)) {
        $this.eh_1 = 1;
        $this.fh_1 = item;
        return Unit_instance;
      }
    }
    $this.eh_1 = 0;
  }
  function TakeWhileSequence$iterator$1(this$0) {
    this.gh_1 = this$0;
    this.dh_1 = this$0.hh_1.h();
    this.eh_1 = -1;
    this.fh_1 = null;
  }
  protoOf(TakeWhileSequence$iterator$1).j = function () {
    if (this.eh_1 === -1) {
      calcNext_1(this);
    }
    if (this.eh_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.fh_1;
    var result = (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
    this.fh_1 = null;
    this.eh_1 = -1;
    return result;
  };
  protoOf(TakeWhileSequence$iterator$1).i = function () {
    if (this.eh_1 === -1) {
      calcNext_1(this);
    }
    return this.eh_1 === 1;
  };
  function TakeWhileSequence(sequence, predicate) {
    this.hh_1 = sequence;
    this.ih_1 = predicate;
  }
  protoOf(TakeWhileSequence).h = function () {
    return new TakeWhileSequence$iterator$1(this);
  };
  function IndexingSequence$iterator$1(this$0) {
    this.jh_1 = this$0.lh_1.h();
    this.kh_1 = 0;
  }
  protoOf(IndexingSequence$iterator$1).j = function () {
    var _unary__edvuaz = this.kh_1;
    this.kh_1 = _unary__edvuaz + 1 | 0;
    return new IndexedValue(checkIndexOverflow(_unary__edvuaz), this.jh_1.j());
  };
  protoOf(IndexingSequence$iterator$1).i = function () {
    return this.jh_1.i();
  };
  function IndexingSequence(sequence) {
    this.lh_1 = sequence;
  }
  protoOf(IndexingSequence).h = function () {
    return new IndexingSequence$iterator$1(this);
  };
  function generateSequence$lambda($nextFunction) {
    return function (it) {
      return $nextFunction();
    };
  }
  function flatten$lambda(it) {
    return it.h();
  }
  function flatten$lambda_0(it) {
    return it;
  }
  function shuffled$slambda($this_shuffled, $random, resultContinuation) {
    this.uh_1 = $this_shuffled;
    this.vh_1 = $random;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(shuffled$slambda).bi = function ($this$sequence, $completion) {
    var tmp = this.ci($this$sequence, $completion);
    tmp.y8_1 = Unit_instance;
    tmp.z8_1 = null;
    return tmp.e9();
  };
  protoOf(shuffled$slambda).v9 = function (p1, $completion) {
    return this.bi(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(shuffled$slambda).e9 = function () {
    var suspendResult = this.y8_1;
    $sm: do
      try {
        var tmp = this.w8_1;
        switch (tmp) {
          case 0:
            this.x8_1 = 3;
            this.xh_1 = toMutableList_2(this.uh_1);
            this.w8_1 = 1;
            continue $sm;
          case 1:
            if (!!this.xh_1.r()) {
              this.w8_1 = 4;
              continue $sm;
            }

            this.yh_1 = this.vh_1.w(this.xh_1.k());
            this.zh_1 = removeLast(this.xh_1);
            this.ai_1 = this.yh_1 < this.xh_1.k() ? this.xh_1.x(this.yh_1, this.zh_1) : this.zh_1;
            this.w8_1 = 2;
            suspendResult = this.wh_1.gf(this.ai_1, this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 2:
            this.w8_1 = 1;
            continue $sm;
          case 3:
            throw this.z8_1;
          case 4:
            return Unit_instance;
        }
      } catch ($p) {
        var e = $p;
        if (this.x8_1 === 3) {
          throw e;
        } else {
          this.w8_1 = this.x8_1;
          this.z8_1 = e;
        }
      }
     while (true);
  };
  protoOf(shuffled$slambda).ci = function ($this$sequence, completion) {
    var i = new shuffled$slambda(this.uh_1, this.vh_1, completion);
    i.wh_1 = $this$sequence;
    return i;
  };
  function shuffled$slambda_0($this_shuffled, $random, resultContinuation) {
    var i = new shuffled$slambda($this_shuffled, $random, resultContinuation);
    var l = function ($this$sequence, $completion) {
      return i.bi($this$sequence, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function setOf_0(elements) {
    return toSet_0(elements);
  }
  function emptySet() {
    return EmptySet_getInstance();
  }
  function mutableSetOf(elements) {
    return toCollection(elements, LinkedHashSet_init_$Create$_1(mapCapacity(elements.length)));
  }
  function EmptySet() {
    EmptySet_instance = this;
    this.di_1 = new Long(1993859828, 793161749);
  }
  protoOf(EmptySet).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, KtSet) : false) {
      tmp = other.r();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EmptySet).hashCode = function () {
    return 0;
  };
  protoOf(EmptySet).toString = function () {
    return '[]';
  };
  protoOf(EmptySet).k = function () {
    return 0;
  };
  protoOf(EmptySet).r = function () {
    return true;
  };
  protoOf(EmptySet).me = function (element) {
    return false;
  };
  protoOf(EmptySet).j1 = function (element) {
    if (true)
      return false;
    var tmp;
    if (false) {} else {
      tmp = THROW_CCE();
    }
    return this.me(tmp);
  };
  protoOf(EmptySet).ei = function (elements) {
    return elements.r();
  };
  protoOf(EmptySet).g2 = function (elements) {
    return this.ei(elements);
  };
  protoOf(EmptySet).h = function () {
    return EmptyIterator_instance;
  };
  var EmptySet_instance;
  function EmptySet_getInstance() {
    if (EmptySet_instance == null)
      new EmptySet();
    return EmptySet_instance;
  }
  function optimizeReadOnlySet(_this__u8e3s4) {
    switch (_this__u8e3s4.k()) {
      case 0:
        return emptySet();
      case 1:
        return setOf(_this__u8e3s4.h().j());
      default:
        return _this__u8e3s4;
    }
  }
  function hashSetOf(elements) {
    return toCollection(elements, HashSet_init_$Create$_0(mapCapacity(elements.length)));
  }
  function checkWindowSizeStep(size, step) {
    // Inline function 'kotlin.require' call
    if (!(size > 0 && step > 0)) {
      // Inline function 'kotlin.collections.checkWindowSizeStep.<anonymous>' call
      var message = !(size === step) ? 'Both size ' + size + ' and step ' + step + ' must be greater than zero.' : 'size ' + size + ' must be greater than zero.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
  }
  function windowedIterator(iterator_0, size, step, partialWindows, reuseBuffer) {
    if (!iterator_0.i())
      return EmptyIterator_instance;
    return iterator(windowedIterator$slambda_0(size, step, iterator_0, reuseBuffer, partialWindows, null));
  }
  function MovingSubList(list) {
    AbstractList.call(this);
    this.s_1 = list;
    this.t_1 = 0;
    this.u_1 = 0;
  }
  protoOf(MovingSubList).v = function (fromIndex, toIndex) {
    Companion_instance_5.r3(fromIndex, toIndex, this.s_1.k());
    this.t_1 = fromIndex;
    this.u_1 = toIndex - fromIndex | 0;
  };
  protoOf(MovingSubList).q = function (index) {
    Companion_instance_5.w3(index, this.u_1);
    return this.s_1.q(this.t_1 + index | 0);
  };
  protoOf(MovingSubList).k = function () {
    return this.u_1;
  };
  function RingBuffer_init_$Init$(capacity, $this) {
    // Inline function 'kotlin.arrayOfNulls' call
    var tmp$ret$0 = fillArrayVal(Array(capacity), null);
    RingBuffer.call($this, tmp$ret$0, 0);
    return $this;
  }
  function RingBuffer_init_$Create$(capacity) {
    return RingBuffer_init_$Init$(capacity, objectCreate(protoOf(RingBuffer)));
  }
  function RingBuffer$iterator$1(this$0) {
    this.ji_1 = this$0;
    AbstractIterator.call(this);
    this.hi_1 = this$0.ni_1;
    this.ii_1 = this$0.mi_1;
  }
  protoOf(RingBuffer$iterator$1).ld = function () {
    if (this.hi_1 === 0) {
      this.nd();
    } else {
      var tmp = this.ji_1.ki_1[this.ii_1];
      this.md((tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE());
      var tmp_0 = this;
      var tmp0 = this.ji_1;
      // Inline function 'kotlin.collections.RingBuffer.forward' call
      tmp_0.ii_1 = (this.ii_1 + 1 | 0) % tmp0.li_1 | 0;
      this.hi_1 = this.hi_1 - 1 | 0;
    }
  };
  function RingBuffer(buffer, filledSize) {
    AbstractList.call(this);
    this.ki_1 = buffer;
    // Inline function 'kotlin.require' call
    if (!(filledSize >= 0)) {
      // Inline function 'kotlin.collections.RingBuffer.<anonymous>' call
      var message = 'ring buffer filled size should not be negative but it is ' + filledSize;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.require' call
    if (!(filledSize <= this.ki_1.length)) {
      // Inline function 'kotlin.collections.RingBuffer.<anonymous>' call
      var message_0 = 'ring buffer filled size: ' + filledSize + ' cannot be larger than the buffer size: ' + this.ki_1.length;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message_0));
    }
    this.li_1 = this.ki_1.length;
    this.mi_1 = 0;
    this.ni_1 = filledSize;
  }
  protoOf(RingBuffer).k = function () {
    return this.ni_1;
  };
  protoOf(RingBuffer).q = function (index) {
    Companion_instance_5.w3(index, this.ni_1);
    // Inline function 'kotlin.collections.RingBuffer.forward' call
    var tmp$ret$0 = (this.mi_1 + index | 0) % this.li_1 | 0;
    var tmp = this.ki_1[tmp$ret$0];
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(RingBuffer).oi = function () {
    return this.ni_1 === this.li_1;
  };
  protoOf(RingBuffer).h = function () {
    return new RingBuffer$iterator$1(this);
  };
  protoOf(RingBuffer).ke = function (array) {
    var tmp;
    if (array.length < this.ni_1) {
      // Inline function 'kotlin.collections.copyOf' call
      var newSize = this.ni_1;
      tmp = copyOf_1(array, newSize);
    } else {
      tmp = isArray(array) ? array : THROW_CCE();
    }
    var result = tmp;
    var size = this.ni_1;
    var widx = 0;
    var idx = this.mi_1;
    while (widx < size && idx < this.li_1) {
      var tmp_0 = widx;
      var tmp_1 = this.ki_1[idx];
      result[tmp_0] = (tmp_1 == null ? true : !(tmp_1 == null)) ? tmp_1 : THROW_CCE();
      widx = widx + 1 | 0;
      idx = idx + 1 | 0;
    }
    idx = 0;
    while (widx < size) {
      var tmp_2 = widx;
      var tmp_3 = this.ki_1[idx];
      result[tmp_2] = (tmp_3 == null ? true : !(tmp_3 == null)) ? tmp_3 : THROW_CCE();
      widx = widx + 1 | 0;
      idx = idx + 1 | 0;
    }
    var tmp_4 = terminateCollectionToArray(size, result);
    return isArray(tmp_4) ? tmp_4 : THROW_CCE();
  };
  protoOf(RingBuffer).k5 = function () {
    // Inline function 'kotlin.arrayOfNulls' call
    var size = this.ni_1;
    var tmp$ret$0 = fillArrayVal(Array(size), null);
    return this.ke(tmp$ret$0);
  };
  protoOf(RingBuffer).toArray = function () {
    return this.k5();
  };
  protoOf(RingBuffer).pi = function (maxCapacity) {
    var newCapacity = coerceAtMost((this.li_1 + (this.li_1 >> 1) | 0) + 1 | 0, maxCapacity);
    var tmp;
    if (this.mi_1 === 0) {
      // Inline function 'kotlin.collections.copyOf' call
      var this_0 = this.ki_1;
      tmp = copyOf_1(this_0, newCapacity);
    } else {
      // Inline function 'kotlin.arrayOfNulls' call
      var tmp$ret$1 = fillArrayVal(Array(newCapacity), null);
      tmp = this.ke(tmp$ret$1);
    }
    var newBuffer = tmp;
    return new RingBuffer(newBuffer, this.ni_1);
  };
  protoOf(RingBuffer).qi = function (element) {
    if (this.oi()) {
      throw IllegalStateException_init_$Create$_0('ring buffer is full');
    }
    // Inline function 'kotlin.collections.RingBuffer.forward' call
    var tmp$ret$0 = (this.mi_1 + this.ni_1 | 0) % this.li_1 | 0;
    this.ki_1[tmp$ret$0] = element;
    this.ni_1 = this.ni_1 + 1 | 0;
  };
  protoOf(RingBuffer).ri = function (n) {
    // Inline function 'kotlin.require' call
    if (!(n >= 0)) {
      // Inline function 'kotlin.collections.RingBuffer.removeFirst.<anonymous>' call
      var message = "n shouldn't be negative but it is " + n;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.require' call
    if (!(n <= this.ni_1)) {
      // Inline function 'kotlin.collections.RingBuffer.removeFirst.<anonymous>' call
      var message_0 = "n shouldn't be greater than the buffer size: n = " + n + ', size = ' + this.ni_1;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message_0));
    }
    if (n > 0) {
      var start = this.mi_1;
      // Inline function 'kotlin.collections.RingBuffer.forward' call
      var end = (start + n | 0) % this.li_1 | 0;
      if (start > end) {
        fill(this.ki_1, null, start, this.li_1);
        fill(this.ki_1, null, 0, end);
      } else {
        fill(this.ki_1, null, start, end);
      }
      this.mi_1 = end;
      this.ni_1 = this.ni_1 - n | 0;
    }
  };
  function windowedIterator$slambda($size, $step, $iterator, $reuseBuffer, $partialWindows, resultContinuation) {
    this.aj_1 = $size;
    this.bj_1 = $step;
    this.cj_1 = $iterator;
    this.dj_1 = $reuseBuffer;
    this.ej_1 = $partialWindows;
    CoroutineImpl.call(this, resultContinuation);
  }
  protoOf(windowedIterator$slambda).pj = function ($this$iterator, $completion) {
    var tmp = this.qj($this$iterator, $completion);
    tmp.y8_1 = Unit_instance;
    tmp.z8_1 = null;
    return tmp.e9();
  };
  protoOf(windowedIterator$slambda).v9 = function (p1, $completion) {
    return this.pj(p1 instanceof SequenceScope ? p1 : THROW_CCE(), $completion);
  };
  protoOf(windowedIterator$slambda).e9 = function () {
    var suspendResult = this.y8_1;
    $sm: do
      try {
        var tmp = this.w8_1;
        switch (tmp) {
          case 0:
            this.x8_1 = 21;
            this.gj_1 = coerceAtMost(this.aj_1, 1024);
            this.hj_1 = this.bj_1 - this.aj_1 | 0;
            if (this.hj_1 >= 0) {
              this.ij_1 = ArrayList_init_$Create$_0(this.gj_1);
              this.jj_1 = 0;
              var tmp_0 = this;
              tmp_0.kj_1 = this.cj_1;
              this.w8_1 = 12;
              continue $sm;
            } else {
              this.lj_1 = RingBuffer_init_$Create$(this.gj_1);
              var tmp_1 = this;
              tmp_1.mj_1 = this.cj_1;
              this.w8_1 = 1;
              continue $sm;
            }

          case 1:
            if (!this.mj_1.i()) {
              this.w8_1 = 5;
              continue $sm;
            }

            this.nj_1 = this.mj_1.j();
            this.lj_1.qi(this.nj_1);
            if (this.lj_1.oi()) {
              if (this.lj_1.ni_1 < this.aj_1) {
                this.lj_1 = this.lj_1.pi(this.aj_1);
                this.w8_1 = 1;
                continue $sm;
              } else {
                this.w8_1 = 2;
                continue $sm;
              }
            } else {
              this.w8_1 = 4;
              continue $sm;
            }

          case 2:
            this.w8_1 = 3;
            suspendResult = this.fj_1.gf(this.dj_1 ? this.lj_1 : ArrayList_init_$Create$_1(this.lj_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 3:
            this.lj_1.ri(this.bj_1);
            this.w8_1 = 4;
            continue $sm;
          case 4:
            this.w8_1 = 1;
            continue $sm;
          case 5:
            if (this.ej_1) {
              this.w8_1 = 6;
              continue $sm;
            } else {
              this.w8_1 = 11;
              continue $sm;
            }

          case 6:
            if (!(this.lj_1.ni_1 > this.bj_1)) {
              this.w8_1 = 8;
              continue $sm;
            }

            this.w8_1 = 7;
            suspendResult = this.fj_1.gf(this.dj_1 ? this.lj_1 : ArrayList_init_$Create$_1(this.lj_1), this);
            if (suspendResult === get_COROUTINE_SUSPENDED()) {
              return suspendResult;
            }

            continue $sm;
          case 7:
            this.lj_1.ri(this.bj_1);
            this.w8_1 = 6;
            continue $sm;
          case 8:
            if (!this.lj_1.r()) {
              this.w8_1 = 9;
              suspendResult = this.fj_1.gf(this.lj_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.w8_1 = 10;
              continue $sm;
            }

          case 9:
            this.w8_1 = 10;
            continue $sm;
          case 10:
            this.w8_1 = 11;
            continue $sm;
          case 11:
            this.w8_1 = 20;
            continue $sm;
          case 12:
            if (!this.kj_1.i()) {
              this.w8_1 = 16;
              continue $sm;
            }

            this.oj_1 = this.kj_1.j();
            if (this.jj_1 > 0) {
              this.jj_1 = this.jj_1 - 1 | 0;
              this.w8_1 = 12;
              continue $sm;
            } else {
              this.w8_1 = 13;
              continue $sm;
            }

          case 13:
            this.ij_1.e(this.oj_1);
            if (this.ij_1.k() === this.aj_1) {
              this.w8_1 = 14;
              suspendResult = this.fj_1.gf(this.ij_1, this);
              if (suspendResult === get_COROUTINE_SUSPENDED()) {
                return suspendResult;
              }
              continue $sm;
            } else {
              this.w8_1 = 15;
              continue $sm;
            }

          case 14:
            if (this.dj_1) {
              this.ij_1.j5();
            } else
              this.ij_1 = ArrayList_init_$Create$_0(this.aj_1);
            this.jj_1 = this.hj_1;
            this.w8_1 = 15;
            continue $sm;
          case 15:
            this.w8_1 = 12;
            continue $sm;
          case 16:
            if (!this.ij_1.r()) {
              if (this.ej_1 || this.ij_1.k() === this.aj_1) {
                this.w8_1 = 17;
                suspendResult = this.fj_1.gf(this.ij_1, this);
                if (suspendResult === get_COROUTINE_SUSPENDED()) {
                  return suspendResult;
                }
                continue $sm;
              } else {
                this.w8_1 = 18;
                continue $sm;
              }
            } else {
              this.w8_1 = 19;
              continue $sm;
            }

          case 17:
            this.w8_1 = 18;
            continue $sm;
          case 18:
            this.w8_1 = 19;
            continue $sm;
          case 19:
            this.w8_1 = 20;
            continue $sm;
          case 20:
            return Unit_instance;
          case 21:
            throw this.z8_1;
        }
      } catch ($p) {
        var e = $p;
        if (this.x8_1 === 21) {
          throw e;
        } else {
          this.w8_1 = this.x8_1;
          this.z8_1 = e;
        }
      }
     while (true);
  };
  protoOf(windowedIterator$slambda).qj = function ($this$iterator, completion) {
    var i = new windowedIterator$slambda(this.aj_1, this.bj_1, this.cj_1, this.dj_1, this.ej_1, completion);
    i.fj_1 = $this$iterator;
    return i;
  };
  function windowedIterator$slambda_0($size, $step, $iterator, $reuseBuffer, $partialWindows, resultContinuation) {
    var i = new windowedIterator$slambda($size, $step, $iterator, $reuseBuffer, $partialWindows, resultContinuation);
    var l = function ($this$iterator, $completion) {
      return i.pj($this$iterator, $completion);
    };
    l.$arity = 1;
    return l;
  }
  function compareBy(selectors) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.require' call
    if (!(selectors.length > 0)) {
      // Inline function 'kotlin.require.<anonymous>' call
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var tmp = compareBy$lambda(selectors);
    return new sam$kotlin_Comparator$0_0(tmp);
  }
  function naturalOrder() {
    var tmp = NaturalOrderComparator_instance;
    return isInterface(tmp, Comparator) ? tmp : THROW_CCE();
  }
  function compareValuesByImpl(a, b, selectors) {
    var inductionVariable = 0;
    var last = selectors.length;
    while (inductionVariable < last) {
      var fn = selectors[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      var v1 = fn(a);
      var v2 = fn(b);
      var diff = compareValues(v1, v2);
      if (!(diff === 0))
        return diff;
    }
    return 0;
  }
  function NaturalOrderComparator() {
  }
  protoOf(NaturalOrderComparator).rj = function (a, b) {
    return compareTo_0(a, b);
  };
  protoOf(NaturalOrderComparator).compare = function (a, b) {
    var tmp = (!(a == null) ? isComparable(a) : false) ? a : THROW_CCE();
    return this.rj(tmp, (!(b == null) ? isComparable(b) : false) ? b : THROW_CCE());
  };
  var NaturalOrderComparator_instance;
  function NaturalOrderComparator_getInstance() {
    return NaturalOrderComparator_instance;
  }
  function compareValues(a, b) {
    if (a === b)
      return 0;
    if (a == null)
      return -1;
    if (b == null)
      return 1;
    return compareTo_0((!(a == null) ? isComparable(a) : false) ? a : THROW_CCE(), b);
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.sj_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).oc = function (a, b) {
    return this.sj_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.oc(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).n3 = function () {
    return this.sj_1;
  };
  protoOf(sam$kotlin_Comparator$0_0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.n3(), other.n3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_0).hashCode = function () {
    return hashCode(this.n3());
  };
  function compareBy$lambda($selectors) {
    return function (a, b) {
      return compareValuesByImpl(a, b, $selectors);
    };
  }
  function Continuation() {
  }
  function Key() {
  }
  var Key_instance;
  function Key_getInstance() {
    return Key_instance;
  }
  function ContinuationInterceptor() {
  }
  function EmptyCoroutineContext() {
    EmptyCoroutineContext_instance = this;
    this.tj_1 = new Long(0, 0);
  }
  protoOf(EmptyCoroutineContext).i9 = function (key) {
    return null;
  };
  protoOf(EmptyCoroutineContext).hashCode = function () {
    return 0;
  };
  protoOf(EmptyCoroutineContext).toString = function () {
    return 'EmptyCoroutineContext';
  };
  var EmptyCoroutineContext_instance;
  function EmptyCoroutineContext_getInstance() {
    if (EmptyCoroutineContext_instance == null)
      new EmptyCoroutineContext();
    return EmptyCoroutineContext_instance;
  }
  function get_COROUTINE_SUSPENDED() {
    return CoroutineSingletons_COROUTINE_SUSPENDED_getInstance();
  }
  var CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  var CoroutineSingletons_UNDECIDED_instance;
  var CoroutineSingletons_RESUMED_instance;
  var CoroutineSingletons_entriesInitialized;
  function CoroutineSingletons_initEntries() {
    if (CoroutineSingletons_entriesInitialized)
      return Unit_instance;
    CoroutineSingletons_entriesInitialized = true;
    CoroutineSingletons_COROUTINE_SUSPENDED_instance = new CoroutineSingletons('COROUTINE_SUSPENDED', 0);
    CoroutineSingletons_UNDECIDED_instance = new CoroutineSingletons('UNDECIDED', 1);
    CoroutineSingletons_RESUMED_instance = new CoroutineSingletons('RESUMED', 2);
  }
  function CoroutineSingletons(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function CoroutineSingletons_COROUTINE_SUSPENDED_getInstance() {
    CoroutineSingletons_initEntries();
    return CoroutineSingletons_COROUTINE_SUSPENDED_instance;
  }
  function getProgressionLastElement(start, end, step) {
    var tmp;
    if (step > 0) {
      tmp = start >= end ? end : end - differenceModulo(end, start, step) | 0;
    } else if (step < 0) {
      tmp = start <= end ? end : end + differenceModulo(start, end, -step | 0) | 0;
    } else {
      throw IllegalArgumentException_init_$Create$_0('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo(a, b, c) {
    return mod(mod(a, c) - mod(b, c) | 0, c);
  }
  function mod(a, b) {
    var mod = a % b | 0;
    return mod >= 0 ? mod : mod + b | 0;
  }
  function ReadOnlyProperty() {
  }
  function Default() {
    Default_instance = this;
    Random.call(this);
    this.vj_1 = defaultPlatformRandom();
  }
  protoOf(Default).wj = function (bitCount) {
    return this.vj_1.wj(bitCount);
  };
  protoOf(Default).af = function () {
    return this.vj_1.af();
  };
  protoOf(Default).w = function (until) {
    return this.vj_1.w(until);
  };
  protoOf(Default).xj = function (from, until) {
    return this.vj_1.xj(from, until);
  };
  protoOf(Default).yj = function () {
    return this.vj_1.yj();
  };
  protoOf(Default).zj = function (from, until) {
    return this.vj_1.zj(from, until);
  };
  protoOf(Default).ak = function () {
    return this.vj_1.ak();
  };
  protoOf(Default).bk = function () {
    return this.vj_1.bk();
  };
  var Default_instance;
  function Default_getInstance() {
    if (Default_instance == null)
      new Default();
    return Default_instance;
  }
  function Random() {
    Default_getInstance();
  }
  protoOf(Random).af = function () {
    return this.wj(32);
  };
  protoOf(Random).w = function (until) {
    return this.xj(0, until);
  };
  protoOf(Random).xj = function (from, until) {
    checkRangeBounds(from, until);
    var n = until - from | 0;
    if (n > 0 || n === -2147483648) {
      var tmp;
      if ((n & (-n | 0)) === n) {
        var bitCount = fastLog2(n);
        tmp = this.wj(bitCount);
      } else {
        var v;
        do {
          var bits = this.af() >>> 1 | 0;
          v = bits % n | 0;
        }
         while (((bits - v | 0) + (n - 1 | 0) | 0) < 0);
        tmp = v;
      }
      var rnd = tmp;
      return from + rnd | 0;
    } else {
      while (true) {
        var rnd_0 = this.af();
        if (from <= rnd_0 ? rnd_0 < until : false)
          return rnd_0;
      }
    }
  };
  protoOf(Random).yj = function () {
    var tmp0 = toLong(this.af()).f3(32);
    // Inline function 'kotlin.Long.plus' call
    var other = this.af();
    return tmp0.w2(toLong(other));
  };
  protoOf(Random).zj = function (from, until) {
    checkRangeBounds_0(from, until);
    var n = until.x2(from);
    if (n.d1(new Long(0, 0)) > 0) {
      var rnd;
      if (n.i3(n.d3()).equals(n)) {
        var nLow = n.l3();
        var nHigh = n.h3(32).l3();
        var tmp;
        if (!(nLow === 0)) {
          var bitCount = fastLog2(nLow);
          tmp = toLong(this.wj(bitCount)).i3(new Long(-1, 0));
        } else if (nHigh === 1) {
          tmp = toLong(this.af()).i3(new Long(-1, 0));
        } else {
          var bitCount_0 = fastLog2(nHigh);
          tmp = toLong(this.wj(bitCount_0)).f3(32).w2(toLong(this.af()).i3(new Long(-1, 0)));
        }
        rnd = tmp;
      } else {
        var v;
        $l$1: do {
          $l$0: do {
            var bits = this.yj().h3(1);
            v = bits.a3(n);
          }
           while (false);
          var tmp_0 = bits.x2(v);
          // Inline function 'kotlin.Long.minus' call
          var tmp$ret$0 = n.x2(toLong(1));
        }
         while (tmp_0.w2(tmp$ret$0).d1(new Long(0, 0)) < 0);
        rnd = v;
      }
      return from.w2(rnd);
    } else {
      while (true) {
        var rnd_0 = this.yj();
        if (from.d1(rnd_0) <= 0 ? rnd_0.d1(until) < 0 : false)
          return rnd_0;
      }
    }
  };
  protoOf(Random).ak = function () {
    return !(this.wj(1) === 0);
  };
  protoOf(Random).bk = function () {
    return doubleFromParts(this.wj(26), this.wj(27));
  };
  function Random_0(seed) {
    return XorWowRandom_init_$Create$(seed, seed >> 31);
  }
  function checkRangeBounds(from, until) {
    var tmp;
    if (!(until > from)) {
      // Inline function 'kotlin.random.checkRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(from, until);
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function fastLog2(value) {
    // Inline function 'kotlin.countLeadingZeroBits' call
    return 31 - clz32(value) | 0;
  }
  function checkRangeBounds_0(from, until) {
    var tmp;
    if (!(until.d1(from) > 0)) {
      // Inline function 'kotlin.random.checkRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(from, until);
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function boundsErrorMessage(from, until) {
    return 'Random range is empty: [' + toString_1(from) + ', ' + toString_1(until) + ').';
  }
  function takeUpperBits(_this__u8e3s4, bitCount) {
    return (_this__u8e3s4 >>> (32 - bitCount | 0) | 0) & (-bitCount | 0) >> 31;
  }
  function nextULong(_this__u8e3s4, range) {
    var tmp;
    if (range.r()) {
      throw IllegalArgumentException_init_$Create$_0('Cannot get random in empty range: ' + range.toString());
    } else {
      var tmp0 = range.dk_1;
      // Inline function 'kotlin.ULong.compareTo' call
      var other = _ULong___init__impl__c78o9k(new Long(-1, -1));
      if (ulongCompare(_ULong___get_data__impl__fggpzb(tmp0), _ULong___get_data__impl__fggpzb(other)) < 0) {
        var tmp2 = range.dk_1;
        // Inline function 'kotlin.ULong.plus' call
        // Inline function 'kotlin.UInt.toULong' call
        var this_0 = _UInt___init__impl__l7qpdl(1);
        // Inline function 'kotlin.uintToULong' call
        // Inline function 'kotlin.uintToLong' call
        var value = _UInt___get_data__impl__f0vqqw(this_0);
        var tmp$ret$1 = toLong(value).i3(new Long(-1, 0));
        // Inline function 'kotlin.ULong.plus' call
        var other_0 = _ULong___init__impl__c78o9k(tmp$ret$1);
        var tmp$ret$5 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).w2(_ULong___get_data__impl__fggpzb(other_0)));
        tmp = nextULong_0(_this__u8e3s4, range.ck_1, tmp$ret$5);
      } else {
        var tmp4 = range.ck_1;
        // Inline function 'kotlin.ULong.compareTo' call
        var other_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
        if (ulongCompare(_ULong___get_data__impl__fggpzb(tmp4), _ULong___get_data__impl__fggpzb(other_1)) > 0) {
          var tmp6 = range.ck_1;
          // Inline function 'kotlin.ULong.minus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_1 = _UInt___init__impl__l7qpdl(1);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value_0 = _UInt___get_data__impl__f0vqqw(this_1);
          var tmp$ret$7 = toLong(value_0).i3(new Long(-1, 0));
          // Inline function 'kotlin.ULong.minus' call
          var other_2 = _ULong___init__impl__c78o9k(tmp$ret$7);
          var tmp$ret$11 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp6).x2(_ULong___get_data__impl__fggpzb(other_2)));
          var tmp8 = nextULong_0(_this__u8e3s4, tmp$ret$11, range.dk_1);
          // Inline function 'kotlin.ULong.plus' call
          // Inline function 'kotlin.UInt.toULong' call
          var this_2 = _UInt___init__impl__l7qpdl(1);
          // Inline function 'kotlin.uintToULong' call
          // Inline function 'kotlin.uintToLong' call
          var value_1 = _UInt___get_data__impl__f0vqqw(this_2);
          var tmp$ret$12 = toLong(value_1).i3(new Long(-1, 0));
          // Inline function 'kotlin.ULong.plus' call
          var other_3 = _ULong___init__impl__c78o9k(tmp$ret$12);
          tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp8).w2(_ULong___get_data__impl__fggpzb(other_3)));
        } else {
          tmp = nextULong_1(_this__u8e3s4);
        }
      }
    }
    return tmp;
  }
  function nextULong_0(_this__u8e3s4, from, until) {
    checkULongRangeBounds(from, until);
    // Inline function 'kotlin.ULong.toLong' call
    var signedFrom = _ULong___get_data__impl__fggpzb(from).k3(new Long(0, -2147483648));
    // Inline function 'kotlin.ULong.toLong' call
    var signedUntil = _ULong___get_data__impl__fggpzb(until).k3(new Long(0, -2147483648));
    var signedResult = _this__u8e3s4.zj(signedFrom, signedUntil).k3(new Long(0, -2147483648));
    // Inline function 'kotlin.toULong' call
    return _ULong___init__impl__c78o9k(signedResult);
  }
  function nextULong_1(_this__u8e3s4) {
    // Inline function 'kotlin.toULong' call
    var this_0 = _this__u8e3s4.yj();
    return _ULong___init__impl__c78o9k(this_0);
  }
  function checkULongRangeBounds(from, until) {
    // Inline function 'kotlin.ULong.compareTo' call
    var tmp;
    if (!(ulongCompare(_ULong___get_data__impl__fggpzb(until), _ULong___get_data__impl__fggpzb(from)) > 0)) {
      // Inline function 'kotlin.random.checkULongRangeBounds.<anonymous>' call
      var message = boundsErrorMessage(new ULong(from), new ULong(until));
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function XorWowRandom_init_$Init$(seed1, seed2, $this) {
    XorWowRandom.call($this, seed1, seed2, 0, 0, ~seed1, seed1 << 10 ^ (seed2 >>> 4 | 0));
    return $this;
  }
  function XorWowRandom_init_$Create$(seed1, seed2) {
    return XorWowRandom_init_$Init$(seed1, seed2, objectCreate(protoOf(XorWowRandom)));
  }
  function Companion_9() {
    Companion_instance_9 = this;
    this.ik_1 = new Long(0, 0);
  }
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function XorWowRandom(x, y, z, w, v, addend) {
    Companion_getInstance_9();
    Random.call(this);
    this.jk_1 = x;
    this.kk_1 = y;
    this.lk_1 = z;
    this.mk_1 = w;
    this.nk_1 = v;
    this.ok_1 = addend;
    // Inline function 'kotlin.require' call
    if (!!((this.jk_1 | this.kk_1 | this.lk_1 | this.mk_1 | this.nk_1) === 0)) {
      // Inline function 'kotlin.random.XorWowRandom.<anonymous>' call
      var message = 'Initial state must have at least one non-zero element.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    // Inline function 'kotlin.repeat' call
    var inductionVariable = 0;
    if (inductionVariable < 64)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.random.XorWowRandom.<anonymous>' call
        this.af();
      }
       while (inductionVariable < 64);
  }
  protoOf(XorWowRandom).af = function () {
    var t = this.jk_1;
    t = t ^ (t >>> 2 | 0);
    this.jk_1 = this.kk_1;
    this.kk_1 = this.lk_1;
    this.lk_1 = this.mk_1;
    var v0 = this.nk_1;
    this.mk_1 = v0;
    t = t ^ t << 1 ^ v0 ^ v0 << 4;
    this.nk_1 = t;
    this.ok_1 = this.ok_1 + 362437 | 0;
    return t + this.ok_1 | 0;
  };
  protoOf(XorWowRandom).wj = function (bitCount) {
    return takeUpperBits(this.af(), bitCount);
  };
  function Companion_10() {
    Companion_instance_10 = this;
    this.z_1 = new IntRange(1, 0);
  }
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function IntRange(start, endInclusive) {
    Companion_getInstance_10();
    IntProgression.call(this, start, endInclusive, 1);
  }
  protoOf(IntRange).q1 = function () {
    return this.pk_1;
  };
  protoOf(IntRange).r1 = function () {
    return this.qk_1;
  };
  protoOf(IntRange).r = function () {
    return this.pk_1 > this.qk_1;
  };
  protoOf(IntRange).equals = function (other) {
    var tmp;
    if (other instanceof IntRange) {
      tmp = this.r() && other.r() || (this.pk_1 === other.pk_1 && this.qk_1 === other.qk_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IntRange).hashCode = function () {
    return this.r() ? -1 : imul(31, this.pk_1) + this.qk_1 | 0;
  };
  protoOf(IntRange).toString = function () {
    return '' + this.pk_1 + '..' + this.qk_1;
  };
  function Companion_11() {
    Companion_instance_11 = this;
    this.sk_1 = new CharRange(_Char___init__impl__6a9atx(1), _Char___init__impl__6a9atx(0));
  }
  var Companion_instance_11;
  function Companion_getInstance_11() {
    if (Companion_instance_11 == null)
      new Companion_11();
    return Companion_instance_11;
  }
  function CharRange(start, endInclusive) {
    Companion_getInstance_11();
    CharProgression.call(this, start, endInclusive, 1);
  }
  protoOf(CharRange).r = function () {
    return Char__compareTo_impl_ypi4mb(this.wk_1, this.xk_1) > 0;
  };
  protoOf(CharRange).equals = function (other) {
    var tmp;
    if (other instanceof CharRange) {
      tmp = this.r() && other.r() || (this.wk_1 === other.wk_1 && this.xk_1 === other.xk_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(CharRange).hashCode = function () {
    var tmp;
    if (this.r()) {
      tmp = -1;
    } else {
      // Inline function 'kotlin.code' call
      var this_0 = this.wk_1;
      var tmp$ret$0 = Char__toInt_impl_vasixd(this_0);
      var tmp_0 = imul(31, tmp$ret$0);
      // Inline function 'kotlin.code' call
      var this_1 = this.xk_1;
      tmp = tmp_0 + Char__toInt_impl_vasixd(this_1) | 0;
    }
    return tmp;
  };
  protoOf(CharRange).toString = function () {
    return toString(this.wk_1) + '..' + toString(this.xk_1);
  };
  function IntProgressionIterator(first, last, step) {
    IntIterator.call(this);
    this.zk_1 = step;
    this.al_1 = last;
    this.bl_1 = this.zk_1 > 0 ? first <= last : first >= last;
    this.cl_1 = this.bl_1 ? first : this.al_1;
  }
  protoOf(IntProgressionIterator).i = function () {
    return this.bl_1;
  };
  protoOf(IntProgressionIterator).af = function () {
    var value = this.cl_1;
    if (value === this.al_1) {
      if (!this.bl_1)
        throw NoSuchElementException_init_$Create$();
      this.bl_1 = false;
    } else {
      this.cl_1 = this.cl_1 + this.zk_1 | 0;
    }
    return value;
  };
  function CharProgressionIterator(first, last, step) {
    CharIterator.call(this);
    this.dl_1 = step;
    var tmp = this;
    // Inline function 'kotlin.code' call
    tmp.el_1 = Char__toInt_impl_vasixd(last);
    this.fl_1 = this.dl_1 > 0 ? Char__compareTo_impl_ypi4mb(first, last) <= 0 : Char__compareTo_impl_ypi4mb(first, last) >= 0;
    var tmp_0 = this;
    var tmp_1;
    if (this.fl_1) {
      // Inline function 'kotlin.code' call
      tmp_1 = Char__toInt_impl_vasixd(first);
    } else {
      tmp_1 = this.el_1;
    }
    tmp_0.gl_1 = tmp_1;
  }
  protoOf(CharProgressionIterator).i = function () {
    return this.fl_1;
  };
  protoOf(CharProgressionIterator).cf = function () {
    var value = this.gl_1;
    if (value === this.el_1) {
      if (!this.fl_1)
        throw NoSuchElementException_init_$Create$();
      this.fl_1 = false;
    } else {
      this.gl_1 = this.gl_1 + this.dl_1 | 0;
    }
    return numberToChar(value);
  };
  function Companion_12() {
  }
  protoOf(Companion_12).a1 = function (rangeStart, rangeEnd, step) {
    return new IntProgression(rangeStart, rangeEnd, step);
  };
  var Companion_instance_12;
  function Companion_getInstance_12() {
    return Companion_instance_12;
  }
  function IntProgression(start, endInclusive, step) {
    if (step === 0)
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step === -2147483648)
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.pk_1 = start;
    this.qk_1 = getProgressionLastElement(start, endInclusive, step);
    this.rk_1 = step;
  }
  protoOf(IntProgression).h = function () {
    return new IntProgressionIterator(this.pk_1, this.qk_1, this.rk_1);
  };
  protoOf(IntProgression).r = function () {
    return this.rk_1 > 0 ? this.pk_1 > this.qk_1 : this.pk_1 < this.qk_1;
  };
  protoOf(IntProgression).equals = function (other) {
    var tmp;
    if (other instanceof IntProgression) {
      tmp = this.r() && other.r() || (this.pk_1 === other.pk_1 && this.qk_1 === other.qk_1 && this.rk_1 === other.rk_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IntProgression).hashCode = function () {
    return this.r() ? -1 : imul(31, imul(31, this.pk_1) + this.qk_1 | 0) + this.rk_1 | 0;
  };
  protoOf(IntProgression).toString = function () {
    return this.rk_1 > 0 ? '' + this.pk_1 + '..' + this.qk_1 + ' step ' + this.rk_1 : '' + this.pk_1 + ' downTo ' + this.qk_1 + ' step ' + (-this.rk_1 | 0);
  };
  function Companion_13() {
  }
  var Companion_instance_13;
  function Companion_getInstance_13() {
    return Companion_instance_13;
  }
  function CharProgression(start, endInclusive, step) {
    if (step === 0)
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step === -2147483648)
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Int.MIN_VALUE to avoid overflow on negation.');
    this.wk_1 = start;
    var tmp = this;
    // Inline function 'kotlin.code' call
    var tmp_0 = Char__toInt_impl_vasixd(start);
    // Inline function 'kotlin.code' call
    var tmp$ret$1 = Char__toInt_impl_vasixd(endInclusive);
    tmp.xk_1 = numberToChar(getProgressionLastElement(tmp_0, tmp$ret$1, step));
    this.yk_1 = step;
  }
  protoOf(CharProgression).h = function () {
    return new CharProgressionIterator(this.wk_1, this.xk_1, this.yk_1);
  };
  protoOf(CharProgression).r = function () {
    return this.yk_1 > 0 ? Char__compareTo_impl_ypi4mb(this.wk_1, this.xk_1) > 0 : Char__compareTo_impl_ypi4mb(this.wk_1, this.xk_1) < 0;
  };
  protoOf(CharProgression).equals = function (other) {
    var tmp;
    if (other instanceof CharProgression) {
      tmp = this.r() && other.r() || (this.wk_1 === other.wk_1 && this.xk_1 === other.xk_1 && this.yk_1 === other.yk_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(CharProgression).hashCode = function () {
    var tmp;
    if (this.r()) {
      tmp = -1;
    } else {
      // Inline function 'kotlin.code' call
      var this_0 = this.wk_1;
      var tmp$ret$0 = Char__toInt_impl_vasixd(this_0);
      var tmp_0 = imul(31, tmp$ret$0);
      // Inline function 'kotlin.code' call
      var this_1 = this.xk_1;
      var tmp$ret$1 = Char__toInt_impl_vasixd(this_1);
      tmp = imul(31, tmp_0 + tmp$ret$1 | 0) + this.yk_1 | 0;
    }
    return tmp;
  };
  protoOf(CharProgression).toString = function () {
    return this.yk_1 > 0 ? toString(this.wk_1) + '..' + toString(this.xk_1) + ' step ' + this.yk_1 : toString(this.wk_1) + ' downTo ' + toString(this.xk_1) + ' step ' + (-this.yk_1 | 0);
  };
  function appendElement(_this__u8e3s4, element, transform) {
    if (!(transform == null))
      _this__u8e3s4.f(transform(element));
    else {
      if (element == null ? true : isCharSequence(element))
        _this__u8e3s4.f(element);
      else {
        if (element instanceof Char)
          _this__u8e3s4.e8(element.t1_1);
        else {
          _this__u8e3s4.f(toString_1(element));
        }
      }
    }
  }
  function equals_0(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    if (_this__u8e3s4 === other)
      return true;
    if (!ignoreCase)
      return false;
    var thisUpper = uppercaseChar(_this__u8e3s4);
    var otherUpper = uppercaseChar(other);
    var tmp;
    if (thisUpper === otherUpper) {
      tmp = true;
    } else {
      // Inline function 'kotlin.text.lowercaseChar' call
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$2 = toString(thisUpper).toLowerCase();
      var tmp_0 = charSequenceGet(tmp$ret$2, 0);
      // Inline function 'kotlin.text.lowercaseChar' call
      // Inline function 'kotlin.text.lowercase' call
      // Inline function 'kotlin.js.asDynamic' call
      // Inline function 'kotlin.js.unsafeCast' call
      var tmp$ret$6 = toString(otherUpper).toLowerCase();
      tmp = tmp_0 === charSequenceGet(tmp$ret$6, 0);
    }
    return tmp;
  }
  function toIntOrNull(_this__u8e3s4) {
    return toIntOrNull_0(_this__u8e3s4, 10);
  }
  function toIntOrNull_0(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (firstChar === _Char___init__impl__6a9atx(45)) {
        isNegative = true;
        limit = -2147483648;
      } else if (firstChar === _Char___init__impl__6a9atx(43)) {
        isNegative = false;
        limit = -2147483647;
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      limit = -2147483647;
    }
    var limitForMaxRadix = -59652323;
    var limitBeforeMul = limitForMaxRadix;
    var result = 0;
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result < limitBeforeMul) {
          if (limitBeforeMul === limitForMaxRadix) {
            limitBeforeMul = limit / radix | 0;
            if (result < limitBeforeMul) {
              return null;
            }
          } else {
            return null;
          }
        }
        result = imul(result, radix);
        if (result < (limit + digit | 0))
          return null;
        result = result - digit | 0;
      }
       while (inductionVariable < length);
    return isNegative ? result : -result | 0;
  }
  function numberFormatError(input) {
    throw NumberFormatException_init_$Create$_0("Invalid number format: '" + input + "'");
  }
  function toLongOrNull(_this__u8e3s4, radix) {
    checkRadix(radix);
    var length = _this__u8e3s4.length;
    if (length === 0)
      return null;
    var start;
    var isNegative;
    var limit;
    var firstChar = charSequenceGet(_this__u8e3s4, 0);
    if (Char__compareTo_impl_ypi4mb(firstChar, _Char___init__impl__6a9atx(48)) < 0) {
      if (length === 1)
        return null;
      start = 1;
      if (firstChar === _Char___init__impl__6a9atx(45)) {
        isNegative = true;
        limit = new Long(0, -2147483648);
      } else if (firstChar === _Char___init__impl__6a9atx(43)) {
        isNegative = false;
        limit = new Long(1, -2147483648);
      } else
        return null;
    } else {
      start = 0;
      isNegative = false;
      limit = new Long(1, -2147483648);
    }
    // Inline function 'kotlin.Long.div' call
    var limitForMaxRadix = (new Long(1, -2147483648)).z2(toLong(36));
    var limitBeforeMul = limitForMaxRadix;
    var result = new Long(0, 0);
    var inductionVariable = start;
    if (inductionVariable < length)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var digit = digitOf(charSequenceGet(_this__u8e3s4, i), radix);
        if (digit < 0)
          return null;
        if (result.d1(limitBeforeMul) < 0) {
          if (limitBeforeMul.equals(limitForMaxRadix)) {
            // Inline function 'kotlin.Long.div' call
            limitBeforeMul = limit.z2(toLong(radix));
            if (result.d1(limitBeforeMul) < 0) {
              return null;
            }
          } else {
            return null;
          }
        }
        // Inline function 'kotlin.Long.times' call
        result = result.y2(toLong(radix));
        var tmp = result;
        // Inline function 'kotlin.Long.plus' call
        var tmp$ret$3 = limit.w2(toLong(digit));
        if (tmp.d1(tmp$ret$3) < 0)
          return null;
        // Inline function 'kotlin.Long.minus' call
        result = result.x2(toLong(digit));
      }
       while (inductionVariable < length);
    return isNegative ? result : result.d3();
  }
  function contains_2(_this__u8e3s4, char, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    return indexOf_3(_this__u8e3s4, char, VOID, ignoreCase) >= 0;
  }
  function split(_this__u8e3s4, delimiters, ignoreCase, limit) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    if (delimiters.length === 1) {
      return split_0(_this__u8e3s4, toString(delimiters[0]), ignoreCase, limit);
    }
    // Inline function 'kotlin.collections.map' call
    var this_0 = asIterable(rangesDelimitedBy(_this__u8e3s4, delimiters, VOID, ignoreCase, limit));
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$_0(collectionSizeOrDefault(this_0, 10));
    var _iterator__ex2g4s = this_0.h();
    while (_iterator__ex2g4s.i()) {
      var item = _iterator__ex2g4s.j();
      // Inline function 'kotlin.text.split.<anonymous>' call
      var tmp$ret$0 = substring_0(_this__u8e3s4, item);
      destination.e(tmp$ret$0);
    }
    return destination;
  }
  function substring(_this__u8e3s4, range) {
    var tmp1 = range.q1();
    // Inline function 'kotlin.text.substring' call
    var endIndex = range.r1() + 1 | 0;
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.substring(tmp1, endIndex);
  }
  function contains_3(_this__u8e3s4, other, ignoreCase) {
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    if (typeof other === 'string') {
      tmp = indexOf_2(_this__u8e3s4, other, VOID, ignoreCase) >= 0;
    } else {
      tmp = indexOf_4(_this__u8e3s4, other, 0, charSequenceLength(_this__u8e3s4), ignoreCase) >= 0;
    }
    return tmp;
  }
  function lines(_this__u8e3s4) {
    return toList_1(lineSequence(_this__u8e3s4));
  }
  function substringBefore(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_2(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      // Inline function 'kotlin.text.substring' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(0, index);
    }
    return tmp;
  }
  function substringAfter(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_2(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      var tmp1 = index + delimiter.length | 0;
      // Inline function 'kotlin.text.substring' call
      var endIndex = _this__u8e3s4.length;
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
    }
    return tmp;
  }
  function padEnd(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    return toString_1(padEnd_0(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE(), length, padChar));
  }
  function padStart(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    return toString_1(padStart_0(isCharSequence(_this__u8e3s4) ? _this__u8e3s4 : THROW_CCE(), length, padChar));
  }
  function indexOf_2(_this__u8e3s4, string, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_4(_this__u8e3s4, string, startIndex, charSequenceLength(_this__u8e3s4), ignoreCase);
    } else {
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.indexOf(string, startIndex);
    }
    return tmp;
  }
  function substringAfterLast(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = lastIndexOf(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      var tmp1 = index + delimiter.length | 0;
      // Inline function 'kotlin.text.substring' call
      var endIndex = _this__u8e3s4.length;
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
    }
    return tmp;
  }
  function indexOf_3(_this__u8e3s4, char, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      // Inline function 'kotlin.charArrayOf' call
      var tmp$ret$0 = charArrayOf([char]);
      tmp = indexOfAny(_this__u8e3s4, tmp$ret$0, startIndex, ignoreCase);
    } else {
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.text.nativeIndexOf' call
      var str = toString(char);
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.indexOf(str, startIndex);
    }
    return tmp;
  }
  function get_lastIndex_1(_this__u8e3s4) {
    return charSequenceLength(_this__u8e3s4) - 1 | 0;
  }
  function isBlank(_this__u8e3s4) {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.text.all' call
      var inductionVariable = 0;
      while (inductionVariable < charSequenceLength(_this__u8e3s4)) {
        var element = charSequenceGet(_this__u8e3s4, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.text.isBlank.<anonymous>' call
        if (!isWhitespace(element)) {
          tmp$ret$1 = false;
          break $l$block;
        }
      }
      tmp$ret$1 = true;
    }
    return tmp$ret$1;
  }
  function split_0(_this__u8e3s4, delimiter, ignoreCase, limit) {
    requireNonNegativeLimit(limit);
    var currentOffset = 0;
    var nextIndex = indexOf_2(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    if (nextIndex === -1 || limit === 1) {
      return listOf(toString_1(_this__u8e3s4));
    }
    var isLimited = limit > 0;
    var result = ArrayList_init_$Create$_0(isLimited ? coerceAtMost(limit, 10) : 10);
    $l$loop: do {
      var tmp1 = currentOffset;
      // Inline function 'kotlin.text.substring' call
      var endIndex = nextIndex;
      var tmp$ret$0 = toString_1(charSequenceSubSequence(_this__u8e3s4, tmp1, endIndex));
      result.e(tmp$ret$0);
      currentOffset = nextIndex + delimiter.length | 0;
      if (isLimited && result.k() === (limit - 1 | 0))
        break $l$loop;
      nextIndex = indexOf_2(_this__u8e3s4, delimiter, currentOffset, ignoreCase);
    }
     while (!(nextIndex === -1));
    var tmp4 = currentOffset;
    // Inline function 'kotlin.text.substring' call
    var endIndex_0 = charSequenceLength(_this__u8e3s4);
    var tmp$ret$1 = toString_1(charSequenceSubSequence(_this__u8e3s4, tmp4, endIndex_0));
    result.e(tmp$ret$1);
    return result;
  }
  function substring_0(_this__u8e3s4, range) {
    return toString_1(charSequenceSubSequence(_this__u8e3s4, range.q1(), range.r1() + 1 | 0));
  }
  function rangesDelimitedBy(_this__u8e3s4, delimiters, startIndex, ignoreCase, limit) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    limit = limit === VOID ? 0 : limit;
    requireNonNegativeLimit(limit);
    return new DelimitedRangesSequence(_this__u8e3s4, startIndex, limit, rangesDelimitedBy$lambda(delimiters, ignoreCase));
  }
  function indexOf_4(_this__u8e3s4, other, startIndex, endIndex, ignoreCase, last) {
    last = last === VOID ? false : last;
    var indices = !last ? numberRangeToNumber(coerceAtLeast(startIndex, 0), coerceAtMost(endIndex, charSequenceLength(_this__u8e3s4))) : downTo(coerceAtMost(startIndex, get_lastIndex_1(_this__u8e3s4)), coerceAtLeast(endIndex, 0));
    var tmp;
    if (typeof _this__u8e3s4 === 'string') {
      tmp = typeof other === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var inductionVariable = indices.pk_1;
      var last_0 = indices.qk_1;
      var step = indices.rk_1;
      if (step > 0 && inductionVariable <= last_0 || (step < 0 && last_0 <= inductionVariable))
        do {
          var index = inductionVariable;
          inductionVariable = inductionVariable + step | 0;
          if (regionMatches(other, 0, _this__u8e3s4, index, other.length, ignoreCase))
            return index;
        }
         while (!(index === last_0));
    } else {
      var inductionVariable_0 = indices.pk_1;
      var last_1 = indices.qk_1;
      var step_0 = indices.rk_1;
      if (step_0 > 0 && inductionVariable_0 <= last_1 || (step_0 < 0 && last_1 <= inductionVariable_0))
        do {
          var index_0 = inductionVariable_0;
          inductionVariable_0 = inductionVariable_0 + step_0 | 0;
          if (regionMatchesImpl(other, 0, _this__u8e3s4, index_0, charSequenceLength(other), ignoreCase))
            return index_0;
        }
         while (!(index_0 === last_1));
    }
    return -1;
  }
  function lineSequence(_this__u8e3s4) {
    // Inline function 'kotlin.sequences.Sequence' call
    return new lineSequence$$inlined$Sequence$1(_this__u8e3s4);
  }
  function trim(_this__u8e3s4) {
    // Inline function 'kotlin.text.trim' call
    var startIndex = 0;
    var endIndex = charSequenceLength(_this__u8e3s4) - 1 | 0;
    var startFound = false;
    $l$loop: while (startIndex <= endIndex) {
      var index = !startFound ? startIndex : endIndex;
      // Inline function 'kotlin.text.trim.stub_for_inlining' call
      var p0 = charSequenceGet(_this__u8e3s4, index);
      var match = isWhitespace(p0);
      if (!startFound) {
        if (!match)
          startFound = true;
        else
          startIndex = startIndex + 1 | 0;
      } else {
        if (!match)
          break $l$loop;
        else
          endIndex = endIndex - 1 | 0;
      }
    }
    return charSequenceSubSequence(_this__u8e3s4, startIndex, endIndex + 1 | 0);
  }
  function padEnd_0(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    if (length < 0)
      throw IllegalArgumentException_init_$Create$_0('Desired length ' + length + ' is less than zero.');
    if (length <= charSequenceLength(_this__u8e3s4))
      return charSequenceSubSequence(_this__u8e3s4, 0, charSequenceLength(_this__u8e3s4));
    var sb = StringBuilder_init_$Create$(length);
    sb.f(_this__u8e3s4);
    var inductionVariable = 1;
    var last = length - charSequenceLength(_this__u8e3s4) | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        sb.e8(padChar);
      }
       while (!(i === last));
    return sb;
  }
  function padStart_0(_this__u8e3s4, length, padChar) {
    padChar = padChar === VOID ? _Char___init__impl__6a9atx(32) : padChar;
    if (length < 0)
      throw IllegalArgumentException_init_$Create$_0('Desired length ' + length + ' is less than zero.');
    if (length <= charSequenceLength(_this__u8e3s4))
      return charSequenceSubSequence(_this__u8e3s4, 0, charSequenceLength(_this__u8e3s4));
    var sb = StringBuilder_init_$Create$(length);
    var inductionVariable = 1;
    var last = length - charSequenceLength(_this__u8e3s4) | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        sb.e8(padChar);
      }
       while (!(i === last));
    sb.f(_this__u8e3s4);
    return sb;
  }
  function lastIndexOf(_this__u8e3s4, string, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? get_lastIndex_1(_this__u8e3s4) : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    var tmp_0;
    if (ignoreCase) {
      tmp_0 = true;
    } else {
      tmp_0 = !(typeof _this__u8e3s4 === 'string');
    }
    if (tmp_0) {
      tmp = indexOf_4(_this__u8e3s4, string, startIndex, 0, ignoreCase, true);
    } else {
      // Inline function 'kotlin.text.nativeLastIndexOf' call
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.lastIndexOf(string, startIndex);
    }
    return tmp;
  }
  function indexOfAny(_this__u8e3s4, chars, startIndex, ignoreCase) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    ignoreCase = ignoreCase === VOID ? false : ignoreCase;
    var tmp;
    if (!ignoreCase && chars.length === 1) {
      tmp = typeof _this__u8e3s4 === 'string';
    } else {
      tmp = false;
    }
    if (tmp) {
      var char = single(chars);
      // Inline function 'kotlin.text.nativeIndexOf' call
      // Inline function 'kotlin.text.nativeIndexOf' call
      var str = toString(char);
      // Inline function 'kotlin.js.asDynamic' call
      return _this__u8e3s4.indexOf(str, startIndex);
    }
    var inductionVariable = coerceAtLeast(startIndex, 0);
    var last = get_lastIndex_1(_this__u8e3s4);
    if (inductionVariable <= last)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var charAtIndex = charSequenceGet(_this__u8e3s4, index);
        var tmp$ret$4;
        $l$block: {
          // Inline function 'kotlin.collections.any' call
          var inductionVariable_0 = 0;
          var last_0 = chars.length;
          while (inductionVariable_0 < last_0) {
            var element = chars[inductionVariable_0];
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.text.indexOfAny.<anonymous>' call
            if (equals_0(element, charAtIndex, ignoreCase)) {
              tmp$ret$4 = true;
              break $l$block;
            }
          }
          tmp$ret$4 = false;
        }
        if (tmp$ret$4)
          return index;
      }
       while (!(index === last));
    return -1;
  }
  function requireNonNegativeLimit(limit) {
    var tmp;
    if (!(limit >= 0)) {
      // Inline function 'kotlin.text.requireNonNegativeLimit.<anonymous>' call
      var message = 'Limit must be non-negative, but was ' + limit;
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    return tmp;
  }
  function calcNext_2($this) {
    if ($this.jl_1 < 0) {
      $this.hl_1 = 0;
      $this.kl_1 = null;
    } else {
      var tmp;
      var tmp_0;
      if ($this.ml_1.pl_1 > 0) {
        $this.ll_1 = $this.ll_1 + 1 | 0;
        tmp_0 = $this.ll_1 >= $this.ml_1.pl_1;
      } else {
        tmp_0 = false;
      }
      if (tmp_0) {
        tmp = true;
      } else {
        tmp = $this.jl_1 > charSequenceLength($this.ml_1.nl_1);
      }
      if (tmp) {
        $this.kl_1 = numberRangeToNumber($this.il_1, get_lastIndex_1($this.ml_1.nl_1));
        $this.jl_1 = -1;
      } else {
        var match = $this.ml_1.ql_1($this.ml_1.nl_1, $this.jl_1);
        if (match == null) {
          $this.kl_1 = numberRangeToNumber($this.il_1, get_lastIndex_1($this.ml_1.nl_1));
          $this.jl_1 = -1;
        } else {
          var index = match.ye();
          var length = match.ze();
          $this.kl_1 = until($this.il_1, index);
          $this.il_1 = index + length | 0;
          $this.jl_1 = $this.il_1 + (length === 0 ? 1 : 0) | 0;
        }
      }
      $this.hl_1 = 1;
    }
  }
  function DelimitedRangesSequence$iterator$1(this$0) {
    this.ml_1 = this$0;
    this.hl_1 = -1;
    this.il_1 = coerceIn_0(this$0.ol_1, 0, charSequenceLength(this$0.nl_1));
    this.jl_1 = this.il_1;
    this.kl_1 = null;
    this.ll_1 = 0;
  }
  protoOf(DelimitedRangesSequence$iterator$1).j = function () {
    if (this.hl_1 === -1) {
      calcNext_2(this);
    }
    if (this.hl_1 === 0)
      throw NoSuchElementException_init_$Create$();
    var tmp = this.kl_1;
    var result = tmp instanceof IntRange ? tmp : THROW_CCE();
    this.kl_1 = null;
    this.hl_1 = -1;
    return result;
  };
  protoOf(DelimitedRangesSequence$iterator$1).i = function () {
    if (this.hl_1 === -1) {
      calcNext_2(this);
    }
    return this.hl_1 === 1;
  };
  function DelimitedRangesSequence(input, startIndex, limit, getNextMatch) {
    this.nl_1 = input;
    this.ol_1 = startIndex;
    this.pl_1 = limit;
    this.ql_1 = getNextMatch;
  }
  protoOf(DelimitedRangesSequence).h = function () {
    return new DelimitedRangesSequence$iterator$1(this);
  };
  function regionMatchesImpl(_this__u8e3s4, thisOffset, other, otherOffset, length, ignoreCase) {
    if (otherOffset < 0 || thisOffset < 0 || thisOffset > (charSequenceLength(_this__u8e3s4) - length | 0) || otherOffset > (charSequenceLength(other) - length | 0)) {
      return false;
    }
    var inductionVariable = 0;
    if (inductionVariable < length)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!equals_0(charSequenceGet(_this__u8e3s4, thisOffset + index | 0), charSequenceGet(other, otherOffset + index | 0), ignoreCase))
          return false;
      }
       while (inductionVariable < length);
    return true;
  }
  function State() {
    this.rl_1 = 0;
    this.sl_1 = 1;
    this.tl_1 = 2;
  }
  var State_instance;
  function State_getInstance() {
    return State_instance;
  }
  function LinesIterator(string) {
    this.ul_1 = string;
    this.vl_1 = 0;
    this.wl_1 = 0;
    this.xl_1 = 0;
    this.yl_1 = 0;
  }
  protoOf(LinesIterator).i = function () {
    if (!(this.vl_1 === 0)) {
      return this.vl_1 === 1;
    }
    if (this.yl_1 < 0) {
      this.vl_1 = 2;
      return false;
    }
    var _delimiterLength = -1;
    var _delimiterStartIndex = charSequenceLength(this.ul_1);
    var inductionVariable = this.wl_1;
    var last = charSequenceLength(this.ul_1);
    if (inductionVariable < last)
      $l$loop: do {
        var idx = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var c = charSequenceGet(this.ul_1, idx);
        if (c === _Char___init__impl__6a9atx(10) || c === _Char___init__impl__6a9atx(13)) {
          _delimiterLength = c === _Char___init__impl__6a9atx(13) && (idx + 1 | 0) < charSequenceLength(this.ul_1) && charSequenceGet(this.ul_1, idx + 1 | 0) === _Char___init__impl__6a9atx(10) ? 2 : 1;
          _delimiterStartIndex = idx;
          break $l$loop;
        }
      }
       while (inductionVariable < last);
    this.vl_1 = 1;
    this.yl_1 = _delimiterLength;
    this.xl_1 = _delimiterStartIndex;
    return true;
  };
  protoOf(LinesIterator).j = function () {
    if (!this.i()) {
      throw NoSuchElementException_init_$Create$();
    }
    this.vl_1 = 0;
    var lastIndex = this.xl_1;
    var firstIndex = this.wl_1;
    this.wl_1 = this.xl_1 + this.yl_1 | 0;
    // Inline function 'kotlin.text.substring' call
    var this_0 = this.ul_1;
    return toString_1(charSequenceSubSequence(this_0, firstIndex, lastIndex));
  };
  function substringAfter_0(_this__u8e3s4, delimiter, missingDelimiterValue) {
    missingDelimiterValue = missingDelimiterValue === VOID ? _this__u8e3s4 : missingDelimiterValue;
    var index = indexOf_3(_this__u8e3s4, delimiter);
    var tmp;
    if (index === -1) {
      tmp = missingDelimiterValue;
    } else {
      var tmp1 = index + 1 | 0;
      // Inline function 'kotlin.text.substring' call
      var endIndex = _this__u8e3s4.length;
      // Inline function 'kotlin.js.asDynamic' call
      tmp = _this__u8e3s4.substring(tmp1, endIndex);
    }
    return tmp;
  }
  function rangesDelimitedBy$lambda($delimiters, $ignoreCase) {
    return function ($this$DelimitedRangesSequence, currentIndex) {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.text.rangesDelimitedBy.<anonymous>.<anonymous>' call
      var it = indexOfAny($this$DelimitedRangesSequence, $delimiters, currentIndex, $ignoreCase);
      return it < 0 ? null : to(it, 1);
    };
  }
  function lineSequence$$inlined$Sequence$1($this_lineSequence) {
    this.zl_1 = $this_lineSequence;
  }
  protoOf(lineSequence$$inlined$Sequence$1).h = function () {
    // Inline function 'kotlin.text.lineSequence.<anonymous>' call
    return new LinesIterator(this.zl_1);
  };
  function _Duration___init__impl__kdtzql(rawValue) {
    // Inline function 'kotlin.time.durationAssertionsEnabled' call
    if (true) {
      if (isInNanos(rawValue)) {
        var containsArg = _get_value__a43j40_0(rawValue);
        if (!((new Long(387905, -1073741824)).d1(containsArg) <= 0 ? containsArg.d1(new Long(-387905, 1073741823)) <= 0 : false))
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ns is out of nanoseconds range');
      } else {
        var containsArg_0 = _get_value__a43j40_0(rawValue);
        if (!((new Long(1, -1073741824)).d1(containsArg_0) <= 0 ? containsArg_0.d1(new Long(-1, 1073741823)) <= 0 : false))
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ms is out of milliseconds range');
        var containsArg_1 = _get_value__a43j40_0(rawValue);
        if ((new Long(1108857478, -1074)).d1(containsArg_1) <= 0 ? containsArg_1.d1(new Long(-1108857478, 1073)) <= 0 : false)
          throw AssertionError_init_$Create$_0(_get_value__a43j40_0(rawValue).toString() + ' ms is denormalized');
      }
    }
    return rawValue;
  }
  function _get_rawValue__5zfu4e($this) {
    return $this;
  }
  function _get_value__a43j40_0($this) {
    return _get_rawValue__5zfu4e($this).g3(1);
  }
  function isInNanos($this) {
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    return (_get_rawValue__5zfu4e($this).l3() & 1) === 0;
  }
  function isInMillis($this) {
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    return (_get_rawValue__5zfu4e($this).l3() & 1) === 1;
  }
  function _get_storageUnit__szjgha($this) {
    return isInNanos($this) ? DurationUnit_NANOSECONDS_getInstance() : DurationUnit_MILLISECONDS_getInstance();
  }
  function Companion_14() {
    Companion_instance_14 = this;
    this.fd_1 = _Duration___init__impl__kdtzql(new Long(0, 0));
    this.gd_1 = durationOfMillis(new Long(-1, 1073741823));
    this.hd_1 = durationOfMillis(new Long(1, -1073741824));
  }
  var Companion_instance_14;
  function Companion_getInstance_14() {
    if (Companion_instance_14 == null)
      new Companion_14();
    return Companion_instance_14;
  }
  function Duration__unaryMinus_impl_x2k1y0($this) {
    var tmp = _get_value__a43j40_0($this).d3();
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp$ret$0 = _get_rawValue__5zfu4e($this).l3() & 1;
    return durationOf(tmp, tmp$ret$0);
  }
  function Duration__plus_impl_yu9v8f($this, other) {
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      if (Duration__isFinite_impl_rzjsps(other) || _get_rawValue__5zfu4e($this).k3(_get_rawValue__5zfu4e(other)).d1(new Long(0, 0)) >= 0)
        return $this;
      else
        throw IllegalArgumentException_init_$Create$_0('Summing infinite durations of different signs yields an undefined result.');
    } else if (Duration__isInfinite_impl_tsn9y3(other))
      return other;
    var tmp;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp_0 = _get_rawValue__5zfu4e($this).l3() & 1;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    if (tmp_0 === (_get_rawValue__5zfu4e(other).l3() & 1)) {
      var result = _get_value__a43j40_0($this).w2(_get_value__a43j40_0(other));
      tmp = isInNanos($this) ? durationOfNanosNormalized(result) : durationOfMillisNormalized(result);
    } else {
      if (isInMillis($this)) {
        tmp = addValuesMixedRanges($this, _get_value__a43j40_0($this), _get_value__a43j40_0(other));
      } else {
        tmp = addValuesMixedRanges($this, _get_value__a43j40_0(other), _get_value__a43j40_0($this));
      }
    }
    return tmp;
  }
  function addValuesMixedRanges($this, thisMillis, otherNanos) {
    var otherMillis = nanosToMillis(otherNanos);
    var resultMillis = thisMillis.w2(otherMillis);
    var tmp;
    if ((new Long(1108857478, -1074)).d1(resultMillis) <= 0 ? resultMillis.d1(new Long(-1108857478, 1073)) <= 0 : false) {
      var otherNanoRemainder = otherNanos.x2(millisToNanos(otherMillis));
      tmp = durationOfNanos(millisToNanos(resultMillis).w2(otherNanoRemainder));
    } else {
      tmp = durationOfMillis(coerceIn(resultMillis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function Duration__isNegative_impl_pbysfa($this) {
    return _get_rawValue__5zfu4e($this).d1(new Long(0, 0)) < 0;
  }
  function Duration__isInfinite_impl_tsn9y3($this) {
    return _get_rawValue__5zfu4e($this).equals(_get_rawValue__5zfu4e(Companion_getInstance_14().gd_1)) || _get_rawValue__5zfu4e($this).equals(_get_rawValue__5zfu4e(Companion_getInstance_14().hd_1));
  }
  function Duration__isFinite_impl_rzjsps($this) {
    return !Duration__isInfinite_impl_tsn9y3($this);
  }
  function _Duration___get_absoluteValue__impl__vr7i6w($this) {
    return Duration__isNegative_impl_pbysfa($this) ? Duration__unaryMinus_impl_x2k1y0($this) : $this;
  }
  function Duration__compareTo_impl_pchp0f($this, other) {
    var compareBits = _get_rawValue__5zfu4e($this).k3(_get_rawValue__5zfu4e(other));
    if (compareBits.d1(new Long(0, 0)) < 0 || (compareBits.l3() & 1) === 0)
      return _get_rawValue__5zfu4e($this).d1(_get_rawValue__5zfu4e(other));
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var tmp = _get_rawValue__5zfu4e($this).l3() & 1;
    // Inline function 'kotlin.time.Duration.unitDiscriminator' call
    var r = tmp - (_get_rawValue__5zfu4e(other).l3() & 1) | 0;
    return Duration__isNegative_impl_pbysfa($this) ? -r | 0 : r;
  }
  function Duration__compareTo_impl_pchp0f_0($this, other) {
    return Duration__compareTo_impl_pchp0f($this.ed_1, other instanceof Duration ? other.ed_1 : THROW_CCE());
  }
  function _Duration___get_hoursComponent__impl__7hllxa($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeHours__impl__kb9f3j($this).a3(toLong(24)).l3();
    }
    return tmp;
  }
  function _Duration___get_minutesComponent__impl__ctvd8u($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeMinutes__impl__dognoh($this).a3(toLong(60)).l3();
    }
    return tmp;
  }
  function _Duration___get_secondsComponent__impl__if34a6($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else {
      // Inline function 'kotlin.Long.rem' call
      tmp = _Duration___get_inWholeSeconds__impl__hpy7b3($this).a3(toLong(60)).l3();
    }
    return tmp;
  }
  function _Duration___get_nanosecondsComponent__impl__nh19kq($this) {
    var tmp;
    if (Duration__isInfinite_impl_tsn9y3($this)) {
      tmp = 0;
    } else if (isInMillis($this)) {
      // Inline function 'kotlin.Long.rem' call
      var tmp$ret$0 = _get_value__a43j40_0($this).a3(toLong(1000));
      tmp = millisToNanos(tmp$ret$0).l3();
    } else {
      var tmp2 = _get_value__a43j40_0($this);
      // Inline function 'kotlin.Long.rem' call
      var other = 1000000000;
      tmp = tmp2.a3(toLong(other)).l3();
    }
    return tmp;
  }
  function Duration__toDouble_impl_a56y2b($this, unit) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    var tmp;
    if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().gd_1))) {
      tmp = Infinity;
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().hd_1))) {
      tmp = -Infinity;
    } else {
      tmp = convertDurationUnit(_get_value__a43j40_0($this).m3(), _get_storageUnit__szjgha($this), unit);
    }
    return tmp;
  }
  function Duration__toLong_impl_shr43i($this, unit) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    return tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().gd_1)) ? new Long(-1, 2147483647) : tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().hd_1)) ? new Long(0, -2147483648) : convertDurationUnit_0(_get_value__a43j40_0($this), _get_storageUnit__szjgha($this), unit);
  }
  function _Duration___get_inWholeDays__impl__7bvpxz($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_DAYS_getInstance());
  }
  function _Duration___get_inWholeHours__impl__kb9f3j($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_HOURS_getInstance());
  }
  function _Duration___get_inWholeMinutes__impl__dognoh($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_MINUTES_getInstance());
  }
  function _Duration___get_inWholeSeconds__impl__hpy7b3($this) {
    return Duration__toLong_impl_shr43i($this, DurationUnit_SECONDS_getInstance());
  }
  function _Duration___get_inWholeMilliseconds__impl__msfiry($this) {
    return isInMillis($this) && Duration__isFinite_impl_rzjsps($this) ? _get_value__a43j40_0($this) : Duration__toLong_impl_shr43i($this, DurationUnit_MILLISECONDS_getInstance());
  }
  function Duration__toString_impl_8d916b($this) {
    var tmp0_subject = _get_rawValue__5zfu4e($this);
    var tmp;
    if (tmp0_subject.equals(new Long(0, 0))) {
      tmp = '0s';
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().gd_1))) {
      tmp = 'Infinity';
    } else if (tmp0_subject.equals(_get_rawValue__5zfu4e(Companion_getInstance_14().hd_1))) {
      tmp = '-Infinity';
    } else {
      var isNegative = Duration__isNegative_impl_pbysfa($this);
      // Inline function 'kotlin.text.buildString' call
      // Inline function 'kotlin.apply' call
      var this_0 = StringBuilder_init_$Create$_1();
      // Inline function 'kotlin.time.Duration.toString.<anonymous>' call
      if (isNegative) {
        this_0.e8(_Char___init__impl__6a9atx(45));
      }
      // Inline function 'kotlin.time.Duration.toComponents' call
      var this_1 = _Duration___get_absoluteValue__impl__vr7i6w($this);
      var tmp1 = _Duration___get_inWholeDays__impl__7bvpxz(this_1);
      var tmp2 = _Duration___get_hoursComponent__impl__7hllxa(this_1);
      var tmp3 = _Duration___get_minutesComponent__impl__ctvd8u(this_1);
      var tmp4 = _Duration___get_secondsComponent__impl__if34a6(this_1);
      // Inline function 'kotlin.time.Duration.toString.<anonymous>.<anonymous>' call
      var nanoseconds = _Duration___get_nanosecondsComponent__impl__nh19kq(this_1);
      var hasDays = !tmp1.equals(new Long(0, 0));
      var hasHours = !(tmp2 === 0);
      var hasMinutes = !(tmp3 === 0);
      var hasSeconds = !(tmp4 === 0) || !(nanoseconds === 0);
      var components = 0;
      if (hasDays) {
        this_0.fb(tmp1).e8(_Char___init__impl__6a9atx(100));
        components = components + 1 | 0;
      }
      if (hasHours || (hasDays && (hasMinutes || hasSeconds))) {
        var _unary__edvuaz = components;
        components = _unary__edvuaz + 1 | 0;
        if (_unary__edvuaz > 0) {
          this_0.e8(_Char___init__impl__6a9atx(32));
        }
        this_0.eb(tmp2).e8(_Char___init__impl__6a9atx(104));
      }
      if (hasMinutes || (hasSeconds && (hasHours || hasDays))) {
        var _unary__edvuaz_0 = components;
        components = _unary__edvuaz_0 + 1 | 0;
        if (_unary__edvuaz_0 > 0) {
          this_0.e8(_Char___init__impl__6a9atx(32));
        }
        this_0.eb(tmp3).e8(_Char___init__impl__6a9atx(109));
      }
      if (hasSeconds) {
        var _unary__edvuaz_1 = components;
        components = _unary__edvuaz_1 + 1 | 0;
        if (_unary__edvuaz_1 > 0) {
          this_0.e8(_Char___init__impl__6a9atx(32));
        }
        if (!(tmp4 === 0) || hasDays || hasHours || hasMinutes) {
          appendFractional(this_0, $this, tmp4, nanoseconds, 9, 's', false);
        } else if (nanoseconds >= 1000000) {
          appendFractional(this_0, $this, nanoseconds / 1000000 | 0, nanoseconds % 1000000 | 0, 6, 'ms', false);
        } else if (nanoseconds >= 1000) {
          appendFractional(this_0, $this, nanoseconds / 1000 | 0, nanoseconds % 1000 | 0, 3, 'us', false);
        } else
          this_0.eb(nanoseconds).d8('ns');
      }
      if (isNegative && components > 1) {
        this_0.gb(1, _Char___init__impl__6a9atx(40)).e8(_Char___init__impl__6a9atx(41));
      }
      tmp = this_0.toString();
    }
    return tmp;
  }
  function appendFractional(_this__u8e3s4, $this, whole, fractional, fractionalSize, unit, isoZeroes) {
    _this__u8e3s4.eb(whole);
    if (!(fractional === 0)) {
      _this__u8e3s4.e8(_Char___init__impl__6a9atx(46));
      var fracString = padStart(fractional.toString(), fractionalSize, _Char___init__impl__6a9atx(48));
      var tmp$ret$1;
      $l$block: {
        // Inline function 'kotlin.text.indexOfLast' call
        var inductionVariable = charSequenceLength(fracString) - 1 | 0;
        if (0 <= inductionVariable)
          do {
            var index = inductionVariable;
            inductionVariable = inductionVariable + -1 | 0;
            // Inline function 'kotlin.time.Duration.appendFractional.<anonymous>' call
            if (!(charSequenceGet(fracString, index) === _Char___init__impl__6a9atx(48))) {
              tmp$ret$1 = index;
              break $l$block;
            }
          }
           while (0 <= inductionVariable);
        tmp$ret$1 = -1;
      }
      var nonZeroDigits = tmp$ret$1 + 1 | 0;
      if (!isoZeroes && nonZeroDigits < 3) {
        // Inline function 'kotlin.text.appendRange' call
        _this__u8e3s4.hb(fracString, 0, nonZeroDigits);
      } else {
        // Inline function 'kotlin.text.appendRange' call
        var endIndex = imul((nonZeroDigits + 2 | 0) / 3 | 0, 3);
        _this__u8e3s4.hb(fracString, 0, endIndex);
      }
    }
    _this__u8e3s4.d8(unit);
  }
  function Duration__hashCode_impl_u4exz6($this) {
    return $this.hashCode();
  }
  function Duration__equals_impl_ygj6w6($this, other) {
    if (!(other instanceof Duration))
      return false;
    var tmp0_other_with_cast = other instanceof Duration ? other.ed_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function Duration(rawValue) {
    Companion_getInstance_14();
    this.ed_1 = rawValue;
  }
  protoOf(Duration).am = function (other) {
    return Duration__compareTo_impl_pchp0f(this.ed_1, other);
  };
  protoOf(Duration).d = function (other) {
    return Duration__compareTo_impl_pchp0f_0(this, other);
  };
  protoOf(Duration).toString = function () {
    return Duration__toString_impl_8d916b(this.ed_1);
  };
  protoOf(Duration).hashCode = function () {
    return Duration__hashCode_impl_u4exz6(this.ed_1);
  };
  protoOf(Duration).equals = function (other) {
    return Duration__equals_impl_ygj6w6(this.ed_1, other);
  };
  function durationOfMillis(normalMillis) {
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = normalMillis.f3(1).w2(toLong(1));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function toDuration(_this__u8e3s4, unit) {
    var valueInNs = convertDurationUnit(_this__u8e3s4, unit, DurationUnit_NANOSECONDS_getInstance());
    // Inline function 'kotlin.require' call
    if (!!isNaN_0(valueInNs)) {
      // Inline function 'kotlin.time.toDuration.<anonymous>' call
      var message = 'Duration value cannot be NaN.';
      throw IllegalArgumentException_init_$Create$_0(toString_1(message));
    }
    var nanos = roundToLong(valueInNs);
    var tmp;
    if ((new Long(387905, -1073741824)).d1(nanos) <= 0 ? nanos.d1(new Long(-387905, 1073741823)) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      var millis = roundToLong(convertDurationUnit(_this__u8e3s4, unit, DurationUnit_MILLISECONDS_getInstance()));
      tmp = durationOfMillisNormalized(millis);
    }
    return tmp;
  }
  function durationOf(normalValue, unitDiscriminator) {
    // Inline function 'kotlin.Long.plus' call
    var tmp$ret$0 = normalValue.f3(1).w2(toLong(unitDiscriminator));
    return _Duration___init__impl__kdtzql(tmp$ret$0);
  }
  function durationOfNanosNormalized(nanos) {
    var tmp;
    if ((new Long(387905, -1073741824)).d1(nanos) <= 0 ? nanos.d1(new Long(-387905, 1073741823)) <= 0 : false) {
      tmp = durationOfNanos(nanos);
    } else {
      tmp = durationOfMillis(nanosToMillis(nanos));
    }
    return tmp;
  }
  function durationOfMillisNormalized(millis) {
    var tmp;
    if ((new Long(1108857478, -1074)).d1(millis) <= 0 ? millis.d1(new Long(-1108857478, 1073)) <= 0 : false) {
      tmp = durationOfNanos(millisToNanos(millis));
    } else {
      tmp = durationOfMillis(coerceIn(millis, new Long(1, -1073741824), new Long(-1, 1073741823)));
    }
    return tmp;
  }
  function nanosToMillis(nanos) {
    // Inline function 'kotlin.Long.div' call
    return nanos.z2(toLong(1000000));
  }
  function millisToNanos(millis) {
    // Inline function 'kotlin.Long.times' call
    return millis.y2(toLong(1000000));
  }
  function durationOfNanos(normalNanos) {
    return _Duration___init__impl__kdtzql(normalNanos.f3(1));
  }
  function _ValueTimeMark___init__impl__uyfl2m(reading) {
    return reading;
  }
  function _ValueTimeMark___get_reading__impl__5qz8rd($this) {
    return $this;
  }
  function ValueTimeMark__elapsedNow_impl_eonqvs($this) {
    return MonotonicTimeSource_getInstance().ad($this);
  }
  function ValueTimeMark__minus_impl_f87sko($this, other) {
    if (!(other instanceof ValueTimeMark))
      throw IllegalArgumentException_init_$Create$_0('Subtracting or comparing time marks from different time sources is not possible: ' + ValueTimeMark__toString_impl_ow3ax6($this) + ' and ' + toString_1(other));
    return ValueTimeMark__minus_impl_f87sko_0($this, other.bm_1);
  }
  function ValueTimeMark__minus_impl_f87sko_0($this, other) {
    return MonotonicTimeSource_getInstance().bd($this, other);
  }
  function ValueTimeMark__toString_impl_ow3ax6($this) {
    return 'ValueTimeMark(reading=' + toString_1($this) + ')';
  }
  function ValueTimeMark__hashCode_impl_oduu93($this) {
    return hashCode($this);
  }
  function ValueTimeMark__equals_impl_uc54jh($this, other) {
    if (!(other instanceof ValueTimeMark))
      return false;
    var tmp0_other_with_cast = other instanceof ValueTimeMark ? other.bm_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function ValueTimeMark__compareTo_impl_uoccns($this, other) {
    return $this.cm((!(other == null) ? isInterface(other, ComparableTimeMark) : false) ? other : THROW_CCE());
  }
  function ValueTimeMark(reading) {
    this.bm_1 = reading;
  }
  protoOf(ValueTimeMark).dm = function (other) {
    return ValueTimeMark__minus_impl_f87sko(this.bm_1, other);
  };
  protoOf(ValueTimeMark).toString = function () {
    return ValueTimeMark__toString_impl_ow3ax6(this.bm_1);
  };
  protoOf(ValueTimeMark).hashCode = function () {
    return ValueTimeMark__hashCode_impl_oduu93(this.bm_1);
  };
  protoOf(ValueTimeMark).equals = function (other) {
    return ValueTimeMark__equals_impl_uc54jh(this.bm_1, other);
  };
  protoOf(ValueTimeMark).d = function (other) {
    return ValueTimeMark__compareTo_impl_uoccns(this, other);
  };
  function Monotonic() {
  }
  protoOf(Monotonic).yc = function () {
    return MonotonicTimeSource_getInstance().yc();
  };
  protoOf(Monotonic).toString = function () {
    return toString_1(MonotonicTimeSource_getInstance());
  };
  var Monotonic_instance;
  function Monotonic_getInstance() {
    return Monotonic_instance;
  }
  function ComparableTimeMark() {
  }
  function TimedValue(value, duration) {
    this.em_1 = value;
    this.fm_1 = duration;
  }
  protoOf(TimedValue).toString = function () {
    return 'TimedValue(value=' + toString_0(this.em_1) + ', duration=' + Duration__toString_impl_8d916b(this.fm_1) + ')';
  };
  protoOf(TimedValue).hashCode = function () {
    var result = this.em_1 == null ? 0 : hashCode(this.em_1);
    result = imul(result, 31) + Duration__hashCode_impl_u4exz6(this.fm_1) | 0;
    return result;
  };
  protoOf(TimedValue).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof TimedValue))
      return false;
    var tmp0_other_with_cast = other instanceof TimedValue ? other : THROW_CCE();
    if (!equals(this.em_1, tmp0_other_with_cast.em_1))
      return false;
    if (!equals(this.fm_1, tmp0_other_with_cast.fm_1))
      return false;
    return true;
  };
  function UnsafeLazyImpl(initializer) {
    this.gm_1 = initializer;
    this.hm_1 = UNINITIALIZED_VALUE_instance;
  }
  protoOf(UnsafeLazyImpl).i2 = function () {
    if (this.hm_1 === UNINITIALIZED_VALUE_instance) {
      this.hm_1 = ensureNotNull(this.gm_1)();
      this.gm_1 = null;
    }
    var tmp = this.hm_1;
    return (tmp == null ? true : !(tmp == null)) ? tmp : THROW_CCE();
  };
  protoOf(UnsafeLazyImpl).im = function () {
    return !(this.hm_1 === UNINITIALIZED_VALUE_instance);
  };
  protoOf(UnsafeLazyImpl).toString = function () {
    return this.im() ? toString_0(this.i2()) : 'Lazy value not initialized yet.';
  };
  function UNINITIALIZED_VALUE() {
  }
  var UNINITIALIZED_VALUE_instance;
  function UNINITIALIZED_VALUE_getInstance() {
    return UNINITIALIZED_VALUE_instance;
  }
  function _Result___init__impl__xyqfz8(value) {
    return value;
  }
  function _Result___get_value__impl__bjfvqg($this) {
    return $this;
  }
  function _Result___get_isFailure__impl__jpiriv($this) {
    var tmp = _Result___get_value__impl__bjfvqg($this);
    return tmp instanceof Failure;
  }
  function Result__exceptionOrNull_impl_p6xea9($this) {
    var tmp;
    if (_Result___get_value__impl__bjfvqg($this) instanceof Failure) {
      tmp = _Result___get_value__impl__bjfvqg($this).jm_1;
    } else {
      tmp = null;
    }
    return tmp;
  }
  function Companion_15() {
  }
  var Companion_instance_15;
  function Companion_getInstance_15() {
    return Companion_instance_15;
  }
  function Failure(exception) {
    this.jm_1 = exception;
  }
  protoOf(Failure).equals = function (other) {
    var tmp;
    if (other instanceof Failure) {
      tmp = equals(this.jm_1, other.jm_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Failure).hashCode = function () {
    return hashCode(this.jm_1);
  };
  protoOf(Failure).toString = function () {
    return 'Failure(' + this.jm_1.toString() + ')';
  };
  function createFailure(exception) {
    return new Failure(exception);
  }
  function throwOnFailure(_this__u8e3s4) {
    var tmp = _Result___get_value__impl__bjfvqg(_this__u8e3s4);
    if (tmp instanceof Failure)
      throw _Result___get_value__impl__bjfvqg(_this__u8e3s4).jm_1;
  }
  function NotImplementedError(message) {
    message = message === VOID ? 'An operation is not implemented.' : message;
    Error_init_$Init$_0(message, this);
    captureStack(this, NotImplementedError);
  }
  function Pair(first, second) {
    this.we_1 = first;
    this.xe_1 = second;
  }
  protoOf(Pair).toString = function () {
    return '(' + toString_0(this.we_1) + ', ' + toString_0(this.xe_1) + ')';
  };
  protoOf(Pair).ye = function () {
    return this.we_1;
  };
  protoOf(Pair).ze = function () {
    return this.xe_1;
  };
  protoOf(Pair).hashCode = function () {
    var result = this.we_1 == null ? 0 : hashCode(this.we_1);
    result = imul(result, 31) + (this.xe_1 == null ? 0 : hashCode(this.xe_1)) | 0;
    return result;
  };
  protoOf(Pair).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Pair))
      return false;
    var tmp0_other_with_cast = other instanceof Pair ? other : THROW_CCE();
    if (!equals(this.we_1, tmp0_other_with_cast.we_1))
      return false;
    if (!equals(this.xe_1, tmp0_other_with_cast.xe_1))
      return false;
    return true;
  };
  function to(_this__u8e3s4, that) {
    return new Pair(_this__u8e3s4, that);
  }
  function Triple(first, second, third) {
    this.km_1 = first;
    this.lm_1 = second;
    this.mm_1 = third;
  }
  protoOf(Triple).toString = function () {
    return '(' + toString_0(this.km_1) + ', ' + toString_0(this.lm_1) + ', ' + toString_0(this.mm_1) + ')';
  };
  protoOf(Triple).ye = function () {
    return this.km_1;
  };
  protoOf(Triple).ze = function () {
    return this.lm_1;
  };
  protoOf(Triple).nm = function () {
    return this.mm_1;
  };
  protoOf(Triple).hashCode = function () {
    var result = this.km_1 == null ? 0 : hashCode(this.km_1);
    result = imul(result, 31) + (this.lm_1 == null ? 0 : hashCode(this.lm_1)) | 0;
    result = imul(result, 31) + (this.mm_1 == null ? 0 : hashCode(this.mm_1)) | 0;
    return result;
  };
  protoOf(Triple).equals = function (other) {
    if (this === other)
      return true;
    if (!(other instanceof Triple))
      return false;
    var tmp0_other_with_cast = other instanceof Triple ? other : THROW_CCE();
    if (!equals(this.km_1, tmp0_other_with_cast.km_1))
      return false;
    if (!equals(this.lm_1, tmp0_other_with_cast.lm_1))
      return false;
    if (!equals(this.mm_1, tmp0_other_with_cast.mm_1))
      return false;
    return true;
  };
  function _UByte___get_data__impl__jof9qr($this) {
    return $this;
  }
  function UByte() {
  }
  function _UInt___init__impl__l7qpdl(data) {
    return data;
  }
  function _UInt___get_data__impl__f0vqqw($this) {
    return $this;
  }
  function Companion_16() {
    Companion_instance_16 = this;
    this.om_1 = _UInt___init__impl__l7qpdl(0);
    this.pm_1 = _UInt___init__impl__l7qpdl(-1);
    this.qm_1 = 4;
    this.rm_1 = 32;
  }
  var Companion_instance_16;
  function Companion_getInstance_16() {
    if (Companion_instance_16 == null)
      new Companion_16();
    return Companion_instance_16;
  }
  function UInt__compareTo_impl_yacclj($this, other) {
    return uintCompare(_UInt___get_data__impl__f0vqqw($this), _UInt___get_data__impl__f0vqqw(other));
  }
  function UInt__compareTo_impl_yacclj_0($this, other) {
    return UInt__compareTo_impl_yacclj($this.sm_1, other instanceof UInt ? other.sm_1 : THROW_CCE());
  }
  function UInt__toString_impl_dbgl21($this) {
    // Inline function 'kotlin.uintToString' call
    // Inline function 'kotlin.uintToLong' call
    var value = _UInt___get_data__impl__f0vqqw($this);
    return toLong(value).i3(new Long(-1, 0)).toString();
  }
  function UInt__hashCode_impl_z2mhuw($this) {
    return $this;
  }
  function UInt__equals_impl_ffdoxg($this, other) {
    if (!(other instanceof UInt))
      return false;
    if (!($this === (other instanceof UInt ? other.sm_1 : THROW_CCE())))
      return false;
    return true;
  }
  function UInt(data) {
    Companion_getInstance_16();
    this.sm_1 = data;
  }
  protoOf(UInt).tm = function (other) {
    return UInt__compareTo_impl_yacclj(this.sm_1, other);
  };
  protoOf(UInt).d = function (other) {
    return UInt__compareTo_impl_yacclj_0(this, other);
  };
  protoOf(UInt).toString = function () {
    return UInt__toString_impl_dbgl21(this.sm_1);
  };
  protoOf(UInt).hashCode = function () {
    return UInt__hashCode_impl_z2mhuw(this.sm_1);
  };
  protoOf(UInt).equals = function (other) {
    return UInt__equals_impl_ffdoxg(this.sm_1, other);
  };
  function _UIntArray___init__impl__ghjpc6(storage) {
    return storage;
  }
  function _UIntArray___get_storage__impl__92a0v0($this) {
    return $this;
  }
  function _UIntArray___init__impl__ghjpc6_0(size) {
    return _UIntArray___init__impl__ghjpc6(new Int32Array(size));
  }
  function UIntArray__get_impl_gp5kza($this, index) {
    // Inline function 'kotlin.toUInt' call
    var this_0 = _UIntArray___get_storage__impl__92a0v0($this)[index];
    return _UInt___init__impl__l7qpdl(this_0);
  }
  function UIntArray__set_impl_7f2zu2($this, index, value) {
    var tmp = _UIntArray___get_storage__impl__92a0v0($this);
    // Inline function 'kotlin.UInt.toInt' call
    tmp[index] = _UInt___get_data__impl__f0vqqw(value);
  }
  function _UIntArray___get_size__impl__r6l8ci($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length;
  }
  function UIntArray__iterator_impl_tkdv7k($this) {
    return new Iterator(_UIntArray___get_storage__impl__92a0v0($this));
  }
  function Iterator(array) {
    this.um_1 = array;
    this.vm_1 = 0;
  }
  protoOf(Iterator).i = function () {
    return this.vm_1 < this.um_1.length;
  };
  protoOf(Iterator).wm = function () {
    var tmp;
    if (this.vm_1 < this.um_1.length) {
      var _unary__edvuaz = this.vm_1;
      this.vm_1 = _unary__edvuaz + 1 | 0;
      // Inline function 'kotlin.toUInt' call
      var this_0 = this.um_1[_unary__edvuaz];
      tmp = _UInt___init__impl__l7qpdl(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.vm_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator).j = function () {
    return new UInt(this.wm());
  };
  function UIntArray__contains_impl_b16rzj($this, element) {
    var tmp = _UIntArray___get_storage__impl__92a0v0($this);
    // Inline function 'kotlin.UInt.toInt' call
    var tmp$ret$0 = _UInt___get_data__impl__f0vqqw(element);
    return contains_0(tmp, tmp$ret$0);
  }
  function UIntArray__contains_impl_b16rzj_0($this, element) {
    if (!(element instanceof UInt))
      return false;
    return UIntArray__contains_impl_b16rzj($this.xm_1, element instanceof UInt ? element.sm_1 : THROW_CCE());
  }
  function UIntArray__isEmpty_impl_vd8j4n($this) {
    return _UIntArray___get_storage__impl__92a0v0($this).length === 0;
  }
  function UIntArray__toString_impl_3zy802($this) {
    return 'UIntArray(storage=' + toString_1($this) + ')';
  }
  function UIntArray__hashCode_impl_hr7ost($this) {
    return hashCode($this);
  }
  function UIntArray__equals_impl_flcmof($this, other) {
    if (!(other instanceof UIntArray))
      return false;
    var tmp0_other_with_cast = other instanceof UIntArray ? other.xm_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function UIntArray(storage) {
    this.xm_1 = storage;
  }
  protoOf(UIntArray).k = function () {
    return _UIntArray___get_size__impl__r6l8ci(this.xm_1);
  };
  protoOf(UIntArray).h = function () {
    return UIntArray__iterator_impl_tkdv7k(this.xm_1);
  };
  protoOf(UIntArray).ym = function (element) {
    return UIntArray__contains_impl_b16rzj(this.xm_1, element);
  };
  protoOf(UIntArray).j1 = function (element) {
    return UIntArray__contains_impl_b16rzj_0(this, element);
  };
  protoOf(UIntArray).r = function () {
    return UIntArray__isEmpty_impl_vd8j4n(this.xm_1);
  };
  protoOf(UIntArray).toString = function () {
    return UIntArray__toString_impl_3zy802(this.xm_1);
  };
  protoOf(UIntArray).hashCode = function () {
    return UIntArray__hashCode_impl_hr7ost(this.xm_1);
  };
  protoOf(UIntArray).equals = function (other) {
    return UIntArray__equals_impl_flcmof(this.xm_1, other);
  };
  function _ULong___init__impl__c78o9k(data) {
    return data;
  }
  function _ULong___get_data__impl__fggpzb($this) {
    return $this;
  }
  function Companion_17() {
    Companion_instance_17 = this;
    this.zm_1 = _ULong___init__impl__c78o9k(new Long(0, 0));
    this.an_1 = _ULong___init__impl__c78o9k(new Long(-1, -1));
    this.bn_1 = 8;
    this.cn_1 = 64;
  }
  var Companion_instance_17;
  function Companion_getInstance_17() {
    if (Companion_instance_17 == null)
      new Companion_17();
    return Companion_instance_17;
  }
  function ULong__compareTo_impl_38i7tu($this, other) {
    return ulongCompare(_ULong___get_data__impl__fggpzb($this), _ULong___get_data__impl__fggpzb(other));
  }
  function ULong__compareTo_impl_38i7tu_0($this, other) {
    return ULong__compareTo_impl_38i7tu($this.s1_1, other instanceof ULong ? other.s1_1 : THROW_CCE());
  }
  function ULong__toString_impl_f9au7k($this) {
    // Inline function 'kotlin.ulongToString' call
    var value = _ULong___get_data__impl__fggpzb($this);
    return ulongToString(value, 10);
  }
  function ULong__hashCode_impl_6hv2lb($this) {
    return $this.hashCode();
  }
  function ULong__equals_impl_o0gnyb($this, other) {
    if (!(other instanceof ULong))
      return false;
    var tmp0_other_with_cast = other instanceof ULong ? other.s1_1 : THROW_CCE();
    if (!$this.equals(tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULong(data) {
    Companion_getInstance_17();
    this.s1_1 = data;
  }
  protoOf(ULong).dn = function (other) {
    return ULong__compareTo_impl_38i7tu(this.s1_1, other);
  };
  protoOf(ULong).d = function (other) {
    return ULong__compareTo_impl_38i7tu_0(this, other);
  };
  protoOf(ULong).toString = function () {
    return ULong__toString_impl_f9au7k(this.s1_1);
  };
  protoOf(ULong).hashCode = function () {
    return ULong__hashCode_impl_6hv2lb(this.s1_1);
  };
  protoOf(ULong).equals = function (other) {
    return ULong__equals_impl_o0gnyb(this.s1_1, other);
  };
  function _ULongArray___init__impl__twm1l3(storage) {
    return storage;
  }
  function _ULongArray___get_storage__impl__28e64j($this) {
    return $this;
  }
  function _ULongArray___init__impl__twm1l3_0(size) {
    return _ULongArray___init__impl__twm1l3(longArray(size));
  }
  function ULongArray__get_impl_pr71q9($this, index) {
    // Inline function 'kotlin.toULong' call
    var this_0 = _ULongArray___get_storage__impl__28e64j($this)[index];
    return _ULong___init__impl__c78o9k(this_0);
  }
  function ULongArray__set_impl_z19mvh($this, index, value) {
    var tmp = _ULongArray___get_storage__impl__28e64j($this);
    // Inline function 'kotlin.ULong.toLong' call
    tmp[index] = _ULong___get_data__impl__fggpzb(value);
  }
  function _ULongArray___get_size__impl__ju6dtr($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length;
  }
  function ULongArray__iterator_impl_cq4d2h($this) {
    return new Iterator_0(_ULongArray___get_storage__impl__28e64j($this));
  }
  function Iterator_0(array) {
    this.en_1 = array;
    this.fn_1 = 0;
  }
  protoOf(Iterator_0).i = function () {
    return this.fn_1 < this.en_1.length;
  };
  protoOf(Iterator_0).gn = function () {
    var tmp;
    if (this.fn_1 < this.en_1.length) {
      var _unary__edvuaz = this.fn_1;
      this.fn_1 = _unary__edvuaz + 1 | 0;
      // Inline function 'kotlin.toULong' call
      var this_0 = this.en_1[_unary__edvuaz];
      tmp = _ULong___init__impl__c78o9k(this_0);
    } else {
      throw NoSuchElementException_init_$Create$_0(this.fn_1.toString());
    }
    return tmp;
  };
  protoOf(Iterator_0).j = function () {
    return new ULong(this.gn());
  };
  function ULongArray__contains_impl_v9bgai($this, element) {
    var tmp = _ULongArray___get_storage__impl__28e64j($this);
    // Inline function 'kotlin.ULong.toLong' call
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(element);
    return contains(tmp, tmp$ret$0);
  }
  function ULongArray__contains_impl_v9bgai_0($this, element) {
    if (!(element instanceof ULong))
      return false;
    return ULongArray__contains_impl_v9bgai($this.hn_1, element instanceof ULong ? element.s1_1 : THROW_CCE());
  }
  function ULongArray__isEmpty_impl_c3yngu($this) {
    return _ULongArray___get_storage__impl__28e64j($this).length === 0;
  }
  function ULongArray__toString_impl_wqk1p5($this) {
    return 'ULongArray(storage=' + toString_1($this) + ')';
  }
  function ULongArray__hashCode_impl_aze4wa($this) {
    return hashCode($this);
  }
  function ULongArray__equals_impl_vwitwa($this, other) {
    if (!(other instanceof ULongArray))
      return false;
    var tmp0_other_with_cast = other instanceof ULongArray ? other.hn_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function ULongArray(storage) {
    this.hn_1 = storage;
  }
  protoOf(ULongArray).k = function () {
    return _ULongArray___get_size__impl__ju6dtr(this.hn_1);
  };
  protoOf(ULongArray).h = function () {
    return ULongArray__iterator_impl_cq4d2h(this.hn_1);
  };
  protoOf(ULongArray).u3 = function (element) {
    return ULongArray__contains_impl_v9bgai(this.hn_1, element);
  };
  protoOf(ULongArray).j1 = function (element) {
    return ULongArray__contains_impl_v9bgai_0(this, element);
  };
  protoOf(ULongArray).r = function () {
    return ULongArray__isEmpty_impl_c3yngu(this.hn_1);
  };
  protoOf(ULongArray).toString = function () {
    return ULongArray__toString_impl_wqk1p5(this.hn_1);
  };
  protoOf(ULongArray).hashCode = function () {
    return ULongArray__hashCode_impl_aze4wa(this.hn_1);
  };
  protoOf(ULongArray).equals = function (other) {
    return ULongArray__equals_impl_vwitwa(this.hn_1, other);
  };
  function Companion_18() {
    Companion_instance_18 = this;
    this.in_1 = new ULongRange(_ULong___init__impl__c78o9k(new Long(-1, -1)), _ULong___init__impl__c78o9k(new Long(0, 0)));
  }
  var Companion_instance_18;
  function Companion_getInstance_18() {
    if (Companion_instance_18 == null)
      new Companion_18();
    return Companion_instance_18;
  }
  function ULongRange(start, endInclusive) {
    Companion_getInstance_18();
    ULongProgression.call(this, start, endInclusive, new Long(1, 0));
  }
  protoOf(ULongRange).r = function () {
    var tmp0 = this.ck_1;
    // Inline function 'kotlin.ULong.compareTo' call
    var other = this.dk_1;
    return ulongCompare(_ULong___get_data__impl__fggpzb(tmp0), _ULong___get_data__impl__fggpzb(other)) > 0;
  };
  protoOf(ULongRange).equals = function (other) {
    var tmp;
    if (other instanceof ULongRange) {
      tmp = this.r() && other.r() || (equals(this.ck_1, other.ck_1) && equals(this.dk_1, other.dk_1));
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(ULongRange).hashCode = function () {
    var tmp;
    if (this.r()) {
      tmp = -1;
    } else {
      var tmp2 = this.ck_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_0 = this.ck_1;
      // Inline function 'kotlin.ULong.xor' call
      var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(32));
      // Inline function 'kotlin.ULong.toInt' call
      var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).k3(_ULong___get_data__impl__fggpzb(other)));
      var tmp$ret$2 = _ULong___get_data__impl__fggpzb(this_1).l3();
      var tmp_0 = imul(31, tmp$ret$2);
      var tmp7 = this.dk_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_2 = this.dk_1;
      // Inline function 'kotlin.ULong.xor' call
      var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(32));
      // Inline function 'kotlin.ULong.toInt' call
      var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7).k3(_ULong___get_data__impl__fggpzb(other_0)));
      tmp = tmp_0 + _ULong___get_data__impl__fggpzb(this_3).l3() | 0;
    }
    return tmp;
  };
  protoOf(ULongRange).toString = function () {
    return '' + new ULong(this.ck_1) + '..' + new ULong(this.dk_1);
  };
  function Companion_19() {
  }
  var Companion_instance_19;
  function Companion_getInstance_19() {
    return Companion_instance_19;
  }
  function ULongProgression(start, endInclusive, step) {
    if (step.equals(new Long(0, 0)))
      throw IllegalArgumentException_init_$Create$_0('Step must be non-zero.');
    if (step.equals(new Long(0, -2147483648)))
      throw IllegalArgumentException_init_$Create$_0('Step must be greater than Long.MIN_VALUE to avoid overflow on negation.');
    this.ck_1 = start;
    this.dk_1 = getProgressionLastElement_0(start, endInclusive, step);
    this.ek_1 = step;
  }
  protoOf(ULongProgression).h = function () {
    return new ULongProgressionIterator(this.ck_1, this.dk_1, this.ek_1);
  };
  protoOf(ULongProgression).r = function () {
    var tmp;
    if (this.ek_1.d1(new Long(0, 0)) > 0) {
      var tmp0 = this.ck_1;
      // Inline function 'kotlin.ULong.compareTo' call
      var other = this.dk_1;
      tmp = ulongCompare(_ULong___get_data__impl__fggpzb(tmp0), _ULong___get_data__impl__fggpzb(other)) > 0;
    } else {
      var tmp2 = this.ck_1;
      // Inline function 'kotlin.ULong.compareTo' call
      var other_0 = this.dk_1;
      tmp = ulongCompare(_ULong___get_data__impl__fggpzb(tmp2), _ULong___get_data__impl__fggpzb(other_0)) < 0;
    }
    return tmp;
  };
  protoOf(ULongProgression).equals = function (other) {
    var tmp;
    if (other instanceof ULongProgression) {
      tmp = this.r() && other.r() || (equals(this.ck_1, other.ck_1) && equals(this.dk_1, other.dk_1) && this.ek_1.equals(other.ek_1));
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(ULongProgression).hashCode = function () {
    var tmp;
    if (this.r()) {
      tmp = -1;
    } else {
      var tmp2 = this.ck_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_0 = this.ck_1;
      // Inline function 'kotlin.ULong.xor' call
      var other = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).h3(32));
      // Inline function 'kotlin.ULong.toInt' call
      var this_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp2).k3(_ULong___get_data__impl__fggpzb(other)));
      var tmp$ret$2 = _ULong___get_data__impl__fggpzb(this_1).l3();
      var tmp_0 = imul(31, tmp$ret$2);
      var tmp7 = this.dk_1;
      // Inline function 'kotlin.ULong.shr' call
      var this_2 = this.dk_1;
      // Inline function 'kotlin.ULong.xor' call
      var other_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_2).h3(32));
      // Inline function 'kotlin.ULong.toInt' call
      var this_3 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp7).k3(_ULong___get_data__impl__fggpzb(other_0)));
      var tmp$ret$5 = _ULong___get_data__impl__fggpzb(this_3).l3();
      tmp = imul(31, tmp_0 + tmp$ret$5 | 0) + this.ek_1.k3(this.ek_1.h3(32)).l3() | 0;
    }
    return tmp;
  };
  protoOf(ULongProgression).toString = function () {
    return this.ek_1.d1(new Long(0, 0)) > 0 ? '' + new ULong(this.ck_1) + '..' + new ULong(this.dk_1) + ' step ' + this.ek_1.toString() : '' + new ULong(this.ck_1) + ' downTo ' + new ULong(this.dk_1) + ' step ' + this.ek_1.d3().toString();
  };
  function ULongProgressionIterator(first, last, step) {
    this.jn_1 = last;
    var tmp = this;
    var tmp_0;
    if (step.d1(new Long(0, 0)) > 0) {
      // Inline function 'kotlin.ULong.compareTo' call
      tmp_0 = ulongCompare(_ULong___get_data__impl__fggpzb(first), _ULong___get_data__impl__fggpzb(last)) <= 0;
    } else {
      // Inline function 'kotlin.ULong.compareTo' call
      tmp_0 = ulongCompare(_ULong___get_data__impl__fggpzb(first), _ULong___get_data__impl__fggpzb(last)) >= 0;
    }
    tmp.kn_1 = tmp_0;
    var tmp_1 = this;
    // Inline function 'kotlin.toULong' call
    tmp_1.ln_1 = _ULong___init__impl__c78o9k(step);
    this.mn_1 = this.kn_1 ? first : this.jn_1;
  }
  protoOf(ULongProgressionIterator).i = function () {
    return this.kn_1;
  };
  protoOf(ULongProgressionIterator).gn = function () {
    var value = this.mn_1;
    if (equals(value, this.jn_1)) {
      if (!this.kn_1)
        throw NoSuchElementException_init_$Create$();
      this.kn_1 = false;
    } else {
      var tmp = this;
      var tmp0 = this.mn_1;
      // Inline function 'kotlin.ULong.plus' call
      var other = this.ln_1;
      tmp.mn_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(tmp0).w2(_ULong___get_data__impl__fggpzb(other)));
    }
    return value;
  };
  protoOf(ULongProgressionIterator).j = function () {
    return new ULong(this.gn());
  };
  function getProgressionLastElement_0(start, end, step) {
    var tmp;
    if (step.d1(new Long(0, 0)) > 0) {
      var tmp_0;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(start), _ULong___get_data__impl__fggpzb(end)) >= 0) {
        tmp_0 = end;
      } else {
        // Inline function 'kotlin.toULong' call
        var tmp$ret$1 = _ULong___init__impl__c78o9k(step);
        // Inline function 'kotlin.ULong.minus' call
        var other = differenceModulo_0(end, start, tmp$ret$1);
        tmp_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(end).x2(_ULong___get_data__impl__fggpzb(other)));
      }
      tmp = tmp_0;
    } else if (step.d1(new Long(0, 0)) < 0) {
      var tmp_1;
      // Inline function 'kotlin.ULong.compareTo' call
      if (ulongCompare(_ULong___get_data__impl__fggpzb(start), _ULong___get_data__impl__fggpzb(end)) <= 0) {
        tmp_1 = end;
      } else {
        // Inline function 'kotlin.toULong' call
        var this_0 = step.d3();
        var tmp$ret$4 = _ULong___init__impl__c78o9k(this_0);
        // Inline function 'kotlin.ULong.plus' call
        var other_0 = differenceModulo_0(start, end, tmp$ret$4);
        tmp_1 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(end).w2(_ULong___get_data__impl__fggpzb(other_0)));
      }
      tmp = tmp_1;
    } else {
      throw IllegalArgumentException_init_$Create$_0('Step is zero.');
    }
    return tmp;
  }
  function differenceModulo_0(a, b, c) {
    // Inline function 'kotlin.ULong.rem' call
    var ac = ulongRemainder(a, c);
    // Inline function 'kotlin.ULong.rem' call
    var bc = ulongRemainder(b, c);
    var tmp;
    // Inline function 'kotlin.ULong.compareTo' call
    if (ulongCompare(_ULong___get_data__impl__fggpzb(ac), _ULong___get_data__impl__fggpzb(bc)) >= 0) {
      // Inline function 'kotlin.ULong.minus' call
      tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(ac).x2(_ULong___get_data__impl__fggpzb(bc)));
    } else {
      // Inline function 'kotlin.ULong.minus' call
      // Inline function 'kotlin.ULong.plus' call
      var this_0 = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(ac).x2(_ULong___get_data__impl__fggpzb(bc)));
      tmp = _ULong___init__impl__c78o9k(_ULong___get_data__impl__fggpzb(this_0).w2(_ULong___get_data__impl__fggpzb(c)));
    }
    return tmp;
  }
  function _UShort___init__impl__jigrne(data) {
    return data;
  }
  function _UShort___get_data__impl__g0245($this) {
    return $this;
  }
  function UShort() {
  }
  function toString_6(_this__u8e3s4, radix) {
    // Inline function 'kotlin.ULong.toLong' call
    var tmp$ret$0 = _ULong___get_data__impl__fggpzb(_this__u8e3s4);
    return ulongToString(tmp$ret$0, checkRadix(radix));
  }
  //region block: post-declaration
  protoOf(InternalHashMap).k6 = containsAllEntries;
  protoOf(ValueTimeMark).cm = compareTo;
  //endregion
  //region block: init
  Companion_instance_0 = new Companion_0();
  Unit_instance = new Unit();
  _stableSortingIsSupported = null;
  Companion_instance_3 = new Companion_3();
  CompletedContinuation_instance = new CompletedContinuation();
  DateNowTimeSource_instance = new DateNowTimeSource();
  Companion_instance_5 = new Companion_5();
  Companion_instance_6 = new Companion_6();
  Companion_instance_7 = new Companion_7();
  EmptyIterator_instance = new EmptyIterator();
  EmptySequence_instance = new EmptySequence();
  NaturalOrderComparator_instance = new NaturalOrderComparator();
  Key_instance = new Key();
  Companion_instance_12 = new Companion_12();
  Companion_instance_13 = new Companion_13();
  State_instance = new State();
  Monotonic_instance = new Monotonic();
  UNINITIALIZED_VALUE_instance = new UNINITIALIZED_VALUE();
  Companion_instance_15 = new Companion_15();
  Companion_instance_19 = new Companion_19();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = getKClassFromExpression;
  _.$_$.b = getKClass;
  _.$_$.c = VOID;
  _.$_$.d = DurationUnit_SECONDS_getInstance;
  _.$_$.e = ArrayDeque_init_$Create$_0;
  _.$_$.f = ArrayList_init_$Create$_0;
  _.$_$.g = ArrayList_init_$Create$;
  _.$_$.h = LinkedHashMap_init_$Create$_0;
  _.$_$.i = LinkedHashMap_init_$Create$;
  _.$_$.j = LinkedHashMap_init_$Create$_1;
  _.$_$.k = LinkedHashSet_init_$Create$;
  _.$_$.l = Regex_init_$Create$;
  _.$_$.m = StringBuilder_init_$Create$_1;
  _.$_$.n = ArithmeticException_init_$Create$_0;
  _.$_$.o = Exception_init_$Create$_0;
  _.$_$.p = IllegalArgumentException_init_$Create$_0;
  _.$_$.q = IndexOutOfBoundsException_init_$Create$_0;
  _.$_$.r = NoSuchElementException_init_$Create$;
  _.$_$.s = NumberFormatException_init_$Create$_0;
  _.$_$.t = RuntimeException_init_$Create$_0;
  _.$_$.u = UnsupportedOperationException_init_$Create$_0;
  _.$_$.v = _Duration___get_inWholeMilliseconds__impl__msfiry;
  _.$_$.w = Duration__toDouble_impl_a56y2b;
  _.$_$.x = Duration__toString_impl_8d916b;
  _.$_$.y = ValueTimeMark__elapsedNow_impl_eonqvs;
  _.$_$.z = _Char___init__impl__6a9atx;
  _.$_$.a1 = Char__minus_impl_a2frrh;
  _.$_$.b1 = Char__minus_impl_a2frrh_0;
  _.$_$.c1 = Char__rangeTo_impl_tkncvp;
  _.$_$.d1 = Char__toInt_impl_vasixd;
  _.$_$.e1 = toString;
  _.$_$.f1 = _UByte___get_data__impl__jof9qr;
  _.$_$.g1 = _UInt___init__impl__l7qpdl;
  _.$_$.h1 = _UInt___get_data__impl__f0vqqw;
  _.$_$.i1 = _UIntArray___init__impl__ghjpc6_0;
  _.$_$.j1 = _UIntArray___init__impl__ghjpc6;
  _.$_$.k1 = UIntArray__get_impl_gp5kza;
  _.$_$.l1 = UIntArray__hashCode_impl_hr7ost;
  _.$_$.m1 = UIntArray__isEmpty_impl_vd8j4n;
  _.$_$.n1 = UIntArray__iterator_impl_tkdv7k;
  _.$_$.o1 = UIntArray__set_impl_7f2zu2;
  _.$_$.p1 = _UIntArray___get_size__impl__r6l8ci;
  _.$_$.q1 = _UIntArray___get_storage__impl__92a0v0;
  _.$_$.r1 = UIntArray__toString_impl_3zy802;
  _.$_$.s1 = _ULong___init__impl__c78o9k;
  _.$_$.t1 = _ULong___get_data__impl__fggpzb;
  _.$_$.u1 = ULong__hashCode_impl_6hv2lb;
  _.$_$.v1 = _ULongArray___init__impl__twm1l3_0;
  _.$_$.w1 = _ULongArray___init__impl__twm1l3;
  _.$_$.x1 = ULongArray__get_impl_pr71q9;
  _.$_$.y1 = ULongArray__hashCode_impl_aze4wa;
  _.$_$.z1 = ULongArray__isEmpty_impl_c3yngu;
  _.$_$.a2 = ULongArray__iterator_impl_cq4d2h;
  _.$_$.b2 = ULongArray__set_impl_z19mvh;
  _.$_$.c2 = _ULongArray___get_size__impl__ju6dtr;
  _.$_$.d2 = _ULongArray___get_storage__impl__28e64j;
  _.$_$.e2 = ULongArray__toString_impl_wqk1p5;
  _.$_$.f2 = _UShort___get_data__impl__g0245;
  _.$_$.g2 = Default_getInstance;
  _.$_$.h2 = PrimitiveClasses_getInstance;
  _.$_$.i2 = Monotonic_instance;
  _.$_$.j2 = Unit_instance;
  _.$_$.k2 = Collection;
  _.$_$.l2 = KtList;
  _.$_$.m2 = KtMap;
  _.$_$.n2 = KtSet;
  _.$_$.o2 = addAll;
  _.$_$.p2 = addAll_1;
  _.$_$.q2 = arrayCopy;
  _.$_$.r2 = asReversed;
  _.$_$.s2 = asSequence_0;
  _.$_$.t2 = binarySearch;
  _.$_$.u2 = checkCountOverflow;
  _.$_$.v2 = checkIndexOverflow;
  _.$_$.w2 = chunked;
  _.$_$.x2 = collectionSizeOrDefault;
  _.$_$.y2 = contentEquals_0;
  _.$_$.z2 = copyOfRange_0;
  _.$_$.a3 = copyOfRange;
  _.$_$.b3 = copyOf_0;
  _.$_$.c3 = copyToArray;
  _.$_$.d3 = distinct;
  _.$_$.e3 = dropLast;
  _.$_$.f3 = drop;
  _.$_$.g3 = emptyList;
  _.$_$.h3 = emptyMap;
  _.$_$.i3 = emptySet;
  _.$_$.j3 = firstOrNull_0;
  _.$_$.k3 = firstOrNull;
  _.$_$.l3 = first_0;
  _.$_$.m3 = first;
  _.$_$.n3 = flatten;
  _.$_$.o3 = getOrNull;
  _.$_$.p3 = get_indices;
  _.$_$.q3 = intersect;
  _.$_$.r3 = joinToString_0;
  _.$_$.s3 = joinToString;
  _.$_$.t3 = get_lastIndex_0;
  _.$_$.u3 = last;
  _.$_$.v3 = listOf;
  _.$_$.w3 = listOf_0;
  _.$_$.x3 = mapCapacity;
  _.$_$.y3 = mapOf;
  _.$_$.z3 = mapOf_0;
  _.$_$.a4 = minus;
  _.$_$.b4 = minus_0;
  _.$_$.c4 = minus_1;
  _.$_$.d4 = mutableSetOf;
  _.$_$.e4 = plus_6;
  _.$_$.f4 = plus_0;
  _.$_$.g4 = plus_4;
  _.$_$.h4 = plus_5;
  _.$_$.i4 = plus_2;
  _.$_$.j4 = plus;
  _.$_$.k4 = plus_1;
  _.$_$.l4 = random;
  _.$_$.m4 = removeLast;
  _.$_$.n4 = retainAll;
  _.$_$.o4 = reversed;
  _.$_$.p4 = setOf;
  _.$_$.q4 = setOf_0;
  _.$_$.r4 = shuffled;
  _.$_$.s4 = slice;
  _.$_$.t4 = sortedWith;
  _.$_$.u4 = sorted;
  _.$_$.v4 = sum;
  _.$_$.w4 = takeLast;
  _.$_$.x4 = toBooleanArray;
  _.$_$.y4 = toDoubleArray_0;
  _.$_$.z4 = toDoubleArray;
  _.$_$.a5 = toIntArray;
  _.$_$.b5 = toList_0;
  _.$_$.c5 = toList;
  _.$_$.d5 = toMap;
  _.$_$.e5 = toMutableList_0;
  _.$_$.f5 = toMutableMap;
  _.$_$.g5 = toMutableSet;
  _.$_$.h5 = toSet_1;
  _.$_$.i5 = toSet_0;
  _.$_$.j5 = toSet;
  _.$_$.k5 = toULongArray;
  _.$_$.l5 = union;
  _.$_$.m5 = windowed_0;
  _.$_$.n5 = windowed;
  _.$_$.o5 = withIndex;
  _.$_$.p5 = zip;
  _.$_$.q5 = compareBy;
  _.$_$.r5 = compareValues;
  _.$_$.s5 = get_COROUTINE_SUSPENDED;
  _.$_$.t5 = CoroutineImpl;
  _.$_$.u5 = println;
  _.$_$.v5 = FunctionAdapter;
  _.$_$.w5 = booleanArrayOf;
  _.$_$.x5 = booleanArray;
  _.$_$.y5 = charArrayOf;
  _.$_$.z5 = charSequenceGet;
  _.$_$.a6 = charSequenceLength;
  _.$_$.b6 = compareTo_0;
  _.$_$.c6 = equals;
  _.$_$.d6 = fillArrayVal;
  _.$_$.e6 = getBooleanHashCode;
  _.$_$.f6 = getObjectHashCode;
  _.$_$.g6 = getPropertyCallableRef;
  _.$_$.h6 = getStringHashCode;
  _.$_$.i6 = hashCode;
  _.$_$.j6 = initMetadataForClass;
  _.$_$.k6 = initMetadataForCompanion;
  _.$_$.l6 = initMetadataForInterface;
  _.$_$.m6 = initMetadataForLambda;
  _.$_$.n6 = initMetadataForObject;
  _.$_$.o6 = isCharSequence;
  _.$_$.p6 = isInterface;
  _.$_$.q6 = isNumber;
  _.$_$.r6 = longArrayOf;
  _.$_$.s6 = longArray;
  _.$_$.t6 = newThrowable;
  _.$_$.u6 = numberRangeToNumber;
  _.$_$.v6 = numberToChar;
  _.$_$.w6 = numberToDouble;
  _.$_$.x6 = numberToInt;
  _.$_$.y6 = numberToLong;
  _.$_$.z6 = objectCreate;
  _.$_$.a7 = protoOf;
  _.$_$.b7 = toLong;
  _.$_$.c7 = toString_1;
  _.$_$.d7 = abs;
  _.$_$.e7 = abs_0;
  _.$_$.f7 = round;
  _.$_$.g7 = ReadOnlyProperty;
  _.$_$.h7 = Random_0;
  _.$_$.i7 = nextULong;
  _.$_$.j7 = ULongRange;
  _.$_$.k7 = coerceAtLeast;
  _.$_$.l7 = coerceAtMost;
  _.$_$.m7 = downTo;
  _.$_$.n7 = until;
  _.$_$.o7 = KClass;
  _.$_$.p7 = KProperty0;
  _.$_$.q7 = KProperty1;
  _.$_$.r7 = SequenceScope;
  _.$_$.s7 = distinct_0;
  _.$_$.t7 = filterIndexed;
  _.$_$.u7 = filter;
  _.$_$.v7 = flatMap;
  _.$_$.w7 = generateSequence;
  _.$_$.x7 = mapIndexedNotNull;
  _.$_$.y7 = map;
  _.$_$.z7 = plus_3;
  _.$_$.a8 = sequenceOf;
  _.$_$.b8 = sequence;
  _.$_$.c8 = shuffled_0;
  _.$_$.d8 = takeWhile;
  _.$_$.e8 = toList_1;
  _.$_$.f8 = toSet_2;
  _.$_$.g8 = contains_3;
  _.$_$.h8 = contains_2;
  _.$_$.i8 = dropLast_0;
  _.$_$.j8 = drop_0;
  _.$_$.k8 = first_1;
  _.$_$.l8 = indexOf_2;
  _.$_$.m8 = isBlank;
  _.$_$.n8 = isWhitespace;
  _.$_$.o8 = get_lastIndex_1;
  _.$_$.p8 = last_1;
  _.$_$.q8 = lineSequence;
  _.$_$.r8 = lines;
  _.$_$.s8 = padEnd;
  _.$_$.t8 = padStart;
  _.$_$.u8 = replaceFirst;
  _.$_$.v8 = replace;
  _.$_$.w8 = replace_0;
  _.$_$.x8 = reversed_0;
  _.$_$.y8 = split;
  _.$_$.z8 = startsWith;
  _.$_$.a9 = substringAfterLast;
  _.$_$.b9 = substringAfter_0;
  _.$_$.c9 = substringAfter;
  _.$_$.d9 = substringBefore;
  _.$_$.e9 = substring;
  _.$_$.f9 = toCharArray;
  _.$_$.g9 = toInt;
  _.$_$.h9 = toLong_0;
  _.$_$.i9 = toString_3;
  _.$_$.j9 = toString_2;
  _.$_$.k9 = toString_6;
  _.$_$.l9 = trim;
  _.$_$.m9 = TimedValue;
  _.$_$.n9 = Char;
  _.$_$.o9 = Comparable;
  _.$_$.p9 = Comparator;
  _.$_$.q9 = Enum;
  _.$_$.r9 = Exception;
  _.$_$.s9 = Long;
  _.$_$.t9 = NotImplementedError;
  _.$_$.u9 = Pair;
  _.$_$.v9 = THROW_CCE;
  _.$_$.w9 = Triple;
  _.$_$.x9 = UByte;
  _.$_$.y9 = UIntArray;
  _.$_$.z9 = UInt;
  _.$_$.aa = ULongArray;
  _.$_$.ba = ULong;
  _.$_$.ca = UShort;
  _.$_$.da = ensureNotNull;
  _.$_$.ea = lazy;
  _.$_$.fa = noWhenBranchMatchedException;
  _.$_$.ga = stackTraceToString;
  _.$_$.ha = toString_0;
  _.$_$.ia = to;
  _.$_$.ja = uintCompare;
  _.$_$.ka = uintDivide;
  _.$_$.la = uintRemainder;
  _.$_$.ma = ulongCompare;
  _.$_$.na = ulongDivide;
  _.$_$.oa = ulongRemainder;
  //endregion
  return _;
}));



/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module used 'module' so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./kotlin/Tidyparse-tidyparse-web.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=tidyparse-web.js.map